{"version":3,"sources":["__temp/buildProcess/inlineFunctionProcess/scripts/panelController.ts"],"names":[],"mappings":";;;AACA,iCAAuF;AAEvF;IAA6C,2CAAa;IAA1D;QAAA,qEAwDC;QApDQ,UAAI,GAAW,QAAQ,CAAA;QAEtB,kBAAY,GAAY,IAAI,CAAC;QAC7B,sBAAgB,GAAY,IAAI,CAAC;;IAiD3C,CAAC;IA9CQ,sCAAY,GAAnB,UAAoB,KAA0B,EAAE,KAAsB;QAEpE,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,OAAO;SACR;QACD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAE7B,gBAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACrD,CAAC;IAEM,oCAAU,GAAjB,UAAkB,KAA0B,EAAE,KAAsB;QAElE,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAChD,OAAO;SACR;QAED,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAE9B,gBAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACnD,CAAC;IAEM,iCAAO,GAAd;QAAA,iBAaC;QAZC,gBAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,aAAa,EAAE;YAC/C,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,IAAM,IAAI,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,UAAU,GAAG,gBAAM,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACxD,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,KAAY;YACjD,gBAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC7B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;YACrE,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YACjE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEhC,CAAC,CAAC,CAAC;IACL,CAAC;IACM,kCAAQ,GAAf,UAAgB,EAAE;QAChB,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,EAAE;YACrE,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC;YAC7E,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;YACtC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SACnB;IACH,CAAC;IACM,mCAAS,GAAhB;IAEA,CAAC;IAnDD;QAHC,gBAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;YAC1B,IAAI,EAAE,gBAAM,CAAC,SAAS,CAAC,MAAM;SAC9B,CAAC;iDAC4B;IAJX,eAAe;QADnC,gBAAM,CAAC,UAAU,CAAC,SAAS,CAAC,iBAAiB,CAAC;OAC1B,eAAe,CAwDnC;IAAD,sBAAC;CAxDD,AAwDC,CAxD4C,gBAAM,CAAC,MAAM,GAwDzD;kBAxDoB,eAAe","file":"panelController.js","sourcesContent":["\r\nimport engine, { TouchInputComponent, TouchInputEvent, Scene, LoadTask } from \"engine\";\r\n@engine.decorators.serialize(\"panelController\")\r\nexport default class PanelController extends engine.Script {\r\n  @engine.decorators.property({\r\n    type: engine.TypeNames.String\r\n  })\r\n  public name: string = \"myname\"\r\n\r\n  private _enableInput: boolean = true;\r\n  private _start_triggered: boolean = true;\r\n  private _load_task: LoadTask<any>;\r\n\r\n  public onTouchStart(touch: TouchInputComponent, event: TouchInputEvent) {\r\n    // Check if input is enabled.\r\n    if (!this._enableInput) {\r\n      return;\r\n    }\r\n    this._start_triggered = true;\r\n    // console.log('touch start');\r\n    engine.game.customEventEmitter.emit('TOUCH_START');\r\n  }\r\n\r\n  public onTouchEnd(touch: TouchInputComponent, event: TouchInputEvent) {\r\n    // Check if input is enabled.\r\n    if (!this._enableInput || !this._start_triggered) {\r\n      return;\r\n    }\r\n    // Disable input after touch end.\r\n    this._enableInput = false;\r\n    this._start_triggered = false;\r\n    // console.log('touch end');\r\n    engine.game.customEventEmitter.emit('TOUCH_END');\r\n  }\r\n\r\n  public onAwake() {\r\n    engine.game.customEventEmitter.on('CAMERA_MOVE', () => {\r\n      this._enableInput = true;\r\n    });\r\n    const that = this;\r\n    this._load_task = engine.loader.load(\"scenes/mv.scene\");\r\n    this._load_task.promise.then(function (scene: Scene) {\r\n      engine.game.playScene(scene);\r\n      console.log(that.entity.name, that.entity.transform2D.childrenCount);\r\n      const node = that.entity.transform2D.findChildByName('Sprite_1');\r\n      console.log(node.entity.name);\r\n      // that.entity.transform2D.removeChild(node.entity.transform2D);\r\n    });\r\n  }\r\n  public onUpdate(dt) {\r\n    if (this._load_task.progress.current < this._load_task.progress.total) {\r\n      let rate = this._load_task.progress.current / this._load_task.progress.total;\r\n      rate = Math.floor(rate * 1000) / 1000;\r\n      console.log(rate);\r\n    }\r\n  }\r\n  public onDestroy() {\r\n\r\n  }\r\n}\r\n"]}