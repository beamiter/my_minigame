{"version":3,"sources":["__temp/buildProcess/inlineFunctionProcess/scripts/musicController.ts"],"names":[],"mappings":"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","file":"musicController.js","sourcesContent":["\nimport engine, { } from \"engine\";\n\n@engine.decorators.serialize(\"musicController\")\nexport default class MusicController extends engine.Script {\n    @engine.decorators.property({\n        type: engine.TypeNames.String\n    })\n    public name: string = \"myname\"\n\n    private _album: string[] = [\n        'musics/1.mp3',\n        'musics/2.mp3',\n        'musics/3.mp3',\n    ];\n\n    private _bgm: engine.AudioSource;\n    private _pause_bg: boolean = false;\n    private _episode_id: number = 0;\n    private _episode_map: Map<string, engine.AudioClip> = new Map();\n    private _audio = wx.createInnerAudioContext();\n    private _needChange: boolean = false;\n\n    public onAwake() {\n        engine.game.markAsPersist(this.entity);\n        engine.game.customEventEmitter.on('JUMP_END', () => {\n            // Change music.\n            this.changeMusic();\n        });\n        this._bgm = this.entity.transform.findChildByName('BGM').entity.getComponent(engine.AudioSource);\n        engine.loader.load('musics/0.mp3', { cacheable: true }).promise.then((asset: engine.AudioClip) => {\n            console.log('Loaded BGM');\n            this._bgm.clip = asset;\n        })\n        // Pre-load.\n        for (let song of this._album) {\n            engine.loader.load(song, { cacheable: true }).promise.then((asset: engine.AudioClip) => {\n                console.log('Loaded music: ', song);\n                this._episode_map.set(song, asset);\n            })\n        }\n        // this._audio.autoplay = true;\n        this._audio.loop = true;\n        this._audio.onCanplay(() => {\n            console.log('Will play this song: ', this._album[this._episode_id]);\n            this._audio.play();\n            this._bgm.pause();\n            this._episode_id = (this._episode_id + 1) % this._album.length;\n        });\n    }\n    public onUpdate(dt: number) {\n        if (this._needChange) {\n            const episode_name = this._album[this._episode_id];\n            if (this._episode_map.has(episode_name)) {\n                this._needChange = false;\n                this._audio.src = this._episode_map.get(episode_name).fileSrc;\n            } else {\n                console.log(episode_name, ' not valid');\n            }\n        }\n        if (!this._pause_bg) {\n            if (this._bgm.canplay && !this._bgm.playing) {\n                this._bgm.play();\n                this._audio.pause();\n            }\n        }\n    }\n    public onDestroy() {\n    }\n\n    public changeMusic() {\n        this._pause_bg = !this._pause_bg;\n        if (this._pause_bg) {\n            // console.log(this._episode_map);\n            this._needChange = true;\n        }\n    }\n\n}\n"]}