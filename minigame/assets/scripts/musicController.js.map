{"version":3,"sources":["__temp/buildProcess/inlineFunctionProcess/scripts/musicController.ts"],"names":[],"mappings":"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","file":"musicController.js","sourcesContent":["\nimport engine, { } from \"engine\";\n\n@engine.decorators.serialize(\"musicController\")\nexport default class MusicController extends engine.Script {\n    @engine.decorators.property({\n        type: engine.TypeNames.String\n    })\n    public name: string = \"myname\"\n\n    private _album: string[] = [\n        'musics/1.mp3',\n        'musics/2.mp3',\n        'musics/3.mp3',\n    ];\n\n    private _bgm: engine.AudioSource;\n    private _episode: engine.AudioSource;\n    private _pause_bg: boolean = false;\n    private _episode_id: number = 0;\n    private _episode_name: string;\n\n    public onAwake() {\n        engine.game.markAsPersist(this.entity);\n        engine.game.customEventEmitter.on('JUMP_END', () => {\n            // Change music.\n            this.changeMusic();\n        });\n        this._bgm = this.entity.transform.findChildByName('BGM').entity.getComponent(engine.AudioSource);\n        this._episode = this.entity.transform.findChildByName('Episode').entity.getComponent(engine.AudioSource);\n        // No need pre-load.\n        // for (let song of this._album) {\n        //     engine.loader.load(song, { cacheable: true }).promise.then(_ => {\n        //         console.log(song, ' loaded');\n        //     })\n        // }\n    }\n    public onUpdate(dt: number) {\n        if (!this._pause_bg) {\n            if (this._bgm.canplay && !this._bgm.playing) {\n                this._bgm.play();\n                this._episode.pause();\n            }\n        } else {\n            this._episode.playing && this._bgm.pause();\n        }\n    }\n    public onDestroy() {\n    }\n\n    public changeMusic() {\n        this._pause_bg = !this._pause_bg;\n        const util = (asset: engine.AudioClip) => {\n            this._episode.audioSourceNode.destroy();\n            this._episode = this.entity.addComponent(engine.AudioSource);\n            this._episode_name = this._album[this._episode_id];\n            this._episode_id = (this._episode_id + 1) % this._album.length;\n            this._episode.clip = asset;\n            this._episode.loop = true;\n            console.log('Will play this song: ', this._episode_name);\n            if (this._episode.clip === null) {\n                console.log(this._episode_name, 'not valid');\n            }\n        };\n        if (this._pause_bg) {\n            if (0) {\n                // 1. Sync.\n                util(engine.loader.getAsset(this._episode_name));\n            } else {\n                // 2. Async.\n                engine.loader.load(this._album[this._episode_id]).promise.then((asset: engine.AudioClip) => {\n                    util(asset);\n                });\n            }\n        }\n    }\n\n}\n"]}