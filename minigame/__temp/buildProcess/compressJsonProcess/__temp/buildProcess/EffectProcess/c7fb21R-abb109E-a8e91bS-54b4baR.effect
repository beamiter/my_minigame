{"version":2,"name":"System::Effect::BlinnPhong","properties":[{"key":0,"type":3,"default":[1,1,1,1]},{"key":1,"type":3,"default":[0.5,0.5,0.5,1]},{"key":2,"type":3,"default":[1,1,1,1]},{"key":3,"type":3,"default":[1,1,0,0]},{"key":4,"type":0,"default":[1]},{"key":5,"type":0,"default":[0.1]},{"key":6,"type":0,"default":[0.3]}],"images":[{"key":7,"type":0,"default":"white"},{"key":8,"type":0,"default":"white"},{"key":9,"type":0,"default":"white"},{"key":10,"type":0,"default":"white"}],"defaultRenderQueue":2000,"passes":[{"renderStates":{"blendOn":false,"cullOn":true,"cullFace":2},"macros":{"USE_ALPHA_TEST":0,"USE_EMISSIONMAP":1,"USE_SPECMAP":2,"__USE_SKINNED_ANIMATION":3,"USE_NORMALMAP":4,"__USE_SKIN_WORLD":5,"__USE_SKIN_LOCAL":6,"__USE_RECEIVE_SHADOW":7,"USE_FOG":9,"USE_LIGHTMAP":8,"__USE_MESH_COLOR":10},"lightMode":"ForwardBase","useMaterialRenderStates":true,"variants":{"0":4,"1":312,"2":321,"3":524,"4":140,"5":672,"6":482,"7":393,"8":16,"9":584,"10":320,"11":744,"12":136,"13":134,"14":480,"15":389,"16":809,"17":60,"18":857,"19":470,"20":801,"21":221,"22":655,"23":993,"24":808,"25":53,"26":856,"27":467,"28":79,"29":217,"30":402,"31":992,"32":13,"33":585,"34":324,"35":745,"36":143,"37":675,"38":90,"39":396,"48":229,"49":64,"50":858,"51":474,"52":803,"53":224,"54":658,"55":579,"64":7,"65":587,"66":326,"67":747,"68":146,"69":677,"70":484,"71":399,"80":619,"81":63,"82":774,"83":477,"84":703,"85":226,"86":660,"87":280,"128":9,"129":588,"130":331,"131":187,"132":153,"133":445,"134":489,"135":776,"136":14,"137":363,"138":328,"139":184,"140":149,"141":509,"142":486,"143":37,"144":811,"145":929,"146":861,"147":968,"148":841,"149":895,"150":904,"151":995,"152":810,"153":928,"154":860,"155":111,"156":840,"157":944,"158":412,"159":994,"160":11,"161":590,"162":335,"163":191,"164":156,"165":678,"166":491,"167":778,"176":242,"177":561,"178":538,"179":969,"180":700,"181":945,"182":905,"183":277,"192":2,"193":593,"194":338,"195":193,"196":158,"197":680,"198":492,"199":719,"208":624,"209":569,"210":259,"211":970,"212":706,"213":946,"214":906,"215":292,"256":39,"257":266,"258":361,"259":501,"260":186,"261":690,"262":508,"263":353,"264":34,"265":606,"266":360,"267":752,"268":182,"269":100,"270":506,"271":349,"272":817,"273":26,"274":869,"275":430,"276":793,"277":175,"278":633,"279":1001,"280":816,"281":19,"282":868,"283":427,"284":113,"285":171,"286":442,"287":1000,"288":47,"289":607,"290":364,"291":753,"292":189,"293":693,"294":124,"295":356,"304":275,"305":33,"306":870,"307":434,"308":795,"309":178,"310":636,"311":553,"320":41,"321":609,"322":366,"323":755,"324":192,"325":695,"326":510,"327":359,"336":597,"337":29,"338":766,"339":437,"340":685,"341":180,"342":638,"343":234,"384":42,"385":610,"386":371,"387":141,"388":199,"389":405,"390":515,"391":784,"392":35,"393":323,"394":368,"395":138,"396":195,"397":483,"398":513,"399":6,"400":819,"401":933,"402":873,"403":974,"404":845,"405":883,"406":910,"407":1003,"408":818,"409":932,"410":872,"411":77,"412":844,"413":950,"414":452,"415":1002,"416":49,"417":612,"418":375,"419":145,"420":202,"421":696,"422":516,"423":786,"432":288,"433":535,"434":564,"435":975,"436":682,"437":951,"438":911,"439":231,"448":45,"449":615,"450":378,"451":147,"452":204,"453":698,"454":518,"455":737,"464":602,"465":543,"466":305,"467":976,"468":688,"469":952,"470":912,"471":246,"512":22,"513":289,"514":341,"515":512,"516":163,"517":681,"518":495,"519":373,"520":17,"521":595,"522":340,"523":748,"524":159,"525":117,"526":493,"527":369,"528":813,"529":43,"530":863,"531":450,"532":805,"533":198,"534":666,"535":997,"536":812,"537":36,"538":862,"539":447,"540":96,"541":194,"542":422,"543":996,"544":30,"545":596,"546":344,"547":749,"548":166,"549":684,"550":73,"551":376,"560":252,"561":50,"562":864,"563":454,"564":807,"565":201,"566":669,"567":566,"576":24,"577":598,"578":346,"579":751,"580":169,"581":686,"582":497,"583":379,"592":608,"593":46,"594":770,"595":457,"596":694,"597":203,"598":671,"599":303,"640":25,"641":599,"642":351,"643":210,"644":176,"645":465,"646":502,"647":780,"648":18,"649":383,"650":348,"651":207,"652":172,"653":520,"654":499,"655":54,"656":815,"657":931,"658":867,"659":971,"660":843,"661":901,"662":907,"663":999,"664":814,"665":930,"666":866,"667":128,"668":842,"669":947,"670":432,"671":998,"672":32,"673":601,"674":355,"675":214,"676":179,"677":687,"678":504,"679":782,"688":265,"689":574,"690":551,"691":972,"692":691,"693":948,"694":908,"695":300,"704":28,"705":604,"706":358,"707":216,"708":181,"709":689,"710":505,"711":710,"720":613,"721":582,"722":236,"723":973,"724":697,"725":949,"726":909,"727":315,"768":56,"769":243,"770":381,"771":488,"772":209,"773":699,"774":521,"775":333,"776":51,"777":617,"778":380,"779":756,"780":205,"781":83,"782":519,"783":329,"784":821,"785":8,"786":875,"787":410,"788":797,"789":152,"790":644,"791":1005,"792":820,"793":15,"794":874,"795":407,"796":130,"797":148,"798":462,"799":1004,"800":67,"801":618,"802":384,"803":757,"804":212,"805":702,"806":107,"807":336,"816":298,"817":12,"818":876,"819":414,"820":799,"821":155,"822":647,"823":540,"832":58,"833":620,"834":386,"835":759,"836":215,"837":704,"838":523,"839":339,"848":586,"849":1,"850":762,"851":417,"852":676,"853":157,"854":649,"855":257,"896":59,"897":621,"898":391,"899":164,"900":222,"901":425,"902":528,"903":788,"904":52,"905":343,"906":388,"907":161,"908":218,"909":496,"910":526,"911":20,"912":823,"913":935,"914":879,"915":977,"916":847,"917":889,"918":913,"919":1007,"920":822,"921":934,"922":878,"923":94,"924":846,"925":953,"926":472,"927":1006,"928":65,"929":623,"930":395,"931":168,"932":225,"933":705,"934":529,"935":790,"944":311,"945":548,"946":577,"947":978,"948":673,"949":954,"950":914,"951":254,"960":62,"961":626,"962":398,"963":170,"964":227,"965":707,"966":531,"967":728,"976":591,"977":556,"978":282,"979":979,"980":679,"981":955,"982":915,"983":269,"1024":78,"1025":220,"1026":401,"1027":576,"1028":232,"1029":708,"1030":534,"1031":473,"1032":70,"1033":628,"1034":400,"1035":760,"1036":228,"1037":66,"1038":532,"1039":469,"1040":825,"1041":125,"1042":881,"1043":390,"1044":785,"1045":313,"1046":611,"1047":1009,"1048":824,"1049":119,"1050":880,"1051":387,"1052":5,"1053":309,"1054":322,"1055":1008,"1056":84,"1057":629,"1058":404,"1059":761,"1060":235,"1061":711,"1062":27,"1063":476,"1072":137,"1073":132,"1074":882,"1075":394,"1076":787,"1077":316,"1078":614,"1079":527,"1088":76,"1089":631,"1090":406,"1091":763,"1092":238,"1093":713,"1094":536,"1095":479,"1104":663,"1105":122,"1106":758,"1107":397,"1108":739,"1109":318,"1110":616,"1111":188,"1152":75,"1153":632,"1154":411,"1155":279,"1156":245,"1157":365,"1158":541,"1159":792,"1160":69,"1161":443,"1162":408,"1163":276,"1164":241,"1165":559,"1166":539,"1167":114,"1168":827,"1169":937,"1170":885,"1171":980,"1172":849,"1173":871,"1174":916,"1175":1011,"1176":826,"1177":936,"1178":884,"1179":40,"1180":848,"1181":956,"1182":332,"1183":1010,"1184":82,"1185":634,"1186":415,"1187":283,"1188":248,"1189":714,"1190":542,"1191":794,"1200":150,"1201":507,"1202":487,"1203":981,"1204":736,"1205":957,"1206":917,"1207":185,"1216":72,"1217":637,"1218":418,"1219":285,"1220":250,"1221":716,"1222":544,"1223":683,"1232":668,"1233":517,"1234":167,"1235":982,"1236":742,"1237":958,"1238":918,"1239":200,"1280":112,"1281":174,"1282":441,"1283":550,"1284":278,"1285":726,"1286":560,"1287":433,"1288":104,"1289":650,"1290":440,"1291":768,"1292":274,"1293":31,"1294":558,"1295":429,"1296":833,"1297":91,"1298":893,"1299":350,"1300":777,"1301":267,"1302":589,"1303":1017,"1304":832,"1305":85,"1306":892,"1307":347,"1308":38,"1309":263,"1310":362,"1311":1016,"1312":118,"1313":651,"1314":444,"1315":769,"1316":281,"1317":729,"1318":61,"1319":436,"1328":183,"1329":98,"1330":894,"1331":354,"1332":779,"1333":270,"1334":592,"1335":498,"1344":110,"1345":653,"1346":446,"1347":771,"1348":284,"1349":731,"1350":562,"1351":439,"1360":641,"1361":88,"1362":750,"1363":357,"1364":721,"1365":272,"1366":594,"1367":142,"1408":109,"1409":654,"1410":451,"1411":233,"1412":291,"1413":325,"1414":567,"1415":800,"1416":103,"1417":403,"1418":448,"1419":230,"1420":287,"1421":533,"1422":565,"1423":80,"1424":835,"1425":941,"1426":897,"1427":986,"1428":853,"1429":859,"1430":922,"1431":1019,"1432":834,"1433":940,"1434":896,"1435":3,"1436":852,"1437":962,"1438":372,"1439":1018,"1440":116,"1441":656,"1442":455,"1443":237,"1444":294,"1445":732,"1446":568,"1447":802,"1456":196,"1457":481,"1458":511,"1459":987,"1460":718,"1461":963,"1462":923,"1463":139,"1472":106,"1473":659,"1474":458,"1475":239,"1476":296,"1477":734,"1478":570,"1479":701,"1488":646,"1489":490,"1490":213,"1491":988,"1492":724,"1493":964,"1494":924,"1495":154,"1536":95,"1537":197,"1538":421,"1539":563,"1540":255,"1541":717,"1542":547,"1543":453,"1544":87,"1545":639,"1546":420,"1547":764,"1548":251,"1549":48,"1550":545,"1551":449,"1552":829,"1553":108,"1554":887,"1555":370,"1556":789,"1557":290,"1558":622,"1559":1013,"1560":828,"1561":102,"1562":886,"1563":367,"1564":21,"1565":286,"1566":342,"1567":1012,"1568":101,"1569":640,"1570":424,"1571":765,"1572":258,"1573":720,"1574":0,"1575":456,"1584":160,"1585":115,"1586":888,"1587":374,"1588":791,"1589":293,"1590":625,"1591":514,"1600":93,"1601":642,"1602":426,"1603":767,"1604":261,"1605":722,"1606":549,"1607":459,"1616":652,"1617":105,"1618":754,"1619":377,"1620":730,"1621":295,"1622":627,"1623":211,"1664":92,"1665":643,"1666":431,"1667":302,"1668":268,"1669":385,"1670":554,"1671":796,"1672":86,"1673":463,"1674":428,"1675":299,"1676":264,"1677":572,"1678":552,"1679":131,"1680":831,"1681":939,"1682":891,"1683":983,"1684":851,"1685":877,"1686":919,"1687":1015,"1688":830,"1689":938,"1690":890,"1691":57,"1692":850,"1693":959,"1694":352,"1695":1014,"1696":99,"1697":645,"1698":435,"1699":306,"1700":271,"1701":723,"1702":555,"1703":798,"1712":173,"1713":522,"1714":500,"1715":984,"1716":727,"1717":960,"1718":920,"1719":208,"1728":89,"1729":648,"1730":438,"1731":308,"1732":273,"1733":725,"1734":557,"1735":674,"1744":657,"1745":530,"1746":144,"1747":985,"1748":733,"1749":961,"1750":921,"1751":223,"1792":129,"1793":151,"1794":461,"1795":537,"1796":301,"1797":735,"1798":573,"1799":413,"1800":121,"1801":661,"1802":460,"1803":772,"1804":297,"1805":10,"1806":571,"1807":409,"1808":837,"1809":74,"1810":899,"1811":330,"1812":781,"1813":244,"1814":600,"1815":1021,"1816":836,"1817":68,"1818":898,"1819":327,"1820":55,"1821":240,"1822":382,"1823":1020,"1824":135,"1825":662,"1826":464,"1827":773,"1828":304,"1829":738,"1830":44,"1831":416,"1840":206,"1841":81,"1842":900,"1843":334,"1844":783,"1845":247,"1846":603,"1847":485,"1856":127,"1857":664,"1858":466,"1859":775,"1860":307,"1861":740,"1862":575,"1863":419,"1872":630,"1873":71,"1874":746,"1875":337,"1876":712,"1877":249,"1878":605,"1879":165,"1920":126,"1921":665,"1922":471,"1923":256,"1924":314,"1925":345,"1926":580,"1927":804,"1928":120,"1929":423,"1930":468,"1931":253,"1932":310,"1933":546,"1934":578,"1935":97,"1936":839,"1937":943,"1938":903,"1939":989,"1940":855,"1941":865,"1942":925,"1943":1023,"1944":838,"1945":942,"1946":902,"1947":23,"1948":854,"1949":965,"1950":392,"1951":1022,"1952":133,"1953":667,"1954":475,"1955":260,"1956":317,"1957":741,"1958":581,"1959":806,"1968":219,"1969":494,"1970":525,"1971":990,"1972":709,"1973":966,"1974":926,"1975":162,"1984":123,"1985":670,"1986":478,"1987":262,"1988":319,"1989":743,"1990":583,"1991":692,"2000":635,"2001":503,"2002":190,"2003":991,"2004":715,"2005":967,"2006":927,"2007":177}},{"renderStates":{"blendOn":true,"blendFunc":0,"blendSrc":1,"blendDst":1,"cullOn":true,"cullFace":2},"macros":{"USE_ALPHA_TEST":0,"USE_EMISSIONMAP":1,"USE_SPECMAP":2,"__USE_SKINNED_ANIMATION":3,"USE_NORMALMAP":4,"__USE_SKIN_WORLD":5,"__USE_SKIN_LOCAL":6,"__USE_RECEIVE_SHADOW":7,"USE_FOG":8,"__USE_MESH_COLOR":9},"lightMode":"ForwardAdd","useMaterialRenderStates":false,"variants":{"0":1026,"1":1082,"2":1026,"3":1082,"4":1067,"5":1117,"6":1067,"7":1117,"8":1032,"9":1077,"10":1032,"11":1077,"12":1065,"13":1037,"14":1065,"15":1037,"16":1141,"17":1060,"18":1141,"19":1060,"20":1139,"21":1034,"22":1139,"23":1034,"24":1140,"25":1056,"26":1140,"27":1056,"28":1148,"29":1098,"30":1148,"31":1098,"32":1025,"33":1085,"34":1025,"35":1085,"36":1072,"37":1118,"38":1072,"39":1118,"48":1126,"49":1063,"50":1126,"51":1063,"52":1134,"53":1106,"54":1134,"55":1106,"64":1028,"65":1081,"66":1028,"67":1081,"68":1069,"69":1119,"70":1069,"71":1119,"80":1127,"81":1061,"82":1127,"83":1061,"84":1135,"85":1101,"86":1135,"87":1101,"128":1026,"129":1082,"130":1026,"131":1082,"132":1067,"133":1117,"134":1067,"135":1117,"136":1032,"137":1077,"138":1032,"139":1077,"140":1065,"141":1037,"142":1065,"143":1037,"144":1141,"145":1060,"146":1141,"147":1060,"148":1139,"149":1034,"150":1139,"151":1034,"152":1140,"153":1056,"154":1140,"155":1056,"156":1148,"157":1098,"158":1148,"159":1098,"160":1025,"161":1085,"162":1025,"163":1085,"164":1072,"165":1118,"166":1072,"167":1118,"176":1126,"177":1063,"178":1126,"179":1063,"180":1134,"181":1106,"182":1134,"183":1106,"192":1028,"193":1081,"194":1028,"195":1081,"196":1069,"197":1119,"198":1069,"199":1119,"208":1127,"209":1061,"210":1127,"211":1061,"212":1135,"213":1101,"214":1135,"215":1101,"256":1038,"257":1071,"258":1038,"259":1071,"260":1080,"261":1114,"262":1080,"263":1114,"264":1035,"265":1064,"266":1035,"267":1064,"268":1075,"269":1027,"270":1075,"271":1027,"272":1143,"273":1050,"274":1143,"275":1050,"276":1138,"277":1033,"278":1138,"279":1033,"280":1142,"281":1046,"282":1142,"283":1046,"284":1149,"285":1087,"286":1149,"287":1087,"288":1042,"289":1074,"290":1042,"291":1074,"292":1083,"293":1115,"294":1083,"295":1115,"304":1124,"305":1053,"306":1124,"307":1053,"308":1132,"309":1095,"310":1132,"311":1095,"320":1039,"321":1070,"322":1039,"323":1070,"324":1078,"325":1116,"326":1078,"327":1116,"336":1125,"337":1051,"338":1125,"339":1051,"340":1133,"341":1090,"342":1133,"343":1090,"384":1038,"385":1071,"386":1038,"387":1071,"388":1080,"389":1114,"390":1080,"391":1114,"392":1035,"393":1064,"394":1035,"395":1064,"396":1075,"397":1027,"398":1075,"399":1027,"400":1143,"401":1050,"402":1143,"403":1050,"404":1138,"405":1033,"406":1138,"407":1033,"408":1142,"409":1046,"410":1142,"411":1046,"412":1149,"413":1087,"414":1149,"415":1087,"416":1042,"417":1074,"418":1042,"419":1074,"420":1083,"421":1115,"422":1083,"423":1115,"432":1124,"433":1053,"434":1124,"435":1053,"436":1132,"437":1095,"438":1132,"439":1095,"448":1039,"449":1070,"450":1039,"451":1070,"452":1078,"453":1116,"454":1078,"455":1116,"464":1125,"465":1051,"466":1125,"467":1051,"468":1133,"469":1090,"470":1133,"471":1090,"512":1048,"513":1104,"514":1048,"515":1104,"516":1091,"517":1111,"518":1091,"519":1111,"520":1045,"521":1099,"522":1045,"523":1099,"524":1086,"525":1057,"526":1086,"527":1057,"528":1145,"529":1040,"530":1145,"531":1040,"532":1137,"533":1054,"534":1137,"535":1054,"536":1144,"537":1036,"538":1144,"539":1036,"540":1150,"541":1076,"542":1150,"543":1076,"544":1052,"545":1107,"546":1052,"547":1107,"548":1094,"549":1112,"550":1094,"551":1112,"560":1122,"561":1043,"562":1122,"563":1043,"564":1130,"565":1084,"566":1130,"567":1084,"576":1049,"577":1103,"578":1049,"579":1103,"580":1089,"581":1113,"582":1089,"583":1113,"592":1123,"593":1041,"594":1123,"595":1041,"596":1131,"597":1079,"598":1131,"599":1079,"640":1048,"641":1104,"642":1048,"643":1104,"644":1091,"645":1111,"646":1091,"647":1111,"648":1045,"649":1099,"650":1045,"651":1099,"652":1086,"653":1057,"654":1086,"655":1057,"656":1145,"657":1040,"658":1145,"659":1040,"660":1137,"661":1054,"662":1137,"663":1054,"664":1144,"665":1036,"666":1144,"667":1036,"668":1150,"669":1076,"670":1150,"671":1076,"672":1052,"673":1107,"674":1052,"675":1107,"676":1094,"677":1112,"678":1094,"679":1112,"688":1122,"689":1043,"690":1122,"691":1043,"692":1130,"693":1084,"694":1130,"695":1084,"704":1049,"705":1103,"706":1049,"707":1103,"708":1089,"709":1113,"710":1089,"711":1113,"720":1123,"721":1041,"722":1123,"723":1041,"724":1131,"725":1079,"726":1131,"727":1079,"768":1058,"769":1093,"770":1058,"771":1093,"772":1102,"773":1108,"774":1102,"775":1108,"776":1055,"777":1088,"778":1055,"779":1088,"780":1097,"781":1047,"782":1097,"783":1047,"784":1147,"785":1029,"786":1147,"787":1029,"788":1136,"789":1044,"790":1136,"791":1044,"792":1146,"793":1031,"794":1146,"795":1031,"796":1151,"797":1066,"798":1151,"799":1066,"800":1062,"801":1096,"802":1062,"803":1096,"804":1105,"805":1109,"806":1105,"807":1109,"816":1120,"817":1024,"818":1120,"819":1024,"820":1128,"821":1073,"822":1128,"823":1073,"832":1059,"833":1092,"834":1059,"835":1092,"836":1100,"837":1110,"838":1100,"839":1110,"848":1121,"849":1030,"850":1121,"851":1030,"852":1129,"853":1068,"854":1129,"855":1068,"896":1058,"897":1093,"898":1058,"899":1093,"900":1102,"901":1108,"902":1102,"903":1108,"904":1055,"905":1088,"906":1055,"907":1088,"908":1097,"909":1047,"910":1097,"911":1047,"912":1147,"913":1029,"914":1147,"915":1029,"916":1136,"917":1044,"918":1136,"919":1044,"920":1146,"921":1031,"922":1146,"923":1031,"924":1151,"925":1066,"926":1151,"927":1066,"928":1062,"929":1096,"930":1062,"931":1096,"932":1105,"933":1109,"934":1105,"935":1109,"944":1120,"945":1024,"946":1120,"947":1024,"948":1128,"949":1073,"950":1128,"951":1073,"960":1059,"961":1092,"962":1059,"963":1092,"964":1100,"965":1110,"966":1100,"967":1110,"976":1121,"977":1030,"978":1121,"979":1030,"980":1129,"981":1068,"982":1129,"983":1068}}],"variants":[{"shaders":[0,1],"uniformBlock":[0]},{"shaders":[2,3],"uniformBlock":[0]},{"shaders":[4,5],"uniformBlock":[0]},{"shaders":[6,7],"uniformBlock":[0]},{"shaders":[8,9],"uniformBlock":[0]},{"shaders":[10,11],"uniformBlock":[0]},{"shaders":[12,13],"uniformBlock":[0]},{"shaders":[14,15],"uniformBlock":[0]},{"shaders":[16,17],"uniformBlock":[0]},{"shaders":[18,19],"uniformBlock":[0]},{"shaders":[20,21],"uniformBlock":[0]},{"shaders":[22,5],"uniformBlock":[0]},{"shaders":[23,3],"uniformBlock":[0]},{"shaders":[24,15],"uniformBlock":[0]},{"shaders":[25,5],"uniformBlock":[0]},{"shaders":[26,3],"uniformBlock":[0]},{"shaders":[27,15],"uniformBlock":[0]},{"shaders":[28,29],"uniformBlock":[0]},{"shaders":[30,31],"uniformBlock":[0]},{"shaders":[32,33],"uniformBlock":[0]},{"shaders":[34,35],"uniformBlock":[0]},{"shaders":[36,37],"uniformBlock":[0]},{"shaders":[38,39],"uniformBlock":[0]},{"shaders":[40,41],"uniformBlock":[0]},{"shaders":[42,29],"uniformBlock":[0]},{"shaders":[43,44],"uniformBlock":[0]},{"shaders":[45,46],"uniformBlock":[0]},{"shaders":[47,48],"uniformBlock":[0]},{"shaders":[49,31],"uniformBlock":[0]},{"shaders":[50,33],"uniformBlock":[0]},{"shaders":[51,29],"uniformBlock":[0]},{"shaders":[52,53],"uniformBlock":[0]},{"shaders":[54,31],"uniformBlock":[0]},{"shaders":[55,33],"uniformBlock":[0]},{"shaders":[56,57],"uniformBlock":[0]},{"shaders":[12,58],"uniformBlock":[0]},{"shaders":[59,60],"uniformBlock":[0]},{"shaders":[25,61],"uniformBlock":[0]},{"shaders":[62,63],"uniformBlock":[0]},{"shaders":[64,65],"uniformBlock":[0]},{"shaders":[66,67],"uniformBlock":[0]},{"shaders":[68,57],"uniformBlock":[0]},{"shaders":[69,70],"uniformBlock":[0]},{"shaders":[71,72],"uniformBlock":[0]},{"shaders":[73,74],"uniformBlock":[0]},{"shaders":[75,58],"uniformBlock":[0]},{"shaders":[76,60],"uniformBlock":[0]},{"shaders":[77,57],"uniformBlock":[0]},{"shaders":[78,79],"uniformBlock":[0]},{"shaders":[80,58],"uniformBlock":[0]},{"shaders":[81,60],"uniformBlock":[0]},{"shaders":[82,83],"uniformBlock":[0]},{"shaders":[34,84],"uniformBlock":[0]},{"shaders":[85,86],"uniformBlock":[0]},{"shaders":[30,87],"uniformBlock":[0]},{"shaders":[88,89],"uniformBlock":[0]},{"shaders":[90,91],"uniformBlock":[0]},{"shaders":[92,93],"uniformBlock":[0]},{"shaders":[94,83],"uniformBlock":[0]},{"shaders":[95,96],"uniformBlock":[0]},{"shaders":[97,98],"uniformBlock":[0]},{"shaders":[99,100],"uniformBlock":[0]},{"shaders":[101,84],"uniformBlock":[0]},{"shaders":[102,86],"uniformBlock":[0]},{"shaders":[103,86],"uniformBlock":[0]},{"shaders":[104,84],"uniformBlock":[0]},{"shaders":[105,106],"uniformBlock":[0]},{"shaders":[107,83],"uniformBlock":[0]},{"shaders":[88,3],"uniformBlock":[0]},{"shaders":[108,5],"uniformBlock":[0]},{"shaders":[105,15],"uniformBlock":[0]},{"shaders":[109,3],"uniformBlock":[0]},{"shaders":[110,5],"uniformBlock":[0]},{"shaders":[51,1],"uniformBlock":[0]},{"shaders":[111,17],"uniformBlock":[0]},{"shaders":[112,19],"uniformBlock":[0]},{"shaders":[113,15],"uniformBlock":[0]},{"shaders":[114,7],"uniformBlock":[0]},{"shaders":[115,9],"uniformBlock":[0]},{"shaders":[85,11],"uniformBlock":[0]},{"shaders":[116,13],"uniformBlock":[0]},{"shaders":[117,3],"uniformBlock":[0]},{"shaders":[118,5],"uniformBlock":[0]},{"shaders":[82,21],"uniformBlock":[0]},{"shaders":[47,15],"uniformBlock":[0]},{"shaders":[62,33],"uniformBlock":[0]},{"shaders":[119,31],"uniformBlock":[0]},{"shaders":[78,29],"uniformBlock":[0]},{"shaders":[120,33],"uniformBlock":[0]},{"shaders":[121,31],"uniformBlock":[0]},{"shaders":[24,48],"uniformBlock":[0]},{"shaders":[122,46],"uniformBlock":[0]},{"shaders":[123,44],"uniformBlock":[0]},{"shaders":[124,29],"uniformBlock":[0]},{"shaders":[125,41],"uniformBlock":[0]},{"shaders":[126,39],"uniformBlock":[0]},{"shaders":[59,37],"uniformBlock":[0]},{"shaders":[127,35],"uniformBlock":[0]},{"shaders":[128,33],"uniformBlock":[0]},{"shaders":[129,31],"uniformBlock":[0]},{"shaders":[56,53],"uniformBlock":[0]},{"shaders":[0,29],"uniformBlock":[0]},{"shaders":[36,60],"uniformBlock":[0]},{"shaders":[116,58],"uniformBlock":[0]},{"shaders":[52,57],"uniformBlock":[0]},{"shaders":[130,60],"uniformBlock":[0]},{"shaders":[131,58],"uniformBlock":[0]},{"shaders":[107,74],"uniformBlock":[0]},{"shaders":[132,72],"uniformBlock":[0]},{"shaders":[133,70],"uniformBlock":[0]},{"shaders":[134,57],"uniformBlock":[0]},{"shaders":[135,67],"uniformBlock":[0]},{"shaders":[136,65],"uniformBlock":[0]},{"shaders":[32,63],"uniformBlock":[0]},{"shaders":[108,61],"uniformBlock":[0]},{"shaders":[137,60],"uniformBlock":[0]},{"shaders":[138,58],"uniformBlock":[0]},{"shaders":[28,79],"uniformBlock":[0]},{"shaders":[99,57],"uniformBlock":[0]},{"shaders":[10,86],"uniformBlock":[0]},{"shaders":[127,84],"uniformBlock":[0]},{"shaders":[20,83],"uniformBlock":[0]},{"shaders":[139,86],"uniformBlock":[0]},{"shaders":[140,84],"uniformBlock":[0]},{"shaders":[77,100],"uniformBlock":[0]},{"shaders":[141,98],"uniformBlock":[0]},{"shaders":[142,96],"uniformBlock":[0]},{"shaders":[143,83],"uniformBlock":[0]},{"shaders":[144,93],"uniformBlock":[0]},{"shaders":[145,91],"uniformBlock":[0]},{"shaders":[26,89],"uniformBlock":[0]},{"shaders":[119,87],"uniformBlock":[0]},{"shaders":[146,86],"uniformBlock":[0]},{"shaders":[147,84],"uniformBlock":[0]},{"shaders":[27,106],"uniformBlock":[0]},{"shaders":[73,83],"uniformBlock":[0]},{"shaders":[27,148],"uniformBlock":[0]},{"shaders":[146,149],"uniformBlock":[0]},{"shaders":[12,150],"uniformBlock":[0]},{"shaders":[151,152],"uniformBlock":[0]},{"shaders":[8,153],"uniformBlock":[0]},{"shaders":[69,154],"uniformBlock":[0]},{"shaders":[120,155],"uniformBlock":[0]},{"shaders":[24,148],"uniformBlock":[0]},{"shaders":[156,157],"uniformBlock":[0]},{"shaders":[80,150],"uniformBlock":[0]},{"shaders":[14,148],"uniformBlock":[0]},{"shaders":[75,150],"uniformBlock":[0]},{"shaders":[26,158],"uniformBlock":[0]},{"shaders":[25,159],"uniformBlock":[0]},{"shaders":[160,161],"uniformBlock":[0]},{"shaders":[145,162],"uniformBlock":[0]},{"shaders":[16,163],"uniformBlock":[0]},{"shaders":[18,164],"uniformBlock":[0]},{"shaders":[165,152],"uniformBlock":[0]},{"shaders":[23,158],"uniformBlock":[0]},{"shaders":[22,159],"uniformBlock":[0]},{"shaders":[2,158],"uniformBlock":[0]},{"shaders":[4,159],"uniformBlock":[0]},{"shaders":[28,166],"uniformBlock":[0]},{"shaders":[137,167],"uniformBlock":[0]},{"shaders":[34,168],"uniformBlock":[0]},{"shaders":[169,170],"uniformBlock":[0]},{"shaders":[38,171],"uniformBlock":[0]},{"shaders":[95,172],"uniformBlock":[0]},{"shaders":[109,173],"uniformBlock":[0]},{"shaders":[51,166],"uniformBlock":[0]},{"shaders":[174,175],"uniformBlock":[0]},{"shaders":[104,168],"uniformBlock":[0]},{"shaders":[42,166],"uniformBlock":[0]},{"shaders":[101,168],"uniformBlock":[0]},{"shaders":[32,176],"uniformBlock":[0]},{"shaders":[30,177],"uniformBlock":[0]},{"shaders":[178,179],"uniformBlock":[0]},{"shaders":[136,180],"uniformBlock":[0]},{"shaders":[45,181],"uniformBlock":[0]},{"shaders":[43,182],"uniformBlock":[0]},{"shaders":[183,170],"uniformBlock":[0]},{"shaders":[55,176],"uniformBlock":[0]},{"shaders":[54,177],"uniformBlock":[0]},{"shaders":[50,176],"uniformBlock":[0]},{"shaders":[49,177],"uniformBlock":[0]},{"shaders":[56,184],"uniformBlock":[0]},{"shaders":[128,185],"uniformBlock":[0]},{"shaders":[25,186],"uniformBlock":[0]},{"shaders":[160,187],"uniformBlock":[0]},{"shaders":[64,188],"uniformBlock":[0]},{"shaders":[18,189],"uniformBlock":[0]},{"shaders":[139,190],"uniformBlock":[0]},{"shaders":[77,184],"uniformBlock":[0]},{"shaders":[183,191],"uniformBlock":[0]},{"shaders":[22,186],"uniformBlock":[0]},{"shaders":[68,184],"uniformBlock":[0]},{"shaders":[4,186],"uniformBlock":[0]},{"shaders":[59,192],"uniformBlock":[0]},{"shaders":[12,193],"uniformBlock":[0]},{"shaders":[151,194],"uniformBlock":[0]},{"shaders":[126,195],"uniformBlock":[0]},{"shaders":[71,196],"uniformBlock":[0]},{"shaders":[69,197],"uniformBlock":[0]},{"shaders":[174,187],"uniformBlock":[0]},{"shaders":[81,192],"uniformBlock":[0]},{"shaders":[80,193],"uniformBlock":[0]},{"shaders":[76,192],"uniformBlock":[0]},{"shaders":[75,193],"uniformBlock":[0]},{"shaders":[82,198],"uniformBlock":[0]},{"shaders":[117,199],"uniformBlock":[0]},{"shaders":[30,200],"uniformBlock":[0]},{"shaders":[178,201],"uniformBlock":[0]},{"shaders":[90,202],"uniformBlock":[0]},{"shaders":[43,203],"uniformBlock":[0]},{"shaders":[130,204],"uniformBlock":[0]},{"shaders":[107,198],"uniformBlock":[0]},{"shaders":[165,205],"uniformBlock":[0]},{"shaders":[54,200],"uniformBlock":[0]},{"shaders":[94,198],"uniformBlock":[0]},{"shaders":[49,200],"uniformBlock":[0]},{"shaders":[85,206],"uniformBlock":[0]},{"shaders":[34,207],"uniformBlock":[0]},{"shaders":[169,208],"uniformBlock":[0]},{"shaders":[115,209],"uniformBlock":[0]},{"shaders":[97,210],"uniformBlock":[0]},{"shaders":[95,211],"uniformBlock":[0]},{"shaders":[156,201],"uniformBlock":[0]},{"shaders":[103,206],"uniformBlock":[0]},{"shaders":[104,207],"uniformBlock":[0]},{"shaders":[102,206],"uniformBlock":[0]},{"shaders":[101,207],"uniformBlock":[0]},{"shaders":[105,148],"uniformBlock":[0]},{"shaders":[103,149],"uniformBlock":[0]},{"shaders":[116,150],"uniformBlock":[0]},{"shaders":[212,152],"uniformBlock":[0]},{"shaders":[115,153],"uniformBlock":[0]},{"shaders":[133,154],"uniformBlock":[0]},{"shaders":[50,155],"uniformBlock":[0]},{"shaders":[47,148],"uniformBlock":[0]},{"shaders":[213,157],"uniformBlock":[0]},{"shaders":[138,150],"uniformBlock":[0]},{"shaders":[113,148],"uniformBlock":[0]},{"shaders":[131,150],"uniformBlock":[0]},{"shaders":[88,158],"uniformBlock":[0]},{"shaders":[108,159],"uniformBlock":[0]},{"shaders":[214,161],"uniformBlock":[0]},{"shaders":[90,162],"uniformBlock":[0]},{"shaders":[111,163],"uniformBlock":[0]},{"shaders":[112,164],"uniformBlock":[0]},{"shaders":[215,152],"uniformBlock":[0]},{"shaders":[117,158],"uniformBlock":[0]},{"shaders":[118,159],"uniformBlock":[0]},{"shaders":[109,158],"uniformBlock":[0]},{"shaders":[110,159],"uniformBlock":[0]},{"shaders":[78,166],"uniformBlock":[0]},{"shaders":[81,167],"uniformBlock":[0]},{"shaders":[127,168],"uniformBlock":[0]},{"shaders":[216,170],"uniformBlock":[0]},{"shaders":[126,171],"uniformBlock":[0]},{"shaders":[142,172],"uniformBlock":[0]},{"shaders":[2,173],"uniformBlock":[0]},{"shaders":[0,166],"uniformBlock":[0]},{"shaders":[217,175],"uniformBlock":[0]},{"shaders":[147,168],"uniformBlock":[0]},{"shaders":[124,166],"uniformBlock":[0]},{"shaders":[140,168],"uniformBlock":[0]},{"shaders":[62,176],"uniformBlock":[0]},{"shaders":[119,177],"uniformBlock":[0]},{"shaders":[218,179],"uniformBlock":[0]},{"shaders":[64,180],"uniformBlock":[0]},{"shaders":[122,181],"uniformBlock":[0]},{"shaders":[123,182],"uniformBlock":[0]},{"shaders":[219,170],"uniformBlock":[0]},{"shaders":[128,176],"uniformBlock":[0]},{"shaders":[129,177],"uniformBlock":[0]},{"shaders":[120,176],"uniformBlock":[0]},{"shaders":[121,177],"uniformBlock":[0]},{"shaders":[52,184],"uniformBlock":[0]},{"shaders":[55,185],"uniformBlock":[0]},{"shaders":[108,186],"uniformBlock":[0]},{"shaders":[214,187],"uniformBlock":[0]},{"shaders":[136,188],"uniformBlock":[0]},{"shaders":[112,189],"uniformBlock":[0]},{"shaders":[102,190],"uniformBlock":[0]},{"shaders":[99,184],"uniformBlock":[0]},{"shaders":[219,191],"uniformBlock":[0]},{"shaders":[118,186],"uniformBlock":[0]},{"shaders":[134,184],"uniformBlock":[0]},{"shaders":[110,186],"uniformBlock":[0]},{"shaders":[36,192],"uniformBlock":[0]},{"shaders":[116,193],"uniformBlock":[0]},{"shaders":[212,194],"uniformBlock":[0]},{"shaders":[38,195],"uniformBlock":[0]},{"shaders":[132,196],"uniformBlock":[0]},{"shaders":[133,197],"uniformBlock":[0]},{"shaders":[217,187],"uniformBlock":[0]},{"shaders":[137,192],"uniformBlock":[0]},{"shaders":[138,193],"uniformBlock":[0]},{"shaders":[130,192],"uniformBlock":[0]},{"shaders":[131,193],"uniformBlock":[0]},{"shaders":[20,198],"uniformBlock":[0]},{"shaders":[23,199],"uniformBlock":[0]},{"shaders":[119,200],"uniformBlock":[0]},{"shaders":[218,201],"uniformBlock":[0]},{"shaders":[145,202],"uniformBlock":[0]},{"shaders":[123,203],"uniformBlock":[0]},{"shaders":[76,204],"uniformBlock":[0]},{"shaders":[73,198],"uniformBlock":[0]},{"shaders":[215,205],"uniformBlock":[0]},{"shaders":[129,200],"uniformBlock":[0]},{"shaders":[143,198],"uniformBlock":[0]},{"shaders":[121,200],"uniformBlock":[0]},{"shaders":[10,206],"uniformBlock":[0]},{"shaders":[127,207],"uniformBlock":[0]},{"shaders":[216,208],"uniformBlock":[0]},{"shaders":[8,209],"uniformBlock":[0]},{"shaders":[141,210],"uniformBlock":[0]},{"shaders":[142,211],"uniformBlock":[0]},{"shaders":[213,201],"uniformBlock":[0]},{"shaders":[146,206],"uniformBlock":[0]},{"shaders":[147,207],"uniformBlock":[0]},{"shaders":[139,206],"uniformBlock":[0]},{"shaders":[140,207],"uniformBlock":[0]},{"shaders":[27,220],"uniformBlock":[0]},{"shaders":[8,221],"uniformBlock":[0]},{"shaders":[10,222],"uniformBlock":[0]},{"shaders":[12,223],"uniformBlock":[0]},{"shaders":[24,220],"uniformBlock":[0]},{"shaders":[133,224],"uniformBlock":[0]},{"shaders":[14,220],"uniformBlock":[0]},{"shaders":[88,225],"uniformBlock":[0]},{"shaders":[25,226],"uniformBlock":[0]},{"shaders":[82,227],"uniformBlock":[0]},{"shaders":[111,228],"uniformBlock":[0]},{"shaders":[18,229],"uniformBlock":[0]},{"shaders":[66,230],"uniformBlock":[0]},{"shaders":[90,231],"uniformBlock":[0]},{"shaders":[117,225],"uniformBlock":[0]},{"shaders":[22,226],"uniformBlock":[0]},{"shaders":[107,227],"uniformBlock":[0]},{"shaders":[109,225],"uniformBlock":[0]},{"shaders":[4,226],"uniformBlock":[0]},{"shaders":[94,227],"uniformBlock":[0]},{"shaders":[28,232],"uniformBlock":[0]},{"shaders":[38,233],"uniformBlock":[0]},{"shaders":[36,234],"uniformBlock":[0]},{"shaders":[34,235],"uniformBlock":[0]},{"shaders":[51,232],"uniformBlock":[0]},{"shaders":[142,236],"uniformBlock":[0]},{"shaders":[42,232],"uniformBlock":[0]},{"shaders":[62,237],"uniformBlock":[0]},{"shaders":[30,238],"uniformBlock":[0]},{"shaders":[56,239],"uniformBlock":[0]},{"shaders":[122,240],"uniformBlock":[0]},{"shaders":[43,241],"uniformBlock":[0]},{"shaders":[92,242],"uniformBlock":[0]},{"shaders":[64,243],"uniformBlock":[0]},{"shaders":[128,237],"uniformBlock":[0]},{"shaders":[54,238],"uniformBlock":[0]},{"shaders":[77,239],"uniformBlock":[0]},{"shaders":[120,237],"uniformBlock":[0]},{"shaders":[49,238],"uniformBlock":[0]},{"shaders":[68,239],"uniformBlock":[0]},{"shaders":[56,244],"uniformBlock":[0]},{"shaders":[64,245],"uniformBlock":[0]},{"shaders":[62,246],"uniformBlock":[0]},{"shaders":[25,247],"uniformBlock":[0]},{"shaders":[77,244],"uniformBlock":[0]},{"shaders":[112,248],"uniformBlock":[0]},{"shaders":[68,244],"uniformBlock":[0]},{"shaders":[36,249],"uniformBlock":[0]},{"shaders":[12,250],"uniformBlock":[0]},{"shaders":[28,251],"uniformBlock":[0]},{"shaders":[132,252],"uniformBlock":[0]},{"shaders":[69,253],"uniformBlock":[0]},{"shaders":[6,254],"uniformBlock":[0]},{"shaders":[38,255],"uniformBlock":[0]},{"shaders":[137,249],"uniformBlock":[0]},{"shaders":[80,250],"uniformBlock":[0]},{"shaders":[51,251],"uniformBlock":[0]},{"shaders":[130,249],"uniformBlock":[0]},{"shaders":[75,250],"uniformBlock":[0]},{"shaders":[42,251],"uniformBlock":[0]},{"shaders":[82,256],"uniformBlock":[0]},{"shaders":[90,257],"uniformBlock":[0]},{"shaders":[88,258],"uniformBlock":[0]},{"shaders":[30,259],"uniformBlock":[0]},{"shaders":[107,256],"uniformBlock":[0]},{"shaders":[123,260],"uniformBlock":[0]},{"shaders":[94,256],"uniformBlock":[0]},{"shaders":[10,261],"uniformBlock":[0]},{"shaders":[34,262],"uniformBlock":[0]},{"shaders":[27,263],"uniformBlock":[0]},{"shaders":[141,264],"uniformBlock":[0]},{"shaders":[95,265],"uniformBlock":[0]},{"shaders":[40,266],"uniformBlock":[0]},{"shaders":[8,267],"uniformBlock":[0]},{"shaders":[146,261],"uniformBlock":[0]},{"shaders":[104,262],"uniformBlock":[0]},{"shaders":[24,263],"uniformBlock":[0]},{"shaders":[139,261],"uniformBlock":[0]},{"shaders":[101,262],"uniformBlock":[0]},{"shaders":[14,263],"uniformBlock":[0]},{"shaders":[105,220],"uniformBlock":[0]},{"shaders":[115,221],"uniformBlock":[0]},{"shaders":[85,222],"uniformBlock":[0]},{"shaders":[116,223],"uniformBlock":[0]},{"shaders":[47,220],"uniformBlock":[0]},{"shaders":[69,224],"uniformBlock":[0]},{"shaders":[113,220],"uniformBlock":[0]},{"shaders":[26,225],"uniformBlock":[0]},{"shaders":[108,226],"uniformBlock":[0]},{"shaders":[20,227],"uniformBlock":[0]},{"shaders":[16,228],"uniformBlock":[0]},{"shaders":[112,229],"uniformBlock":[0]},{"shaders":[135,230],"uniformBlock":[0]},{"shaders":[145,231],"uniformBlock":[0]},{"shaders":[23,225],"uniformBlock":[0]},{"shaders":[118,226],"uniformBlock":[0]},{"shaders":[73,227],"uniformBlock":[0]},{"shaders":[2,225],"uniformBlock":[0]},{"shaders":[110,226],"uniformBlock":[0]},{"shaders":[143,227],"uniformBlock":[0]},{"shaders":[78,232],"uniformBlock":[0]},{"shaders":[126,233],"uniformBlock":[0]},{"shaders":[59,234],"uniformBlock":[0]},{"shaders":[127,235],"uniformBlock":[0]},{"shaders":[0,232],"uniformBlock":[0]},{"shaders":[95,236],"uniformBlock":[0]},{"shaders":[124,232],"uniformBlock":[0]},{"shaders":[32,237],"uniformBlock":[0]},{"shaders":[119,238],"uniformBlock":[0]},{"shaders":[52,239],"uniformBlock":[0]},{"shaders":[45,240],"uniformBlock":[0]},{"shaders":[123,241],"uniformBlock":[0]},{"shaders":[144,242],"uniformBlock":[0]},{"shaders":[136,243],"uniformBlock":[0]},{"shaders":[55,237],"uniformBlock":[0]},{"shaders":[129,238],"uniformBlock":[0]},{"shaders":[99,239],"uniformBlock":[0]},{"shaders":[50,237],"uniformBlock":[0]},{"shaders":[121,238],"uniformBlock":[0]},{"shaders":[134,239],"uniformBlock":[0]},{"shaders":[52,244],"uniformBlock":[0]},{"shaders":[136,245],"uniformBlock":[0]},{"shaders":[32,246],"uniformBlock":[0]},{"shaders":[108,247],"uniformBlock":[0]},{"shaders":[99,244],"uniformBlock":[0]},{"shaders":[18,248],"uniformBlock":[0]},{"shaders":[134,244],"uniformBlock":[0]},{"shaders":[59,249],"uniformBlock":[0]},{"shaders":[116,250],"uniformBlock":[0]},{"shaders":[78,251],"uniformBlock":[0]},{"shaders":[71,252],"uniformBlock":[0]},{"shaders":[133,253],"uniformBlock":[0]},{"shaders":[114,254],"uniformBlock":[0]},{"shaders":[126,255],"uniformBlock":[0]},{"shaders":[81,249],"uniformBlock":[0]},{"shaders":[138,250],"uniformBlock":[0]},{"shaders":[0,251],"uniformBlock":[0]},{"shaders":[76,249],"uniformBlock":[0]},{"shaders":[131,250],"uniformBlock":[0]},{"shaders":[124,251],"uniformBlock":[0]},{"shaders":[20,256],"uniformBlock":[0]},{"shaders":[145,257],"uniformBlock":[0]},{"shaders":[26,258],"uniformBlock":[0]},{"shaders":[119,259],"uniformBlock":[0]},{"shaders":[73,256],"uniformBlock":[0]},{"shaders":[43,260],"uniformBlock":[0]},{"shaders":[143,256],"uniformBlock":[0]},{"shaders":[85,261],"uniformBlock":[0]},{"shaders":[127,262],"uniformBlock":[0]},{"shaders":[105,263],"uniformBlock":[0]},{"shaders":[97,264],"uniformBlock":[0]},{"shaders":[142,265],"uniformBlock":[0]},{"shaders":[125,266],"uniformBlock":[0]},{"shaders":[115,267],"uniformBlock":[0]},{"shaders":[103,261],"uniformBlock":[0]},{"shaders":[147,262],"uniformBlock":[0]},{"shaders":[47,263],"uniformBlock":[0]},{"shaders":[102,261],"uniformBlock":[0]},{"shaders":[140,262],"uniformBlock":[0]},{"shaders":[113,263],"uniformBlock":[0]},{"shaders":[27,48],"uniformBlock":[0]},{"shaders":[151,268],"uniformBlock":[0]},{"shaders":[8,269],"uniformBlock":[0]},{"shaders":[12,270],"uniformBlock":[0]},{"shaders":[14,48],"uniformBlock":[0]},{"shaders":[117,173],"uniformBlock":[0]},{"shaders":[25,271],"uniformBlock":[0]},{"shaders":[160,175],"uniformBlock":[0]},{"shaders":[90,272],"uniformBlock":[0]},{"shaders":[18,273],"uniformBlock":[0]},{"shaders":[165,268],"uniformBlock":[0]},{"shaders":[22,271],"uniformBlock":[0]},{"shaders":[4,271],"uniformBlock":[0]},{"shaders":[28,1],"uniformBlock":[0]},{"shaders":[169,274],"uniformBlock":[0]},{"shaders":[38,275],"uniformBlock":[0]},{"shaders":[34,276],"uniformBlock":[0]},{"shaders":[42,1],"uniformBlock":[0]},{"shaders":[128,155],"uniformBlock":[0]},{"shaders":[30,277],"uniformBlock":[0]},{"shaders":[178,157],"uniformBlock":[0]},{"shaders":[64,278],"uniformBlock":[0]},{"shaders":[43,279],"uniformBlock":[0]},{"shaders":[183,274],"uniformBlock":[0]},{"shaders":[54,277],"uniformBlock":[0]},{"shaders":[49,277],"uniformBlock":[0]},{"shaders":[56,100],"uniformBlock":[0]},{"shaders":[160,280],"uniformBlock":[0]},{"shaders":[64,281],"uniformBlock":[0]},{"shaders":[25,282],"uniformBlock":[0]},{"shaders":[68,100],"uniformBlock":[0]},{"shaders":[151,205],"uniformBlock":[0]},{"shaders":[38,283],"uniformBlock":[0]},{"shaders":[12,284],"uniformBlock":[0]},{"shaders":[137,204],"uniformBlock":[0]},{"shaders":[69,285],"uniformBlock":[0]},{"shaders":[80,284],"uniformBlock":[0]},{"shaders":[174,280],"uniformBlock":[0]},{"shaders":[75,284],"uniformBlock":[0]},{"shaders":[82,74],"uniformBlock":[0]},{"shaders":[30,286],"uniformBlock":[0]},{"shaders":[90,287],"uniformBlock":[0]},{"shaders":[178,288],"uniformBlock":[0]},{"shaders":[94,74],"uniformBlock":[0]},{"shaders":[8,289],"uniformBlock":[0]},{"shaders":[169,191],"uniformBlock":[0]},{"shaders":[34,290],"uniformBlock":[0]},{"shaders":[146,190],"uniformBlock":[0]},{"shaders":[95,291],"uniformBlock":[0]},{"shaders":[104,290],"uniformBlock":[0]},{"shaders":[156,288],"uniformBlock":[0]},{"shaders":[101,290],"uniformBlock":[0]},{"shaders":[105,48],"uniformBlock":[0]},{"shaders":[116,270],"uniformBlock":[0]},{"shaders":[115,269],"uniformBlock":[0]},{"shaders":[212,268],"uniformBlock":[0]},{"shaders":[113,48],"uniformBlock":[0]},{"shaders":[145,272],"uniformBlock":[0]},{"shaders":[214,175],"uniformBlock":[0]},{"shaders":[108,271],"uniformBlock":[0]},{"shaders":[23,173],"uniformBlock":[0]},{"shaders":[112,273],"uniformBlock":[0]},{"shaders":[118,271],"uniformBlock":[0]},{"shaders":[215,268],"uniformBlock":[0]},{"shaders":[110,271],"uniformBlock":[0]},{"shaders":[78,1],"uniformBlock":[0]},{"shaders":[127,276],"uniformBlock":[0]},{"shaders":[126,275],"uniformBlock":[0]},{"shaders":[216,274],"uniformBlock":[0]},{"shaders":[124,1],"uniformBlock":[0]},{"shaders":[136,278],"uniformBlock":[0]},{"shaders":[218,157],"uniformBlock":[0]},{"shaders":[119,277],"uniformBlock":[0]},{"shaders":[55,155],"uniformBlock":[0]},{"shaders":[123,279],"uniformBlock":[0]},{"shaders":[129,277],"uniformBlock":[0]},{"shaders":[219,274],"uniformBlock":[0]},{"shaders":[121,277],"uniformBlock":[0]},{"shaders":[52,100],"uniformBlock":[0]},{"shaders":[108,282],"uniformBlock":[0]},{"shaders":[136,281],"uniformBlock":[0]},{"shaders":[214,280],"uniformBlock":[0]},{"shaders":[134,100],"uniformBlock":[0]},{"shaders":[126,283],"uniformBlock":[0]},{"shaders":[212,205],"uniformBlock":[0]},{"shaders":[116,284],"uniformBlock":[0]},{"shaders":[81,204],"uniformBlock":[0]},{"shaders":[133,285],"uniformBlock":[0]},{"shaders":[138,284],"uniformBlock":[0]},{"shaders":[217,280],"uniformBlock":[0]},{"shaders":[131,284],"uniformBlock":[0]},{"shaders":[20,74],"uniformBlock":[0]},{"shaders":[119,286],"uniformBlock":[0]},{"shaders":[145,287],"uniformBlock":[0]},{"shaders":[218,288],"uniformBlock":[0]},{"shaders":[143,74],"uniformBlock":[0]},{"shaders":[115,289],"uniformBlock":[0]},{"shaders":[216,191],"uniformBlock":[0]},{"shaders":[127,290],"uniformBlock":[0]},{"shaders":[103,190],"uniformBlock":[0]},{"shaders":[142,291],"uniformBlock":[0]},{"shaders":[147,290],"uniformBlock":[0]},{"shaders":[213,288],"uniformBlock":[0]},{"shaders":[140,290],"uniformBlock":[0]},{"shaders":[27,292],"uniformBlock":[0]},{"shaders":[24,292],"uniformBlock":[0]},{"shaders":[2,199],"uniformBlock":[0]},{"shaders":[14,292],"uniformBlock":[0]},{"shaders":[18,293],"uniformBlock":[0]},{"shaders":[122,294],"uniformBlock":[0]},{"shaders":[22,247],"uniformBlock":[0]},{"shaders":[219,208],"uniformBlock":[0]},{"shaders":[128,246],"uniformBlock":[0]},{"shaders":[4,247],"uniformBlock":[0]},{"shaders":[120,246],"uniformBlock":[0]},{"shaders":[28,295],"uniformBlock":[0]},{"shaders":[51,295],"uniformBlock":[0]},{"shaders":[50,185],"uniformBlock":[0]},{"shaders":[42,295],"uniformBlock":[0]},{"shaders":[43,296],"uniformBlock":[0]},{"shaders":[111,297],"uniformBlock":[0]},{"shaders":[54,259],"uniformBlock":[0]},{"shaders":[215,194],"uniformBlock":[0]},{"shaders":[117,258],"uniformBlock":[0]},{"shaders":[49,259],"uniformBlock":[0]},{"shaders":[109,258],"uniformBlock":[0]},{"shaders":[56,298],"uniformBlock":[0]},{"shaders":[77,298],"uniformBlock":[0]},{"shaders":[76,167],"uniformBlock":[0]},{"shaders":[68,298],"uniformBlock":[0]},{"shaders":[69,299],"uniformBlock":[0]},{"shaders":[141,300],"uniformBlock":[0]},{"shaders":[80,223],"uniformBlock":[0]},{"shaders":[213,179],"uniformBlock":[0]},{"shaders":[146,222],"uniformBlock":[0]},{"shaders":[75,223],"uniformBlock":[0]},{"shaders":[139,222],"uniformBlock":[0]},{"shaders":[82,301],"uniformBlock":[0]},{"shaders":[107,301],"uniformBlock":[0]},{"shaders":[102,149],"uniformBlock":[0]},{"shaders":[94,301],"uniformBlock":[0]},{"shaders":[95,302],"uniformBlock":[0]},{"shaders":[132,303],"uniformBlock":[0]},{"shaders":[104,235],"uniformBlock":[0]},{"shaders":[217,161],"uniformBlock":[0]},{"shaders":[137,234],"uniformBlock":[0]},{"shaders":[101,235],"uniformBlock":[0]},{"shaders":[130,234],"uniformBlock":[0]},{"shaders":[105,292],"uniformBlock":[0]},{"shaders":[47,292],"uniformBlock":[0]},{"shaders":[109,199],"uniformBlock":[0]},{"shaders":[113,292],"uniformBlock":[0]},{"shaders":[112,293],"uniformBlock":[0]},{"shaders":[45,294],"uniformBlock":[0]},{"shaders":[118,247],"uniformBlock":[0]},{"shaders":[183,208],"uniformBlock":[0]},{"shaders":[55,246],"uniformBlock":[0]},{"shaders":[110,247],"uniformBlock":[0]},{"shaders":[50,246],"uniformBlock":[0]},{"shaders":[78,295],"uniformBlock":[0]},{"shaders":[0,295],"uniformBlock":[0]},{"shaders":[120,185],"uniformBlock":[0]},{"shaders":[124,295],"uniformBlock":[0]},{"shaders":[123,296],"uniformBlock":[0]},{"shaders":[16,297],"uniformBlock":[0]},{"shaders":[129,259],"uniformBlock":[0]},{"shaders":[165,194],"uniformBlock":[0]},{"shaders":[23,258],"uniformBlock":[0]},{"shaders":[121,259],"uniformBlock":[0]},{"shaders":[2,258],"uniformBlock":[0]},{"shaders":[52,298],"uniformBlock":[0]},{"shaders":[99,298],"uniformBlock":[0]},{"shaders":[130,167],"uniformBlock":[0]},{"shaders":[134,298],"uniformBlock":[0]},{"shaders":[133,299],"uniformBlock":[0]},{"shaders":[97,300],"uniformBlock":[0]},{"shaders":[138,223],"uniformBlock":[0]},{"shaders":[156,179],"uniformBlock":[0]},{"shaders":[103,222],"uniformBlock":[0]},{"shaders":[131,223],"uniformBlock":[0]},{"shaders":[102,222],"uniformBlock":[0]},{"shaders":[20,301],"uniformBlock":[0]},{"shaders":[73,301],"uniformBlock":[0]},{"shaders":[139,149],"uniformBlock":[0]},{"shaders":[143,301],"uniformBlock":[0]},{"shaders":[142,302],"uniformBlock":[0]},{"shaders":[71,303],"uniformBlock":[0]},{"shaders":[147,235],"uniformBlock":[0]},{"shaders":[174,161],"uniformBlock":[0]},{"shaders":[81,234],"uniformBlock":[0]},{"shaders":[140,235],"uniformBlock":[0]},{"shaders":[76,234],"uniformBlock":[0]},{"shaders":[8,304],"uniformBlock":[0]},{"shaders":[216,305],"uniformBlock":[0]},{"shaders":[121,87],"uniformBlock":[0]},{"shaders":[24,106],"uniformBlock":[0]},{"shaders":[2,89],"uniformBlock":[0]},{"shaders":[14,106],"uniformBlock":[0]},{"shaders":[22,282],"uniformBlock":[0]},{"shaders":[219,305],"uniformBlock":[0]},{"shaders":[4,282],"uniformBlock":[0]},{"shaders":[38,306],"uniformBlock":[0]},{"shaders":[212,307],"uniformBlock":[0]},{"shaders":[110,61],"uniformBlock":[0]},{"shaders":[51,79],"uniformBlock":[0]},{"shaders":[50,63],"uniformBlock":[0]},{"shaders":[42,79],"uniformBlock":[0]},{"shaders":[54,286],"uniformBlock":[0]},{"shaders":[215,307],"uniformBlock":[0]},{"shaders":[49,286],"uniformBlock":[0]},{"shaders":[64,308],"uniformBlock":[0]},{"shaders":[218,309],"uniformBlock":[0]},{"shaders":[140,35],"uniformBlock":[0]},{"shaders":[77,53],"uniformBlock":[0]},{"shaders":[76,37],"uniformBlock":[0]},{"shaders":[68,53],"uniformBlock":[0]},{"shaders":[80,270],"uniformBlock":[0]},{"shaders":[213,309],"uniformBlock":[0]},{"shaders":[75,270],"uniformBlock":[0]},{"shaders":[90,310],"uniformBlock":[0]},{"shaders":[214,311],"uniformBlock":[0]},{"shaders":[131,13],"uniformBlock":[0]},{"shaders":[107,21],"uniformBlock":[0]},{"shaders":[102,11],"uniformBlock":[0]},{"shaders":[94,21],"uniformBlock":[0]},{"shaders":[104,276],"uniformBlock":[0]},{"shaders":[217,311],"uniformBlock":[0]},{"shaders":[101,276],"uniformBlock":[0]},{"shaders":[115,304],"uniformBlock":[0]},{"shaders":[169,305],"uniformBlock":[0]},{"shaders":[49,87],"uniformBlock":[0]},{"shaders":[47,106],"uniformBlock":[0]},{"shaders":[109,89],"uniformBlock":[0]},{"shaders":[113,106],"uniformBlock":[0]},{"shaders":[118,282],"uniformBlock":[0]},{"shaders":[183,305],"uniformBlock":[0]},{"shaders":[110,282],"uniformBlock":[0]},{"shaders":[126,306],"uniformBlock":[0]},{"shaders":[151,307],"uniformBlock":[0]},{"shaders":[4,61],"uniformBlock":[0]},{"shaders":[0,79],"uniformBlock":[0]},{"shaders":[120,63],"uniformBlock":[0]},{"shaders":[124,79],"uniformBlock":[0]},{"shaders":[129,286],"uniformBlock":[0]},{"shaders":[165,307],"uniformBlock":[0]},{"shaders":[121,286],"uniformBlock":[0]},{"shaders":[136,308],"uniformBlock":[0]},{"shaders":[178,309],"uniformBlock":[0]},{"shaders":[101,35],"uniformBlock":[0]},{"shaders":[99,53],"uniformBlock":[0]},{"shaders":[130,37],"uniformBlock":[0]},{"shaders":[134,53],"uniformBlock":[0]},{"shaders":[138,270],"uniformBlock":[0]},{"shaders":[156,309],"uniformBlock":[0]},{"shaders":[131,270],"uniformBlock":[0]},{"shaders":[145,310],"uniformBlock":[0]},{"shaders":[160,311],"uniformBlock":[0]},{"shaders":[75,13],"uniformBlock":[0]},{"shaders":[73,21],"uniformBlock":[0]},{"shaders":[139,11],"uniformBlock":[0]},{"shaders":[143,21],"uniformBlock":[0]},{"shaders":[147,276],"uniformBlock":[0]},{"shaders":[174,311],"uniformBlock":[0]},{"shaders":[140,276],"uniformBlock":[0]},{"shaders":[27,312],"uniformBlock":[0]},{"shaders":[24,312],"uniformBlock":[0]},{"shaders":[109,313],"uniformBlock":[0]},{"shaders":[14,312],"uniformBlock":[0]},{"shaders":[28,314],"uniformBlock":[0]},{"shaders":[51,314],"uniformBlock":[0]},{"shaders":[120,315],"uniformBlock":[0]},{"shaders":[42,314],"uniformBlock":[0]},{"shaders":[56,316],"uniformBlock":[0]},{"shaders":[77,316],"uniformBlock":[0]},{"shaders":[130,317],"uniformBlock":[0]},{"shaders":[68,316],"uniformBlock":[0]},{"shaders":[82,318],"uniformBlock":[0]},{"shaders":[107,318],"uniformBlock":[0]},{"shaders":[139,319],"uniformBlock":[0]},{"shaders":[94,318],"uniformBlock":[0]},{"shaders":[105,312],"uniformBlock":[0]},{"shaders":[47,312],"uniformBlock":[0]},{"shaders":[2,313],"uniformBlock":[0]},{"shaders":[113,312],"uniformBlock":[0]},{"shaders":[78,314],"uniformBlock":[0]},{"shaders":[0,314],"uniformBlock":[0]},{"shaders":[50,315],"uniformBlock":[0]},{"shaders":[124,314],"uniformBlock":[0]},{"shaders":[52,316],"uniformBlock":[0]},{"shaders":[99,316],"uniformBlock":[0]},{"shaders":[76,317],"uniformBlock":[0]},{"shaders":[134,316],"uniformBlock":[0]},{"shaders":[20,318],"uniformBlock":[0]},{"shaders":[73,318],"uniformBlock":[0]},{"shaders":[102,319],"uniformBlock":[0]},{"shaders":[143,318],"uniformBlock":[0]},{"shaders":[18,320],"uniformBlock":[0]},{"shaders":[122,321],"uniformBlock":[0]},{"shaders":[22,61],"uniformBlock":[0]},{"shaders":[128,63],"uniformBlock":[0]},{"shaders":[43,322],"uniformBlock":[0]},{"shaders":[111,323],"uniformBlock":[0]},{"shaders":[54,87],"uniformBlock":[0]},{"shaders":[117,89],"uniformBlock":[0]},{"shaders":[69,324],"uniformBlock":[0]},{"shaders":[141,325],"uniformBlock":[0]},{"shaders":[80,13],"uniformBlock":[0]},{"shaders":[146,11],"uniformBlock":[0]},{"shaders":[95,326],"uniformBlock":[0]},{"shaders":[132,327],"uniformBlock":[0]},{"shaders":[104,35],"uniformBlock":[0]},{"shaders":[137,37],"uniformBlock":[0]},{"shaders":[112,320],"uniformBlock":[0]},{"shaders":[45,321],"uniformBlock":[0]},{"shaders":[118,61],"uniformBlock":[0]},{"shaders":[55,63],"uniformBlock":[0]},{"shaders":[123,322],"uniformBlock":[0]},{"shaders":[16,323],"uniformBlock":[0]},{"shaders":[129,87],"uniformBlock":[0]},{"shaders":[23,89],"uniformBlock":[0]},{"shaders":[133,324],"uniformBlock":[0]},{"shaders":[97,325],"uniformBlock":[0]},{"shaders":[138,13],"uniformBlock":[0]},{"shaders":[103,11],"uniformBlock":[0]},{"shaders":[142,326],"uniformBlock":[0]},{"shaders":[71,327],"uniformBlock":[0]},{"shaders":[147,35],"uniformBlock":[0]},{"shaders":[81,37],"uniformBlock":[0]},{"shaders":[85,149],"uniformBlock":[0]},{"shaders":[97,328],"uniformBlock":[0]},{"shaders":[135,161],"uniformBlock":[0]},{"shaders":[329,330],"uniformBlock":[0]},{"shaders":[59,167],"uniformBlock":[0]},{"shaders":[71,331],"uniformBlock":[0]},{"shaders":[144,179],"uniformBlock":[0]},{"shaders":[332,333],"uniformBlock":[0]},{"shaders":[32,185],"uniformBlock":[0]},{"shaders":[45,334],"uniformBlock":[0]},{"shaders":[114,194],"uniformBlock":[0]},{"shaders":[335,336],"uniformBlock":[0]},{"shaders":[26,199],"uniformBlock":[0]},{"shaders":[16,337],"uniformBlock":[0]},{"shaders":[125,208],"uniformBlock":[0]},{"shaders":[338,339],"uniformBlock":[0]},{"shaders":[10,149],"uniformBlock":[0]},{"shaders":[141,328],"uniformBlock":[0]},{"shaders":[66,161],"uniformBlock":[0]},{"shaders":[340,330],"uniformBlock":[0]},{"shaders":[36,167],"uniformBlock":[0]},{"shaders":[132,331],"uniformBlock":[0]},{"shaders":[92,179],"uniformBlock":[0]},{"shaders":[341,333],"uniformBlock":[0]},{"shaders":[62,185],"uniformBlock":[0]},{"shaders":[122,334],"uniformBlock":[0]},{"shaders":[6,194],"uniformBlock":[0]},{"shaders":[342,336],"uniformBlock":[0]},{"shaders":[88,199],"uniformBlock":[0]},{"shaders":[111,337],"uniformBlock":[0]},{"shaders":[40,208],"uniformBlock":[0]},{"shaders":[343,339],"uniformBlock":[0]},{"shaders":[135,311],"uniformBlock":[0]},{"shaders":[329,344],"uniformBlock":[0]},{"shaders":[144,309],"uniformBlock":[0]},{"shaders":[332,345],"uniformBlock":[0]},{"shaders":[114,307],"uniformBlock":[0]},{"shaders":[335,346],"uniformBlock":[0]},{"shaders":[125,305],"uniformBlock":[0]},{"shaders":[338,347],"uniformBlock":[0]},{"shaders":[66,311],"uniformBlock":[0]},{"shaders":[340,344],"uniformBlock":[0]},{"shaders":[92,309],"uniformBlock":[0]},{"shaders":[341,345],"uniformBlock":[0]},{"shaders":[6,307],"uniformBlock":[0]},{"shaders":[342,346],"uniformBlock":[0]},{"shaders":[40,305],"uniformBlock":[0]},{"shaders":[343,347],"uniformBlock":[0]},{"shaders":[85,319],"uniformBlock":[0]},{"shaders":[97,348],"uniformBlock":[0]},{"shaders":[103,319],"uniformBlock":[0]},{"shaders":[342,349],"uniformBlock":[0]},{"shaders":[135,175],"uniformBlock":[0]},{"shaders":[329,350],"uniformBlock":[0]},{"shaders":[59,317],"uniformBlock":[0]},{"shaders":[71,351],"uniformBlock":[0]},{"shaders":[81,317],"uniformBlock":[0]},{"shaders":[343,352],"uniformBlock":[0]},{"shaders":[144,157],"uniformBlock":[0]},{"shaders":[332,353],"uniformBlock":[0]},{"shaders":[32,315],"uniformBlock":[0]},{"shaders":[45,354],"uniformBlock":[0]},{"shaders":[55,315],"uniformBlock":[0]},{"shaders":[340,355],"uniformBlock":[0]},{"shaders":[114,205],"uniformBlock":[0]},{"shaders":[335,356],"uniformBlock":[0]},{"shaders":[26,313],"uniformBlock":[0]},{"shaders":[16,357],"uniformBlock":[0]},{"shaders":[23,313],"uniformBlock":[0]},{"shaders":[341,358],"uniformBlock":[0]},{"shaders":[125,191],"uniformBlock":[0]},{"shaders":[338,359],"uniformBlock":[0]},{"shaders":[10,319],"uniformBlock":[0]},{"shaders":[141,348],"uniformBlock":[0]},{"shaders":[146,319],"uniformBlock":[0]},{"shaders":[335,349],"uniformBlock":[0]},{"shaders":[66,175],"uniformBlock":[0]},{"shaders":[340,350],"uniformBlock":[0]},{"shaders":[36,317],"uniformBlock":[0]},{"shaders":[132,351],"uniformBlock":[0]},{"shaders":[137,317],"uniformBlock":[0]},{"shaders":[338,352],"uniformBlock":[0]},{"shaders":[92,157],"uniformBlock":[0]},{"shaders":[341,353],"uniformBlock":[0]},{"shaders":[62,315],"uniformBlock":[0]},{"shaders":[122,354],"uniformBlock":[0]},{"shaders":[128,315],"uniformBlock":[0]},{"shaders":[329,355],"uniformBlock":[0]},{"shaders":[6,205],"uniformBlock":[0]},{"shaders":[342,356],"uniformBlock":[0]},{"shaders":[88,313],"uniformBlock":[0]},{"shaders":[111,357],"uniformBlock":[0]},{"shaders":[117,313],"uniformBlock":[0]},{"shaders":[332,358],"uniformBlock":[0]},{"shaders":[40,191],"uniformBlock":[0]},{"shaders":[343,359],"uniformBlock":[0]},{"shaders":[329,360],"uniformBlock":[0]},{"shaders":[214,230],"uniformBlock":[0]},{"shaders":[217,230],"uniformBlock":[0]},{"shaders":[332,361],"uniformBlock":[0]},{"shaders":[218,242],"uniformBlock":[0]},{"shaders":[213,242],"uniformBlock":[0]},{"shaders":[335,362],"uniformBlock":[0]},{"shaders":[212,254],"uniformBlock":[0]},{"shaders":[215,254],"uniformBlock":[0]},{"shaders":[338,363],"uniformBlock":[0]},{"shaders":[216,266],"uniformBlock":[0]},{"shaders":[219,266],"uniformBlock":[0]},{"shaders":[340,360],"uniformBlock":[0]},{"shaders":[160,230],"uniformBlock":[0]},{"shaders":[174,230],"uniformBlock":[0]},{"shaders":[341,361],"uniformBlock":[0]},{"shaders":[178,242],"uniformBlock":[0]},{"shaders":[156,242],"uniformBlock":[0]},{"shaders":[342,362],"uniformBlock":[0]},{"shaders":[151,254],"uniformBlock":[0]},{"shaders":[165,254],"uniformBlock":[0]},{"shaders":[343,363],"uniformBlock":[0]},{"shaders":[169,266],"uniformBlock":[0]},{"shaders":[183,266],"uniformBlock":[0]},{"shaders":[135,280],"uniformBlock":[0]},{"shaders":[329,364],"uniformBlock":[0]},{"shaders":[144,288],"uniformBlock":[0]},{"shaders":[332,365],"uniformBlock":[0]},{"shaders":[114,268],"uniformBlock":[0]},{"shaders":[335,366],"uniformBlock":[0]},{"shaders":[125,274],"uniformBlock":[0]},{"shaders":[338,367],"uniformBlock":[0]},{"shaders":[66,280],"uniformBlock":[0]},{"shaders":[340,364],"uniformBlock":[0]},{"shaders":[92,288],"uniformBlock":[0]},{"shaders":[341,365],"uniformBlock":[0]},{"shaders":[6,268],"uniformBlock":[0]},{"shaders":[342,366],"uniformBlock":[0]},{"shaders":[40,274],"uniformBlock":[0]},{"shaders":[343,367],"uniformBlock":[0]},{"shaders":[135,368],"uniformBlock":[0]},{"shaders":[214,368],"uniformBlock":[0]},{"shaders":[217,368],"uniformBlock":[0]},{"shaders":[144,369],"uniformBlock":[0]},{"shaders":[218,369],"uniformBlock":[0]},{"shaders":[213,369],"uniformBlock":[0]},{"shaders":[114,370],"uniformBlock":[0]},{"shaders":[212,370],"uniformBlock":[0]},{"shaders":[215,370],"uniformBlock":[0]},{"shaders":[125,371],"uniformBlock":[0]},{"shaders":[216,371],"uniformBlock":[0]},{"shaders":[219,371],"uniformBlock":[0]},{"shaders":[66,368],"uniformBlock":[0]},{"shaders":[160,368],"uniformBlock":[0]},{"shaders":[174,368],"uniformBlock":[0]},{"shaders":[92,369],"uniformBlock":[0]},{"shaders":[178,369],"uniformBlock":[0]},{"shaders":[156,369],"uniformBlock":[0]},{"shaders":[6,370],"uniformBlock":[0]},{"shaders":[151,370],"uniformBlock":[0]},{"shaders":[165,370],"uniformBlock":[0]},{"shaders":[40,371],"uniformBlock":[0]},{"shaders":[169,371],"uniformBlock":[0]},{"shaders":[183,371],"uniformBlock":[0]},{"shaders":[329,372],"uniformBlock":[0]},{"shaders":[214,67],"uniformBlock":[0]},{"shaders":[217,67],"uniformBlock":[0]},{"shaders":[332,373],"uniformBlock":[0]},{"shaders":[218,93],"uniformBlock":[0]},{"shaders":[213,93],"uniformBlock":[0]},{"shaders":[335,374],"uniformBlock":[0]},{"shaders":[212,7],"uniformBlock":[0]},{"shaders":[215,7],"uniformBlock":[0]},{"shaders":[338,375],"uniformBlock":[0]},{"shaders":[216,41],"uniformBlock":[0]},{"shaders":[219,41],"uniformBlock":[0]},{"shaders":[340,372],"uniformBlock":[0]},{"shaders":[160,67],"uniformBlock":[0]},{"shaders":[174,67],"uniformBlock":[0]},{"shaders":[341,373],"uniformBlock":[0]},{"shaders":[178,93],"uniformBlock":[0]},{"shaders":[156,93],"uniformBlock":[0]},{"shaders":[342,374],"uniformBlock":[0]},{"shaders":[151,7],"uniformBlock":[0]},{"shaders":[165,7],"uniformBlock":[0]},{"shaders":[343,375],"uniformBlock":[0]},{"shaders":[169,41],"uniformBlock":[0]},{"shaders":[183,41],"uniformBlock":[0]},{"shaders":[85,190],"uniformBlock":[0]},{"shaders":[97,376],"uniformBlock":[0]},{"shaders":[135,187],"uniformBlock":[0]},{"shaders":[329,377],"uniformBlock":[0]},{"shaders":[59,204],"uniformBlock":[0]},{"shaders":[71,378],"uniformBlock":[0]},{"shaders":[144,201],"uniformBlock":[0]},{"shaders":[332,379],"uniformBlock":[0]},{"shaders":[32,155],"uniformBlock":[0]},{"shaders":[45,380],"uniformBlock":[0]},{"shaders":[114,152],"uniformBlock":[0]},{"shaders":[335,381],"uniformBlock":[0]},{"shaders":[26,173],"uniformBlock":[0]},{"shaders":[16,382],"uniformBlock":[0]},{"shaders":[125,170],"uniformBlock":[0]},{"shaders":[338,383],"uniformBlock":[0]},{"shaders":[10,190],"uniformBlock":[0]},{"shaders":[141,376],"uniformBlock":[0]},{"shaders":[66,187],"uniformBlock":[0]},{"shaders":[340,377],"uniformBlock":[0]},{"shaders":[36,204],"uniformBlock":[0]},{"shaders":[132,378],"uniformBlock":[0]},{"shaders":[92,201],"uniformBlock":[0]},{"shaders":[341,379],"uniformBlock":[0]},{"shaders":[62,155],"uniformBlock":[0]},{"shaders":[122,380],"uniformBlock":[0]},{"shaders":[6,152],"uniformBlock":[0]},{"shaders":[342,381],"uniformBlock":[0]},{"shaders":[88,173],"uniformBlock":[0]},{"shaders":[111,382],"uniformBlock":[0]},{"shaders":[40,170],"uniformBlock":[0]},{"shaders":[343,383],"uniformBlock":[0]},{"shaders":[384,385],"uniformBlock":[1]},{"shaders":[386,387],"uniformBlock":[1]},{"shaders":[388,389],"uniformBlock":[1]},{"shaders":[390,391],"uniformBlock":[1]},{"shaders":[392,393],"uniformBlock":[1]},{"shaders":[394,395],"uniformBlock":[1]},{"shaders":[396,397],"uniformBlock":[1]},{"shaders":[398,399],"uniformBlock":[1]},{"shaders":[400,401],"uniformBlock":[1]},{"shaders":[402,403],"uniformBlock":[1]},{"shaders":[404,405],"uniformBlock":[1]},{"shaders":[390,406],"uniformBlock":[1]},{"shaders":[407,408],"uniformBlock":[1]},{"shaders":[400,409],"uniformBlock":[1]},{"shaders":[410,411],"uniformBlock":[1]},{"shaders":[412,413],"uniformBlock":[1]},{"shaders":[414,415],"uniformBlock":[1]},{"shaders":[416,417],"uniformBlock":[1]},{"shaders":[418,419],"uniformBlock":[1]},{"shaders":[420,421],"uniformBlock":[1]},{"shaders":[394,403],"uniformBlock":[1]},{"shaders":[422,401],"uniformBlock":[1]},{"shaders":[423,399],"uniformBlock":[1]},{"shaders":[424,391],"uniformBlock":[1]},{"shaders":[425,389],"uniformBlock":[1]},{"shaders":[426,393],"uniformBlock":[1]},{"shaders":[402,395],"uniformBlock":[1]},{"shaders":[427,397],"uniformBlock":[1]},{"shaders":[428,387],"uniformBlock":[1]},{"shaders":[429,385],"uniformBlock":[1]},{"shaders":[414,405],"uniformBlock":[1]},{"shaders":[424,406],"uniformBlock":[1]},{"shaders":[430,408],"uniformBlock":[1]},{"shaders":[422,409],"uniformBlock":[1]},{"shaders":[431,411],"uniformBlock":[1]},{"shaders":[432,413],"uniformBlock":[1]},{"shaders":[404,415],"uniformBlock":[1]},{"shaders":[433,417],"uniformBlock":[1]},{"shaders":[434,419],"uniformBlock":[1]},{"shaders":[435,421],"uniformBlock":[1]},{"shaders":[390,436],"uniformBlock":[1]},{"shaders":[400,437],"uniformBlock":[1]},{"shaders":[398,438],"uniformBlock":[1]},{"shaders":[388,439],"uniformBlock":[1]},{"shaders":[396,440],"uniformBlock":[1]},{"shaders":[392,441],"uniformBlock":[1]},{"shaders":[412,442],"uniformBlock":[1]},{"shaders":[410,443],"uniformBlock":[1]},{"shaders":[386,444],"uniformBlock":[1]},{"shaders":[384,445],"uniformBlock":[1]},{"shaders":[418,446],"uniformBlock":[1]},{"shaders":[390,447],"uniformBlock":[1]},{"shaders":[407,448],"uniformBlock":[1]},{"shaders":[400,449],"uniformBlock":[1]},{"shaders":[412,450],"uniformBlock":[1]},{"shaders":[416,451],"uniformBlock":[1]},{"shaders":[410,452],"uniformBlock":[1]},{"shaders":[392,453],"uniformBlock":[1]},{"shaders":[388,454],"uniformBlock":[1]},{"shaders":[418,455],"uniformBlock":[1]},{"shaders":[420,456],"uniformBlock":[1]},{"shaders":[386,457],"uniformBlock":[1]},{"shaders":[422,437],"uniformBlock":[1]},{"shaders":[423,438],"uniformBlock":[1]},{"shaders":[424,436],"uniformBlock":[1]},{"shaders":[426,441],"uniformBlock":[1]},{"shaders":[427,440],"uniformBlock":[1]},{"shaders":[425,439],"uniformBlock":[1]},{"shaders":[432,442],"uniformBlock":[1]},{"shaders":[431,443],"uniformBlock":[1]},{"shaders":[428,444],"uniformBlock":[1]},{"shaders":[429,445],"uniformBlock":[1]},{"shaders":[434,446],"uniformBlock":[1]},{"shaders":[424,447],"uniformBlock":[1]},{"shaders":[430,448],"uniformBlock":[1]},{"shaders":[422,449],"uniformBlock":[1]},{"shaders":[432,450],"uniformBlock":[1]},{"shaders":[433,451],"uniformBlock":[1]},{"shaders":[431,452],"uniformBlock":[1]},{"shaders":[426,453],"uniformBlock":[1]},{"shaders":[425,454],"uniformBlock":[1]},{"shaders":[434,455],"uniformBlock":[1]},{"shaders":[435,456],"uniformBlock":[1]},{"shaders":[428,457],"uniformBlock":[1]},{"shaders":[431,458],"uniformBlock":[1]},{"shaders":[434,459],"uniformBlock":[1]},{"shaders":[432,460],"uniformBlock":[1]},{"shaders":[425,461],"uniformBlock":[1]},{"shaders":[428,462],"uniformBlock":[1]},{"shaders":[426,463],"uniformBlock":[1]},{"shaders":[410,458],"uniformBlock":[1]},{"shaders":[418,459],"uniformBlock":[1]},{"shaders":[412,460],"uniformBlock":[1]},{"shaders":[388,461],"uniformBlock":[1]},{"shaders":[386,462],"uniformBlock":[1]},{"shaders":[392,463],"uniformBlock":[1]},{"shaders":[384,464],"uniformBlock":[1]},{"shaders":[396,465],"uniformBlock":[1]},{"shaders":[420,466],"uniformBlock":[1]},{"shaders":[416,467],"uniformBlock":[1]},{"shaders":[429,464],"uniformBlock":[1]},{"shaders":[427,465],"uniformBlock":[1]},{"shaders":[435,466],"uniformBlock":[1]},{"shaders":[433,467],"uniformBlock":[1]},{"shaders":[384,468],"uniformBlock":[1]},{"shaders":[396,469],"uniformBlock":[1]},{"shaders":[420,470],"uniformBlock":[1]},{"shaders":[416,471],"uniformBlock":[1]},{"shaders":[429,468],"uniformBlock":[1]},{"shaders":[427,469],"uniformBlock":[1]},{"shaders":[435,470],"uniformBlock":[1]},{"shaders":[433,471],"uniformBlock":[1]},{"shaders":[394,472],"uniformBlock":[1]},{"shaders":[414,473],"uniformBlock":[1]},{"shaders":[402,472],"uniformBlock":[1]},{"shaders":[404,473],"uniformBlock":[1]},{"shaders":[430,474],"uniformBlock":[1]},{"shaders":[404,475],"uniformBlock":[1]},{"shaders":[423,476],"uniformBlock":[1]},{"shaders":[402,477],"uniformBlock":[1]},{"shaders":[407,474],"uniformBlock":[1]},{"shaders":[414,475],"uniformBlock":[1]},{"shaders":[398,476],"uniformBlock":[1]},{"shaders":[394,477],"uniformBlock":[1]},{"shaders":[430,478],"uniformBlock":[1]},{"shaders":[423,479],"uniformBlock":[1]},{"shaders":[407,478],"uniformBlock":[1]},{"shaders":[398,479],"uniformBlock":[1]}],"shaders":["#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _756 = int(a_boneIndex.x) * 3;\n    int _761 = _756 + 1;\n    int _765 = _756 + 2;\n    int _807 = int(a_boneIndex.y) * 3;\n    int _812 = _807 + 1;\n    int _816 = _807 + 2;\n    int _858 = int(a_boneIndex.z) * 3;\n    int _863 = _858 + 1;\n    int _867 = _858 + 2;\n    int _909 = int(a_boneIndex.w) * 3;\n    int _914 = _909 + 1;\n    int _918 = _909 + 2;\n    mat4 _653 = mat4(vec4(u_boneOffsetMatrix[_756].xyz, 0.0), vec4(u_boneOffsetMatrix[_761].xyz, 0.0), vec4(u_boneOffsetMatrix[_765].xyz, 0.0), vec4(u_boneOffsetMatrix[_756].w, u_boneOffsetMatrix[_761].w, u_boneOffsetMatrix[_765].w, 1.0)) * a_boneWeight.x;\n    mat4 _657 = mat4(vec4(u_boneOffsetMatrix[_807].xyz, 0.0), vec4(u_boneOffsetMatrix[_812].xyz, 0.0), vec4(u_boneOffsetMatrix[_816].xyz, 0.0), vec4(u_boneOffsetMatrix[_807].w, u_boneOffsetMatrix[_812].w, u_boneOffsetMatrix[_816].w, 1.0)) * a_boneWeight.y;\n    mat4 _675 = mat4(vec4(u_boneOffsetMatrix[_858].xyz, 0.0), vec4(u_boneOffsetMatrix[_863].xyz, 0.0), vec4(u_boneOffsetMatrix[_867].xyz, 0.0), vec4(u_boneOffsetMatrix[_858].w, u_boneOffsetMatrix[_863].w, u_boneOffsetMatrix[_867].w, 1.0)) * a_boneWeight.z;\n    mat4 _693 = mat4(vec4(u_boneOffsetMatrix[_909].xyz, 0.0), vec4(u_boneOffsetMatrix[_914].xyz, 0.0), vec4(u_boneOffsetMatrix[_918].xyz, 0.0), vec4(u_boneOffsetMatrix[_909].w, u_boneOffsetMatrix[_914].w, u_boneOffsetMatrix[_918].w, 1.0)) * a_boneWeight.w;\n    mat4 _711 = u_bindTargetWorldInverse * mat4(((_653[0] + _657[0]) + _675[0]) + _693[0], ((_653[1] + _657[1]) + _675[1]) + _693[1], ((_653[2] + _657[2]) + _675[2]) + _693[2], ((_653[3] + _657[3]) + _675[3]) + _693[3]);\n    vec4 _956 = u_world * (_711 * a_position);\n    gl_Position = u_projection * (u_view * _956);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _956.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_711[0].xyz, _711[1].xyz, _711[2].xyz) * a_normal));\n    varying_positionCamera_Fog = (u_view * vec4(_956.xyz, 1.0)).xyz;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _381 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _389 = (_381 * _Color) * _AlbedoIntensity;\n    highp vec3 _392 = normalize(varying_LightDir);\n    highp vec3 _398 = normalize(varying_WorldNormal);\n    highp vec4 _420 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _439 = vec4(_389.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_392, _398))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _392), _398)), _Shininess * 128.0)) * (_420.xyz * _SpecColor.xyz))), _389.w);\n    highp vec4 _445 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _500 = length(varying_positionCamera_Fog);\n    highp float _582 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _582 = (u_fogInfos.z - _500) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _583 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _583 = 1.0 / pow(2.7182800769805908203125, _500 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _584 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _584 = 1.0 / pow(2.7182800769805908203125, ((_500 * _500) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _584 = 1.0;\n            }\n            _583 = _584;\n        }\n        _582 = _583;\n    }\n    highp float _546 = clamp(_582, 0.0, 1.0);\n    highp vec3 _555 = ((_439.xyz + (_EmissionColor.xyz * _445.x)).xyz * _546) + (u_fogColor * (1.0 - _546));\n    gl_FragData[0] = vec4(_555.x, _555.y, _555.z, _439.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _852 = int(a_boneIndex.x) * 3;\n    int _857 = _852 + 1;\n    int _861 = _852 + 2;\n    int _903 = int(a_boneIndex.y) * 3;\n    int _908 = _903 + 1;\n    int _912 = _903 + 2;\n    int _954 = int(a_boneIndex.z) * 3;\n    int _959 = _954 + 1;\n    int _963 = _954 + 2;\n    int _1005 = int(a_boneIndex.w) * 3;\n    int _1010 = _1005 + 1;\n    int _1014 = _1005 + 2;\n    mat4 _753 = mat4(vec4(u_boneOffsetMatrix[_852].xyz, 0.0), vec4(u_boneOffsetMatrix[_857].xyz, 0.0), vec4(u_boneOffsetMatrix[_861].xyz, 0.0), vec4(u_boneOffsetMatrix[_852].w, u_boneOffsetMatrix[_857].w, u_boneOffsetMatrix[_861].w, 1.0)) * a_boneWeight.x;\n    mat4 _757 = mat4(vec4(u_boneOffsetMatrix[_903].xyz, 0.0), vec4(u_boneOffsetMatrix[_908].xyz, 0.0), vec4(u_boneOffsetMatrix[_912].xyz, 0.0), vec4(u_boneOffsetMatrix[_903].w, u_boneOffsetMatrix[_908].w, u_boneOffsetMatrix[_912].w, 1.0)) * a_boneWeight.y;\n    mat4 _775 = mat4(vec4(u_boneOffsetMatrix[_954].xyz, 0.0), vec4(u_boneOffsetMatrix[_959].xyz, 0.0), vec4(u_boneOffsetMatrix[_963].xyz, 0.0), vec4(u_boneOffsetMatrix[_954].w, u_boneOffsetMatrix[_959].w, u_boneOffsetMatrix[_963].w, 1.0)) * a_boneWeight.z;\n    mat4 _793 = mat4(vec4(u_boneOffsetMatrix[_1005].xyz, 0.0), vec4(u_boneOffsetMatrix[_1010].xyz, 0.0), vec4(u_boneOffsetMatrix[_1014].xyz, 0.0), vec4(u_boneOffsetMatrix[_1005].w, u_boneOffsetMatrix[_1010].w, u_boneOffsetMatrix[_1014].w, 1.0)) * a_boneWeight.w;\n    vec4 _797 = ((_753[0] + _757[0]) + _775[0]) + _793[0];\n    vec4 _800 = ((_753[1] + _757[1]) + _775[1]) + _793[1];\n    vec4 _803 = ((_753[2] + _757[2]) + _775[2]) + _793[2];\n    mat3 _815 = mat3(_797.xyz, _800.xyz, _803.xyz);\n    vec4 _1052 = u_world * (mat4(_797, _800, _803, ((_753[3] + _757[3]) + _775[3]) + _793[3]) * a_position);\n    mat3 _1072 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1075 = normalize(_1072 * (_815 * a_normal));\n    vec3 _1089 = normalize(_1072 * (_815 * a_tangent.xyz).xyz);\n    mat3 _640 = mat3(_1089, cross(_1089, _1075) * a_tangent.w, _1075);\n    gl_Position = u_projection * (u_view * _1052);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _640 * u_lightDir;\n    varying_ViewDir = _640 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1052.xyz);\n    varying_WorldNormal = _1075;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_1052.xyz, 1.0)).xyz;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _463 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _471 = (_463 * _Color) * _AlbedoIntensity;\n    highp float _473 = _471.w;\n    if ((_473 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _494 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _555 = (_494.xy - vec2(0.5)) * 2.0;\n    highp vec4 _511 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _513 = _511.xyz * 2.0;\n    highp vec4 _537 = vec4(_471.xyz * (min(_513, mix(max(_513, u_shadowColor), _513, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_555, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_555, _555)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _463.w))), _473);\n    highp float _639 = length(varying_positionCamera_Fog);\n    highp float _726 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _726 = (u_fogInfos.z - _639) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _727 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _727 = 1.0 / pow(2.7182800769805908203125, _639 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _728 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _728 = 1.0 / pow(2.7182800769805908203125, ((_639 * _639) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _728 = 1.0;\n            }\n            _727 = _728;\n        }\n        _726 = _727;\n    }\n    highp float _685 = clamp(_726, 0.0, 1.0);\n    highp vec3 _694 = (_537.xyz * _685) + (u_fogColor * (1.0 - _685));\n    gl_FragData[0] = vec4(_694.x, _694.y, _694.z, _537.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _728 = int(a_boneIndex.x) * 3;\n    int _733 = _728 + 1;\n    int _737 = _728 + 2;\n    int _779 = int(a_boneIndex.y) * 3;\n    int _784 = _779 + 1;\n    int _788 = _779 + 2;\n    int _830 = int(a_boneIndex.z) * 3;\n    int _835 = _830 + 1;\n    int _839 = _830 + 2;\n    int _881 = int(a_boneIndex.w) * 3;\n    int _886 = _881 + 1;\n    int _890 = _881 + 2;\n    mat4 _629 = mat4(vec4(u_boneOffsetMatrix[_728].xyz, 0.0), vec4(u_boneOffsetMatrix[_733].xyz, 0.0), vec4(u_boneOffsetMatrix[_737].xyz, 0.0), vec4(u_boneOffsetMatrix[_728].w, u_boneOffsetMatrix[_733].w, u_boneOffsetMatrix[_737].w, 1.0)) * a_boneWeight.x;\n    mat4 _633 = mat4(vec4(u_boneOffsetMatrix[_779].xyz, 0.0), vec4(u_boneOffsetMatrix[_784].xyz, 0.0), vec4(u_boneOffsetMatrix[_788].xyz, 0.0), vec4(u_boneOffsetMatrix[_779].w, u_boneOffsetMatrix[_784].w, u_boneOffsetMatrix[_788].w, 1.0)) * a_boneWeight.y;\n    mat4 _651 = mat4(vec4(u_boneOffsetMatrix[_830].xyz, 0.0), vec4(u_boneOffsetMatrix[_835].xyz, 0.0), vec4(u_boneOffsetMatrix[_839].xyz, 0.0), vec4(u_boneOffsetMatrix[_830].w, u_boneOffsetMatrix[_835].w, u_boneOffsetMatrix[_839].w, 1.0)) * a_boneWeight.z;\n    mat4 _669 = mat4(vec4(u_boneOffsetMatrix[_881].xyz, 0.0), vec4(u_boneOffsetMatrix[_886].xyz, 0.0), vec4(u_boneOffsetMatrix[_890].xyz, 0.0), vec4(u_boneOffsetMatrix[_881].w, u_boneOffsetMatrix[_886].w, u_boneOffsetMatrix[_890].w, 1.0)) * a_boneWeight.w;\n    vec4 _673 = ((_629[0] + _633[0]) + _651[0]) + _669[0];\n    vec4 _676 = ((_629[1] + _633[1]) + _651[1]) + _669[1];\n    vec4 _679 = ((_629[2] + _633[2]) + _651[2]) + _669[2];\n    vec4 _928 = u_world * (mat4(_673, _676, _679, ((_629[3] + _633[3]) + _651[3]) + _669[3]) * a_position);\n    vec3 _537 = _928.xyz;\n    gl_Position = u_projection * (u_view * _928);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _537);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_673.xyz, _676.xyz, _679.xyz) * a_normal));\n    varying_ShadowPosition = _537;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _518 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _526 = (_518 * _Color) * _AlbedoIntensity;\n    highp vec3 _529 = normalize(varying_LightDir);\n    highp vec3 _535 = normalize(varying_WorldNormal);\n    highp vec4 _618 = vec4(varying_ShadowPosition, 1.0);\n    highp float _622 = -(u_view * _618).z;\n    bool _635 = true && (_622 < u_csmFarBounds.x);\n    highp float _884 = 0.0;\n    if (_635)\n    {\n        highp vec3 _650 = ((u_csmLightSpaceMatrices[0] * _618).xyz * 0.5) + vec3(0.5);\n        highp float _654 = _650.x;\n        highp float _658 = _650.y;\n        highp float _668 = (((_650.z + step(_654, 0.001000000047497451305389404296875)) + step(_658, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _654)) + step(0.999000012874603271484375, _658);\n        highp float _881 = 0.0;\n        for (int SPIRV_Cross_Dummy251 = 0; SPIRV_Cross_Dummy251 < 1; SPIRV_Cross_Dummy251++)\n        {\n            if (_668 > 1.0)\n            {\n                _881 = 1.0;\n                break;\n            }\n            highp float _719 = _668 - 0.001000000047497451305389404296875;\n            highp vec2 _725 = ((_650.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _736 = fract(_725 * vec2(2048.0));\n            highp float _791 = _736.y;\n            _881 = mix(mix(float(_719 < dot(texture2D(u_shadowMapTex, _725), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_719 < dot(texture2D(u_shadowMapTex, _725 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _791), mix(float(_719 < dot(texture2D(u_shadowMapTex, _725 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_719 < dot(texture2D(u_shadowMapTex, _725 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _791), _736.x);\n            break;\n        }\n        _884 = _881;\n    }\n    else\n    {\n        _884 = 1.0;\n    }\n    bool _1211 = _635 ? true : false;\n    bool _902 = (!_1211) && (_622 < u_csmFarBounds.y);\n    highp float _993 = 0.0;\n    if (_902)\n    {\n        highp vec3 _913 = ((u_csmLightSpaceMatrices[1] * _618).xyz * 0.5) + vec3(0.5);\n        highp float _915 = _913.x;\n        highp float _918 = _913.y;\n        highp float _926 = (((_913.z + step(_915, 0.001000000047497451305389404296875)) + step(_918, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _915)) + step(0.999000012874603271484375, _918);\n        highp float _990 = 0.0;\n        for (int SPIRV_Cross_Dummy327 = 0; SPIRV_Cross_Dummy327 < 1; SPIRV_Cross_Dummy327++)\n        {\n            if (_926 > 1.0)\n            {\n                _990 = 1.0;\n                break;\n            }\n            highp float _944 = _926 - 0.001000000047497451305389404296875;\n            highp vec2 _948 = ((_913.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _955 = fract(_948 * vec2(2048.0));\n            highp float _983 = _955.y;\n            _990 = mix(mix(float(_944 < dot(texture2D(u_shadowMapTex, _948), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_944 < dot(texture2D(u_shadowMapTex, _948 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _983), mix(float(_944 < dot(texture2D(u_shadowMapTex, _948 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_944 < dot(texture2D(u_shadowMapTex, _948 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _983), _955.x);\n            break;\n        }\n        _993 = _990;\n    }\n    else\n    {\n        _993 = _884;\n    }\n    bool _1212 = _902 ? true : _1211;\n    bool _1007 = (!_1212) && (_622 < u_csmFarBounds.z);\n    highp float _1098 = 0.0;\n    if (_1007)\n    {\n        highp vec3 _1018 = ((u_csmLightSpaceMatrices[2] * _618).xyz * 0.5) + vec3(0.5);\n        highp float _1020 = _1018.x;\n        highp float _1023 = _1018.y;\n        highp float _1031 = (((_1018.z + step(_1020, 0.001000000047497451305389404296875)) + step(_1023, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1020)) + step(0.999000012874603271484375, _1023);\n        highp float _1095 = 0.0;\n        for (int SPIRV_Cross_Dummy403 = 0; SPIRV_Cross_Dummy403 < 1; SPIRV_Cross_Dummy403++)\n        {\n            if (_1031 > 1.0)\n            {\n                _1095 = 1.0;\n                break;\n            }\n            highp float _1049 = _1031 - 0.001000000047497451305389404296875;\n            highp vec2 _1053 = ((_1018.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1060 = fract(_1053 * vec2(2048.0));\n            highp float _1088 = _1060.y;\n            _1095 = mix(mix(float(_1049 < dot(texture2D(u_shadowMapTex, _1053), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1049 < dot(texture2D(u_shadowMapTex, _1053 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1088), mix(float(_1049 < dot(texture2D(u_shadowMapTex, _1053 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1049 < dot(texture2D(u_shadowMapTex, _1053 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1088), _1060.x);\n            break;\n        }\n        _1098 = _1095;\n    }\n    else\n    {\n        _1098 = _993;\n    }\n    highp float _1203 = 0.0;\n    if ((!(_1007 ? true : _1212)) && (_622 < u_csmFarBounds.w))\n    {\n        highp vec3 _1123 = ((u_csmLightSpaceMatrices[3] * _618).xyz * 0.5) + vec3(0.5);\n        highp float _1125 = _1123.x;\n        highp float _1128 = _1123.y;\n        highp float _1136 = (((_1123.z + step(_1125, 0.001000000047497451305389404296875)) + step(_1128, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1125)) + step(0.999000012874603271484375, _1128);\n        highp float _1200 = 0.0;\n        for (int SPIRV_Cross_Dummy473 = 0; SPIRV_Cross_Dummy473 < 1; SPIRV_Cross_Dummy473++)\n        {\n            if (_1136 > 1.0)\n            {\n                _1200 = 1.0;\n                break;\n            }\n            highp float _1154 = _1136 - 0.001000000047497451305389404296875;\n            highp vec2 _1158 = ((_1123.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1165 = fract(_1158 * vec2(2048.0));\n            highp float _1193 = _1165.y;\n            _1200 = mix(mix(float(_1154 < dot(texture2D(u_shadowMapTex, _1158), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1154 < dot(texture2D(u_shadowMapTex, _1158 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1193), mix(float(_1154 < dot(texture2D(u_shadowMapTex, _1158 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1154 < dot(texture2D(u_shadowMapTex, _1158 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1193), _1165.x);\n            break;\n        }\n        _1203 = _1200;\n    }\n    else\n    {\n        _1203 = _1098;\n    }\n    gl_FragData[0] = vec4(_526.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_529, _535))) * _1203)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _529), _535)), _Shininess * 128.0)) * (_SpecColor.xyz * _518.w))), _526.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    float _897 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _903 = (3.0 * (_897 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _906 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _910 = floor(_903 * _906);\n    float _916 = _903 - (_910 * u_skinnedAnimationMapInfo.x);\n    float _921 = (_910 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _931 = texture2D(u_skinnedAnimationMap, vec2((_916 + 0.5) * _906, _921));\n    vec4 _941 = texture2D(u_skinnedAnimationMap, vec2((_916 + 1.5) * _906, _921));\n    vec4 _951 = texture2D(u_skinnedAnimationMap, vec2((_916 + 2.5) * _906, _921));\n    float _1002 = (3.0 * (_897 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _1009 = floor(_1002 * _906);\n    float _1015 = _1002 - (_1009 * u_skinnedAnimationMapInfo.x);\n    float _1020 = (_1009 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1030 = texture2D(u_skinnedAnimationMap, vec2((_1015 + 0.5) * _906, _1020));\n    vec4 _1040 = texture2D(u_skinnedAnimationMap, vec2((_1015 + 1.5) * _906, _1020));\n    vec4 _1050 = texture2D(u_skinnedAnimationMap, vec2((_1015 + 2.5) * _906, _1020));\n    float _1101 = (3.0 * (_897 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1108 = floor(_1101 * _906);\n    float _1114 = _1101 - (_1108 * u_skinnedAnimationMapInfo.x);\n    float _1119 = (_1108 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1129 = texture2D(u_skinnedAnimationMap, vec2((_1114 + 0.5) * _906, _1119));\n    vec4 _1139 = texture2D(u_skinnedAnimationMap, vec2((_1114 + 1.5) * _906, _1119));\n    vec4 _1149 = texture2D(u_skinnedAnimationMap, vec2((_1114 + 2.5) * _906, _1119));\n    float _1200 = (3.0 * (_897 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1207 = floor(_1200 * _906);\n    float _1213 = _1200 - (_1207 * u_skinnedAnimationMapInfo.x);\n    float _1218 = (_1207 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1228 = texture2D(u_skinnedAnimationMap, vec2((_1213 + 0.5) * _906, _1218));\n    vec4 _1238 = texture2D(u_skinnedAnimationMap, vec2((_1213 + 1.5) * _906, _1218));\n    vec4 _1248 = texture2D(u_skinnedAnimationMap, vec2((_1213 + 2.5) * _906, _1218));\n    mat4 _793 = mat4(vec4(_931.xyz, 0.0), vec4(_941.xyz, 0.0), vec4(_951.xyz, 0.0), vec4(_931.w, _941.w, _951.w, 1.0)) * a_boneWeight.x;\n    mat4 _797 = mat4(vec4(_1030.xyz, 0.0), vec4(_1040.xyz, 0.0), vec4(_1050.xyz, 0.0), vec4(_1030.w, _1040.w, _1050.w, 1.0)) * a_boneWeight.y;\n    mat4 _815 = mat4(vec4(_1129.xyz, 0.0), vec4(_1139.xyz, 0.0), vec4(_1149.xyz, 0.0), vec4(_1129.w, _1139.w, _1149.w, 1.0)) * a_boneWeight.z;\n    mat4 _833 = mat4(vec4(_1228.xyz, 0.0), vec4(_1238.xyz, 0.0), vec4(_1248.xyz, 0.0), vec4(_1228.w, _1238.w, _1248.w, 1.0)) * a_boneWeight.w;\n    vec4 _837 = ((_793[0] + _797[0]) + _815[0]) + _833[0];\n    vec4 _840 = ((_793[1] + _797[1]) + _815[1]) + _833[1];\n    vec4 _843 = ((_793[2] + _797[2]) + _815[2]) + _833[2];\n    mat3 _855 = mat3(_837.xyz, _840.xyz, _843.xyz);\n    vec4 _1284 = u_world * (mat4(_837, _840, _843, ((_793[3] + _797[3]) + _815[3]) + _833[3]) * a_position);\n    vec3 _651 = _1284.xyz;\n    mat3 _1304 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1307 = normalize(_1304 * (_855 * a_normal));\n    vec3 _1321 = normalize(_1304 * (_855 * a_tangent.xyz).xyz);\n    mat3 _686 = mat3(_1321, cross(_1321, _1307) * a_tangent.w, _1307);\n    gl_Position = u_projection * (u_view * _1284);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _686 * u_lightDir;\n    varying_ViewDir = _686 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _651);\n    varying_WorldNormal = _1307;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_ShadowPosition = _651;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _649 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _657 = (_649 * _Color) * _AlbedoIntensity;\n    highp float _659 = _657.w;\n    if ((_659 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _680 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _755 = (_680.xy - vec2(0.5)) * 2.0;\n    highp vec4 _809 = vec4(varying_ShadowPosition, 1.0);\n    highp float _813 = -(u_view * _809).z;\n    bool _826 = true && (_813 < u_csmFarBounds.x);\n    highp float _1119 = 0.0;\n    if (_826)\n    {\n        highp vec3 _841 = ((u_csmLightSpaceMatrices[0] * _809).xyz * 0.5) + vec3(0.5);\n        highp float _845 = _841.x;\n        highp float _849 = _841.y;\n        highp float _859 = (((_841.z + step(_845, 0.001000000047497451305389404296875)) + step(_849, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _845)) + step(0.999000012874603271484375, _849);\n        highp float _1116 = 0.0;\n        for (int SPIRV_Cross_Dummy274 = 0; SPIRV_Cross_Dummy274 < 1; SPIRV_Cross_Dummy274++)\n        {\n            if (_859 > 1.0)\n            {\n                _1116 = 1.0;\n                break;\n            }\n            highp float _910 = _859 - 0.001000000047497451305389404296875;\n            highp vec2 _916 = ((_841.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _927 = fract(_916 * vec2(2048.0));\n            highp float _982 = _927.y;\n            _1116 = mix(mix(float(_910 < dot(texture2D(u_shadowMapTex, _916), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_910 < dot(texture2D(u_shadowMapTex, _916 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _982), mix(float(_910 < dot(texture2D(u_shadowMapTex, _916 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_910 < dot(texture2D(u_shadowMapTex, _916 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _982), _927.x);\n            break;\n        }\n        _1119 = _1116;\n    }\n    else\n    {\n        _1119 = 1.0;\n    }\n    bool _1446 = _826 ? true : false;\n    bool _1138 = (!_1446) && (_813 < u_csmFarBounds.y);\n    highp float _1229 = 0.0;\n    if (_1138)\n    {\n        highp vec3 _1149 = ((u_csmLightSpaceMatrices[1] * _809).xyz * 0.5) + vec3(0.5);\n        highp float _1151 = _1149.x;\n        highp float _1154 = _1149.y;\n        highp float _1162 = (((_1149.z + step(_1151, 0.001000000047497451305389404296875)) + step(_1154, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1151)) + step(0.999000012874603271484375, _1154);\n        highp float _1226 = 0.0;\n        for (int SPIRV_Cross_Dummy350 = 0; SPIRV_Cross_Dummy350 < 1; SPIRV_Cross_Dummy350++)\n        {\n            if (_1162 > 1.0)\n            {\n                _1226 = 1.0;\n                break;\n            }\n            highp float _1180 = _1162 - 0.001000000047497451305389404296875;\n            highp vec2 _1184 = ((_1149.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1191 = fract(_1184 * vec2(2048.0));\n            highp float _1219 = _1191.y;\n            _1226 = mix(mix(float(_1180 < dot(texture2D(u_shadowMapTex, _1184), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1180 < dot(texture2D(u_shadowMapTex, _1184 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1219), mix(float(_1180 < dot(texture2D(u_shadowMapTex, _1184 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1180 < dot(texture2D(u_shadowMapTex, _1184 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1219), _1191.x);\n            break;\n        }\n        _1229 = _1226;\n    }\n    else\n    {\n        _1229 = _1119;\n    }\n    bool _1447 = _1138 ? true : _1446;\n    bool _1243 = (!_1447) && (_813 < u_csmFarBounds.z);\n    highp float _1334 = 0.0;\n    if (_1243)\n    {\n        highp vec3 _1254 = ((u_csmLightSpaceMatrices[2] * _809).xyz * 0.5) + vec3(0.5);\n        highp float _1256 = _1254.x;\n        highp float _1259 = _1254.y;\n        highp float _1267 = (((_1254.z + step(_1256, 0.001000000047497451305389404296875)) + step(_1259, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1256)) + step(0.999000012874603271484375, _1259);\n        highp float _1331 = 0.0;\n        for (int SPIRV_Cross_Dummy426 = 0; SPIRV_Cross_Dummy426 < 1; SPIRV_Cross_Dummy426++)\n        {\n            if (_1267 > 1.0)\n            {\n                _1331 = 1.0;\n                break;\n            }\n            highp float _1285 = _1267 - 0.001000000047497451305389404296875;\n            highp vec2 _1289 = ((_1254.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1296 = fract(_1289 * vec2(2048.0));\n            highp float _1324 = _1296.y;\n            _1331 = mix(mix(float(_1285 < dot(texture2D(u_shadowMapTex, _1289), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1285 < dot(texture2D(u_shadowMapTex, _1289 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1324), mix(float(_1285 < dot(texture2D(u_shadowMapTex, _1289 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1285 < dot(texture2D(u_shadowMapTex, _1289 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1324), _1296.x);\n            break;\n        }\n        _1334 = _1331;\n    }\n    else\n    {\n        _1334 = _1229;\n    }\n    highp float _1439 = 0.0;\n    if ((!(_1243 ? true : _1447)) && (_813 < u_csmFarBounds.w))\n    {\n        highp vec3 _1359 = ((u_csmLightSpaceMatrices[3] * _809).xyz * 0.5) + vec3(0.5);\n        highp float _1361 = _1359.x;\n        highp float _1364 = _1359.y;\n        highp float _1372 = (((_1359.z + step(_1361, 0.001000000047497451305389404296875)) + step(_1364, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1361)) + step(0.999000012874603271484375, _1364);\n        highp float _1436 = 0.0;\n        for (int SPIRV_Cross_Dummy496 = 0; SPIRV_Cross_Dummy496 < 1; SPIRV_Cross_Dummy496++)\n        {\n            if (_1372 > 1.0)\n            {\n                _1436 = 1.0;\n                break;\n            }\n            highp float _1390 = _1372 - 0.001000000047497451305389404296875;\n            highp vec2 _1394 = ((_1359.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1401 = fract(_1394 * vec2(2048.0));\n            highp float _1429 = _1401.y;\n            _1436 = mix(mix(float(_1390 < dot(texture2D(u_shadowMapTex, _1394), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1390 < dot(texture2D(u_shadowMapTex, _1394 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1429), mix(float(_1390 < dot(texture2D(u_shadowMapTex, _1394 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1390 < dot(texture2D(u_shadowMapTex, _1394 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1429), _1401.x);\n            break;\n        }\n        _1439 = _1436;\n    }\n    else\n    {\n        _1439 = _1334;\n    }\n    highp vec3 _702 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _726 = vec4(_657.xyz * (min(_702, mix(max(_702 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1439))), u_shadowColor), _702, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_755, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_755, _755)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _649.w))), _659);\n    highp vec3 _742 = _726.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_742.x, _742.y, _742.z, _726.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\n\nvoid main()\n{\n    vec4 _428 = u_world * a_position;\n    gl_Position = u_projection * (u_view * _428);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _428.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\n\nvoid main()\n{\n    highp vec4 _260 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _268 = (_260 * _Color) * _AlbedoIntensity;\n    highp vec3 _271 = normalize(varying_LightDir);\n    highp vec3 _277 = normalize(varying_WorldNormal);\n    gl_FragData[0] = vec4(_268.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_271, _277))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _271), _277)), _Shininess * 128.0)) * (_SpecColor.xyz * _260.w))), _268.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\n\nvoid main()\n{\n    float _849 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _855 = (3.0 * (_849 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _858 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _862 = floor(_855 * _858);\n    float _868 = _855 - (_862 * u_skinnedAnimationMapInfo.x);\n    float _873 = (_862 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _883 = texture2D(u_skinnedAnimationMap, vec2((_868 + 0.5) * _858, _873));\n    vec4 _893 = texture2D(u_skinnedAnimationMap, vec2((_868 + 1.5) * _858, _873));\n    vec4 _903 = texture2D(u_skinnedAnimationMap, vec2((_868 + 2.5) * _858, _873));\n    float _954 = (3.0 * (_849 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _961 = floor(_954 * _858);\n    float _967 = _954 - (_961 * u_skinnedAnimationMapInfo.x);\n    float _972 = (_961 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _982 = texture2D(u_skinnedAnimationMap, vec2((_967 + 0.5) * _858, _972));\n    vec4 _992 = texture2D(u_skinnedAnimationMap, vec2((_967 + 1.5) * _858, _972));\n    vec4 _1002 = texture2D(u_skinnedAnimationMap, vec2((_967 + 2.5) * _858, _972));\n    float _1053 = (3.0 * (_849 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1060 = floor(_1053 * _858);\n    float _1066 = _1053 - (_1060 * u_skinnedAnimationMapInfo.x);\n    float _1071 = (_1060 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1081 = texture2D(u_skinnedAnimationMap, vec2((_1066 + 0.5) * _858, _1071));\n    vec4 _1091 = texture2D(u_skinnedAnimationMap, vec2((_1066 + 1.5) * _858, _1071));\n    vec4 _1101 = texture2D(u_skinnedAnimationMap, vec2((_1066 + 2.5) * _858, _1071));\n    float _1152 = (3.0 * (_849 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1159 = floor(_1152 * _858);\n    float _1165 = _1152 - (_1159 * u_skinnedAnimationMapInfo.x);\n    float _1170 = (_1159 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1180 = texture2D(u_skinnedAnimationMap, vec2((_1165 + 0.5) * _858, _1170));\n    vec4 _1190 = texture2D(u_skinnedAnimationMap, vec2((_1165 + 1.5) * _858, _1170));\n    vec4 _1200 = texture2D(u_skinnedAnimationMap, vec2((_1165 + 2.5) * _858, _1170));\n    mat4 _745 = mat4(vec4(_883.xyz, 0.0), vec4(_893.xyz, 0.0), vec4(_903.xyz, 0.0), vec4(_883.w, _893.w, _903.w, 1.0)) * a_boneWeight.x;\n    mat4 _749 = mat4(vec4(_982.xyz, 0.0), vec4(_992.xyz, 0.0), vec4(_1002.xyz, 0.0), vec4(_982.w, _992.w, _1002.w, 1.0)) * a_boneWeight.y;\n    mat4 _767 = mat4(vec4(_1081.xyz, 0.0), vec4(_1091.xyz, 0.0), vec4(_1101.xyz, 0.0), vec4(_1081.w, _1091.w, _1101.w, 1.0)) * a_boneWeight.z;\n    mat4 _785 = mat4(vec4(_1180.xyz, 0.0), vec4(_1190.xyz, 0.0), vec4(_1200.xyz, 0.0), vec4(_1180.w, _1190.w, _1200.w, 1.0)) * a_boneWeight.w;\n    vec4 _789 = ((_745[0] + _749[0]) + _767[0]) + _785[0];\n    vec4 _792 = ((_745[1] + _749[1]) + _767[1]) + _785[1];\n    vec4 _795 = ((_745[2] + _749[2]) + _767[2]) + _785[2];\n    mat3 _807 = mat3(_789.xyz, _792.xyz, _795.xyz);\n    vec4 _1236 = u_world * (mat4(_789, _792, _795, ((_745[3] + _749[3]) + _767[3]) + _785[3]) * a_position);\n    mat3 _1256 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1259 = normalize(_1256 * (_807 * a_normal));\n    vec3 _1273 = normalize(_1256 * (_807 * a_tangent.xyz).xyz);\n    mat3 _659 = mat3(_1273, cross(_1273, _1259) * a_tangent.w, _1259);\n    gl_Position = u_projection * (u_view * _1236);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _659 * u_lightDir;\n    varying_ViewDir = _659 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1236.xyz);\n    varying_WorldNormal = _1259;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\n\nvoid main()\n{\n    highp vec4 _313 = (texture2D(_MainTex, varying_TexCoord) * _Color) * _AlbedoIntensity;\n    highp vec3 _316 = normalize(varying_LightDir);\n    highp vec2 _380 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _391 = vec3(_380, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_380, _380))));\n    gl_FragData[0] = vec4(_313.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_316, _391))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _316), _391)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _313.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    float _824 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _830 = (3.0 * (_824 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _833 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _837 = floor(_830 * _833);\n    float _843 = _830 - (_837 * u_skinnedAnimationMapInfo.x);\n    float _848 = (_837 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _858 = texture2D(u_skinnedAnimationMap, vec2((_843 + 0.5) * _833, _848));\n    vec4 _868 = texture2D(u_skinnedAnimationMap, vec2((_843 + 1.5) * _833, _848));\n    vec4 _878 = texture2D(u_skinnedAnimationMap, vec2((_843 + 2.5) * _833, _848));\n    float _929 = (3.0 * (_824 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _936 = floor(_929 * _833);\n    float _942 = _929 - (_936 * u_skinnedAnimationMapInfo.x);\n    float _947 = (_936 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _957 = texture2D(u_skinnedAnimationMap, vec2((_942 + 0.5) * _833, _947));\n    vec4 _967 = texture2D(u_skinnedAnimationMap, vec2((_942 + 1.5) * _833, _947));\n    vec4 _977 = texture2D(u_skinnedAnimationMap, vec2((_942 + 2.5) * _833, _947));\n    float _1028 = (3.0 * (_824 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1035 = floor(_1028 * _833);\n    float _1041 = _1028 - (_1035 * u_skinnedAnimationMapInfo.x);\n    float _1046 = (_1035 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1056 = texture2D(u_skinnedAnimationMap, vec2((_1041 + 0.5) * _833, _1046));\n    vec4 _1066 = texture2D(u_skinnedAnimationMap, vec2((_1041 + 1.5) * _833, _1046));\n    vec4 _1076 = texture2D(u_skinnedAnimationMap, vec2((_1041 + 2.5) * _833, _1046));\n    float _1127 = (3.0 * (_824 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1134 = floor(_1127 * _833);\n    float _1140 = _1127 - (_1134 * u_skinnedAnimationMapInfo.x);\n    float _1145 = (_1134 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1155 = texture2D(u_skinnedAnimationMap, vec2((_1140 + 0.5) * _833, _1145));\n    vec4 _1165 = texture2D(u_skinnedAnimationMap, vec2((_1140 + 1.5) * _833, _1145));\n    vec4 _1175 = texture2D(u_skinnedAnimationMap, vec2((_1140 + 2.5) * _833, _1145));\n    mat4 _720 = mat4(vec4(_858.xyz, 0.0), vec4(_868.xyz, 0.0), vec4(_878.xyz, 0.0), vec4(_858.w, _868.w, _878.w, 1.0)) * a_boneWeight.x;\n    mat4 _724 = mat4(vec4(_957.xyz, 0.0), vec4(_967.xyz, 0.0), vec4(_977.xyz, 0.0), vec4(_957.w, _967.w, _977.w, 1.0)) * a_boneWeight.y;\n    mat4 _742 = mat4(vec4(_1056.xyz, 0.0), vec4(_1066.xyz, 0.0), vec4(_1076.xyz, 0.0), vec4(_1056.w, _1066.w, _1076.w, 1.0)) * a_boneWeight.z;\n    mat4 _760 = mat4(vec4(_1155.xyz, 0.0), vec4(_1165.xyz, 0.0), vec4(_1175.xyz, 0.0), vec4(_1155.w, _1165.w, _1175.w, 1.0)) * a_boneWeight.w;\n    vec4 _764 = ((_720[0] + _724[0]) + _742[0]) + _760[0];\n    vec4 _767 = ((_720[1] + _724[1]) + _742[1]) + _760[1];\n    vec4 _770 = ((_720[2] + _724[2]) + _742[2]) + _760[2];\n    vec4 _1211 = u_world * (mat4(_764, _767, _770, ((_720[3] + _724[3]) + _742[3]) + _760[3]) * a_position);\n    vec3 _610 = _1211.xyz;\n    gl_Position = u_projection * (u_view * _1211);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _610);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_764.xyz, _767.xyz, _770.xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_ShadowPosition = _610;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _619 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _627 = (_619 * _Color) * _AlbedoIntensity;\n    highp float _629 = _627.w;\n    if ((_629 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _644 = normalize(varying_WorldNormal);\n    highp vec4 _757 = vec4(varying_ShadowPosition, 1.0);\n    highp float _761 = -(u_view * _757).z;\n    bool _774 = true && (_761 < u_csmFarBounds.x);\n    highp float _1066 = 0.0;\n    if (_774)\n    {\n        highp vec3 _789 = ((u_csmLightSpaceMatrices[0] * _757).xyz * 0.5) + vec3(0.5);\n        highp float _793 = _789.x;\n        highp float _797 = _789.y;\n        highp float _807 = (((_789.z + step(_793, 0.001000000047497451305389404296875)) + step(_797, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _793)) + step(0.999000012874603271484375, _797);\n        highp float _1063 = 0.0;\n        for (int SPIRV_Cross_Dummy271 = 0; SPIRV_Cross_Dummy271 < 1; SPIRV_Cross_Dummy271++)\n        {\n            if (_807 > 1.0)\n            {\n                _1063 = 1.0;\n                break;\n            }\n            highp float _858 = _807 - 0.001000000047497451305389404296875;\n            highp vec2 _864 = ((_789.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _875 = fract(_864 * vec2(2048.0));\n            highp float _930 = _875.y;\n            _1063 = mix(mix(float(_858 < dot(texture2D(u_shadowMapTex, _864), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_858 < dot(texture2D(u_shadowMapTex, _864 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _930), mix(float(_858 < dot(texture2D(u_shadowMapTex, _864 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_858 < dot(texture2D(u_shadowMapTex, _864 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _930), _875.x);\n            break;\n        }\n        _1066 = _1063;\n    }\n    else\n    {\n        _1066 = 1.0;\n    }\n    bool _1392 = _774 ? true : false;\n    bool _1084 = (!_1392) && (_761 < u_csmFarBounds.y);\n    highp float _1175 = 0.0;\n    if (_1084)\n    {\n        highp vec3 _1095 = ((u_csmLightSpaceMatrices[1] * _757).xyz * 0.5) + vec3(0.5);\n        highp float _1097 = _1095.x;\n        highp float _1100 = _1095.y;\n        highp float _1108 = (((_1095.z + step(_1097, 0.001000000047497451305389404296875)) + step(_1100, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1097)) + step(0.999000012874603271484375, _1100);\n        highp float _1172 = 0.0;\n        for (int SPIRV_Cross_Dummy347 = 0; SPIRV_Cross_Dummy347 < 1; SPIRV_Cross_Dummy347++)\n        {\n            if (_1108 > 1.0)\n            {\n                _1172 = 1.0;\n                break;\n            }\n            highp float _1126 = _1108 - 0.001000000047497451305389404296875;\n            highp vec2 _1130 = ((_1095.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1137 = fract(_1130 * vec2(2048.0));\n            highp float _1165 = _1137.y;\n            _1172 = mix(mix(float(_1126 < dot(texture2D(u_shadowMapTex, _1130), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1126 < dot(texture2D(u_shadowMapTex, _1130 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1165), mix(float(_1126 < dot(texture2D(u_shadowMapTex, _1130 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1126 < dot(texture2D(u_shadowMapTex, _1130 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1165), _1137.x);\n            break;\n        }\n        _1175 = _1172;\n    }\n    else\n    {\n        _1175 = _1066;\n    }\n    bool _1393 = _1084 ? true : _1392;\n    bool _1189 = (!_1393) && (_761 < u_csmFarBounds.z);\n    highp float _1280 = 0.0;\n    if (_1189)\n    {\n        highp vec3 _1200 = ((u_csmLightSpaceMatrices[2] * _757).xyz * 0.5) + vec3(0.5);\n        highp float _1202 = _1200.x;\n        highp float _1205 = _1200.y;\n        highp float _1213 = (((_1200.z + step(_1202, 0.001000000047497451305389404296875)) + step(_1205, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1202)) + step(0.999000012874603271484375, _1205);\n        highp float _1277 = 0.0;\n        for (int SPIRV_Cross_Dummy423 = 0; SPIRV_Cross_Dummy423 < 1; SPIRV_Cross_Dummy423++)\n        {\n            if (_1213 > 1.0)\n            {\n                _1277 = 1.0;\n                break;\n            }\n            highp float _1231 = _1213 - 0.001000000047497451305389404296875;\n            highp vec2 _1235 = ((_1200.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1242 = fract(_1235 * vec2(2048.0));\n            highp float _1270 = _1242.y;\n            _1277 = mix(mix(float(_1231 < dot(texture2D(u_shadowMapTex, _1235), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1231 < dot(texture2D(u_shadowMapTex, _1235 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1270), mix(float(_1231 < dot(texture2D(u_shadowMapTex, _1235 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1231 < dot(texture2D(u_shadowMapTex, _1235 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1270), _1242.x);\n            break;\n        }\n        _1280 = _1277;\n    }\n    else\n    {\n        _1280 = _1175;\n    }\n    highp float _1385 = 0.0;\n    if ((!(_1189 ? true : _1393)) && (_761 < u_csmFarBounds.w))\n    {\n        highp vec3 _1305 = ((u_csmLightSpaceMatrices[3] * _757).xyz * 0.5) + vec3(0.5);\n        highp float _1307 = _1305.x;\n        highp float _1310 = _1305.y;\n        highp float _1318 = (((_1305.z + step(_1307, 0.001000000047497451305389404296875)) + step(_1310, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1307)) + step(0.999000012874603271484375, _1310);\n        highp float _1382 = 0.0;\n        for (int SPIRV_Cross_Dummy493 = 0; SPIRV_Cross_Dummy493 < 1; SPIRV_Cross_Dummy493++)\n        {\n            if (_1318 > 1.0)\n            {\n                _1382 = 1.0;\n                break;\n            }\n            highp float _1336 = _1318 - 0.001000000047497451305389404296875;\n            highp vec2 _1340 = ((_1305.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1347 = fract(_1340 * vec2(2048.0));\n            highp float _1375 = _1347.y;\n            _1382 = mix(mix(float(_1336 < dot(texture2D(u_shadowMapTex, _1340), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1336 < dot(texture2D(u_shadowMapTex, _1340 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1375), mix(float(_1336 < dot(texture2D(u_shadowMapTex, _1340 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1336 < dot(texture2D(u_shadowMapTex, _1340 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1375), _1347.x);\n            break;\n        }\n        _1385 = _1382;\n    }\n    else\n    {\n        _1385 = _1280;\n    }\n    highp vec3 _665 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _694 = vec4(_627.xyz * (min(_665, mix(max(_665 - (u_lightColor * (clamp(dot(_644, u_lightDir), 0.0, 1.0) * (1.0 - _1385))), u_shadowColor), _665, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _644)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _629);\n    highp vec3 _710 = _694.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_710.x, _710.y, _710.z, _694.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\n\nvoid main()\n{\n    int _719 = int(a_boneIndex.x) * 3;\n    int _724 = _719 + 1;\n    int _728 = _719 + 2;\n    int _770 = int(a_boneIndex.y) * 3;\n    int _775 = _770 + 1;\n    int _779 = _770 + 2;\n    int _821 = int(a_boneIndex.z) * 3;\n    int _826 = _821 + 1;\n    int _830 = _821 + 2;\n    int _872 = int(a_boneIndex.w) * 3;\n    int _877 = _872 + 1;\n    int _881 = _872 + 2;\n    mat4 _620 = mat4(vec4(u_boneOffsetMatrix[_719].xyz, 0.0), vec4(u_boneOffsetMatrix[_724].xyz, 0.0), vec4(u_boneOffsetMatrix[_728].xyz, 0.0), vec4(u_boneOffsetMatrix[_719].w, u_boneOffsetMatrix[_724].w, u_boneOffsetMatrix[_728].w, 1.0)) * a_boneWeight.x;\n    mat4 _624 = mat4(vec4(u_boneOffsetMatrix[_770].xyz, 0.0), vec4(u_boneOffsetMatrix[_775].xyz, 0.0), vec4(u_boneOffsetMatrix[_779].xyz, 0.0), vec4(u_boneOffsetMatrix[_770].w, u_boneOffsetMatrix[_775].w, u_boneOffsetMatrix[_779].w, 1.0)) * a_boneWeight.y;\n    mat4 _642 = mat4(vec4(u_boneOffsetMatrix[_821].xyz, 0.0), vec4(u_boneOffsetMatrix[_826].xyz, 0.0), vec4(u_boneOffsetMatrix[_830].xyz, 0.0), vec4(u_boneOffsetMatrix[_821].w, u_boneOffsetMatrix[_826].w, u_boneOffsetMatrix[_830].w, 1.0)) * a_boneWeight.z;\n    mat4 _660 = mat4(vec4(u_boneOffsetMatrix[_872].xyz, 0.0), vec4(u_boneOffsetMatrix[_877].xyz, 0.0), vec4(u_boneOffsetMatrix[_881].xyz, 0.0), vec4(u_boneOffsetMatrix[_872].w, u_boneOffsetMatrix[_877].w, u_boneOffsetMatrix[_881].w, 1.0)) * a_boneWeight.w;\n    vec4 _664 = ((_620[0] + _624[0]) + _642[0]) + _660[0];\n    vec4 _667 = ((_620[1] + _624[1]) + _642[1]) + _660[1];\n    vec4 _670 = ((_620[2] + _624[2]) + _642[2]) + _660[2];\n    vec4 _919 = u_world * (mat4(_664, _667, _670, ((_620[3] + _624[3]) + _642[3]) + _660[3]) * a_position);\n    gl_Position = u_projection * (u_view * _919);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _919.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_664.xyz, _667.xyz, _670.xyz) * a_normal));\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\n\nvoid main()\n{\n    highp vec4 _262 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _270 = (_262 * _Color) * _AlbedoIntensity;\n    highp vec3 _273 = normalize(varying_LightDir);\n    highp vec3 _279 = normalize(varying_WorldNormal);\n    gl_FragData[0] = vec4(_270.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_273, _279))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _273), _279)), _Shininess * 128.0)) * (_SpecColor.xyz * _262.w))), _270.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    vec4 _561 = u_world * a_position;\n    mat3 _581 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _584 = normalize(_581 * a_normal);\n    vec3 _598 = normalize(_581 * a_tangent.xyz);\n    mat3 _467 = mat3(_598, cross(_598, _584) * a_tangent.w, _584);\n    gl_Position = u_projection * (u_view * _561);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _467 * u_lightDir;\n    varying_ViewDir = _467 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _561.xyz);\n    varying_WorldNormal = _584;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_561.xyz, 1.0)).xyz;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _461 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _469 = (_461 * _Color) * _AlbedoIntensity;\n    highp float _471 = _469.w;\n    if ((_471 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _492 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _553 = (_492.xy - vec2(0.5)) * 2.0;\n    highp vec4 _509 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _511 = _509.xyz * 2.0;\n    highp vec4 _535 = vec4(_469.xyz * (min(_511, mix(max(_511, u_shadowColor), _511, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_553, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_553, _553)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _461.w))), _471);\n    highp float _637 = length(varying_positionCamera_Fog);\n    highp float _724 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _724 = (u_fogInfos.z - _637) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _725 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _725 = 1.0 / pow(2.7182800769805908203125, _637 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _726 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _726 = 1.0 / pow(2.7182800769805908203125, ((_637 * _637) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _726 = 1.0;\n            }\n            _725 = _726;\n        }\n        _724 = _725;\n    }\n    highp float _683 = clamp(_724, 0.0, 1.0);\n    highp vec3 _692 = (_535.xyz * _683) + (u_fogColor * (1.0 - _683));\n    gl_FragData[0] = vec4(_692.x, _692.y, _692.z, _535.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    vec4 _437 = u_world * a_position;\n    vec3 _364 = _437.xyz;\n    gl_Position = u_projection * (u_view * _437);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _364);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_ShadowPosition = _364;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _516 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _524 = (_516 * _Color) * _AlbedoIntensity;\n    highp vec3 _527 = normalize(varying_LightDir);\n    highp vec3 _533 = normalize(varying_WorldNormal);\n    highp vec4 _616 = vec4(varying_ShadowPosition, 1.0);\n    highp float _620 = -(u_view * _616).z;\n    bool _633 = true && (_620 < u_csmFarBounds.x);\n    highp float _882 = 0.0;\n    if (_633)\n    {\n        highp vec3 _648 = ((u_csmLightSpaceMatrices[0] * _616).xyz * 0.5) + vec3(0.5);\n        highp float _652 = _648.x;\n        highp float _656 = _648.y;\n        highp float _666 = (((_648.z + step(_652, 0.001000000047497451305389404296875)) + step(_656, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _652)) + step(0.999000012874603271484375, _656);\n        highp float _879 = 0.0;\n        for (int SPIRV_Cross_Dummy251 = 0; SPIRV_Cross_Dummy251 < 1; SPIRV_Cross_Dummy251++)\n        {\n            if (_666 > 1.0)\n            {\n                _879 = 1.0;\n                break;\n            }\n            highp float _717 = _666 - 0.001000000047497451305389404296875;\n            highp vec2 _723 = ((_648.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _734 = fract(_723 * vec2(2048.0));\n            highp float _789 = _734.y;\n            _879 = mix(mix(float(_717 < dot(texture2D(u_shadowMapTex, _723), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_717 < dot(texture2D(u_shadowMapTex, _723 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _789), mix(float(_717 < dot(texture2D(u_shadowMapTex, _723 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_717 < dot(texture2D(u_shadowMapTex, _723 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _789), _734.x);\n            break;\n        }\n        _882 = _879;\n    }\n    else\n    {\n        _882 = 1.0;\n    }\n    bool _1209 = _633 ? true : false;\n    bool _900 = (!_1209) && (_620 < u_csmFarBounds.y);\n    highp float _991 = 0.0;\n    if (_900)\n    {\n        highp vec3 _911 = ((u_csmLightSpaceMatrices[1] * _616).xyz * 0.5) + vec3(0.5);\n        highp float _913 = _911.x;\n        highp float _916 = _911.y;\n        highp float _924 = (((_911.z + step(_913, 0.001000000047497451305389404296875)) + step(_916, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _913)) + step(0.999000012874603271484375, _916);\n        highp float _988 = 0.0;\n        for (int SPIRV_Cross_Dummy327 = 0; SPIRV_Cross_Dummy327 < 1; SPIRV_Cross_Dummy327++)\n        {\n            if (_924 > 1.0)\n            {\n                _988 = 1.0;\n                break;\n            }\n            highp float _942 = _924 - 0.001000000047497451305389404296875;\n            highp vec2 _946 = ((_911.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _953 = fract(_946 * vec2(2048.0));\n            highp float _981 = _953.y;\n            _988 = mix(mix(float(_942 < dot(texture2D(u_shadowMapTex, _946), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_942 < dot(texture2D(u_shadowMapTex, _946 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _981), mix(float(_942 < dot(texture2D(u_shadowMapTex, _946 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_942 < dot(texture2D(u_shadowMapTex, _946 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _981), _953.x);\n            break;\n        }\n        _991 = _988;\n    }\n    else\n    {\n        _991 = _882;\n    }\n    bool _1210 = _900 ? true : _1209;\n    bool _1005 = (!_1210) && (_620 < u_csmFarBounds.z);\n    highp float _1096 = 0.0;\n    if (_1005)\n    {\n        highp vec3 _1016 = ((u_csmLightSpaceMatrices[2] * _616).xyz * 0.5) + vec3(0.5);\n        highp float _1018 = _1016.x;\n        highp float _1021 = _1016.y;\n        highp float _1029 = (((_1016.z + step(_1018, 0.001000000047497451305389404296875)) + step(_1021, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1018)) + step(0.999000012874603271484375, _1021);\n        highp float _1093 = 0.0;\n        for (int SPIRV_Cross_Dummy403 = 0; SPIRV_Cross_Dummy403 < 1; SPIRV_Cross_Dummy403++)\n        {\n            if (_1029 > 1.0)\n            {\n                _1093 = 1.0;\n                break;\n            }\n            highp float _1047 = _1029 - 0.001000000047497451305389404296875;\n            highp vec2 _1051 = ((_1016.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1058 = fract(_1051 * vec2(2048.0));\n            highp float _1086 = _1058.y;\n            _1093 = mix(mix(float(_1047 < dot(texture2D(u_shadowMapTex, _1051), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1047 < dot(texture2D(u_shadowMapTex, _1051 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1086), mix(float(_1047 < dot(texture2D(u_shadowMapTex, _1051 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1047 < dot(texture2D(u_shadowMapTex, _1051 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1086), _1058.x);\n            break;\n        }\n        _1096 = _1093;\n    }\n    else\n    {\n        _1096 = _991;\n    }\n    highp float _1201 = 0.0;\n    if ((!(_1005 ? true : _1210)) && (_620 < u_csmFarBounds.w))\n    {\n        highp vec3 _1121 = ((u_csmLightSpaceMatrices[3] * _616).xyz * 0.5) + vec3(0.5);\n        highp float _1123 = _1121.x;\n        highp float _1126 = _1121.y;\n        highp float _1134 = (((_1121.z + step(_1123, 0.001000000047497451305389404296875)) + step(_1126, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1123)) + step(0.999000012874603271484375, _1126);\n        highp float _1198 = 0.0;\n        for (int SPIRV_Cross_Dummy473 = 0; SPIRV_Cross_Dummy473 < 1; SPIRV_Cross_Dummy473++)\n        {\n            if (_1134 > 1.0)\n            {\n                _1198 = 1.0;\n                break;\n            }\n            highp float _1152 = _1134 - 0.001000000047497451305389404296875;\n            highp vec2 _1156 = ((_1121.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1163 = fract(_1156 * vec2(2048.0));\n            highp float _1191 = _1163.y;\n            _1198 = mix(mix(float(_1152 < dot(texture2D(u_shadowMapTex, _1156), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1152 < dot(texture2D(u_shadowMapTex, _1156 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1191), mix(float(_1152 < dot(texture2D(u_shadowMapTex, _1156 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1152 < dot(texture2D(u_shadowMapTex, _1156 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1191), _1163.x);\n            break;\n        }\n        _1201 = _1198;\n    }\n    else\n    {\n        _1201 = _1096;\n    }\n    gl_FragData[0] = vec4(_524.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_527, _533))) * _1201)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _527), _533)), _Shininess * 128.0)) * (_SpecColor.xyz * _516.w))), _524.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    float _844 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _850 = (3.0 * (_844 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _853 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _857 = floor(_850 * _853);\n    float _863 = _850 - (_857 * u_skinnedAnimationMapInfo.x);\n    float _868 = (_857 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _878 = texture2D(u_skinnedAnimationMap, vec2((_863 + 0.5) * _853, _868));\n    vec4 _888 = texture2D(u_skinnedAnimationMap, vec2((_863 + 1.5) * _853, _868));\n    vec4 _898 = texture2D(u_skinnedAnimationMap, vec2((_863 + 2.5) * _853, _868));\n    float _949 = (3.0 * (_844 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _956 = floor(_949 * _853);\n    float _962 = _949 - (_956 * u_skinnedAnimationMapInfo.x);\n    float _967 = (_956 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _977 = texture2D(u_skinnedAnimationMap, vec2((_962 + 0.5) * _853, _967));\n    vec4 _987 = texture2D(u_skinnedAnimationMap, vec2((_962 + 1.5) * _853, _967));\n    vec4 _997 = texture2D(u_skinnedAnimationMap, vec2((_962 + 2.5) * _853, _967));\n    float _1048 = (3.0 * (_844 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1055 = floor(_1048 * _853);\n    float _1061 = _1048 - (_1055 * u_skinnedAnimationMapInfo.x);\n    float _1066 = (_1055 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1076 = texture2D(u_skinnedAnimationMap, vec2((_1061 + 0.5) * _853, _1066));\n    vec4 _1086 = texture2D(u_skinnedAnimationMap, vec2((_1061 + 1.5) * _853, _1066));\n    vec4 _1096 = texture2D(u_skinnedAnimationMap, vec2((_1061 + 2.5) * _853, _1066));\n    float _1147 = (3.0 * (_844 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1154 = floor(_1147 * _853);\n    float _1160 = _1147 - (_1154 * u_skinnedAnimationMapInfo.x);\n    float _1165 = (_1154 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1175 = texture2D(u_skinnedAnimationMap, vec2((_1160 + 0.5) * _853, _1165));\n    vec4 _1185 = texture2D(u_skinnedAnimationMap, vec2((_1160 + 1.5) * _853, _1165));\n    vec4 _1195 = texture2D(u_skinnedAnimationMap, vec2((_1160 + 2.5) * _853, _1165));\n    mat4 _740 = mat4(vec4(_878.xyz, 0.0), vec4(_888.xyz, 0.0), vec4(_898.xyz, 0.0), vec4(_878.w, _888.w, _898.w, 1.0)) * a_boneWeight.x;\n    mat4 _744 = mat4(vec4(_977.xyz, 0.0), vec4(_987.xyz, 0.0), vec4(_997.xyz, 0.0), vec4(_977.w, _987.w, _997.w, 1.0)) * a_boneWeight.y;\n    mat4 _762 = mat4(vec4(_1076.xyz, 0.0), vec4(_1086.xyz, 0.0), vec4(_1096.xyz, 0.0), vec4(_1076.w, _1086.w, _1096.w, 1.0)) * a_boneWeight.z;\n    mat4 _780 = mat4(vec4(_1175.xyz, 0.0), vec4(_1185.xyz, 0.0), vec4(_1195.xyz, 0.0), vec4(_1175.w, _1185.w, _1195.w, 1.0)) * a_boneWeight.w;\n    vec4 _784 = ((_740[0] + _744[0]) + _762[0]) + _780[0];\n    vec4 _787 = ((_740[1] + _744[1]) + _762[1]) + _780[1];\n    vec4 _790 = ((_740[2] + _744[2]) + _762[2]) + _780[2];\n    vec4 _1231 = u_world * (mat4(_784, _787, _790, ((_740[3] + _744[3]) + _762[3]) + _780[3]) * a_position);\n    gl_Position = u_projection * (u_view * _1231);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1231.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_784.xyz, _787.xyz, _790.xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_1231.xyz, 1.0)).xyz;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _431 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _439 = (_431 * _Color) * _AlbedoIntensity;\n    highp float _441 = _439.w;\n    if ((_441 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _472 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _474 = _472.xyz * 2.0;\n    highp vec4 _484 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _503 = vec4(_439.xyz * (min(_474, mix(max(_474, u_shadowColor), _474, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_484.xyz * _SpecColor.xyz))), _441);\n    highp float _585 = length(varying_positionCamera_Fog);\n    highp float _671 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _671 = (u_fogInfos.z - _585) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _672 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _672 = 1.0 / pow(2.7182800769805908203125, _585 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _673 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _673 = 1.0 / pow(2.7182800769805908203125, ((_585 * _585) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _673 = 1.0;\n            }\n            _672 = _673;\n        }\n        _671 = _672;\n    }\n    highp float _631 = clamp(_671, 0.0, 1.0);\n    highp vec3 _640 = (_503.xyz * _631) + (u_fogColor * (1.0 - _631));\n    gl_FragData[0] = vec4(_640.x, _640.y, _640.z, _503.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _736 = int(a_boneIndex.x) * 3;\n    int _741 = _736 + 1;\n    int _745 = _736 + 2;\n    int _787 = int(a_boneIndex.y) * 3;\n    int _792 = _787 + 1;\n    int _796 = _787 + 2;\n    int _838 = int(a_boneIndex.z) * 3;\n    int _843 = _838 + 1;\n    int _847 = _838 + 2;\n    int _889 = int(a_boneIndex.w) * 3;\n    int _894 = _889 + 1;\n    int _898 = _889 + 2;\n    mat4 _633 = mat4(vec4(u_boneOffsetMatrix[_736].xyz, 0.0), vec4(u_boneOffsetMatrix[_741].xyz, 0.0), vec4(u_boneOffsetMatrix[_745].xyz, 0.0), vec4(u_boneOffsetMatrix[_736].w, u_boneOffsetMatrix[_741].w, u_boneOffsetMatrix[_745].w, 1.0)) * a_boneWeight.x;\n    mat4 _637 = mat4(vec4(u_boneOffsetMatrix[_787].xyz, 0.0), vec4(u_boneOffsetMatrix[_792].xyz, 0.0), vec4(u_boneOffsetMatrix[_796].xyz, 0.0), vec4(u_boneOffsetMatrix[_787].w, u_boneOffsetMatrix[_792].w, u_boneOffsetMatrix[_796].w, 1.0)) * a_boneWeight.y;\n    mat4 _655 = mat4(vec4(u_boneOffsetMatrix[_838].xyz, 0.0), vec4(u_boneOffsetMatrix[_843].xyz, 0.0), vec4(u_boneOffsetMatrix[_847].xyz, 0.0), vec4(u_boneOffsetMatrix[_838].w, u_boneOffsetMatrix[_843].w, u_boneOffsetMatrix[_847].w, 1.0)) * a_boneWeight.z;\n    mat4 _673 = mat4(vec4(u_boneOffsetMatrix[_889].xyz, 0.0), vec4(u_boneOffsetMatrix[_894].xyz, 0.0), vec4(u_boneOffsetMatrix[_898].xyz, 0.0), vec4(u_boneOffsetMatrix[_889].w, u_boneOffsetMatrix[_894].w, u_boneOffsetMatrix[_898].w, 1.0)) * a_boneWeight.w;\n    mat4 _691 = u_bindTargetWorldInverse * mat4(((_633[0] + _637[0]) + _655[0]) + _673[0], ((_633[1] + _637[1]) + _655[1]) + _673[1], ((_633[2] + _637[2]) + _655[2]) + _673[2], ((_633[3] + _637[3]) + _655[3]) + _673[3]);\n    vec4 _936 = u_world * (_691 * a_position);\n    vec3 _541 = _936.xyz;\n    gl_Position = u_projection * (u_view * _936);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _541);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_691[0].xyz, _691[1].xyz, _691[2].xyz) * a_normal));\n    varying_ShadowPosition = _541;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _860 = int(a_boneIndex.x) * 3;\n    int _865 = _860 + 1;\n    int _869 = _860 + 2;\n    int _911 = int(a_boneIndex.y) * 3;\n    int _916 = _911 + 1;\n    int _920 = _911 + 2;\n    int _962 = int(a_boneIndex.z) * 3;\n    int _967 = _962 + 1;\n    int _971 = _962 + 2;\n    int _1013 = int(a_boneIndex.w) * 3;\n    int _1018 = _1013 + 1;\n    int _1022 = _1013 + 2;\n    mat4 _757 = mat4(vec4(u_boneOffsetMatrix[_860].xyz, 0.0), vec4(u_boneOffsetMatrix[_865].xyz, 0.0), vec4(u_boneOffsetMatrix[_869].xyz, 0.0), vec4(u_boneOffsetMatrix[_860].w, u_boneOffsetMatrix[_865].w, u_boneOffsetMatrix[_869].w, 1.0)) * a_boneWeight.x;\n    mat4 _761 = mat4(vec4(u_boneOffsetMatrix[_911].xyz, 0.0), vec4(u_boneOffsetMatrix[_916].xyz, 0.0), vec4(u_boneOffsetMatrix[_920].xyz, 0.0), vec4(u_boneOffsetMatrix[_911].w, u_boneOffsetMatrix[_916].w, u_boneOffsetMatrix[_920].w, 1.0)) * a_boneWeight.y;\n    mat4 _779 = mat4(vec4(u_boneOffsetMatrix[_962].xyz, 0.0), vec4(u_boneOffsetMatrix[_967].xyz, 0.0), vec4(u_boneOffsetMatrix[_971].xyz, 0.0), vec4(u_boneOffsetMatrix[_962].w, u_boneOffsetMatrix[_967].w, u_boneOffsetMatrix[_971].w, 1.0)) * a_boneWeight.z;\n    mat4 _797 = mat4(vec4(u_boneOffsetMatrix[_1013].xyz, 0.0), vec4(u_boneOffsetMatrix[_1018].xyz, 0.0), vec4(u_boneOffsetMatrix[_1022].xyz, 0.0), vec4(u_boneOffsetMatrix[_1013].w, u_boneOffsetMatrix[_1018].w, u_boneOffsetMatrix[_1022].w, 1.0)) * a_boneWeight.w;\n    mat4 _815 = u_bindTargetWorldInverse * mat4(((_757[0] + _761[0]) + _779[0]) + _797[0], ((_757[1] + _761[1]) + _779[1]) + _797[1], ((_757[2] + _761[2]) + _779[2]) + _797[2], ((_757[3] + _761[3]) + _779[3]) + _797[3]);\n    mat3 _823 = mat3(_815[0].xyz, _815[1].xyz, _815[2].xyz);\n    vec4 _1060 = u_world * (_815 * a_position);\n    mat3 _1080 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1083 = normalize(_1080 * (_823 * a_normal));\n    vec3 _1097 = normalize(_1080 * (_823 * a_tangent.xyz).xyz);\n    mat3 _644 = mat3(_1097, cross(_1097, _1083) * a_tangent.w, _1083);\n    gl_Position = u_projection * (u_view * _1060);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _644 * u_lightDir;\n    varying_ViewDir = _644 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1060.xyz);\n    varying_WorldNormal = _1083;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_1060.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\n\nvoid main()\n{\n    int _727 = int(a_boneIndex.x) * 3;\n    int _732 = _727 + 1;\n    int _736 = _727 + 2;\n    int _778 = int(a_boneIndex.y) * 3;\n    int _783 = _778 + 1;\n    int _787 = _778 + 2;\n    int _829 = int(a_boneIndex.z) * 3;\n    int _834 = _829 + 1;\n    int _838 = _829 + 2;\n    int _880 = int(a_boneIndex.w) * 3;\n    int _885 = _880 + 1;\n    int _889 = _880 + 2;\n    mat4 _624 = mat4(vec4(u_boneOffsetMatrix[_727].xyz, 0.0), vec4(u_boneOffsetMatrix[_732].xyz, 0.0), vec4(u_boneOffsetMatrix[_736].xyz, 0.0), vec4(u_boneOffsetMatrix[_727].w, u_boneOffsetMatrix[_732].w, u_boneOffsetMatrix[_736].w, 1.0)) * a_boneWeight.x;\n    mat4 _628 = mat4(vec4(u_boneOffsetMatrix[_778].xyz, 0.0), vec4(u_boneOffsetMatrix[_783].xyz, 0.0), vec4(u_boneOffsetMatrix[_787].xyz, 0.0), vec4(u_boneOffsetMatrix[_778].w, u_boneOffsetMatrix[_783].w, u_boneOffsetMatrix[_787].w, 1.0)) * a_boneWeight.y;\n    mat4 _646 = mat4(vec4(u_boneOffsetMatrix[_829].xyz, 0.0), vec4(u_boneOffsetMatrix[_834].xyz, 0.0), vec4(u_boneOffsetMatrix[_838].xyz, 0.0), vec4(u_boneOffsetMatrix[_829].w, u_boneOffsetMatrix[_834].w, u_boneOffsetMatrix[_838].w, 1.0)) * a_boneWeight.z;\n    mat4 _664 = mat4(vec4(u_boneOffsetMatrix[_880].xyz, 0.0), vec4(u_boneOffsetMatrix[_885].xyz, 0.0), vec4(u_boneOffsetMatrix[_889].xyz, 0.0), vec4(u_boneOffsetMatrix[_880].w, u_boneOffsetMatrix[_885].w, u_boneOffsetMatrix[_889].w, 1.0)) * a_boneWeight.w;\n    mat4 _682 = u_bindTargetWorldInverse * mat4(((_624[0] + _628[0]) + _646[0]) + _664[0], ((_624[1] + _628[1]) + _646[1]) + _664[1], ((_624[2] + _628[2]) + _646[2]) + _664[2], ((_624[3] + _628[3]) + _646[3]) + _664[3]);\n    vec4 _927 = u_world * (_682 * a_position);\n    gl_Position = u_projection * (u_view * _927);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _927.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_682[0].xyz, _682[1].xyz, _682[2].xyz) * a_normal));\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    float _785 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _791 = (3.0 * (_785 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _794 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _798 = floor(_791 * _794);\n    float _804 = _791 - (_798 * u_skinnedAnimationMapInfo.x);\n    float _809 = (_798 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _819 = texture2D(u_skinnedAnimationMap, vec2((_804 + 0.5) * _794, _809));\n    vec4 _829 = texture2D(u_skinnedAnimationMap, vec2((_804 + 1.5) * _794, _809));\n    vec4 _839 = texture2D(u_skinnedAnimationMap, vec2((_804 + 2.5) * _794, _809));\n    float _890 = (3.0 * (_785 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _897 = floor(_890 * _794);\n    float _903 = _890 - (_897 * u_skinnedAnimationMapInfo.x);\n    float _908 = (_897 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _918 = texture2D(u_skinnedAnimationMap, vec2((_903 + 0.5) * _794, _908));\n    vec4 _928 = texture2D(u_skinnedAnimationMap, vec2((_903 + 1.5) * _794, _908));\n    vec4 _938 = texture2D(u_skinnedAnimationMap, vec2((_903 + 2.5) * _794, _908));\n    float _989 = (3.0 * (_785 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _996 = floor(_989 * _794);\n    float _1002 = _989 - (_996 * u_skinnedAnimationMapInfo.x);\n    float _1007 = (_996 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1017 = texture2D(u_skinnedAnimationMap, vec2((_1002 + 0.5) * _794, _1007));\n    vec4 _1027 = texture2D(u_skinnedAnimationMap, vec2((_1002 + 1.5) * _794, _1007));\n    vec4 _1037 = texture2D(u_skinnedAnimationMap, vec2((_1002 + 2.5) * _794, _1007));\n    float _1088 = (3.0 * (_785 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1095 = floor(_1088 * _794);\n    float _1101 = _1088 - (_1095 * u_skinnedAnimationMapInfo.x);\n    float _1106 = (_1095 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1116 = texture2D(u_skinnedAnimationMap, vec2((_1101 + 0.5) * _794, _1106));\n    vec4 _1126 = texture2D(u_skinnedAnimationMap, vec2((_1101 + 1.5) * _794, _1106));\n    vec4 _1136 = texture2D(u_skinnedAnimationMap, vec2((_1101 + 2.5) * _794, _1106));\n    mat4 _681 = mat4(vec4(_819.xyz, 0.0), vec4(_829.xyz, 0.0), vec4(_839.xyz, 0.0), vec4(_819.w, _829.w, _839.w, 1.0)) * a_boneWeight.x;\n    mat4 _685 = mat4(vec4(_918.xyz, 0.0), vec4(_928.xyz, 0.0), vec4(_938.xyz, 0.0), vec4(_918.w, _928.w, _938.w, 1.0)) * a_boneWeight.y;\n    mat4 _703 = mat4(vec4(_1017.xyz, 0.0), vec4(_1027.xyz, 0.0), vec4(_1037.xyz, 0.0), vec4(_1017.w, _1027.w, _1037.w, 1.0)) * a_boneWeight.z;\n    mat4 _721 = mat4(vec4(_1116.xyz, 0.0), vec4(_1126.xyz, 0.0), vec4(_1136.xyz, 0.0), vec4(_1116.w, _1126.w, _1136.w, 1.0)) * a_boneWeight.w;\n    vec4 _725 = ((_681[0] + _685[0]) + _703[0]) + _721[0];\n    vec4 _728 = ((_681[1] + _685[1]) + _703[1]) + _721[1];\n    vec4 _731 = ((_681[2] + _685[2]) + _703[2]) + _721[2];\n    vec4 _1172 = u_world * (mat4(_725, _728, _731, ((_681[3] + _685[3]) + _703[3]) + _721[3]) * a_position);\n    vec3 _589 = _1172.xyz;\n    gl_Position = u_projection * (u_view * _1172);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _589);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_725.xyz, _728.xyz, _731.xyz) * a_normal));\n    varying_ShadowPosition = _589;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    float _909 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _915 = (3.0 * (_909 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _918 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _922 = floor(_915 * _918);\n    float _928 = _915 - (_922 * u_skinnedAnimationMapInfo.x);\n    float _933 = (_922 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _943 = texture2D(u_skinnedAnimationMap, vec2((_928 + 0.5) * _918, _933));\n    vec4 _953 = texture2D(u_skinnedAnimationMap, vec2((_928 + 1.5) * _918, _933));\n    vec4 _963 = texture2D(u_skinnedAnimationMap, vec2((_928 + 2.5) * _918, _933));\n    float _1014 = (3.0 * (_909 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _1021 = floor(_1014 * _918);\n    float _1027 = _1014 - (_1021 * u_skinnedAnimationMapInfo.x);\n    float _1032 = (_1021 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1042 = texture2D(u_skinnedAnimationMap, vec2((_1027 + 0.5) * _918, _1032));\n    vec4 _1052 = texture2D(u_skinnedAnimationMap, vec2((_1027 + 1.5) * _918, _1032));\n    vec4 _1062 = texture2D(u_skinnedAnimationMap, vec2((_1027 + 2.5) * _918, _1032));\n    float _1113 = (3.0 * (_909 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1120 = floor(_1113 * _918);\n    float _1126 = _1113 - (_1120 * u_skinnedAnimationMapInfo.x);\n    float _1131 = (_1120 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1141 = texture2D(u_skinnedAnimationMap, vec2((_1126 + 0.5) * _918, _1131));\n    vec4 _1151 = texture2D(u_skinnedAnimationMap, vec2((_1126 + 1.5) * _918, _1131));\n    vec4 _1161 = texture2D(u_skinnedAnimationMap, vec2((_1126 + 2.5) * _918, _1131));\n    float _1212 = (3.0 * (_909 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1219 = floor(_1212 * _918);\n    float _1225 = _1212 - (_1219 * u_skinnedAnimationMapInfo.x);\n    float _1230 = (_1219 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1240 = texture2D(u_skinnedAnimationMap, vec2((_1225 + 0.5) * _918, _1230));\n    vec4 _1250 = texture2D(u_skinnedAnimationMap, vec2((_1225 + 1.5) * _918, _1230));\n    vec4 _1260 = texture2D(u_skinnedAnimationMap, vec2((_1225 + 2.5) * _918, _1230));\n    mat4 _805 = mat4(vec4(_943.xyz, 0.0), vec4(_953.xyz, 0.0), vec4(_963.xyz, 0.0), vec4(_943.w, _953.w, _963.w, 1.0)) * a_boneWeight.x;\n    mat4 _809 = mat4(vec4(_1042.xyz, 0.0), vec4(_1052.xyz, 0.0), vec4(_1062.xyz, 0.0), vec4(_1042.w, _1052.w, _1062.w, 1.0)) * a_boneWeight.y;\n    mat4 _827 = mat4(vec4(_1141.xyz, 0.0), vec4(_1151.xyz, 0.0), vec4(_1161.xyz, 0.0), vec4(_1141.w, _1151.w, _1161.w, 1.0)) * a_boneWeight.z;\n    mat4 _845 = mat4(vec4(_1240.xyz, 0.0), vec4(_1250.xyz, 0.0), vec4(_1260.xyz, 0.0), vec4(_1240.w, _1250.w, _1260.w, 1.0)) * a_boneWeight.w;\n    vec4 _849 = ((_805[0] + _809[0]) + _827[0]) + _845[0];\n    vec4 _852 = ((_805[1] + _809[1]) + _827[1]) + _845[1];\n    vec4 _855 = ((_805[2] + _809[2]) + _827[2]) + _845[2];\n    mat3 _867 = mat3(_849.xyz, _852.xyz, _855.xyz);\n    vec4 _1296 = u_world * (mat4(_849, _852, _855, ((_805[3] + _809[3]) + _827[3]) + _845[3]) * a_position);\n    mat3 _1316 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1319 = normalize(_1316 * (_867 * a_normal));\n    vec3 _1333 = normalize(_1316 * (_867 * a_tangent.xyz).xyz);\n    mat3 _692 = mat3(_1333, cross(_1333, _1319) * a_tangent.w, _1319);\n    gl_Position = u_projection * (u_view * _1296);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _692 * u_lightDir;\n    varying_ViewDir = _692 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1296.xyz);\n    varying_WorldNormal = _1319;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_1296.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\n\nvoid main()\n{\n    float _776 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _782 = (3.0 * (_776 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _785 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _789 = floor(_782 * _785);\n    float _795 = _782 - (_789 * u_skinnedAnimationMapInfo.x);\n    float _800 = (_789 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _810 = texture2D(u_skinnedAnimationMap, vec2((_795 + 0.5) * _785, _800));\n    vec4 _820 = texture2D(u_skinnedAnimationMap, vec2((_795 + 1.5) * _785, _800));\n    vec4 _830 = texture2D(u_skinnedAnimationMap, vec2((_795 + 2.5) * _785, _800));\n    float _881 = (3.0 * (_776 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _888 = floor(_881 * _785);\n    float _894 = _881 - (_888 * u_skinnedAnimationMapInfo.x);\n    float _899 = (_888 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _909 = texture2D(u_skinnedAnimationMap, vec2((_894 + 0.5) * _785, _899));\n    vec4 _919 = texture2D(u_skinnedAnimationMap, vec2((_894 + 1.5) * _785, _899));\n    vec4 _929 = texture2D(u_skinnedAnimationMap, vec2((_894 + 2.5) * _785, _899));\n    float _980 = (3.0 * (_776 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _987 = floor(_980 * _785);\n    float _993 = _980 - (_987 * u_skinnedAnimationMapInfo.x);\n    float _998 = (_987 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1008 = texture2D(u_skinnedAnimationMap, vec2((_993 + 0.5) * _785, _998));\n    vec4 _1018 = texture2D(u_skinnedAnimationMap, vec2((_993 + 1.5) * _785, _998));\n    vec4 _1028 = texture2D(u_skinnedAnimationMap, vec2((_993 + 2.5) * _785, _998));\n    float _1079 = (3.0 * (_776 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1086 = floor(_1079 * _785);\n    float _1092 = _1079 - (_1086 * u_skinnedAnimationMapInfo.x);\n    float _1097 = (_1086 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1107 = texture2D(u_skinnedAnimationMap, vec2((_1092 + 0.5) * _785, _1097));\n    vec4 _1117 = texture2D(u_skinnedAnimationMap, vec2((_1092 + 1.5) * _785, _1097));\n    vec4 _1127 = texture2D(u_skinnedAnimationMap, vec2((_1092 + 2.5) * _785, _1097));\n    mat4 _672 = mat4(vec4(_810.xyz, 0.0), vec4(_820.xyz, 0.0), vec4(_830.xyz, 0.0), vec4(_810.w, _820.w, _830.w, 1.0)) * a_boneWeight.x;\n    mat4 _676 = mat4(vec4(_909.xyz, 0.0), vec4(_919.xyz, 0.0), vec4(_929.xyz, 0.0), vec4(_909.w, _919.w, _929.w, 1.0)) * a_boneWeight.y;\n    mat4 _694 = mat4(vec4(_1008.xyz, 0.0), vec4(_1018.xyz, 0.0), vec4(_1028.xyz, 0.0), vec4(_1008.w, _1018.w, _1028.w, 1.0)) * a_boneWeight.z;\n    mat4 _712 = mat4(vec4(_1107.xyz, 0.0), vec4(_1117.xyz, 0.0), vec4(_1127.xyz, 0.0), vec4(_1107.w, _1117.w, _1127.w, 1.0)) * a_boneWeight.w;\n    vec4 _716 = ((_672[0] + _676[0]) + _694[0]) + _712[0];\n    vec4 _719 = ((_672[1] + _676[1]) + _694[1]) + _712[1];\n    vec4 _722 = ((_672[2] + _676[2]) + _694[2]) + _712[2];\n    vec4 _1163 = u_world * (mat4(_716, _719, _722, ((_672[3] + _676[3]) + _694[3]) + _712[3]) * a_position);\n    gl_Position = u_projection * (u_view * _1163);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1163.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_716.xyz, _719.xyz, _722.xyz) * a_normal));\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    float _801 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _807 = (3.0 * (_801 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _810 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _814 = floor(_807 * _810);\n    float _820 = _807 - (_814 * u_skinnedAnimationMapInfo.x);\n    float _825 = (_814 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _835 = texture2D(u_skinnedAnimationMap, vec2((_820 + 0.5) * _810, _825));\n    vec4 _845 = texture2D(u_skinnedAnimationMap, vec2((_820 + 1.5) * _810, _825));\n    vec4 _855 = texture2D(u_skinnedAnimationMap, vec2((_820 + 2.5) * _810, _825));\n    float _906 = (3.0 * (_801 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _913 = floor(_906 * _810);\n    float _919 = _906 - (_913 * u_skinnedAnimationMapInfo.x);\n    float _924 = (_913 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _934 = texture2D(u_skinnedAnimationMap, vec2((_919 + 0.5) * _810, _924));\n    vec4 _944 = texture2D(u_skinnedAnimationMap, vec2((_919 + 1.5) * _810, _924));\n    vec4 _954 = texture2D(u_skinnedAnimationMap, vec2((_919 + 2.5) * _810, _924));\n    float _1005 = (3.0 * (_801 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1012 = floor(_1005 * _810);\n    float _1018 = _1005 - (_1012 * u_skinnedAnimationMapInfo.x);\n    float _1023 = (_1012 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1033 = texture2D(u_skinnedAnimationMap, vec2((_1018 + 0.5) * _810, _1023));\n    vec4 _1043 = texture2D(u_skinnedAnimationMap, vec2((_1018 + 1.5) * _810, _1023));\n    vec4 _1053 = texture2D(u_skinnedAnimationMap, vec2((_1018 + 2.5) * _810, _1023));\n    float _1104 = (3.0 * (_801 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1111 = floor(_1104 * _810);\n    float _1117 = _1104 - (_1111 * u_skinnedAnimationMapInfo.x);\n    float _1122 = (_1111 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1132 = texture2D(u_skinnedAnimationMap, vec2((_1117 + 0.5) * _810, _1122));\n    vec4 _1142 = texture2D(u_skinnedAnimationMap, vec2((_1117 + 1.5) * _810, _1122));\n    vec4 _1152 = texture2D(u_skinnedAnimationMap, vec2((_1117 + 2.5) * _810, _1122));\n    mat4 _697 = mat4(vec4(_835.xyz, 0.0), vec4(_845.xyz, 0.0), vec4(_855.xyz, 0.0), vec4(_835.w, _845.w, _855.w, 1.0)) * a_boneWeight.x;\n    mat4 _701 = mat4(vec4(_934.xyz, 0.0), vec4(_944.xyz, 0.0), vec4(_954.xyz, 0.0), vec4(_934.w, _944.w, _954.w, 1.0)) * a_boneWeight.y;\n    mat4 _719 = mat4(vec4(_1033.xyz, 0.0), vec4(_1043.xyz, 0.0), vec4(_1053.xyz, 0.0), vec4(_1033.w, _1043.w, _1053.w, 1.0)) * a_boneWeight.z;\n    mat4 _737 = mat4(vec4(_1132.xyz, 0.0), vec4(_1142.xyz, 0.0), vec4(_1152.xyz, 0.0), vec4(_1132.w, _1142.w, _1152.w, 1.0)) * a_boneWeight.w;\n    vec4 _741 = ((_697[0] + _701[0]) + _719[0]) + _737[0];\n    vec4 _744 = ((_697[1] + _701[1]) + _719[1]) + _737[1];\n    vec4 _747 = ((_697[2] + _701[2]) + _719[2]) + _737[2];\n    vec4 _1188 = u_world * (mat4(_741, _744, _747, ((_697[3] + _701[3]) + _719[3]) + _737[3]) * a_position);\n    gl_Position = u_projection * (u_view * _1188);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1188.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_741.xyz, _744.xyz, _747.xyz) * a_normal));\n    varying_positionCamera_Fog = (u_view * vec4(_1188.xyz, 1.0)).xyz;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _354 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _362 = (_354 * _Color) * _AlbedoIntensity;\n    highp vec3 _365 = normalize(varying_LightDir);\n    highp vec3 _371 = normalize(varying_WorldNormal);\n    highp vec4 _407 = vec4(_362.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_365, _371))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _365), _371)), _Shininess * 128.0)) * (_SpecColor.xyz * _354.w))), _362.w);\n    highp float _450 = length(varying_positionCamera_Fog);\n    highp float _532 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _532 = (u_fogInfos.z - _450) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _533 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _533 = 1.0 / pow(2.7182800769805908203125, _450 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _534 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _534 = 1.0 / pow(2.7182800769805908203125, ((_450 * _450) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _534 = 1.0;\n            }\n            _533 = _534;\n        }\n        _532 = _533;\n    }\n    highp float _496 = clamp(_532, 0.0, 1.0);\n    highp vec3 _505 = (_407.xyz * _496) + (u_fogColor * (1.0 - _496));\n    gl_FragData[0] = vec4(_505.x, _505.y, _505.z, _407.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    float _810 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _816 = (3.0 * (_810 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _819 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _823 = floor(_816 * _819);\n    float _829 = _816 - (_823 * u_skinnedAnimationMapInfo.x);\n    float _834 = (_823 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _844 = texture2D(u_skinnedAnimationMap, vec2((_829 + 0.5) * _819, _834));\n    vec4 _854 = texture2D(u_skinnedAnimationMap, vec2((_829 + 1.5) * _819, _834));\n    vec4 _864 = texture2D(u_skinnedAnimationMap, vec2((_829 + 2.5) * _819, _834));\n    float _915 = (3.0 * (_810 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _922 = floor(_915 * _819);\n    float _928 = _915 - (_922 * u_skinnedAnimationMapInfo.x);\n    float _933 = (_922 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _943 = texture2D(u_skinnedAnimationMap, vec2((_928 + 0.5) * _819, _933));\n    vec4 _953 = texture2D(u_skinnedAnimationMap, vec2((_928 + 1.5) * _819, _933));\n    vec4 _963 = texture2D(u_skinnedAnimationMap, vec2((_928 + 2.5) * _819, _933));\n    float _1014 = (3.0 * (_810 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1021 = floor(_1014 * _819);\n    float _1027 = _1014 - (_1021 * u_skinnedAnimationMapInfo.x);\n    float _1032 = (_1021 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1042 = texture2D(u_skinnedAnimationMap, vec2((_1027 + 0.5) * _819, _1032));\n    vec4 _1052 = texture2D(u_skinnedAnimationMap, vec2((_1027 + 1.5) * _819, _1032));\n    vec4 _1062 = texture2D(u_skinnedAnimationMap, vec2((_1027 + 2.5) * _819, _1032));\n    float _1113 = (3.0 * (_810 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1120 = floor(_1113 * _819);\n    float _1126 = _1113 - (_1120 * u_skinnedAnimationMapInfo.x);\n    float _1131 = (_1120 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1141 = texture2D(u_skinnedAnimationMap, vec2((_1126 + 0.5) * _819, _1131));\n    vec4 _1151 = texture2D(u_skinnedAnimationMap, vec2((_1126 + 1.5) * _819, _1131));\n    vec4 _1161 = texture2D(u_skinnedAnimationMap, vec2((_1126 + 2.5) * _819, _1131));\n    mat4 _706 = mat4(vec4(_844.xyz, 0.0), vec4(_854.xyz, 0.0), vec4(_864.xyz, 0.0), vec4(_844.w, _854.w, _864.w, 1.0)) * a_boneWeight.x;\n    mat4 _710 = mat4(vec4(_943.xyz, 0.0), vec4(_953.xyz, 0.0), vec4(_963.xyz, 0.0), vec4(_943.w, _953.w, _963.w, 1.0)) * a_boneWeight.y;\n    mat4 _728 = mat4(vec4(_1042.xyz, 0.0), vec4(_1052.xyz, 0.0), vec4(_1062.xyz, 0.0), vec4(_1042.w, _1052.w, _1062.w, 1.0)) * a_boneWeight.z;\n    mat4 _746 = mat4(vec4(_1141.xyz, 0.0), vec4(_1151.xyz, 0.0), vec4(_1161.xyz, 0.0), vec4(_1141.w, _1151.w, _1161.w, 1.0)) * a_boneWeight.w;\n    vec4 _750 = ((_706[0] + _710[0]) + _728[0]) + _746[0];\n    vec4 _753 = ((_706[1] + _710[1]) + _728[1]) + _746[1];\n    vec4 _756 = ((_706[2] + _710[2]) + _728[2]) + _746[2];\n    vec4 _1197 = u_world * (mat4(_750, _753, _756, ((_706[3] + _710[3]) + _728[3]) + _746[3]) * a_position);\n    vec3 _603 = _1197.xyz;\n    gl_Position = u_projection * (u_view * _1197);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _603);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_750.xyz, _753.xyz, _756.xyz) * a_normal));\n    varying_positionCamera_Fog = (u_view * vec4(_1197.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _603;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _606 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _614 = (_606 * _Color) * _AlbedoIntensity;\n    highp vec3 _617 = normalize(varying_LightDir);\n    highp vec3 _623 = normalize(varying_WorldNormal);\n    highp vec4 _713 = vec4(varying_ShadowPosition, 1.0);\n    highp float _717 = -(u_view * _713).z;\n    bool _730 = true && (_717 < u_csmFarBounds.x);\n    highp float _1054 = 0.0;\n    if (_730)\n    {\n        highp vec3 _745 = ((u_csmLightSpaceMatrices[0] * _713).xyz * 0.5) + vec3(0.5);\n        highp float _749 = _745.x;\n        highp float _753 = _745.y;\n        highp float _763 = (((_745.z + step(_749, 0.001000000047497451305389404296875)) + step(_753, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _749)) + step(0.999000012874603271484375, _753);\n        highp float _1051 = 0.0;\n        for (int SPIRV_Cross_Dummy255 = 0; SPIRV_Cross_Dummy255 < 1; SPIRV_Cross_Dummy255++)\n        {\n            if (_763 > 1.0)\n            {\n                _1051 = 1.0;\n                break;\n            }\n            highp float _814 = _763 - 0.001000000047497451305389404296875;\n            highp vec2 _820 = ((_745.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _831 = fract(_820 * vec2(2048.0));\n            highp float _886 = _831.y;\n            _1051 = mix(mix(float(_814 < dot(texture2D(u_shadowMapTex, _820), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_814 < dot(texture2D(u_shadowMapTex, _820 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _886), mix(float(_814 < dot(texture2D(u_shadowMapTex, _820 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_814 < dot(texture2D(u_shadowMapTex, _820 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _886), _831.x);\n            break;\n        }\n        _1054 = _1051;\n    }\n    else\n    {\n        _1054 = 1.0;\n    }\n    bool _1381 = _730 ? true : false;\n    bool _1072 = (!_1381) && (_717 < u_csmFarBounds.y);\n    highp float _1163 = 0.0;\n    if (_1072)\n    {\n        highp vec3 _1083 = ((u_csmLightSpaceMatrices[1] * _713).xyz * 0.5) + vec3(0.5);\n        highp float _1085 = _1083.x;\n        highp float _1088 = _1083.y;\n        highp float _1096 = (((_1083.z + step(_1085, 0.001000000047497451305389404296875)) + step(_1088, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1085)) + step(0.999000012874603271484375, _1088);\n        highp float _1160 = 0.0;\n        for (int SPIRV_Cross_Dummy331 = 0; SPIRV_Cross_Dummy331 < 1; SPIRV_Cross_Dummy331++)\n        {\n            if (_1096 > 1.0)\n            {\n                _1160 = 1.0;\n                break;\n            }\n            highp float _1114 = _1096 - 0.001000000047497451305389404296875;\n            highp vec2 _1118 = ((_1083.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1125 = fract(_1118 * vec2(2048.0));\n            highp float _1153 = _1125.y;\n            _1160 = mix(mix(float(_1114 < dot(texture2D(u_shadowMapTex, _1118), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1114 < dot(texture2D(u_shadowMapTex, _1118 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1153), mix(float(_1114 < dot(texture2D(u_shadowMapTex, _1118 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1114 < dot(texture2D(u_shadowMapTex, _1118 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1153), _1125.x);\n            break;\n        }\n        _1163 = _1160;\n    }\n    else\n    {\n        _1163 = _1054;\n    }\n    bool _1382 = _1072 ? true : _1381;\n    bool _1177 = (!_1382) && (_717 < u_csmFarBounds.z);\n    highp float _1268 = 0.0;\n    if (_1177)\n    {\n        highp vec3 _1188 = ((u_csmLightSpaceMatrices[2] * _713).xyz * 0.5) + vec3(0.5);\n        highp float _1190 = _1188.x;\n        highp float _1193 = _1188.y;\n        highp float _1201 = (((_1188.z + step(_1190, 0.001000000047497451305389404296875)) + step(_1193, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1190)) + step(0.999000012874603271484375, _1193);\n        highp float _1265 = 0.0;\n        for (int SPIRV_Cross_Dummy407 = 0; SPIRV_Cross_Dummy407 < 1; SPIRV_Cross_Dummy407++)\n        {\n            if (_1201 > 1.0)\n            {\n                _1265 = 1.0;\n                break;\n            }\n            highp float _1219 = _1201 - 0.001000000047497451305389404296875;\n            highp vec2 _1223 = ((_1188.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1230 = fract(_1223 * vec2(2048.0));\n            highp float _1258 = _1230.y;\n            _1265 = mix(mix(float(_1219 < dot(texture2D(u_shadowMapTex, _1223), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1219 < dot(texture2D(u_shadowMapTex, _1223 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1258), mix(float(_1219 < dot(texture2D(u_shadowMapTex, _1223 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1219 < dot(texture2D(u_shadowMapTex, _1223 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1258), _1230.x);\n            break;\n        }\n        _1268 = _1265;\n    }\n    else\n    {\n        _1268 = _1163;\n    }\n    highp float _1373 = 0.0;\n    if ((!(_1177 ? true : _1382)) && (_717 < u_csmFarBounds.w))\n    {\n        highp vec3 _1293 = ((u_csmLightSpaceMatrices[3] * _713).xyz * 0.5) + vec3(0.5);\n        highp float _1295 = _1293.x;\n        highp float _1298 = _1293.y;\n        highp float _1306 = (((_1293.z + step(_1295, 0.001000000047497451305389404296875)) + step(_1298, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1295)) + step(0.999000012874603271484375, _1298);\n        highp float _1370 = 0.0;\n        for (int SPIRV_Cross_Dummy477 = 0; SPIRV_Cross_Dummy477 < 1; SPIRV_Cross_Dummy477++)\n        {\n            if (_1306 > 1.0)\n            {\n                _1370 = 1.0;\n                break;\n            }\n            highp float _1324 = _1306 - 0.001000000047497451305389404296875;\n            highp vec2 _1328 = ((_1293.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1335 = fract(_1328 * vec2(2048.0));\n            highp float _1363 = _1335.y;\n            _1370 = mix(mix(float(_1324 < dot(texture2D(u_shadowMapTex, _1328), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1324 < dot(texture2D(u_shadowMapTex, _1328 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1363), mix(float(_1324 < dot(texture2D(u_shadowMapTex, _1328 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1324 < dot(texture2D(u_shadowMapTex, _1328 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1363), _1335.x);\n            break;\n        }\n        _1373 = _1370;\n    }\n    else\n    {\n        _1373 = _1268;\n    }\n    highp vec4 _662 = vec4(_614.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_617, _623))) * _1373)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _617), _623)), _Shininess * 128.0)) * (_SpecColor.xyz * _606.w))), _614.w);\n    highp float _934 = length(varying_positionCamera_Fog);\n    highp float _1044 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1044 = (u_fogInfos.z - _934) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1045 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1045 = 1.0 / pow(2.7182800769805908203125, _934 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1046 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1046 = 1.0 / pow(2.7182800769805908203125, ((_934 * _934) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1046 = 1.0;\n            }\n            _1045 = _1046;\n        }\n        _1044 = _1045;\n    }\n    highp float _980 = clamp(_1044, 0.0, 1.0);\n    highp vec3 _989 = (_662.xyz * _980) + (u_fogColor * (1.0 - _980));\n    gl_FragData[0] = vec4(_989.x, _989.y, _989.z, _662.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    float _884 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _890 = (3.0 * (_884 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _893 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _897 = floor(_890 * _893);\n    float _903 = _890 - (_897 * u_skinnedAnimationMapInfo.x);\n    float _908 = (_897 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _918 = texture2D(u_skinnedAnimationMap, vec2((_903 + 0.5) * _893, _908));\n    vec4 _928 = texture2D(u_skinnedAnimationMap, vec2((_903 + 1.5) * _893, _908));\n    vec4 _938 = texture2D(u_skinnedAnimationMap, vec2((_903 + 2.5) * _893, _908));\n    float _989 = (3.0 * (_884 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _996 = floor(_989 * _893);\n    float _1002 = _989 - (_996 * u_skinnedAnimationMapInfo.x);\n    float _1007 = (_996 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1017 = texture2D(u_skinnedAnimationMap, vec2((_1002 + 0.5) * _893, _1007));\n    vec4 _1027 = texture2D(u_skinnedAnimationMap, vec2((_1002 + 1.5) * _893, _1007));\n    vec4 _1037 = texture2D(u_skinnedAnimationMap, vec2((_1002 + 2.5) * _893, _1007));\n    float _1088 = (3.0 * (_884 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1095 = floor(_1088 * _893);\n    float _1101 = _1088 - (_1095 * u_skinnedAnimationMapInfo.x);\n    float _1106 = (_1095 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1116 = texture2D(u_skinnedAnimationMap, vec2((_1101 + 0.5) * _893, _1106));\n    vec4 _1126 = texture2D(u_skinnedAnimationMap, vec2((_1101 + 1.5) * _893, _1106));\n    vec4 _1136 = texture2D(u_skinnedAnimationMap, vec2((_1101 + 2.5) * _893, _1106));\n    float _1187 = (3.0 * (_884 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1194 = floor(_1187 * _893);\n    float _1200 = _1187 - (_1194 * u_skinnedAnimationMapInfo.x);\n    float _1205 = (_1194 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1215 = texture2D(u_skinnedAnimationMap, vec2((_1200 + 0.5) * _893, _1205));\n    vec4 _1225 = texture2D(u_skinnedAnimationMap, vec2((_1200 + 1.5) * _893, _1205));\n    vec4 _1235 = texture2D(u_skinnedAnimationMap, vec2((_1200 + 2.5) * _893, _1205));\n    mat4 _780 = mat4(vec4(_918.xyz, 0.0), vec4(_928.xyz, 0.0), vec4(_938.xyz, 0.0), vec4(_918.w, _928.w, _938.w, 1.0)) * a_boneWeight.x;\n    mat4 _784 = mat4(vec4(_1017.xyz, 0.0), vec4(_1027.xyz, 0.0), vec4(_1037.xyz, 0.0), vec4(_1017.w, _1027.w, _1037.w, 1.0)) * a_boneWeight.y;\n    mat4 _802 = mat4(vec4(_1116.xyz, 0.0), vec4(_1126.xyz, 0.0), vec4(_1136.xyz, 0.0), vec4(_1116.w, _1126.w, _1136.w, 1.0)) * a_boneWeight.z;\n    mat4 _820 = mat4(vec4(_1215.xyz, 0.0), vec4(_1225.xyz, 0.0), vec4(_1235.xyz, 0.0), vec4(_1215.w, _1225.w, _1235.w, 1.0)) * a_boneWeight.w;\n    vec4 _824 = ((_780[0] + _784[0]) + _802[0]) + _820[0];\n    vec4 _827 = ((_780[1] + _784[1]) + _802[1]) + _820[1];\n    vec4 _830 = ((_780[2] + _784[2]) + _802[2]) + _820[2];\n    mat3 _842 = mat3(_824.xyz, _827.xyz, _830.xyz);\n    vec4 _1271 = u_world * (mat4(_824, _827, _830, ((_780[3] + _784[3]) + _802[3]) + _820[3]) * a_position);\n    mat3 _1291 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1294 = normalize(_1291 * (_842 * a_normal));\n    vec3 _1308 = normalize(_1291 * (_842 * a_tangent.xyz).xyz);\n    mat3 _678 = mat3(_1308, cross(_1308, _1294) * a_tangent.w, _1294);\n    gl_Position = u_projection * (u_view * _1271);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _678 * u_lightDir;\n    varying_ViewDir = _678 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1271.xyz);\n    varying_WorldNormal = _1294;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _374 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _382 = (_374 * _Color) * _AlbedoIntensity;\n    highp float _384 = _382.w;\n    if ((_384 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec2 _459 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _424 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_382.xyz * (min(_424, mix(max(_424, u_shadowColor), _424, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_459, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_459, _459)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _374.w))), _384);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    float _849 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _855 = (3.0 * (_849 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _858 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _862 = floor(_855 * _858);\n    float _868 = _855 - (_862 * u_skinnedAnimationMapInfo.x);\n    float _873 = (_862 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _883 = texture2D(u_skinnedAnimationMap, vec2((_868 + 0.5) * _858, _873));\n    vec4 _893 = texture2D(u_skinnedAnimationMap, vec2((_868 + 1.5) * _858, _873));\n    vec4 _903 = texture2D(u_skinnedAnimationMap, vec2((_868 + 2.5) * _858, _873));\n    float _954 = (3.0 * (_849 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _961 = floor(_954 * _858);\n    float _967 = _954 - (_961 * u_skinnedAnimationMapInfo.x);\n    float _972 = (_961 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _982 = texture2D(u_skinnedAnimationMap, vec2((_967 + 0.5) * _858, _972));\n    vec4 _992 = texture2D(u_skinnedAnimationMap, vec2((_967 + 1.5) * _858, _972));\n    vec4 _1002 = texture2D(u_skinnedAnimationMap, vec2((_967 + 2.5) * _858, _972));\n    float _1053 = (3.0 * (_849 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1060 = floor(_1053 * _858);\n    float _1066 = _1053 - (_1060 * u_skinnedAnimationMapInfo.x);\n    float _1071 = (_1060 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1081 = texture2D(u_skinnedAnimationMap, vec2((_1066 + 0.5) * _858, _1071));\n    vec4 _1091 = texture2D(u_skinnedAnimationMap, vec2((_1066 + 1.5) * _858, _1071));\n    vec4 _1101 = texture2D(u_skinnedAnimationMap, vec2((_1066 + 2.5) * _858, _1071));\n    float _1152 = (3.0 * (_849 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1159 = floor(_1152 * _858);\n    float _1165 = _1152 - (_1159 * u_skinnedAnimationMapInfo.x);\n    float _1170 = (_1159 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1180 = texture2D(u_skinnedAnimationMap, vec2((_1165 + 0.5) * _858, _1170));\n    vec4 _1190 = texture2D(u_skinnedAnimationMap, vec2((_1165 + 1.5) * _858, _1170));\n    vec4 _1200 = texture2D(u_skinnedAnimationMap, vec2((_1165 + 2.5) * _858, _1170));\n    mat4 _745 = mat4(vec4(_883.xyz, 0.0), vec4(_893.xyz, 0.0), vec4(_903.xyz, 0.0), vec4(_883.w, _893.w, _903.w, 1.0)) * a_boneWeight.x;\n    mat4 _749 = mat4(vec4(_982.xyz, 0.0), vec4(_992.xyz, 0.0), vec4(_1002.xyz, 0.0), vec4(_982.w, _992.w, _1002.w, 1.0)) * a_boneWeight.y;\n    mat4 _767 = mat4(vec4(_1081.xyz, 0.0), vec4(_1091.xyz, 0.0), vec4(_1101.xyz, 0.0), vec4(_1081.w, _1091.w, _1101.w, 1.0)) * a_boneWeight.z;\n    mat4 _785 = mat4(vec4(_1180.xyz, 0.0), vec4(_1190.xyz, 0.0), vec4(_1200.xyz, 0.0), vec4(_1180.w, _1190.w, _1200.w, 1.0)) * a_boneWeight.w;\n    vec4 _789 = ((_745[0] + _749[0]) + _767[0]) + _785[0];\n    vec4 _792 = ((_745[1] + _749[1]) + _767[1]) + _785[1];\n    vec4 _795 = ((_745[2] + _749[2]) + _767[2]) + _785[2];\n    vec4 _1236 = u_world * (mat4(_789, _792, _795, ((_745[3] + _749[3]) + _767[3]) + _785[3]) * a_position);\n    vec3 _624 = _1236.xyz;\n    gl_Position = u_projection * (u_view * _1236);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _624);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_789.xyz, _792.xyz, _795.xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_1236.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _624;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _706 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _714 = (_706 * _Color) * _AlbedoIntensity;\n    highp float _716 = _714.w;\n    if ((_716 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _731 = normalize(varying_WorldNormal);\n    highp vec4 _851 = vec4(varying_ShadowPosition, 1.0);\n    highp float _855 = -(u_view * _851).z;\n    bool _868 = true && (_855 < u_csmFarBounds.x);\n    highp float _1235 = 0.0;\n    if (_868)\n    {\n        highp vec3 _883 = ((u_csmLightSpaceMatrices[0] * _851).xyz * 0.5) + vec3(0.5);\n        highp float _887 = _883.x;\n        highp float _891 = _883.y;\n        highp float _901 = (((_883.z + step(_887, 0.001000000047497451305389404296875)) + step(_891, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _887)) + step(0.999000012874603271484375, _891);\n        highp float _1232 = 0.0;\n        for (int SPIRV_Cross_Dummy275 = 0; SPIRV_Cross_Dummy275 < 1; SPIRV_Cross_Dummy275++)\n        {\n            if (_901 > 1.0)\n            {\n                _1232 = 1.0;\n                break;\n            }\n            highp float _952 = _901 - 0.001000000047497451305389404296875;\n            highp vec2 _958 = ((_883.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _969 = fract(_958 * vec2(2048.0));\n            highp float _1024 = _969.y;\n            _1232 = mix(mix(float(_952 < dot(texture2D(u_shadowMapTex, _958), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_952 < dot(texture2D(u_shadowMapTex, _958 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1024), mix(float(_952 < dot(texture2D(u_shadowMapTex, _958 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_952 < dot(texture2D(u_shadowMapTex, _958 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1024), _969.x);\n            break;\n        }\n        _1235 = _1232;\n    }\n    else\n    {\n        _1235 = 1.0;\n    }\n    bool _1562 = _868 ? true : false;\n    bool _1253 = (!_1562) && (_855 < u_csmFarBounds.y);\n    highp float _1344 = 0.0;\n    if (_1253)\n    {\n        highp vec3 _1264 = ((u_csmLightSpaceMatrices[1] * _851).xyz * 0.5) + vec3(0.5);\n        highp float _1266 = _1264.x;\n        highp float _1269 = _1264.y;\n        highp float _1277 = (((_1264.z + step(_1266, 0.001000000047497451305389404296875)) + step(_1269, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1266)) + step(0.999000012874603271484375, _1269);\n        highp float _1341 = 0.0;\n        for (int SPIRV_Cross_Dummy351 = 0; SPIRV_Cross_Dummy351 < 1; SPIRV_Cross_Dummy351++)\n        {\n            if (_1277 > 1.0)\n            {\n                _1341 = 1.0;\n                break;\n            }\n            highp float _1295 = _1277 - 0.001000000047497451305389404296875;\n            highp vec2 _1299 = ((_1264.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1306 = fract(_1299 * vec2(2048.0));\n            highp float _1334 = _1306.y;\n            _1341 = mix(mix(float(_1295 < dot(texture2D(u_shadowMapTex, _1299), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1295 < dot(texture2D(u_shadowMapTex, _1299 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1334), mix(float(_1295 < dot(texture2D(u_shadowMapTex, _1299 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1295 < dot(texture2D(u_shadowMapTex, _1299 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1334), _1306.x);\n            break;\n        }\n        _1344 = _1341;\n    }\n    else\n    {\n        _1344 = _1235;\n    }\n    bool _1563 = _1253 ? true : _1562;\n    bool _1358 = (!_1563) && (_855 < u_csmFarBounds.z);\n    highp float _1449 = 0.0;\n    if (_1358)\n    {\n        highp vec3 _1369 = ((u_csmLightSpaceMatrices[2] * _851).xyz * 0.5) + vec3(0.5);\n        highp float _1371 = _1369.x;\n        highp float _1374 = _1369.y;\n        highp float _1382 = (((_1369.z + step(_1371, 0.001000000047497451305389404296875)) + step(_1374, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1371)) + step(0.999000012874603271484375, _1374);\n        highp float _1446 = 0.0;\n        for (int SPIRV_Cross_Dummy427 = 0; SPIRV_Cross_Dummy427 < 1; SPIRV_Cross_Dummy427++)\n        {\n            if (_1382 > 1.0)\n            {\n                _1446 = 1.0;\n                break;\n            }\n            highp float _1400 = _1382 - 0.001000000047497451305389404296875;\n            highp vec2 _1404 = ((_1369.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1411 = fract(_1404 * vec2(2048.0));\n            highp float _1439 = _1411.y;\n            _1446 = mix(mix(float(_1400 < dot(texture2D(u_shadowMapTex, _1404), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1400 < dot(texture2D(u_shadowMapTex, _1404 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1439), mix(float(_1400 < dot(texture2D(u_shadowMapTex, _1404 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1400 < dot(texture2D(u_shadowMapTex, _1404 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1439), _1411.x);\n            break;\n        }\n        _1449 = _1446;\n    }\n    else\n    {\n        _1449 = _1344;\n    }\n    highp float _1554 = 0.0;\n    if ((!(_1358 ? true : _1563)) && (_855 < u_csmFarBounds.w))\n    {\n        highp vec3 _1474 = ((u_csmLightSpaceMatrices[3] * _851).xyz * 0.5) + vec3(0.5);\n        highp float _1476 = _1474.x;\n        highp float _1479 = _1474.y;\n        highp float _1487 = (((_1474.z + step(_1476, 0.001000000047497451305389404296875)) + step(_1479, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1476)) + step(0.999000012874603271484375, _1479);\n        highp float _1551 = 0.0;\n        for (int SPIRV_Cross_Dummy497 = 0; SPIRV_Cross_Dummy497 < 1; SPIRV_Cross_Dummy497++)\n        {\n            if (_1487 > 1.0)\n            {\n                _1551 = 1.0;\n                break;\n            }\n            highp float _1505 = _1487 - 0.001000000047497451305389404296875;\n            highp vec2 _1509 = ((_1474.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1516 = fract(_1509 * vec2(2048.0));\n            highp float _1544 = _1516.y;\n            _1551 = mix(mix(float(_1505 < dot(texture2D(u_shadowMapTex, _1509), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1505 < dot(texture2D(u_shadowMapTex, _1509 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1544), mix(float(_1505 < dot(texture2D(u_shadowMapTex, _1509 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1505 < dot(texture2D(u_shadowMapTex, _1509 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1544), _1516.x);\n            break;\n        }\n        _1554 = _1551;\n    }\n    else\n    {\n        _1554 = _1449;\n    }\n    highp vec4 _750 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _752 = _750.xyz * 2.0;\n    highp vec4 _762 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _781 = vec4(_714.xyz * (min(_752, mix(max(_752 - (u_lightColor * (clamp(dot(_731, u_lightDir), 0.0, 1.0) * (1.0 - _1554))), u_shadowColor), _752, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _731)), _Shininess * 128.0)) * (_762.xyz * _SpecColor.xyz))), _716);\n    highp vec4 _787 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1110 = length(varying_positionCamera_Fog);\n    highp float _1225 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1225 = (u_fogInfos.z - _1110) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1226 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1226 = 1.0 / pow(2.7182800769805908203125, _1110 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1227 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1227 = 1.0 / pow(2.7182800769805908203125, ((_1110 * _1110) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1227 = 1.0;\n            }\n            _1226 = _1227;\n        }\n        _1225 = _1226;\n    }\n    highp float _1156 = clamp(_1225, 0.0, 1.0);\n    highp vec3 _1165 = ((_781.xyz + (_EmissionColor.xyz * _787.x)).xyz * _1156) + (u_fogColor * (1.0 - _1156));\n    gl_FragData[0] = vec4(_1165.x, _1165.y, _1165.z, _781.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    float _874 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _880 = (3.0 * (_874 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _883 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _887 = floor(_880 * _883);\n    float _893 = _880 - (_887 * u_skinnedAnimationMapInfo.x);\n    float _898 = (_887 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _908 = texture2D(u_skinnedAnimationMap, vec2((_893 + 0.5) * _883, _898));\n    vec4 _918 = texture2D(u_skinnedAnimationMap, vec2((_893 + 1.5) * _883, _898));\n    vec4 _928 = texture2D(u_skinnedAnimationMap, vec2((_893 + 2.5) * _883, _898));\n    float _979 = (3.0 * (_874 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _986 = floor(_979 * _883);\n    float _992 = _979 - (_986 * u_skinnedAnimationMapInfo.x);\n    float _997 = (_986 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1007 = texture2D(u_skinnedAnimationMap, vec2((_992 + 0.5) * _883, _997));\n    vec4 _1017 = texture2D(u_skinnedAnimationMap, vec2((_992 + 1.5) * _883, _997));\n    vec4 _1027 = texture2D(u_skinnedAnimationMap, vec2((_992 + 2.5) * _883, _997));\n    float _1078 = (3.0 * (_874 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1085 = floor(_1078 * _883);\n    float _1091 = _1078 - (_1085 * u_skinnedAnimationMapInfo.x);\n    float _1096 = (_1085 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1106 = texture2D(u_skinnedAnimationMap, vec2((_1091 + 0.5) * _883, _1096));\n    vec4 _1116 = texture2D(u_skinnedAnimationMap, vec2((_1091 + 1.5) * _883, _1096));\n    vec4 _1126 = texture2D(u_skinnedAnimationMap, vec2((_1091 + 2.5) * _883, _1096));\n    float _1177 = (3.0 * (_874 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1184 = floor(_1177 * _883);\n    float _1190 = _1177 - (_1184 * u_skinnedAnimationMapInfo.x);\n    float _1195 = (_1184 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1205 = texture2D(u_skinnedAnimationMap, vec2((_1190 + 0.5) * _883, _1195));\n    vec4 _1215 = texture2D(u_skinnedAnimationMap, vec2((_1190 + 1.5) * _883, _1195));\n    vec4 _1225 = texture2D(u_skinnedAnimationMap, vec2((_1190 + 2.5) * _883, _1195));\n    mat4 _770 = mat4(vec4(_908.xyz, 0.0), vec4(_918.xyz, 0.0), vec4(_928.xyz, 0.0), vec4(_908.w, _918.w, _928.w, 1.0)) * a_boneWeight.x;\n    mat4 _774 = mat4(vec4(_1007.xyz, 0.0), vec4(_1017.xyz, 0.0), vec4(_1027.xyz, 0.0), vec4(_1007.w, _1017.w, _1027.w, 1.0)) * a_boneWeight.y;\n    mat4 _792 = mat4(vec4(_1106.xyz, 0.0), vec4(_1116.xyz, 0.0), vec4(_1126.xyz, 0.0), vec4(_1106.w, _1116.w, _1126.w, 1.0)) * a_boneWeight.z;\n    mat4 _810 = mat4(vec4(_1205.xyz, 0.0), vec4(_1215.xyz, 0.0), vec4(_1225.xyz, 0.0), vec4(_1205.w, _1215.w, _1225.w, 1.0)) * a_boneWeight.w;\n    vec4 _814 = ((_770[0] + _774[0]) + _792[0]) + _810[0];\n    vec4 _817 = ((_770[1] + _774[1]) + _792[1]) + _810[1];\n    vec4 _820 = ((_770[2] + _774[2]) + _792[2]) + _810[2];\n    mat3 _832 = mat3(_814.xyz, _817.xyz, _820.xyz);\n    vec4 _1261 = u_world * (mat4(_814, _817, _820, ((_770[3] + _774[3]) + _792[3]) + _810[3]) * a_position);\n    mat3 _1281 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1284 = normalize(_1281 * (_832 * a_normal));\n    vec3 _1298 = normalize(_1281 * (_832 * a_tangent.xyz).xyz);\n    mat3 _673 = mat3(_1298, cross(_1298, _1284) * a_tangent.w, _1284);\n    gl_Position = u_projection * (u_view * _1261);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _673 * u_lightDir;\n    varying_ViewDir = _673 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1261.xyz);\n    varying_WorldNormal = _1284;\n    varying_positionCamera_Fog = (u_view * vec4(_1261.xyz, 1.0)).xyz;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _396 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _404 = (_396 * _Color) * _AlbedoIntensity;\n    highp vec3 _407 = normalize(varying_LightDir);\n    highp vec4 _419 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _478 = (_419.xy - vec2(0.5)) * 2.0;\n    highp vec3 _489 = vec3(_478, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_478, _478))));\n    highp vec4 _442 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _461 = vec4(_404.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_407, _489))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _407), _489)), _Shininess * 128.0)) * (_442.xyz * _SpecColor.xyz))), _404.w);\n    highp float _524 = length(varying_positionCamera_Fog);\n    highp float _604 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _604 = (u_fogInfos.z - _524) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _605 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _605 = 1.0 / pow(2.7182800769805908203125, _524 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _606 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _606 = 1.0 / pow(2.7182800769805908203125, ((_524 * _524) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _606 = 1.0;\n            }\n            _605 = _606;\n        }\n        _604 = _605;\n    }\n    highp float _570 = clamp(_604, 0.0, 1.0);\n    highp vec3 _579 = (_461.xyz * _570) + (u_fogColor * (1.0 - _570));\n    gl_FragData[0] = vec4(_579.x, _579.y, _579.z, _461.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    vec4 _453 = u_world * a_position;\n    gl_Position = u_projection * (u_view * _453);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _453.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_positionCamera_Fog = (u_view * vec4(_453.xyz, 1.0)).xyz;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _352 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _360 = (_352 * _Color) * _AlbedoIntensity;\n    highp vec3 _363 = normalize(varying_LightDir);\n    highp vec3 _369 = normalize(varying_WorldNormal);\n    highp vec4 _405 = vec4(_360.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_363, _369))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _363), _369)), _Shininess * 128.0)) * (_SpecColor.xyz * _352.w))), _360.w);\n    highp float _448 = length(varying_positionCamera_Fog);\n    highp float _530 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _530 = (u_fogInfos.z - _448) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _531 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _531 = 1.0 / pow(2.7182800769805908203125, _448 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _532 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _532 = 1.0 / pow(2.7182800769805908203125, ((_448 * _448) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _532 = 1.0;\n            }\n            _531 = _532;\n        }\n        _530 = _531;\n    }\n    highp float _494 = clamp(_530, 0.0, 1.0);\n    highp vec3 _503 = (_405.xyz * _494) + (u_fogColor * (1.0 - _494));\n    gl_FragData[0] = vec4(_503.x, _503.y, _503.z, _405.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    float _922 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _928 = (3.0 * (_922 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _931 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _935 = floor(_928 * _931);\n    float _941 = _928 - (_935 * u_skinnedAnimationMapInfo.x);\n    float _946 = (_935 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _956 = texture2D(u_skinnedAnimationMap, vec2((_941 + 0.5) * _931, _946));\n    vec4 _966 = texture2D(u_skinnedAnimationMap, vec2((_941 + 1.5) * _931, _946));\n    vec4 _976 = texture2D(u_skinnedAnimationMap, vec2((_941 + 2.5) * _931, _946));\n    float _1027 = (3.0 * (_922 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _1034 = floor(_1027 * _931);\n    float _1040 = _1027 - (_1034 * u_skinnedAnimationMapInfo.x);\n    float _1045 = (_1034 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1055 = texture2D(u_skinnedAnimationMap, vec2((_1040 + 0.5) * _931, _1045));\n    vec4 _1065 = texture2D(u_skinnedAnimationMap, vec2((_1040 + 1.5) * _931, _1045));\n    vec4 _1075 = texture2D(u_skinnedAnimationMap, vec2((_1040 + 2.5) * _931, _1045));\n    float _1126 = (3.0 * (_922 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1133 = floor(_1126 * _931);\n    float _1139 = _1126 - (_1133 * u_skinnedAnimationMapInfo.x);\n    float _1144 = (_1133 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1154 = texture2D(u_skinnedAnimationMap, vec2((_1139 + 0.5) * _931, _1144));\n    vec4 _1164 = texture2D(u_skinnedAnimationMap, vec2((_1139 + 1.5) * _931, _1144));\n    vec4 _1174 = texture2D(u_skinnedAnimationMap, vec2((_1139 + 2.5) * _931, _1144));\n    float _1225 = (3.0 * (_922 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1232 = floor(_1225 * _931);\n    float _1238 = _1225 - (_1232 * u_skinnedAnimationMapInfo.x);\n    float _1243 = (_1232 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1253 = texture2D(u_skinnedAnimationMap, vec2((_1238 + 0.5) * _931, _1243));\n    vec4 _1263 = texture2D(u_skinnedAnimationMap, vec2((_1238 + 1.5) * _931, _1243));\n    vec4 _1273 = texture2D(u_skinnedAnimationMap, vec2((_1238 + 2.5) * _931, _1243));\n    mat4 _818 = mat4(vec4(_956.xyz, 0.0), vec4(_966.xyz, 0.0), vec4(_976.xyz, 0.0), vec4(_956.w, _966.w, _976.w, 1.0)) * a_boneWeight.x;\n    mat4 _822 = mat4(vec4(_1055.xyz, 0.0), vec4(_1065.xyz, 0.0), vec4(_1075.xyz, 0.0), vec4(_1055.w, _1065.w, _1075.w, 1.0)) * a_boneWeight.y;\n    mat4 _840 = mat4(vec4(_1154.xyz, 0.0), vec4(_1164.xyz, 0.0), vec4(_1174.xyz, 0.0), vec4(_1154.w, _1164.w, _1174.w, 1.0)) * a_boneWeight.z;\n    mat4 _858 = mat4(vec4(_1253.xyz, 0.0), vec4(_1263.xyz, 0.0), vec4(_1273.xyz, 0.0), vec4(_1253.w, _1263.w, _1273.w, 1.0)) * a_boneWeight.w;\n    vec4 _862 = ((_818[0] + _822[0]) + _840[0]) + _858[0];\n    vec4 _865 = ((_818[1] + _822[1]) + _840[1]) + _858[1];\n    vec4 _868 = ((_818[2] + _822[2]) + _840[2]) + _858[2];\n    mat3 _880 = mat3(_862.xyz, _865.xyz, _868.xyz);\n    vec4 _1309 = u_world * (mat4(_862, _865, _868, ((_818[3] + _822[3]) + _840[3]) + _858[3]) * a_position);\n    vec3 _665 = _1309.xyz;\n    mat3 _1329 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1332 = normalize(_1329 * (_880 * a_normal));\n    vec3 _1346 = normalize(_1329 * (_880 * a_tangent.xyz).xyz);\n    mat3 _700 = mat3(_1346, cross(_1346, _1332) * a_tangent.w, _1332);\n    gl_Position = u_projection * (u_view * _1309);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _700 * u_lightDir;\n    varying_ViewDir = _700 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _665);\n    varying_WorldNormal = _1332;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_1309.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _665;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _736 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _744 = (_736 * _Color) * _AlbedoIntensity;\n    highp float _746 = _744.w;\n    if ((_746 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _767 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _849 = (_767.xy - vec2(0.5)) * 2.0;\n    highp vec4 _903 = vec4(varying_ShadowPosition, 1.0);\n    highp float _907 = -(u_view * _903).z;\n    bool _920 = true && (_907 < u_csmFarBounds.x);\n    highp float _1288 = 0.0;\n    if (_920)\n    {\n        highp vec3 _935 = ((u_csmLightSpaceMatrices[0] * _903).xyz * 0.5) + vec3(0.5);\n        highp float _939 = _935.x;\n        highp float _943 = _935.y;\n        highp float _953 = (((_935.z + step(_939, 0.001000000047497451305389404296875)) + step(_943, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _939)) + step(0.999000012874603271484375, _943);\n        highp float _1285 = 0.0;\n        for (int SPIRV_Cross_Dummy278 = 0; SPIRV_Cross_Dummy278 < 1; SPIRV_Cross_Dummy278++)\n        {\n            if (_953 > 1.0)\n            {\n                _1285 = 1.0;\n                break;\n            }\n            highp float _1004 = _953 - 0.001000000047497451305389404296875;\n            highp vec2 _1010 = ((_935.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _1021 = fract(_1010 * vec2(2048.0));\n            highp float _1076 = _1021.y;\n            _1285 = mix(mix(float(_1004 < dot(texture2D(u_shadowMapTex, _1010), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1004 < dot(texture2D(u_shadowMapTex, _1010 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1076), mix(float(_1004 < dot(texture2D(u_shadowMapTex, _1010 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1004 < dot(texture2D(u_shadowMapTex, _1010 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1076), _1021.x);\n            break;\n        }\n        _1288 = _1285;\n    }\n    else\n    {\n        _1288 = 1.0;\n    }\n    bool _1616 = _920 ? true : false;\n    bool _1307 = (!_1616) && (_907 < u_csmFarBounds.y);\n    highp float _1398 = 0.0;\n    if (_1307)\n    {\n        highp vec3 _1318 = ((u_csmLightSpaceMatrices[1] * _903).xyz * 0.5) + vec3(0.5);\n        highp float _1320 = _1318.x;\n        highp float _1323 = _1318.y;\n        highp float _1331 = (((_1318.z + step(_1320, 0.001000000047497451305389404296875)) + step(_1323, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1320)) + step(0.999000012874603271484375, _1323);\n        highp float _1395 = 0.0;\n        for (int SPIRV_Cross_Dummy354 = 0; SPIRV_Cross_Dummy354 < 1; SPIRV_Cross_Dummy354++)\n        {\n            if (_1331 > 1.0)\n            {\n                _1395 = 1.0;\n                break;\n            }\n            highp float _1349 = _1331 - 0.001000000047497451305389404296875;\n            highp vec2 _1353 = ((_1318.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1360 = fract(_1353 * vec2(2048.0));\n            highp float _1388 = _1360.y;\n            _1395 = mix(mix(float(_1349 < dot(texture2D(u_shadowMapTex, _1353), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1349 < dot(texture2D(u_shadowMapTex, _1353 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1388), mix(float(_1349 < dot(texture2D(u_shadowMapTex, _1353 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1349 < dot(texture2D(u_shadowMapTex, _1353 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1388), _1360.x);\n            break;\n        }\n        _1398 = _1395;\n    }\n    else\n    {\n        _1398 = _1288;\n    }\n    bool _1617 = _1307 ? true : _1616;\n    bool _1412 = (!_1617) && (_907 < u_csmFarBounds.z);\n    highp float _1503 = 0.0;\n    if (_1412)\n    {\n        highp vec3 _1423 = ((u_csmLightSpaceMatrices[2] * _903).xyz * 0.5) + vec3(0.5);\n        highp float _1425 = _1423.x;\n        highp float _1428 = _1423.y;\n        highp float _1436 = (((_1423.z + step(_1425, 0.001000000047497451305389404296875)) + step(_1428, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1425)) + step(0.999000012874603271484375, _1428);\n        highp float _1500 = 0.0;\n        for (int SPIRV_Cross_Dummy430 = 0; SPIRV_Cross_Dummy430 < 1; SPIRV_Cross_Dummy430++)\n        {\n            if (_1436 > 1.0)\n            {\n                _1500 = 1.0;\n                break;\n            }\n            highp float _1454 = _1436 - 0.001000000047497451305389404296875;\n            highp vec2 _1458 = ((_1423.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1465 = fract(_1458 * vec2(2048.0));\n            highp float _1493 = _1465.y;\n            _1500 = mix(mix(float(_1454 < dot(texture2D(u_shadowMapTex, _1458), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1454 < dot(texture2D(u_shadowMapTex, _1458 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1493), mix(float(_1454 < dot(texture2D(u_shadowMapTex, _1458 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1454 < dot(texture2D(u_shadowMapTex, _1458 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1493), _1465.x);\n            break;\n        }\n        _1503 = _1500;\n    }\n    else\n    {\n        _1503 = _1398;\n    }\n    highp float _1608 = 0.0;\n    if ((!(_1412 ? true : _1617)) && (_907 < u_csmFarBounds.w))\n    {\n        highp vec3 _1528 = ((u_csmLightSpaceMatrices[3] * _903).xyz * 0.5) + vec3(0.5);\n        highp float _1530 = _1528.x;\n        highp float _1533 = _1528.y;\n        highp float _1541 = (((_1528.z + step(_1530, 0.001000000047497451305389404296875)) + step(_1533, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1530)) + step(0.999000012874603271484375, _1533);\n        highp float _1605 = 0.0;\n        for (int SPIRV_Cross_Dummy500 = 0; SPIRV_Cross_Dummy500 < 1; SPIRV_Cross_Dummy500++)\n        {\n            if (_1541 > 1.0)\n            {\n                _1605 = 1.0;\n                break;\n            }\n            highp float _1559 = _1541 - 0.001000000047497451305389404296875;\n            highp vec2 _1563 = ((_1528.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1570 = fract(_1563 * vec2(2048.0));\n            highp float _1598 = _1570.y;\n            _1605 = mix(mix(float(_1559 < dot(texture2D(u_shadowMapTex, _1563), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1559 < dot(texture2D(u_shadowMapTex, _1563 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1598), mix(float(_1559 < dot(texture2D(u_shadowMapTex, _1563 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1559 < dot(texture2D(u_shadowMapTex, _1563 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1598), _1570.x);\n            break;\n        }\n        _1608 = _1605;\n    }\n    else\n    {\n        _1608 = _1503;\n    }\n    highp vec4 _787 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _789 = _787.xyz * 2.0;\n    highp vec4 _813 = vec4(_744.xyz * (min(_789, mix(max(_789 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1608))), u_shadowColor), _789, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_849, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_849, _849)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _736.w))), _746);\n    highp vec4 _819 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1162 = length(varying_positionCamera_Fog);\n    highp float _1278 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1278 = (u_fogInfos.z - _1162) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1279 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1279 = 1.0 / pow(2.7182800769805908203125, _1162 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1280 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1280 = 1.0 / pow(2.7182800769805908203125, ((_1162 * _1162) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1280 = 1.0;\n            }\n            _1279 = _1280;\n        }\n        _1278 = _1279;\n    }\n    highp float _1208 = clamp(_1278, 0.0, 1.0);\n    highp vec3 _1217 = ((_813.xyz + (_EmissionColor.xyz * _819.x)).xyz * _1208) + (u_fogColor * (1.0 - _1208));\n    gl_FragData[0] = vec4(_1217.x, _1217.y, _1217.z, _813.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _744 = int(a_boneIndex.x) * 3;\n    int _749 = _744 + 1;\n    int _753 = _744 + 2;\n    int _795 = int(a_boneIndex.y) * 3;\n    int _800 = _795 + 1;\n    int _804 = _795 + 2;\n    int _846 = int(a_boneIndex.z) * 3;\n    int _851 = _846 + 1;\n    int _855 = _846 + 2;\n    int _897 = int(a_boneIndex.w) * 3;\n    int _902 = _897 + 1;\n    int _906 = _897 + 2;\n    mat4 _645 = mat4(vec4(u_boneOffsetMatrix[_744].xyz, 0.0), vec4(u_boneOffsetMatrix[_749].xyz, 0.0), vec4(u_boneOffsetMatrix[_753].xyz, 0.0), vec4(u_boneOffsetMatrix[_744].w, u_boneOffsetMatrix[_749].w, u_boneOffsetMatrix[_753].w, 1.0)) * a_boneWeight.x;\n    mat4 _649 = mat4(vec4(u_boneOffsetMatrix[_795].xyz, 0.0), vec4(u_boneOffsetMatrix[_800].xyz, 0.0), vec4(u_boneOffsetMatrix[_804].xyz, 0.0), vec4(u_boneOffsetMatrix[_795].w, u_boneOffsetMatrix[_800].w, u_boneOffsetMatrix[_804].w, 1.0)) * a_boneWeight.y;\n    mat4 _667 = mat4(vec4(u_boneOffsetMatrix[_846].xyz, 0.0), vec4(u_boneOffsetMatrix[_851].xyz, 0.0), vec4(u_boneOffsetMatrix[_855].xyz, 0.0), vec4(u_boneOffsetMatrix[_846].w, u_boneOffsetMatrix[_851].w, u_boneOffsetMatrix[_855].w, 1.0)) * a_boneWeight.z;\n    mat4 _685 = mat4(vec4(u_boneOffsetMatrix[_897].xyz, 0.0), vec4(u_boneOffsetMatrix[_902].xyz, 0.0), vec4(u_boneOffsetMatrix[_906].xyz, 0.0), vec4(u_boneOffsetMatrix[_897].w, u_boneOffsetMatrix[_902].w, u_boneOffsetMatrix[_906].w, 1.0)) * a_boneWeight.w;\n    vec4 _689 = ((_645[0] + _649[0]) + _667[0]) + _685[0];\n    vec4 _692 = ((_645[1] + _649[1]) + _667[1]) + _685[1];\n    vec4 _695 = ((_645[2] + _649[2]) + _667[2]) + _685[2];\n    vec4 _944 = u_world * (mat4(_689, _692, _695, ((_645[3] + _649[3]) + _667[3]) + _685[3]) * a_position);\n    gl_Position = u_projection * (u_view * _944);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _944.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_689.xyz, _692.xyz, _695.xyz) * a_normal));\n    varying_positionCamera_Fog = (u_view * vec4(_944.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    vec4 _462 = u_world * a_position;\n    vec3 _378 = _462.xyz;\n    gl_Position = u_projection * (u_view * _462);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _378);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_positionCamera_Fog = (u_view * vec4(_462.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _378;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _604 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _612 = (_604 * _Color) * _AlbedoIntensity;\n    highp vec3 _615 = normalize(varying_LightDir);\n    highp vec3 _621 = normalize(varying_WorldNormal);\n    highp vec4 _711 = vec4(varying_ShadowPosition, 1.0);\n    highp float _715 = -(u_view * _711).z;\n    bool _728 = true && (_715 < u_csmFarBounds.x);\n    highp float _1052 = 0.0;\n    if (_728)\n    {\n        highp vec3 _743 = ((u_csmLightSpaceMatrices[0] * _711).xyz * 0.5) + vec3(0.5);\n        highp float _747 = _743.x;\n        highp float _751 = _743.y;\n        highp float _761 = (((_743.z + step(_747, 0.001000000047497451305389404296875)) + step(_751, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _747)) + step(0.999000012874603271484375, _751);\n        highp float _1049 = 0.0;\n        for (int SPIRV_Cross_Dummy255 = 0; SPIRV_Cross_Dummy255 < 1; SPIRV_Cross_Dummy255++)\n        {\n            if (_761 > 1.0)\n            {\n                _1049 = 1.0;\n                break;\n            }\n            highp float _812 = _761 - 0.001000000047497451305389404296875;\n            highp vec2 _818 = ((_743.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _829 = fract(_818 * vec2(2048.0));\n            highp float _884 = _829.y;\n            _1049 = mix(mix(float(_812 < dot(texture2D(u_shadowMapTex, _818), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_812 < dot(texture2D(u_shadowMapTex, _818 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _884), mix(float(_812 < dot(texture2D(u_shadowMapTex, _818 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_812 < dot(texture2D(u_shadowMapTex, _818 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _884), _829.x);\n            break;\n        }\n        _1052 = _1049;\n    }\n    else\n    {\n        _1052 = 1.0;\n    }\n    bool _1379 = _728 ? true : false;\n    bool _1070 = (!_1379) && (_715 < u_csmFarBounds.y);\n    highp float _1161 = 0.0;\n    if (_1070)\n    {\n        highp vec3 _1081 = ((u_csmLightSpaceMatrices[1] * _711).xyz * 0.5) + vec3(0.5);\n        highp float _1083 = _1081.x;\n        highp float _1086 = _1081.y;\n        highp float _1094 = (((_1081.z + step(_1083, 0.001000000047497451305389404296875)) + step(_1086, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1083)) + step(0.999000012874603271484375, _1086);\n        highp float _1158 = 0.0;\n        for (int SPIRV_Cross_Dummy331 = 0; SPIRV_Cross_Dummy331 < 1; SPIRV_Cross_Dummy331++)\n        {\n            if (_1094 > 1.0)\n            {\n                _1158 = 1.0;\n                break;\n            }\n            highp float _1112 = _1094 - 0.001000000047497451305389404296875;\n            highp vec2 _1116 = ((_1081.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1123 = fract(_1116 * vec2(2048.0));\n            highp float _1151 = _1123.y;\n            _1158 = mix(mix(float(_1112 < dot(texture2D(u_shadowMapTex, _1116), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1112 < dot(texture2D(u_shadowMapTex, _1116 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1151), mix(float(_1112 < dot(texture2D(u_shadowMapTex, _1116 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1112 < dot(texture2D(u_shadowMapTex, _1116 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1151), _1123.x);\n            break;\n        }\n        _1161 = _1158;\n    }\n    else\n    {\n        _1161 = _1052;\n    }\n    bool _1380 = _1070 ? true : _1379;\n    bool _1175 = (!_1380) && (_715 < u_csmFarBounds.z);\n    highp float _1266 = 0.0;\n    if (_1175)\n    {\n        highp vec3 _1186 = ((u_csmLightSpaceMatrices[2] * _711).xyz * 0.5) + vec3(0.5);\n        highp float _1188 = _1186.x;\n        highp float _1191 = _1186.y;\n        highp float _1199 = (((_1186.z + step(_1188, 0.001000000047497451305389404296875)) + step(_1191, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1188)) + step(0.999000012874603271484375, _1191);\n        highp float _1263 = 0.0;\n        for (int SPIRV_Cross_Dummy407 = 0; SPIRV_Cross_Dummy407 < 1; SPIRV_Cross_Dummy407++)\n        {\n            if (_1199 > 1.0)\n            {\n                _1263 = 1.0;\n                break;\n            }\n            highp float _1217 = _1199 - 0.001000000047497451305389404296875;\n            highp vec2 _1221 = ((_1186.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1228 = fract(_1221 * vec2(2048.0));\n            highp float _1256 = _1228.y;\n            _1263 = mix(mix(float(_1217 < dot(texture2D(u_shadowMapTex, _1221), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1217 < dot(texture2D(u_shadowMapTex, _1221 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1256), mix(float(_1217 < dot(texture2D(u_shadowMapTex, _1221 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1217 < dot(texture2D(u_shadowMapTex, _1221 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1256), _1228.x);\n            break;\n        }\n        _1266 = _1263;\n    }\n    else\n    {\n        _1266 = _1161;\n    }\n    highp float _1371 = 0.0;\n    if ((!(_1175 ? true : _1380)) && (_715 < u_csmFarBounds.w))\n    {\n        highp vec3 _1291 = ((u_csmLightSpaceMatrices[3] * _711).xyz * 0.5) + vec3(0.5);\n        highp float _1293 = _1291.x;\n        highp float _1296 = _1291.y;\n        highp float _1304 = (((_1291.z + step(_1293, 0.001000000047497451305389404296875)) + step(_1296, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1293)) + step(0.999000012874603271484375, _1296);\n        highp float _1368 = 0.0;\n        for (int SPIRV_Cross_Dummy477 = 0; SPIRV_Cross_Dummy477 < 1; SPIRV_Cross_Dummy477++)\n        {\n            if (_1304 > 1.0)\n            {\n                _1368 = 1.0;\n                break;\n            }\n            highp float _1322 = _1304 - 0.001000000047497451305389404296875;\n            highp vec2 _1326 = ((_1291.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1333 = fract(_1326 * vec2(2048.0));\n            highp float _1361 = _1333.y;\n            _1368 = mix(mix(float(_1322 < dot(texture2D(u_shadowMapTex, _1326), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1322 < dot(texture2D(u_shadowMapTex, _1326 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1361), mix(float(_1322 < dot(texture2D(u_shadowMapTex, _1326 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1322 < dot(texture2D(u_shadowMapTex, _1326 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1361), _1333.x);\n            break;\n        }\n        _1371 = _1368;\n    }\n    else\n    {\n        _1371 = _1266;\n    }\n    highp vec4 _660 = vec4(_612.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_615, _621))) * _1371)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _615), _621)), _Shininess * 128.0)) * (_SpecColor.xyz * _604.w))), _612.w);\n    highp float _932 = length(varying_positionCamera_Fog);\n    highp float _1042 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1042 = (u_fogInfos.z - _932) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1043 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1043 = 1.0 / pow(2.7182800769805908203125, _932 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1044 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1044 = 1.0 / pow(2.7182800769805908203125, ((_932 * _932) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1044 = 1.0;\n            }\n            _1043 = _1044;\n        }\n        _1042 = _1043;\n    }\n    highp float _978 = clamp(_1042, 0.0, 1.0);\n    highp vec3 _987 = (_660.xyz * _978) + (u_fogColor * (1.0 - _978));\n    gl_FragData[0] = vec4(_987.x, _987.y, _987.z, _660.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    vec4 _536 = u_world * a_position;\n    mat3 _556 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _559 = normalize(_556 * a_normal);\n    vec3 _573 = normalize(_556 * a_tangent.xyz);\n    mat3 _453 = mat3(_573, cross(_573, _559) * a_tangent.w, _559);\n    gl_Position = u_projection * (u_view * _536);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _453 * u_lightDir;\n    varying_ViewDir = _453 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _536.xyz);\n    varying_WorldNormal = _559;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _372 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _380 = (_372 * _Color) * _AlbedoIntensity;\n    highp float _382 = _380.w;\n    if ((_382 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec2 _457 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _422 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_380.xyz * (min(_422, mix(max(_422, u_shadowColor), _422, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_457, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_457, _457)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _372.w))), _382);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\n\nvoid main()\n{\n    int _731 = int(a_boneIndex.x) * 3;\n    int _736 = _731 + 1;\n    int _740 = _731 + 2;\n    int _782 = int(a_boneIndex.y) * 3;\n    int _787 = _782 + 1;\n    int _791 = _782 + 2;\n    int _833 = int(a_boneIndex.z) * 3;\n    int _838 = _833 + 1;\n    int _842 = _833 + 2;\n    int _884 = int(a_boneIndex.w) * 3;\n    int _889 = _884 + 1;\n    int _893 = _884 + 2;\n    mat4 _628 = mat4(vec4(u_boneOffsetMatrix[_731].xyz, 0.0), vec4(u_boneOffsetMatrix[_736].xyz, 0.0), vec4(u_boneOffsetMatrix[_740].xyz, 0.0), vec4(u_boneOffsetMatrix[_731].w, u_boneOffsetMatrix[_736].w, u_boneOffsetMatrix[_740].w, 1.0)) * a_boneWeight.x;\n    mat4 _632 = mat4(vec4(u_boneOffsetMatrix[_782].xyz, 0.0), vec4(u_boneOffsetMatrix[_787].xyz, 0.0), vec4(u_boneOffsetMatrix[_791].xyz, 0.0), vec4(u_boneOffsetMatrix[_782].w, u_boneOffsetMatrix[_787].w, u_boneOffsetMatrix[_791].w, 1.0)) * a_boneWeight.y;\n    mat4 _650 = mat4(vec4(u_boneOffsetMatrix[_833].xyz, 0.0), vec4(u_boneOffsetMatrix[_838].xyz, 0.0), vec4(u_boneOffsetMatrix[_842].xyz, 0.0), vec4(u_boneOffsetMatrix[_833].w, u_boneOffsetMatrix[_838].w, u_boneOffsetMatrix[_842].w, 1.0)) * a_boneWeight.z;\n    mat4 _668 = mat4(vec4(u_boneOffsetMatrix[_884].xyz, 0.0), vec4(u_boneOffsetMatrix[_889].xyz, 0.0), vec4(u_boneOffsetMatrix[_893].xyz, 0.0), vec4(u_boneOffsetMatrix[_884].w, u_boneOffsetMatrix[_889].w, u_boneOffsetMatrix[_893].w, 1.0)) * a_boneWeight.w;\n    mat4 _686 = u_bindTargetWorldInverse * mat4(((_628[0] + _632[0]) + _650[0]) + _668[0], ((_628[1] + _632[1]) + _650[1]) + _668[1], ((_628[2] + _632[2]) + _650[2]) + _668[2], ((_628[3] + _632[3]) + _650[3]) + _668[3]);\n    vec4 _931 = u_world * (_686 * a_position);\n    gl_Position = u_projection * (u_view * _931);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _931.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_686[0].xyz, _686[1].xyz, _686[2].xyz) * a_normal));\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\n\nvoid main()\n{\n    highp vec4 _298 = (texture2D(_MainTex, varying_TexCoord) * _Color) * _AlbedoIntensity;\n    highp vec3 _301 = normalize(varying_LightDir);\n    highp vec3 _307 = normalize(varying_WorldNormal);\n    highp vec4 _348 = vec4(_298.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_301, _307))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _301), _307)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _298.w);\n    highp vec3 _364 = _348.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_364.x, _364.y, _364.z, _348.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _753 = int(a_boneIndex.x) * 3;\n    int _758 = _753 + 1;\n    int _762 = _753 + 2;\n    int _804 = int(a_boneIndex.y) * 3;\n    int _809 = _804 + 1;\n    int _813 = _804 + 2;\n    int _855 = int(a_boneIndex.z) * 3;\n    int _860 = _855 + 1;\n    int _864 = _855 + 2;\n    int _906 = int(a_boneIndex.w) * 3;\n    int _911 = _906 + 1;\n    int _915 = _906 + 2;\n    mat4 _654 = mat4(vec4(u_boneOffsetMatrix[_753].xyz, 0.0), vec4(u_boneOffsetMatrix[_758].xyz, 0.0), vec4(u_boneOffsetMatrix[_762].xyz, 0.0), vec4(u_boneOffsetMatrix[_753].w, u_boneOffsetMatrix[_758].w, u_boneOffsetMatrix[_762].w, 1.0)) * a_boneWeight.x;\n    mat4 _658 = mat4(vec4(u_boneOffsetMatrix[_804].xyz, 0.0), vec4(u_boneOffsetMatrix[_809].xyz, 0.0), vec4(u_boneOffsetMatrix[_813].xyz, 0.0), vec4(u_boneOffsetMatrix[_804].w, u_boneOffsetMatrix[_809].w, u_boneOffsetMatrix[_813].w, 1.0)) * a_boneWeight.y;\n    mat4 _676 = mat4(vec4(u_boneOffsetMatrix[_855].xyz, 0.0), vec4(u_boneOffsetMatrix[_860].xyz, 0.0), vec4(u_boneOffsetMatrix[_864].xyz, 0.0), vec4(u_boneOffsetMatrix[_855].w, u_boneOffsetMatrix[_860].w, u_boneOffsetMatrix[_864].w, 1.0)) * a_boneWeight.z;\n    mat4 _694 = mat4(vec4(u_boneOffsetMatrix[_906].xyz, 0.0), vec4(u_boneOffsetMatrix[_911].xyz, 0.0), vec4(u_boneOffsetMatrix[_915].xyz, 0.0), vec4(u_boneOffsetMatrix[_906].w, u_boneOffsetMatrix[_911].w, u_boneOffsetMatrix[_915].w, 1.0)) * a_boneWeight.w;\n    vec4 _698 = ((_654[0] + _658[0]) + _676[0]) + _694[0];\n    vec4 _701 = ((_654[1] + _658[1]) + _676[1]) + _694[1];\n    vec4 _704 = ((_654[2] + _658[2]) + _676[2]) + _694[2];\n    vec4 _953 = u_world * (mat4(_698, _701, _704, ((_654[3] + _658[3]) + _676[3]) + _694[3]) * a_position);\n    vec3 _551 = _953.xyz;\n    gl_Position = u_projection * (u_view * _953);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _551);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_698.xyz, _701.xyz, _704.xyz) * a_normal));\n    varying_positionCamera_Fog = (u_view * vec4(_953.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _551;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    int _827 = int(a_boneIndex.x) * 3;\n    int _832 = _827 + 1;\n    int _836 = _827 + 2;\n    int _878 = int(a_boneIndex.y) * 3;\n    int _883 = _878 + 1;\n    int _887 = _878 + 2;\n    int _929 = int(a_boneIndex.z) * 3;\n    int _934 = _929 + 1;\n    int _938 = _929 + 2;\n    int _980 = int(a_boneIndex.w) * 3;\n    int _985 = _980 + 1;\n    int _989 = _980 + 2;\n    mat4 _728 = mat4(vec4(u_boneOffsetMatrix[_827].xyz, 0.0), vec4(u_boneOffsetMatrix[_832].xyz, 0.0), vec4(u_boneOffsetMatrix[_836].xyz, 0.0), vec4(u_boneOffsetMatrix[_827].w, u_boneOffsetMatrix[_832].w, u_boneOffsetMatrix[_836].w, 1.0)) * a_boneWeight.x;\n    mat4 _732 = mat4(vec4(u_boneOffsetMatrix[_878].xyz, 0.0), vec4(u_boneOffsetMatrix[_883].xyz, 0.0), vec4(u_boneOffsetMatrix[_887].xyz, 0.0), vec4(u_boneOffsetMatrix[_878].w, u_boneOffsetMatrix[_883].w, u_boneOffsetMatrix[_887].w, 1.0)) * a_boneWeight.y;\n    mat4 _750 = mat4(vec4(u_boneOffsetMatrix[_929].xyz, 0.0), vec4(u_boneOffsetMatrix[_934].xyz, 0.0), vec4(u_boneOffsetMatrix[_938].xyz, 0.0), vec4(u_boneOffsetMatrix[_929].w, u_boneOffsetMatrix[_934].w, u_boneOffsetMatrix[_938].w, 1.0)) * a_boneWeight.z;\n    mat4 _768 = mat4(vec4(u_boneOffsetMatrix[_980].xyz, 0.0), vec4(u_boneOffsetMatrix[_985].xyz, 0.0), vec4(u_boneOffsetMatrix[_989].xyz, 0.0), vec4(u_boneOffsetMatrix[_980].w, u_boneOffsetMatrix[_985].w, u_boneOffsetMatrix[_989].w, 1.0)) * a_boneWeight.w;\n    vec4 _772 = ((_728[0] + _732[0]) + _750[0]) + _768[0];\n    vec4 _775 = ((_728[1] + _732[1]) + _750[1]) + _768[1];\n    vec4 _778 = ((_728[2] + _732[2]) + _750[2]) + _768[2];\n    mat3 _790 = mat3(_772.xyz, _775.xyz, _778.xyz);\n    vec4 _1027 = u_world * (mat4(_772, _775, _778, ((_728[3] + _732[3]) + _750[3]) + _768[3]) * a_position);\n    mat3 _1047 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1050 = normalize(_1047 * (_790 * a_normal));\n    vec3 _1064 = normalize(_1047 * (_790 * a_tangent.xyz).xyz);\n    mat3 _626 = mat3(_1064, cross(_1064, _1050) * a_tangent.w, _1050);\n    gl_Position = u_projection * (u_view * _1027);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _626 * u_lightDir;\n    varying_ViewDir = _626 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1027.xyz);\n    varying_WorldNormal = _1050;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _752 = int(a_boneIndex.x) * 3;\n    int _757 = _752 + 1;\n    int _761 = _752 + 2;\n    int _803 = int(a_boneIndex.y) * 3;\n    int _808 = _803 + 1;\n    int _812 = _803 + 2;\n    int _854 = int(a_boneIndex.z) * 3;\n    int _859 = _854 + 1;\n    int _863 = _854 + 2;\n    int _905 = int(a_boneIndex.w) * 3;\n    int _910 = _905 + 1;\n    int _914 = _905 + 2;\n    mat4 _649 = mat4(vec4(u_boneOffsetMatrix[_752].xyz, 0.0), vec4(u_boneOffsetMatrix[_757].xyz, 0.0), vec4(u_boneOffsetMatrix[_761].xyz, 0.0), vec4(u_boneOffsetMatrix[_752].w, u_boneOffsetMatrix[_757].w, u_boneOffsetMatrix[_761].w, 1.0)) * a_boneWeight.x;\n    mat4 _653 = mat4(vec4(u_boneOffsetMatrix[_803].xyz, 0.0), vec4(u_boneOffsetMatrix[_808].xyz, 0.0), vec4(u_boneOffsetMatrix[_812].xyz, 0.0), vec4(u_boneOffsetMatrix[_803].w, u_boneOffsetMatrix[_808].w, u_boneOffsetMatrix[_812].w, 1.0)) * a_boneWeight.y;\n    mat4 _671 = mat4(vec4(u_boneOffsetMatrix[_854].xyz, 0.0), vec4(u_boneOffsetMatrix[_859].xyz, 0.0), vec4(u_boneOffsetMatrix[_863].xyz, 0.0), vec4(u_boneOffsetMatrix[_854].w, u_boneOffsetMatrix[_859].w, u_boneOffsetMatrix[_863].w, 1.0)) * a_boneWeight.z;\n    mat4 _689 = mat4(vec4(u_boneOffsetMatrix[_905].xyz, 0.0), vec4(u_boneOffsetMatrix[_910].xyz, 0.0), vec4(u_boneOffsetMatrix[_914].xyz, 0.0), vec4(u_boneOffsetMatrix[_905].w, u_boneOffsetMatrix[_910].w, u_boneOffsetMatrix[_914].w, 1.0)) * a_boneWeight.w;\n    mat4 _707 = u_bindTargetWorldInverse * mat4(((_649[0] + _653[0]) + _671[0]) + _689[0], ((_649[1] + _653[1]) + _671[1]) + _689[1], ((_649[2] + _653[2]) + _671[2]) + _689[2], ((_649[3] + _653[3]) + _671[3]) + _689[3]);\n    vec4 _952 = u_world * (_707 * a_position);\n    gl_Position = u_projection * (u_view * _952);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _952.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_707[0].xyz, _707[1].xyz, _707[2].xyz) * a_normal));\n    varying_positionCamera_Fog = (u_view * vec4(_952.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    float _819 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _825 = (3.0 * (_819 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _828 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _832 = floor(_825 * _828);\n    float _838 = _825 - (_832 * u_skinnedAnimationMapInfo.x);\n    float _843 = (_832 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _853 = texture2D(u_skinnedAnimationMap, vec2((_838 + 0.5) * _828, _843));\n    vec4 _863 = texture2D(u_skinnedAnimationMap, vec2((_838 + 1.5) * _828, _843));\n    vec4 _873 = texture2D(u_skinnedAnimationMap, vec2((_838 + 2.5) * _828, _843));\n    float _924 = (3.0 * (_819 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _931 = floor(_924 * _828);\n    float _937 = _924 - (_931 * u_skinnedAnimationMapInfo.x);\n    float _942 = (_931 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _952 = texture2D(u_skinnedAnimationMap, vec2((_937 + 0.5) * _828, _942));\n    vec4 _962 = texture2D(u_skinnedAnimationMap, vec2((_937 + 1.5) * _828, _942));\n    vec4 _972 = texture2D(u_skinnedAnimationMap, vec2((_937 + 2.5) * _828, _942));\n    float _1023 = (3.0 * (_819 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1030 = floor(_1023 * _828);\n    float _1036 = _1023 - (_1030 * u_skinnedAnimationMapInfo.x);\n    float _1041 = (_1030 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1051 = texture2D(u_skinnedAnimationMap, vec2((_1036 + 0.5) * _828, _1041));\n    vec4 _1061 = texture2D(u_skinnedAnimationMap, vec2((_1036 + 1.5) * _828, _1041));\n    vec4 _1071 = texture2D(u_skinnedAnimationMap, vec2((_1036 + 2.5) * _828, _1041));\n    float _1122 = (3.0 * (_819 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1129 = floor(_1122 * _828);\n    float _1135 = _1122 - (_1129 * u_skinnedAnimationMapInfo.x);\n    float _1140 = (_1129 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1150 = texture2D(u_skinnedAnimationMap, vec2((_1135 + 0.5) * _828, _1140));\n    vec4 _1160 = texture2D(u_skinnedAnimationMap, vec2((_1135 + 1.5) * _828, _1140));\n    vec4 _1170 = texture2D(u_skinnedAnimationMap, vec2((_1135 + 2.5) * _828, _1140));\n    mat4 _715 = mat4(vec4(_853.xyz, 0.0), vec4(_863.xyz, 0.0), vec4(_873.xyz, 0.0), vec4(_853.w, _863.w, _873.w, 1.0)) * a_boneWeight.x;\n    mat4 _719 = mat4(vec4(_952.xyz, 0.0), vec4(_962.xyz, 0.0), vec4(_972.xyz, 0.0), vec4(_952.w, _962.w, _972.w, 1.0)) * a_boneWeight.y;\n    mat4 _737 = mat4(vec4(_1051.xyz, 0.0), vec4(_1061.xyz, 0.0), vec4(_1071.xyz, 0.0), vec4(_1051.w, _1061.w, _1071.w, 1.0)) * a_boneWeight.z;\n    mat4 _755 = mat4(vec4(_1150.xyz, 0.0), vec4(_1160.xyz, 0.0), vec4(_1170.xyz, 0.0), vec4(_1150.w, _1160.w, _1170.w, 1.0)) * a_boneWeight.w;\n    vec4 _759 = ((_715[0] + _719[0]) + _737[0]) + _755[0];\n    vec4 _762 = ((_715[1] + _719[1]) + _737[1]) + _755[1];\n    vec4 _765 = ((_715[2] + _719[2]) + _737[2]) + _755[2];\n    vec4 _1206 = u_world * (mat4(_759, _762, _765, ((_715[3] + _719[3]) + _737[3]) + _755[3]) * a_position);\n    gl_Position = u_projection * (u_view * _1206);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1206.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_759.xyz, _762.xyz, _765.xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _342 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _350 = (_342 * _Color) * _AlbedoIntensity;\n    highp float _352 = _350.w;\n    if ((_352 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _385 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_350.xyz * (min(_385, mix(max(_385, u_shadowColor), _385, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _352);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _761 = int(a_boneIndex.x) * 3;\n    int _766 = _761 + 1;\n    int _770 = _761 + 2;\n    int _812 = int(a_boneIndex.y) * 3;\n    int _817 = _812 + 1;\n    int _821 = _812 + 2;\n    int _863 = int(a_boneIndex.z) * 3;\n    int _868 = _863 + 1;\n    int _872 = _863 + 2;\n    int _914 = int(a_boneIndex.w) * 3;\n    int _919 = _914 + 1;\n    int _923 = _914 + 2;\n    mat4 _658 = mat4(vec4(u_boneOffsetMatrix[_761].xyz, 0.0), vec4(u_boneOffsetMatrix[_766].xyz, 0.0), vec4(u_boneOffsetMatrix[_770].xyz, 0.0), vec4(u_boneOffsetMatrix[_761].w, u_boneOffsetMatrix[_766].w, u_boneOffsetMatrix[_770].w, 1.0)) * a_boneWeight.x;\n    mat4 _662 = mat4(vec4(u_boneOffsetMatrix[_812].xyz, 0.0), vec4(u_boneOffsetMatrix[_817].xyz, 0.0), vec4(u_boneOffsetMatrix[_821].xyz, 0.0), vec4(u_boneOffsetMatrix[_812].w, u_boneOffsetMatrix[_817].w, u_boneOffsetMatrix[_821].w, 1.0)) * a_boneWeight.y;\n    mat4 _680 = mat4(vec4(u_boneOffsetMatrix[_863].xyz, 0.0), vec4(u_boneOffsetMatrix[_868].xyz, 0.0), vec4(u_boneOffsetMatrix[_872].xyz, 0.0), vec4(u_boneOffsetMatrix[_863].w, u_boneOffsetMatrix[_868].w, u_boneOffsetMatrix[_872].w, 1.0)) * a_boneWeight.z;\n    mat4 _698 = mat4(vec4(u_boneOffsetMatrix[_914].xyz, 0.0), vec4(u_boneOffsetMatrix[_919].xyz, 0.0), vec4(u_boneOffsetMatrix[_923].xyz, 0.0), vec4(u_boneOffsetMatrix[_914].w, u_boneOffsetMatrix[_919].w, u_boneOffsetMatrix[_923].w, 1.0)) * a_boneWeight.w;\n    mat4 _716 = u_bindTargetWorldInverse * mat4(((_658[0] + _662[0]) + _680[0]) + _698[0], ((_658[1] + _662[1]) + _680[1]) + _698[1], ((_658[2] + _662[2]) + _680[2]) + _698[2], ((_658[3] + _662[3]) + _680[3]) + _698[3]);\n    vec4 _961 = u_world * (_716 * a_position);\n    vec3 _555 = _961.xyz;\n    gl_Position = u_projection * (u_view * _961);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _555);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_716[0].xyz, _716[1].xyz, _716[2].xyz) * a_normal));\n    varying_positionCamera_Fog = (u_view * vec4(_961.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _555;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    int _835 = int(a_boneIndex.x) * 3;\n    int _840 = _835 + 1;\n    int _844 = _835 + 2;\n    int _886 = int(a_boneIndex.y) * 3;\n    int _891 = _886 + 1;\n    int _895 = _886 + 2;\n    int _937 = int(a_boneIndex.z) * 3;\n    int _942 = _937 + 1;\n    int _946 = _937 + 2;\n    int _988 = int(a_boneIndex.w) * 3;\n    int _993 = _988 + 1;\n    int _997 = _988 + 2;\n    mat4 _732 = mat4(vec4(u_boneOffsetMatrix[_835].xyz, 0.0), vec4(u_boneOffsetMatrix[_840].xyz, 0.0), vec4(u_boneOffsetMatrix[_844].xyz, 0.0), vec4(u_boneOffsetMatrix[_835].w, u_boneOffsetMatrix[_840].w, u_boneOffsetMatrix[_844].w, 1.0)) * a_boneWeight.x;\n    mat4 _736 = mat4(vec4(u_boneOffsetMatrix[_886].xyz, 0.0), vec4(u_boneOffsetMatrix[_891].xyz, 0.0), vec4(u_boneOffsetMatrix[_895].xyz, 0.0), vec4(u_boneOffsetMatrix[_886].w, u_boneOffsetMatrix[_891].w, u_boneOffsetMatrix[_895].w, 1.0)) * a_boneWeight.y;\n    mat4 _754 = mat4(vec4(u_boneOffsetMatrix[_937].xyz, 0.0), vec4(u_boneOffsetMatrix[_942].xyz, 0.0), vec4(u_boneOffsetMatrix[_946].xyz, 0.0), vec4(u_boneOffsetMatrix[_937].w, u_boneOffsetMatrix[_942].w, u_boneOffsetMatrix[_946].w, 1.0)) * a_boneWeight.z;\n    mat4 _772 = mat4(vec4(u_boneOffsetMatrix[_988].xyz, 0.0), vec4(u_boneOffsetMatrix[_993].xyz, 0.0), vec4(u_boneOffsetMatrix[_997].xyz, 0.0), vec4(u_boneOffsetMatrix[_988].w, u_boneOffsetMatrix[_993].w, u_boneOffsetMatrix[_997].w, 1.0)) * a_boneWeight.w;\n    mat4 _790 = u_bindTargetWorldInverse * mat4(((_732[0] + _736[0]) + _754[0]) + _772[0], ((_732[1] + _736[1]) + _754[1]) + _772[1], ((_732[2] + _736[2]) + _754[2]) + _772[2], ((_732[3] + _736[3]) + _754[3]) + _772[3]);\n    mat3 _798 = mat3(_790[0].xyz, _790[1].xyz, _790[2].xyz);\n    vec4 _1035 = u_world * (_790 * a_position);\n    mat3 _1055 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1058 = normalize(_1055 * (_798 * a_normal));\n    vec3 _1072 = normalize(_1055 * (_798 * a_tangent.xyz).xyz);\n    mat3 _630 = mat3(_1072, cross(_1072, _1058) * a_tangent.w, _1058);\n    gl_Position = u_projection * (u_view * _1035);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _630 * u_lightDir;\n    varying_ViewDir = _630 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1035.xyz);\n    varying_WorldNormal = _1058;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    float _815 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _821 = (3.0 * (_815 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _824 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _828 = floor(_821 * _824);\n    float _834 = _821 - (_828 * u_skinnedAnimationMapInfo.x);\n    float _839 = (_828 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _849 = texture2D(u_skinnedAnimationMap, vec2((_834 + 0.5) * _824, _839));\n    vec4 _859 = texture2D(u_skinnedAnimationMap, vec2((_834 + 1.5) * _824, _839));\n    vec4 _869 = texture2D(u_skinnedAnimationMap, vec2((_834 + 2.5) * _824, _839));\n    float _920 = (3.0 * (_815 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _927 = floor(_920 * _824);\n    float _933 = _920 - (_927 * u_skinnedAnimationMapInfo.x);\n    float _938 = (_927 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _948 = texture2D(u_skinnedAnimationMap, vec2((_933 + 0.5) * _824, _938));\n    vec4 _958 = texture2D(u_skinnedAnimationMap, vec2((_933 + 1.5) * _824, _938));\n    vec4 _968 = texture2D(u_skinnedAnimationMap, vec2((_933 + 2.5) * _824, _938));\n    float _1019 = (3.0 * (_815 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1026 = floor(_1019 * _824);\n    float _1032 = _1019 - (_1026 * u_skinnedAnimationMapInfo.x);\n    float _1037 = (_1026 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1047 = texture2D(u_skinnedAnimationMap, vec2((_1032 + 0.5) * _824, _1037));\n    vec4 _1057 = texture2D(u_skinnedAnimationMap, vec2((_1032 + 1.5) * _824, _1037));\n    vec4 _1067 = texture2D(u_skinnedAnimationMap, vec2((_1032 + 2.5) * _824, _1037));\n    float _1118 = (3.0 * (_815 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1125 = floor(_1118 * _824);\n    float _1131 = _1118 - (_1125 * u_skinnedAnimationMapInfo.x);\n    float _1136 = (_1125 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1146 = texture2D(u_skinnedAnimationMap, vec2((_1131 + 0.5) * _824, _1136));\n    vec4 _1156 = texture2D(u_skinnedAnimationMap, vec2((_1131 + 1.5) * _824, _1136));\n    vec4 _1166 = texture2D(u_skinnedAnimationMap, vec2((_1131 + 2.5) * _824, _1136));\n    mat4 _711 = mat4(vec4(_849.xyz, 0.0), vec4(_859.xyz, 0.0), vec4(_869.xyz, 0.0), vec4(_849.w, _859.w, _869.w, 1.0)) * a_boneWeight.x;\n    mat4 _715 = mat4(vec4(_948.xyz, 0.0), vec4(_958.xyz, 0.0), vec4(_968.xyz, 0.0), vec4(_948.w, _958.w, _968.w, 1.0)) * a_boneWeight.y;\n    mat4 _733 = mat4(vec4(_1047.xyz, 0.0), vec4(_1057.xyz, 0.0), vec4(_1067.xyz, 0.0), vec4(_1047.w, _1057.w, _1067.w, 1.0)) * a_boneWeight.z;\n    mat4 _751 = mat4(vec4(_1146.xyz, 0.0), vec4(_1156.xyz, 0.0), vec4(_1166.xyz, 0.0), vec4(_1146.w, _1156.w, _1166.w, 1.0)) * a_boneWeight.w;\n    vec4 _755 = ((_711[0] + _715[0]) + _733[0]) + _751[0];\n    vec4 _758 = ((_711[1] + _715[1]) + _733[1]) + _751[1];\n    vec4 _761 = ((_711[2] + _715[2]) + _733[2]) + _751[2];\n    vec4 _1202 = u_world * (mat4(_755, _758, _761, ((_711[3] + _715[3]) + _733[3]) + _751[3]) * a_position);\n    gl_Position = u_projection * (u_view * _1202);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1202.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_755.xyz, _758.xyz, _761.xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _326 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _334 = (_326 * _Color) * _AlbedoIntensity;\n    highp vec3 _361 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_334.xyz * (min(_361, mix(max(_361, u_shadowColor), _361, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_SpecColor.xyz * _326.w))), _334.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _583 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _591 = (_583 * _Color) * _AlbedoIntensity;\n    highp vec3 _600 = normalize(varying_WorldNormal);\n    highp vec4 _689 = vec4(varying_ShadowPosition, 1.0);\n    highp float _693 = -(u_view * _689).z;\n    bool _706 = true && (_693 < u_csmFarBounds.x);\n    highp float _997 = 0.0;\n    if (_706)\n    {\n        highp vec3 _721 = ((u_csmLightSpaceMatrices[0] * _689).xyz * 0.5) + vec3(0.5);\n        highp float _725 = _721.x;\n        highp float _729 = _721.y;\n        highp float _739 = (((_721.z + step(_725, 0.001000000047497451305389404296875)) + step(_729, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _725)) + step(0.999000012874603271484375, _729);\n        highp float _994 = 0.0;\n        for (int SPIRV_Cross_Dummy255 = 0; SPIRV_Cross_Dummy255 < 1; SPIRV_Cross_Dummy255++)\n        {\n            if (_739 > 1.0)\n            {\n                _994 = 1.0;\n                break;\n            }\n            highp float _790 = _739 - 0.001000000047497451305389404296875;\n            highp vec2 _796 = ((_721.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _807 = fract(_796 * vec2(2048.0));\n            highp float _862 = _807.y;\n            _994 = mix(mix(float(_790 < dot(texture2D(u_shadowMapTex, _796), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_790 < dot(texture2D(u_shadowMapTex, _796 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _862), mix(float(_790 < dot(texture2D(u_shadowMapTex, _796 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_790 < dot(texture2D(u_shadowMapTex, _796 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _862), _807.x);\n            break;\n        }\n        _997 = _994;\n    }\n    else\n    {\n        _997 = 1.0;\n    }\n    bool _1324 = _706 ? true : false;\n    bool _1015 = (!_1324) && (_693 < u_csmFarBounds.y);\n    highp float _1106 = 0.0;\n    if (_1015)\n    {\n        highp vec3 _1026 = ((u_csmLightSpaceMatrices[1] * _689).xyz * 0.5) + vec3(0.5);\n        highp float _1028 = _1026.x;\n        highp float _1031 = _1026.y;\n        highp float _1039 = (((_1026.z + step(_1028, 0.001000000047497451305389404296875)) + step(_1031, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1028)) + step(0.999000012874603271484375, _1031);\n        highp float _1103 = 0.0;\n        for (int SPIRV_Cross_Dummy331 = 0; SPIRV_Cross_Dummy331 < 1; SPIRV_Cross_Dummy331++)\n        {\n            if (_1039 > 1.0)\n            {\n                _1103 = 1.0;\n                break;\n            }\n            highp float _1057 = _1039 - 0.001000000047497451305389404296875;\n            highp vec2 _1061 = ((_1026.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1068 = fract(_1061 * vec2(2048.0));\n            highp float _1096 = _1068.y;\n            _1103 = mix(mix(float(_1057 < dot(texture2D(u_shadowMapTex, _1061), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1057 < dot(texture2D(u_shadowMapTex, _1061 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1096), mix(float(_1057 < dot(texture2D(u_shadowMapTex, _1061 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1057 < dot(texture2D(u_shadowMapTex, _1061 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1096), _1068.x);\n            break;\n        }\n        _1106 = _1103;\n    }\n    else\n    {\n        _1106 = _997;\n    }\n    bool _1325 = _1015 ? true : _1324;\n    bool _1120 = (!_1325) && (_693 < u_csmFarBounds.z);\n    highp float _1211 = 0.0;\n    if (_1120)\n    {\n        highp vec3 _1131 = ((u_csmLightSpaceMatrices[2] * _689).xyz * 0.5) + vec3(0.5);\n        highp float _1133 = _1131.x;\n        highp float _1136 = _1131.y;\n        highp float _1144 = (((_1131.z + step(_1133, 0.001000000047497451305389404296875)) + step(_1136, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1133)) + step(0.999000012874603271484375, _1136);\n        highp float _1208 = 0.0;\n        for (int SPIRV_Cross_Dummy407 = 0; SPIRV_Cross_Dummy407 < 1; SPIRV_Cross_Dummy407++)\n        {\n            if (_1144 > 1.0)\n            {\n                _1208 = 1.0;\n                break;\n            }\n            highp float _1162 = _1144 - 0.001000000047497451305389404296875;\n            highp vec2 _1166 = ((_1131.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1173 = fract(_1166 * vec2(2048.0));\n            highp float _1201 = _1173.y;\n            _1208 = mix(mix(float(_1162 < dot(texture2D(u_shadowMapTex, _1166), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1162 < dot(texture2D(u_shadowMapTex, _1166 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1201), mix(float(_1162 < dot(texture2D(u_shadowMapTex, _1166 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1162 < dot(texture2D(u_shadowMapTex, _1166 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1201), _1173.x);\n            break;\n        }\n        _1211 = _1208;\n    }\n    else\n    {\n        _1211 = _1106;\n    }\n    highp float _1316 = 0.0;\n    if ((!(_1120 ? true : _1325)) && (_693 < u_csmFarBounds.w))\n    {\n        highp vec3 _1236 = ((u_csmLightSpaceMatrices[3] * _689).xyz * 0.5) + vec3(0.5);\n        highp float _1238 = _1236.x;\n        highp float _1241 = _1236.y;\n        highp float _1249 = (((_1236.z + step(_1238, 0.001000000047497451305389404296875)) + step(_1241, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1238)) + step(0.999000012874603271484375, _1241);\n        highp float _1313 = 0.0;\n        for (int SPIRV_Cross_Dummy477 = 0; SPIRV_Cross_Dummy477 < 1; SPIRV_Cross_Dummy477++)\n        {\n            if (_1249 > 1.0)\n            {\n                _1313 = 1.0;\n                break;\n            }\n            highp float _1267 = _1249 - 0.001000000047497451305389404296875;\n            highp vec2 _1271 = ((_1236.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1278 = fract(_1271 * vec2(2048.0));\n            highp float _1306 = _1278.y;\n            _1313 = mix(mix(float(_1267 < dot(texture2D(u_shadowMapTex, _1271), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1267 < dot(texture2D(u_shadowMapTex, _1271 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1306), mix(float(_1267 < dot(texture2D(u_shadowMapTex, _1271 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1267 < dot(texture2D(u_shadowMapTex, _1271 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1306), _1278.x);\n            break;\n        }\n        _1316 = _1313;\n    }\n    else\n    {\n        _1316 = _1211;\n    }\n    highp vec3 _621 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_591.xyz * (min(_621, mix(max(_621 - (u_lightColor * (clamp(dot(_600, u_lightDir), 0.0, 1.0) * (1.0 - _1316))), u_shadowColor), _621, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _600)), _Shininess * 128.0)) * (_SpecColor.xyz * _583.w))), _591.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    float _870 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _876 = (3.0 * (_870 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _879 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _883 = floor(_876 * _879);\n    float _889 = _876 - (_883 * u_skinnedAnimationMapInfo.x);\n    float _894 = (_883 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _904 = texture2D(u_skinnedAnimationMap, vec2((_889 + 0.5) * _879, _894));\n    vec4 _914 = texture2D(u_skinnedAnimationMap, vec2((_889 + 1.5) * _879, _894));\n    vec4 _924 = texture2D(u_skinnedAnimationMap, vec2((_889 + 2.5) * _879, _894));\n    float _975 = (3.0 * (_870 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _982 = floor(_975 * _879);\n    float _988 = _975 - (_982 * u_skinnedAnimationMapInfo.x);\n    float _993 = (_982 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1003 = texture2D(u_skinnedAnimationMap, vec2((_988 + 0.5) * _879, _993));\n    vec4 _1013 = texture2D(u_skinnedAnimationMap, vec2((_988 + 1.5) * _879, _993));\n    vec4 _1023 = texture2D(u_skinnedAnimationMap, vec2((_988 + 2.5) * _879, _993));\n    float _1074 = (3.0 * (_870 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1081 = floor(_1074 * _879);\n    float _1087 = _1074 - (_1081 * u_skinnedAnimationMapInfo.x);\n    float _1092 = (_1081 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1102 = texture2D(u_skinnedAnimationMap, vec2((_1087 + 0.5) * _879, _1092));\n    vec4 _1112 = texture2D(u_skinnedAnimationMap, vec2((_1087 + 1.5) * _879, _1092));\n    vec4 _1122 = texture2D(u_skinnedAnimationMap, vec2((_1087 + 2.5) * _879, _1092));\n    float _1173 = (3.0 * (_870 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1180 = floor(_1173 * _879);\n    float _1186 = _1173 - (_1180 * u_skinnedAnimationMapInfo.x);\n    float _1191 = (_1180 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1201 = texture2D(u_skinnedAnimationMap, vec2((_1186 + 0.5) * _879, _1191));\n    vec4 _1211 = texture2D(u_skinnedAnimationMap, vec2((_1186 + 1.5) * _879, _1191));\n    vec4 _1221 = texture2D(u_skinnedAnimationMap, vec2((_1186 + 2.5) * _879, _1191));\n    mat4 _766 = mat4(vec4(_904.xyz, 0.0), vec4(_914.xyz, 0.0), vec4(_924.xyz, 0.0), vec4(_904.w, _914.w, _924.w, 1.0)) * a_boneWeight.x;\n    mat4 _770 = mat4(vec4(_1003.xyz, 0.0), vec4(_1013.xyz, 0.0), vec4(_1023.xyz, 0.0), vec4(_1003.w, _1013.w, _1023.w, 1.0)) * a_boneWeight.y;\n    mat4 _788 = mat4(vec4(_1102.xyz, 0.0), vec4(_1112.xyz, 0.0), vec4(_1122.xyz, 0.0), vec4(_1102.w, _1112.w, _1122.w, 1.0)) * a_boneWeight.z;\n    mat4 _806 = mat4(vec4(_1201.xyz, 0.0), vec4(_1211.xyz, 0.0), vec4(_1221.xyz, 0.0), vec4(_1201.w, _1211.w, _1221.w, 1.0)) * a_boneWeight.w;\n    vec4 _810 = ((_766[0] + _770[0]) + _788[0]) + _806[0];\n    vec4 _813 = ((_766[1] + _770[1]) + _788[1]) + _806[1];\n    vec4 _816 = ((_766[2] + _770[2]) + _788[2]) + _806[2];\n    mat3 _828 = mat3(_810.xyz, _813.xyz, _816.xyz);\n    vec4 _1257 = u_world * (mat4(_810, _813, _816, ((_766[3] + _770[3]) + _788[3]) + _806[3]) * a_position);\n    mat3 _1277 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1280 = normalize(_1277 * (_828 * a_normal));\n    vec3 _1294 = normalize(_1277 * (_828 * a_tangent.xyz).xyz);\n    mat3 _671 = mat3(_1294, cross(_1294, _1280) * a_tangent.w, _1280);\n    gl_Position = u_projection * (u_view * _1257);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _671 * u_lightDir;\n    varying_ViewDir = _671 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1257.xyz);\n    varying_WorldNormal = _1280;\n    varying_positionCamera_Fog = (u_view * vec4(_1257.xyz, 1.0)).xyz;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _400 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _408 = (_400 * _Color) * _AlbedoIntensity;\n    highp float _410 = _408.w;\n    if ((_410 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _419 = normalize(varying_LightDir);\n    highp vec4 _431 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _486 = (_431.xy - vec2(0.5)) * 2.0;\n    highp vec3 _497 = vec3(_486, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_486, _486))));\n    highp vec4 _468 = vec4(_408.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_419, _497))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _419), _497)), _Shininess * 128.0)) * (_SpecColor.xyz * _400.w))), _410);\n    highp float _532 = length(varying_positionCamera_Fog);\n    highp float _614 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _614 = (u_fogInfos.z - _532) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _615 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _615 = 1.0 / pow(2.7182800769805908203125, _532 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _616 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _616 = 1.0 / pow(2.7182800769805908203125, ((_532 * _532) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _616 = 1.0;\n            }\n            _615 = _616;\n        }\n        _614 = _615;\n    }\n    highp float _578 = clamp(_614, 0.0, 1.0);\n    highp vec3 _587 = (_468.xyz * _578) + (u_fogColor * (1.0 - _578));\n    gl_FragData[0] = vec4(_587.x, _587.y, _587.z, _468.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _555 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _563 = (_555 * _Color) * _AlbedoIntensity;\n    highp float _565 = _563.w;\n    if ((_565 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _574 = normalize(varying_LightDir);\n    highp vec3 _580 = normalize(varying_WorldNormal);\n    highp vec4 _687 = vec4(varying_ShadowPosition, 1.0);\n    highp float _691 = -(u_view * _687).z;\n    bool _704 = true && (_691 < u_csmFarBounds.x);\n    highp float _954 = 0.0;\n    if (_704)\n    {\n        highp vec3 _719 = ((u_csmLightSpaceMatrices[0] * _687).xyz * 0.5) + vec3(0.5);\n        highp float _723 = _719.x;\n        highp float _727 = _719.y;\n        highp float _737 = (((_719.z + step(_723, 0.001000000047497451305389404296875)) + step(_727, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _723)) + step(0.999000012874603271484375, _727);\n        highp float _951 = 0.0;\n        for (int SPIRV_Cross_Dummy267 = 0; SPIRV_Cross_Dummy267 < 1; SPIRV_Cross_Dummy267++)\n        {\n            if (_737 > 1.0)\n            {\n                _951 = 1.0;\n                break;\n            }\n            highp float _788 = _737 - 0.001000000047497451305389404296875;\n            highp vec2 _794 = ((_719.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _805 = fract(_794 * vec2(2048.0));\n            highp float _860 = _805.y;\n            _951 = mix(mix(float(_788 < dot(texture2D(u_shadowMapTex, _794), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_788 < dot(texture2D(u_shadowMapTex, _794 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _860), mix(float(_788 < dot(texture2D(u_shadowMapTex, _794 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_788 < dot(texture2D(u_shadowMapTex, _794 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _860), _805.x);\n            break;\n        }\n        _954 = _951;\n    }\n    else\n    {\n        _954 = 1.0;\n    }\n    bool _1280 = _704 ? true : false;\n    bool _972 = (!_1280) && (_691 < u_csmFarBounds.y);\n    highp float _1063 = 0.0;\n    if (_972)\n    {\n        highp vec3 _983 = ((u_csmLightSpaceMatrices[1] * _687).xyz * 0.5) + vec3(0.5);\n        highp float _985 = _983.x;\n        highp float _988 = _983.y;\n        highp float _996 = (((_983.z + step(_985, 0.001000000047497451305389404296875)) + step(_988, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _985)) + step(0.999000012874603271484375, _988);\n        highp float _1060 = 0.0;\n        for (int SPIRV_Cross_Dummy343 = 0; SPIRV_Cross_Dummy343 < 1; SPIRV_Cross_Dummy343++)\n        {\n            if (_996 > 1.0)\n            {\n                _1060 = 1.0;\n                break;\n            }\n            highp float _1014 = _996 - 0.001000000047497451305389404296875;\n            highp vec2 _1018 = ((_983.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1025 = fract(_1018 * vec2(2048.0));\n            highp float _1053 = _1025.y;\n            _1060 = mix(mix(float(_1014 < dot(texture2D(u_shadowMapTex, _1018), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1014 < dot(texture2D(u_shadowMapTex, _1018 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1053), mix(float(_1014 < dot(texture2D(u_shadowMapTex, _1018 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1014 < dot(texture2D(u_shadowMapTex, _1018 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1053), _1025.x);\n            break;\n        }\n        _1063 = _1060;\n    }\n    else\n    {\n        _1063 = _954;\n    }\n    bool _1281 = _972 ? true : _1280;\n    bool _1077 = (!_1281) && (_691 < u_csmFarBounds.z);\n    highp float _1168 = 0.0;\n    if (_1077)\n    {\n        highp vec3 _1088 = ((u_csmLightSpaceMatrices[2] * _687).xyz * 0.5) + vec3(0.5);\n        highp float _1090 = _1088.x;\n        highp float _1093 = _1088.y;\n        highp float _1101 = (((_1088.z + step(_1090, 0.001000000047497451305389404296875)) + step(_1093, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1090)) + step(0.999000012874603271484375, _1093);\n        highp float _1165 = 0.0;\n        for (int SPIRV_Cross_Dummy419 = 0; SPIRV_Cross_Dummy419 < 1; SPIRV_Cross_Dummy419++)\n        {\n            if (_1101 > 1.0)\n            {\n                _1165 = 1.0;\n                break;\n            }\n            highp float _1119 = _1101 - 0.001000000047497451305389404296875;\n            highp vec2 _1123 = ((_1088.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1130 = fract(_1123 * vec2(2048.0));\n            highp float _1158 = _1130.y;\n            _1165 = mix(mix(float(_1119 < dot(texture2D(u_shadowMapTex, _1123), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1119 < dot(texture2D(u_shadowMapTex, _1123 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1158), mix(float(_1119 < dot(texture2D(u_shadowMapTex, _1123 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1119 < dot(texture2D(u_shadowMapTex, _1123 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1158), _1130.x);\n            break;\n        }\n        _1168 = _1165;\n    }\n    else\n    {\n        _1168 = _1063;\n    }\n    highp float _1273 = 0.0;\n    if ((!(_1077 ? true : _1281)) && (_691 < u_csmFarBounds.w))\n    {\n        highp vec3 _1193 = ((u_csmLightSpaceMatrices[3] * _687).xyz * 0.5) + vec3(0.5);\n        highp float _1195 = _1193.x;\n        highp float _1198 = _1193.y;\n        highp float _1206 = (((_1193.z + step(_1195, 0.001000000047497451305389404296875)) + step(_1198, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1195)) + step(0.999000012874603271484375, _1198);\n        highp float _1270 = 0.0;\n        for (int SPIRV_Cross_Dummy489 = 0; SPIRV_Cross_Dummy489 < 1; SPIRV_Cross_Dummy489++)\n        {\n            if (_1206 > 1.0)\n            {\n                _1270 = 1.0;\n                break;\n            }\n            highp float _1224 = _1206 - 0.001000000047497451305389404296875;\n            highp vec2 _1228 = ((_1193.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1235 = fract(_1228 * vec2(2048.0));\n            highp float _1263 = _1235.y;\n            _1270 = mix(mix(float(_1224 < dot(texture2D(u_shadowMapTex, _1228), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1224 < dot(texture2D(u_shadowMapTex, _1228 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1263), mix(float(_1224 < dot(texture2D(u_shadowMapTex, _1228 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1224 < dot(texture2D(u_shadowMapTex, _1228 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1263), _1235.x);\n            break;\n        }\n        _1273 = _1270;\n    }\n    else\n    {\n        _1273 = _1168;\n    }\n    highp vec4 _624 = vec4(_563.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_574, _580))) * _1273)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _574), _580)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _565);\n    highp vec3 _640 = _624.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_640.x, _640.y, _640.z, _624.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    float _888 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _894 = (3.0 * (_888 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _897 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _901 = floor(_894 * _897);\n    float _907 = _894 - (_901 * u_skinnedAnimationMapInfo.x);\n    float _912 = (_901 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _922 = texture2D(u_skinnedAnimationMap, vec2((_907 + 0.5) * _897, _912));\n    vec4 _932 = texture2D(u_skinnedAnimationMap, vec2((_907 + 1.5) * _897, _912));\n    vec4 _942 = texture2D(u_skinnedAnimationMap, vec2((_907 + 2.5) * _897, _912));\n    float _993 = (3.0 * (_888 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _1000 = floor(_993 * _897);\n    float _1006 = _993 - (_1000 * u_skinnedAnimationMapInfo.x);\n    float _1011 = (_1000 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1021 = texture2D(u_skinnedAnimationMap, vec2((_1006 + 0.5) * _897, _1011));\n    vec4 _1031 = texture2D(u_skinnedAnimationMap, vec2((_1006 + 1.5) * _897, _1011));\n    vec4 _1041 = texture2D(u_skinnedAnimationMap, vec2((_1006 + 2.5) * _897, _1011));\n    float _1092 = (3.0 * (_888 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1099 = floor(_1092 * _897);\n    float _1105 = _1092 - (_1099 * u_skinnedAnimationMapInfo.x);\n    float _1110 = (_1099 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1120 = texture2D(u_skinnedAnimationMap, vec2((_1105 + 0.5) * _897, _1110));\n    vec4 _1130 = texture2D(u_skinnedAnimationMap, vec2((_1105 + 1.5) * _897, _1110));\n    vec4 _1140 = texture2D(u_skinnedAnimationMap, vec2((_1105 + 2.5) * _897, _1110));\n    float _1191 = (3.0 * (_888 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1198 = floor(_1191 * _897);\n    float _1204 = _1191 - (_1198 * u_skinnedAnimationMapInfo.x);\n    float _1209 = (_1198 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1219 = texture2D(u_skinnedAnimationMap, vec2((_1204 + 0.5) * _897, _1209));\n    vec4 _1229 = texture2D(u_skinnedAnimationMap, vec2((_1204 + 1.5) * _897, _1209));\n    vec4 _1239 = texture2D(u_skinnedAnimationMap, vec2((_1204 + 2.5) * _897, _1209));\n    mat4 _784 = mat4(vec4(_922.xyz, 0.0), vec4(_932.xyz, 0.0), vec4(_942.xyz, 0.0), vec4(_922.w, _932.w, _942.w, 1.0)) * a_boneWeight.x;\n    mat4 _788 = mat4(vec4(_1021.xyz, 0.0), vec4(_1031.xyz, 0.0), vec4(_1041.xyz, 0.0), vec4(_1021.w, _1031.w, _1041.w, 1.0)) * a_boneWeight.y;\n    mat4 _806 = mat4(vec4(_1120.xyz, 0.0), vec4(_1130.xyz, 0.0), vec4(_1140.xyz, 0.0), vec4(_1120.w, _1130.w, _1140.w, 1.0)) * a_boneWeight.z;\n    mat4 _824 = mat4(vec4(_1219.xyz, 0.0), vec4(_1229.xyz, 0.0), vec4(_1239.xyz, 0.0), vec4(_1219.w, _1229.w, _1239.w, 1.0)) * a_boneWeight.w;\n    vec4 _828 = ((_784[0] + _788[0]) + _806[0]) + _824[0];\n    vec4 _831 = ((_784[1] + _788[1]) + _806[1]) + _824[1];\n    vec4 _834 = ((_784[2] + _788[2]) + _806[2]) + _824[2];\n    mat3 _846 = mat3(_828.xyz, _831.xyz, _834.xyz);\n    vec4 _1275 = u_world * (mat4(_828, _831, _834, ((_784[3] + _788[3]) + _806[3]) + _824[3]) * a_position);\n    mat3 _1295 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1298 = normalize(_1295 * (_846 * a_normal));\n    vec3 _1312 = normalize(_1295 * (_846 * a_tangent.xyz).xyz);\n    mat3 _680 = mat3(_1312, cross(_1312, _1298) * a_tangent.w, _1298);\n    gl_Position = u_projection * (u_view * _1275);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _680 * u_lightDir;\n    varying_ViewDir = _680 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1275.xyz);\n    varying_WorldNormal = _1298;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _376 = (texture2D(_MainTex, varying_TexCoord) * _Color) * _AlbedoIntensity;\n    highp vec2 _449 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _410 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_376.xyz * (min(_410, mix(max(_410, u_shadowColor), _410, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_449, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_449, _449)))))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _376.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    vec4 _467 = u_world * a_position;\n    gl_Position = u_projection * (u_view * _467);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _467.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _324 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _332 = (_324 * _Color) * _AlbedoIntensity;\n    highp vec3 _359 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_332.xyz * (min(_359, mix(max(_359, u_shadowColor), _359, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_SpecColor.xyz * _324.w))), _332.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    float _858 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _864 = (3.0 * (_858 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _867 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _871 = floor(_864 * _867);\n    float _877 = _864 - (_871 * u_skinnedAnimationMapInfo.x);\n    float _882 = (_871 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _892 = texture2D(u_skinnedAnimationMap, vec2((_877 + 0.5) * _867, _882));\n    vec4 _902 = texture2D(u_skinnedAnimationMap, vec2((_877 + 1.5) * _867, _882));\n    vec4 _912 = texture2D(u_skinnedAnimationMap, vec2((_877 + 2.5) * _867, _882));\n    float _963 = (3.0 * (_858 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _970 = floor(_963 * _867);\n    float _976 = _963 - (_970 * u_skinnedAnimationMapInfo.x);\n    float _981 = (_970 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _991 = texture2D(u_skinnedAnimationMap, vec2((_976 + 0.5) * _867, _981));\n    vec4 _1001 = texture2D(u_skinnedAnimationMap, vec2((_976 + 1.5) * _867, _981));\n    vec4 _1011 = texture2D(u_skinnedAnimationMap, vec2((_976 + 2.5) * _867, _981));\n    float _1062 = (3.0 * (_858 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1069 = floor(_1062 * _867);\n    float _1075 = _1062 - (_1069 * u_skinnedAnimationMapInfo.x);\n    float _1080 = (_1069 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1090 = texture2D(u_skinnedAnimationMap, vec2((_1075 + 0.5) * _867, _1080));\n    vec4 _1100 = texture2D(u_skinnedAnimationMap, vec2((_1075 + 1.5) * _867, _1080));\n    vec4 _1110 = texture2D(u_skinnedAnimationMap, vec2((_1075 + 2.5) * _867, _1080));\n    float _1161 = (3.0 * (_858 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1168 = floor(_1161 * _867);\n    float _1174 = _1161 - (_1168 * u_skinnedAnimationMapInfo.x);\n    float _1179 = (_1168 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1189 = texture2D(u_skinnedAnimationMap, vec2((_1174 + 0.5) * _867, _1179));\n    vec4 _1199 = texture2D(u_skinnedAnimationMap, vec2((_1174 + 1.5) * _867, _1179));\n    vec4 _1209 = texture2D(u_skinnedAnimationMap, vec2((_1174 + 2.5) * _867, _1179));\n    mat4 _754 = mat4(vec4(_892.xyz, 0.0), vec4(_902.xyz, 0.0), vec4(_912.xyz, 0.0), vec4(_892.w, _902.w, _912.w, 1.0)) * a_boneWeight.x;\n    mat4 _758 = mat4(vec4(_991.xyz, 0.0), vec4(_1001.xyz, 0.0), vec4(_1011.xyz, 0.0), vec4(_991.w, _1001.w, _1011.w, 1.0)) * a_boneWeight.y;\n    mat4 _776 = mat4(vec4(_1090.xyz, 0.0), vec4(_1100.xyz, 0.0), vec4(_1110.xyz, 0.0), vec4(_1090.w, _1100.w, _1110.w, 1.0)) * a_boneWeight.z;\n    mat4 _794 = mat4(vec4(_1189.xyz, 0.0), vec4(_1199.xyz, 0.0), vec4(_1209.xyz, 0.0), vec4(_1189.w, _1199.w, _1209.w, 1.0)) * a_boneWeight.w;\n    vec4 _798 = ((_754[0] + _758[0]) + _776[0]) + _794[0];\n    vec4 _801 = ((_754[1] + _758[1]) + _776[1]) + _794[1];\n    vec4 _804 = ((_754[2] + _758[2]) + _776[2]) + _794[2];\n    mat3 _816 = mat3(_798.xyz, _801.xyz, _804.xyz);\n    vec4 _1245 = u_world * (mat4(_798, _801, _804, ((_754[3] + _758[3]) + _776[3]) + _794[3]) * a_position);\n    vec3 _630 = _1245.xyz;\n    mat3 _1265 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1268 = normalize(_1265 * (_816 * a_normal));\n    vec3 _1282 = normalize(_1265 * (_816 * a_tangent.xyz).xyz);\n    mat3 _665 = mat3(_1282, cross(_1282, _1268) * a_tangent.w, _1268);\n    gl_Position = u_projection * (u_view * _1245);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _665 * u_lightDir;\n    varying_ViewDir = _665 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _630);\n    varying_WorldNormal = _1268;\n    varying_ShadowPosition = _630;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _586 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _594 = (_586 * _Color) * _AlbedoIntensity;\n    highp float _596 = _594.w;\n    if ((_596 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _605 = normalize(varying_LightDir);\n    highp vec4 _617 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _686 = (_617.xy - vec2(0.5)) * 2.0;\n    highp vec3 _697 = vec3(_686, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_686, _686))));\n    highp vec4 _740 = vec4(varying_ShadowPosition, 1.0);\n    highp float _744 = -(u_view * _740).z;\n    bool _757 = true && (_744 < u_csmFarBounds.x);\n    highp float _1007 = 0.0;\n    if (_757)\n    {\n        highp vec3 _772 = ((u_csmLightSpaceMatrices[0] * _740).xyz * 0.5) + vec3(0.5);\n        highp float _776 = _772.x;\n        highp float _780 = _772.y;\n        highp float _790 = (((_772.z + step(_776, 0.001000000047497451305389404296875)) + step(_780, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _776)) + step(0.999000012874603271484375, _780);\n        highp float _1004 = 0.0;\n        for (int SPIRV_Cross_Dummy269 = 0; SPIRV_Cross_Dummy269 < 1; SPIRV_Cross_Dummy269++)\n        {\n            if (_790 > 1.0)\n            {\n                _1004 = 1.0;\n                break;\n            }\n            highp float _841 = _790 - 0.001000000047497451305389404296875;\n            highp vec2 _847 = ((_772.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _858 = fract(_847 * vec2(2048.0));\n            highp float _913 = _858.y;\n            _1004 = mix(mix(float(_841 < dot(texture2D(u_shadowMapTex, _847), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_841 < dot(texture2D(u_shadowMapTex, _847 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _913), mix(float(_841 < dot(texture2D(u_shadowMapTex, _847 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_841 < dot(texture2D(u_shadowMapTex, _847 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _913), _858.x);\n            break;\n        }\n        _1007 = _1004;\n    }\n    else\n    {\n        _1007 = 1.0;\n    }\n    bool _1334 = _757 ? true : false;\n    bool _1026 = (!_1334) && (_744 < u_csmFarBounds.y);\n    highp float _1117 = 0.0;\n    if (_1026)\n    {\n        highp vec3 _1037 = ((u_csmLightSpaceMatrices[1] * _740).xyz * 0.5) + vec3(0.5);\n        highp float _1039 = _1037.x;\n        highp float _1042 = _1037.y;\n        highp float _1050 = (((_1037.z + step(_1039, 0.001000000047497451305389404296875)) + step(_1042, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1039)) + step(0.999000012874603271484375, _1042);\n        highp float _1114 = 0.0;\n        for (int SPIRV_Cross_Dummy345 = 0; SPIRV_Cross_Dummy345 < 1; SPIRV_Cross_Dummy345++)\n        {\n            if (_1050 > 1.0)\n            {\n                _1114 = 1.0;\n                break;\n            }\n            highp float _1068 = _1050 - 0.001000000047497451305389404296875;\n            highp vec2 _1072 = ((_1037.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1079 = fract(_1072 * vec2(2048.0));\n            highp float _1107 = _1079.y;\n            _1114 = mix(mix(float(_1068 < dot(texture2D(u_shadowMapTex, _1072), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1068 < dot(texture2D(u_shadowMapTex, _1072 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1107), mix(float(_1068 < dot(texture2D(u_shadowMapTex, _1072 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1068 < dot(texture2D(u_shadowMapTex, _1072 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1107), _1079.x);\n            break;\n        }\n        _1117 = _1114;\n    }\n    else\n    {\n        _1117 = _1007;\n    }\n    bool _1335 = _1026 ? true : _1334;\n    bool _1131 = (!_1335) && (_744 < u_csmFarBounds.z);\n    highp float _1222 = 0.0;\n    if (_1131)\n    {\n        highp vec3 _1142 = ((u_csmLightSpaceMatrices[2] * _740).xyz * 0.5) + vec3(0.5);\n        highp float _1144 = _1142.x;\n        highp float _1147 = _1142.y;\n        highp float _1155 = (((_1142.z + step(_1144, 0.001000000047497451305389404296875)) + step(_1147, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1144)) + step(0.999000012874603271484375, _1147);\n        highp float _1219 = 0.0;\n        for (int SPIRV_Cross_Dummy421 = 0; SPIRV_Cross_Dummy421 < 1; SPIRV_Cross_Dummy421++)\n        {\n            if (_1155 > 1.0)\n            {\n                _1219 = 1.0;\n                break;\n            }\n            highp float _1173 = _1155 - 0.001000000047497451305389404296875;\n            highp vec2 _1177 = ((_1142.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1184 = fract(_1177 * vec2(2048.0));\n            highp float _1212 = _1184.y;\n            _1219 = mix(mix(float(_1173 < dot(texture2D(u_shadowMapTex, _1177), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1173 < dot(texture2D(u_shadowMapTex, _1177 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1212), mix(float(_1173 < dot(texture2D(u_shadowMapTex, _1177 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1173 < dot(texture2D(u_shadowMapTex, _1177 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1212), _1184.x);\n            break;\n        }\n        _1222 = _1219;\n    }\n    else\n    {\n        _1222 = _1117;\n    }\n    highp float _1327 = 0.0;\n    if ((!(_1131 ? true : _1335)) && (_744 < u_csmFarBounds.w))\n    {\n        highp vec3 _1247 = ((u_csmLightSpaceMatrices[3] * _740).xyz * 0.5) + vec3(0.5);\n        highp float _1249 = _1247.x;\n        highp float _1252 = _1247.y;\n        highp float _1260 = (((_1247.z + step(_1249, 0.001000000047497451305389404296875)) + step(_1252, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1249)) + step(0.999000012874603271484375, _1252);\n        highp float _1324 = 0.0;\n        for (int SPIRV_Cross_Dummy491 = 0; SPIRV_Cross_Dummy491 < 1; SPIRV_Cross_Dummy491++)\n        {\n            if (_1260 > 1.0)\n            {\n                _1324 = 1.0;\n                break;\n            }\n            highp float _1278 = _1260 - 0.001000000047497451305389404296875;\n            highp vec2 _1282 = ((_1247.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1289 = fract(_1282 * vec2(2048.0));\n            highp float _1317 = _1289.y;\n            _1324 = mix(mix(float(_1278 < dot(texture2D(u_shadowMapTex, _1282), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1278 < dot(texture2D(u_shadowMapTex, _1282 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1317), mix(float(_1278 < dot(texture2D(u_shadowMapTex, _1282 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1278 < dot(texture2D(u_shadowMapTex, _1282 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1317), _1289.x);\n            break;\n        }\n        _1327 = _1324;\n    }\n    else\n    {\n        _1327 = _1222;\n    }\n    highp vec4 _657 = vec4(_594.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_605, _697))) * _1327)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _605), _697)), _Shininess * 128.0)) * (_SpecColor.xyz * _586.w))), _596);\n    highp vec3 _673 = _657.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_673.x, _673.y, _673.z, _657.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    int _758 = int(a_boneIndex.x) * 3;\n    int _763 = _758 + 1;\n    int _767 = _758 + 2;\n    int _809 = int(a_boneIndex.y) * 3;\n    int _814 = _809 + 1;\n    int _818 = _809 + 2;\n    int _860 = int(a_boneIndex.z) * 3;\n    int _865 = _860 + 1;\n    int _869 = _860 + 2;\n    int _911 = int(a_boneIndex.w) * 3;\n    int _916 = _911 + 1;\n    int _920 = _911 + 2;\n    mat4 _659 = mat4(vec4(u_boneOffsetMatrix[_758].xyz, 0.0), vec4(u_boneOffsetMatrix[_763].xyz, 0.0), vec4(u_boneOffsetMatrix[_767].xyz, 0.0), vec4(u_boneOffsetMatrix[_758].w, u_boneOffsetMatrix[_763].w, u_boneOffsetMatrix[_767].w, 1.0)) * a_boneWeight.x;\n    mat4 _663 = mat4(vec4(u_boneOffsetMatrix[_809].xyz, 0.0), vec4(u_boneOffsetMatrix[_814].xyz, 0.0), vec4(u_boneOffsetMatrix[_818].xyz, 0.0), vec4(u_boneOffsetMatrix[_809].w, u_boneOffsetMatrix[_814].w, u_boneOffsetMatrix[_818].w, 1.0)) * a_boneWeight.y;\n    mat4 _681 = mat4(vec4(u_boneOffsetMatrix[_860].xyz, 0.0), vec4(u_boneOffsetMatrix[_865].xyz, 0.0), vec4(u_boneOffsetMatrix[_869].xyz, 0.0), vec4(u_boneOffsetMatrix[_860].w, u_boneOffsetMatrix[_865].w, u_boneOffsetMatrix[_869].w, 1.0)) * a_boneWeight.z;\n    mat4 _699 = mat4(vec4(u_boneOffsetMatrix[_911].xyz, 0.0), vec4(u_boneOffsetMatrix[_916].xyz, 0.0), vec4(u_boneOffsetMatrix[_920].xyz, 0.0), vec4(u_boneOffsetMatrix[_911].w, u_boneOffsetMatrix[_916].w, u_boneOffsetMatrix[_920].w, 1.0)) * a_boneWeight.w;\n    vec4 _703 = ((_659[0] + _663[0]) + _681[0]) + _699[0];\n    vec4 _706 = ((_659[1] + _663[1]) + _681[1]) + _699[1];\n    vec4 _709 = ((_659[2] + _663[2]) + _681[2]) + _699[2];\n    vec4 _958 = u_world * (mat4(_703, _706, _709, ((_659[3] + _663[3]) + _681[3]) + _699[3]) * a_position);\n    gl_Position = u_projection * (u_view * _958);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _958.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_703.xyz, _706.xyz, _709.xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    vec4 _476 = u_world * a_position;\n    vec3 _385 = _476.xyz;\n    gl_Position = u_projection * (u_view * _476);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _385);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_ShadowPosition = _385;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _581 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _589 = (_581 * _Color) * _AlbedoIntensity;\n    highp vec3 _598 = normalize(varying_WorldNormal);\n    highp vec4 _687 = vec4(varying_ShadowPosition, 1.0);\n    highp float _691 = -(u_view * _687).z;\n    bool _704 = true && (_691 < u_csmFarBounds.x);\n    highp float _995 = 0.0;\n    if (_704)\n    {\n        highp vec3 _719 = ((u_csmLightSpaceMatrices[0] * _687).xyz * 0.5) + vec3(0.5);\n        highp float _723 = _719.x;\n        highp float _727 = _719.y;\n        highp float _737 = (((_719.z + step(_723, 0.001000000047497451305389404296875)) + step(_727, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _723)) + step(0.999000012874603271484375, _727);\n        highp float _992 = 0.0;\n        for (int SPIRV_Cross_Dummy255 = 0; SPIRV_Cross_Dummy255 < 1; SPIRV_Cross_Dummy255++)\n        {\n            if (_737 > 1.0)\n            {\n                _992 = 1.0;\n                break;\n            }\n            highp float _788 = _737 - 0.001000000047497451305389404296875;\n            highp vec2 _794 = ((_719.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _805 = fract(_794 * vec2(2048.0));\n            highp float _860 = _805.y;\n            _992 = mix(mix(float(_788 < dot(texture2D(u_shadowMapTex, _794), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_788 < dot(texture2D(u_shadowMapTex, _794 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _860), mix(float(_788 < dot(texture2D(u_shadowMapTex, _794 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_788 < dot(texture2D(u_shadowMapTex, _794 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _860), _805.x);\n            break;\n        }\n        _995 = _992;\n    }\n    else\n    {\n        _995 = 1.0;\n    }\n    bool _1322 = _704 ? true : false;\n    bool _1013 = (!_1322) && (_691 < u_csmFarBounds.y);\n    highp float _1104 = 0.0;\n    if (_1013)\n    {\n        highp vec3 _1024 = ((u_csmLightSpaceMatrices[1] * _687).xyz * 0.5) + vec3(0.5);\n        highp float _1026 = _1024.x;\n        highp float _1029 = _1024.y;\n        highp float _1037 = (((_1024.z + step(_1026, 0.001000000047497451305389404296875)) + step(_1029, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1026)) + step(0.999000012874603271484375, _1029);\n        highp float _1101 = 0.0;\n        for (int SPIRV_Cross_Dummy331 = 0; SPIRV_Cross_Dummy331 < 1; SPIRV_Cross_Dummy331++)\n        {\n            if (_1037 > 1.0)\n            {\n                _1101 = 1.0;\n                break;\n            }\n            highp float _1055 = _1037 - 0.001000000047497451305389404296875;\n            highp vec2 _1059 = ((_1024.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1066 = fract(_1059 * vec2(2048.0));\n            highp float _1094 = _1066.y;\n            _1101 = mix(mix(float(_1055 < dot(texture2D(u_shadowMapTex, _1059), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1055 < dot(texture2D(u_shadowMapTex, _1059 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1094), mix(float(_1055 < dot(texture2D(u_shadowMapTex, _1059 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1055 < dot(texture2D(u_shadowMapTex, _1059 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1094), _1066.x);\n            break;\n        }\n        _1104 = _1101;\n    }\n    else\n    {\n        _1104 = _995;\n    }\n    bool _1323 = _1013 ? true : _1322;\n    bool _1118 = (!_1323) && (_691 < u_csmFarBounds.z);\n    highp float _1209 = 0.0;\n    if (_1118)\n    {\n        highp vec3 _1129 = ((u_csmLightSpaceMatrices[2] * _687).xyz * 0.5) + vec3(0.5);\n        highp float _1131 = _1129.x;\n        highp float _1134 = _1129.y;\n        highp float _1142 = (((_1129.z + step(_1131, 0.001000000047497451305389404296875)) + step(_1134, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1131)) + step(0.999000012874603271484375, _1134);\n        highp float _1206 = 0.0;\n        for (int SPIRV_Cross_Dummy407 = 0; SPIRV_Cross_Dummy407 < 1; SPIRV_Cross_Dummy407++)\n        {\n            if (_1142 > 1.0)\n            {\n                _1206 = 1.0;\n                break;\n            }\n            highp float _1160 = _1142 - 0.001000000047497451305389404296875;\n            highp vec2 _1164 = ((_1129.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1171 = fract(_1164 * vec2(2048.0));\n            highp float _1199 = _1171.y;\n            _1206 = mix(mix(float(_1160 < dot(texture2D(u_shadowMapTex, _1164), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1160 < dot(texture2D(u_shadowMapTex, _1164 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1199), mix(float(_1160 < dot(texture2D(u_shadowMapTex, _1164 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1160 < dot(texture2D(u_shadowMapTex, _1164 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1199), _1171.x);\n            break;\n        }\n        _1209 = _1206;\n    }\n    else\n    {\n        _1209 = _1104;\n    }\n    highp float _1314 = 0.0;\n    if ((!(_1118 ? true : _1323)) && (_691 < u_csmFarBounds.w))\n    {\n        highp vec3 _1234 = ((u_csmLightSpaceMatrices[3] * _687).xyz * 0.5) + vec3(0.5);\n        highp float _1236 = _1234.x;\n        highp float _1239 = _1234.y;\n        highp float _1247 = (((_1234.z + step(_1236, 0.001000000047497451305389404296875)) + step(_1239, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1236)) + step(0.999000012874603271484375, _1239);\n        highp float _1311 = 0.0;\n        for (int SPIRV_Cross_Dummy477 = 0; SPIRV_Cross_Dummy477 < 1; SPIRV_Cross_Dummy477++)\n        {\n            if (_1247 > 1.0)\n            {\n                _1311 = 1.0;\n                break;\n            }\n            highp float _1265 = _1247 - 0.001000000047497451305389404296875;\n            highp vec2 _1269 = ((_1234.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1276 = fract(_1269 * vec2(2048.0));\n            highp float _1304 = _1276.y;\n            _1311 = mix(mix(float(_1265 < dot(texture2D(u_shadowMapTex, _1269), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1265 < dot(texture2D(u_shadowMapTex, _1269 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1304), mix(float(_1265 < dot(texture2D(u_shadowMapTex, _1269 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1265 < dot(texture2D(u_shadowMapTex, _1269 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1304), _1276.x);\n            break;\n        }\n        _1314 = _1311;\n    }\n    else\n    {\n        _1314 = _1209;\n    }\n    highp vec3 _619 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_589.xyz * (min(_619, mix(max(_619 - (u_lightColor * (clamp(dot(_598, u_lightDir), 0.0, 1.0) * (1.0 - _1314))), u_shadowColor), _619, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _598)), _Shininess * 128.0)) * (_SpecColor.xyz * _581.w))), _589.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    vec4 _522 = u_world * a_position;\n    mat3 _542 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _545 = normalize(_542 * a_normal);\n    vec3 _559 = normalize(_542 * a_tangent.xyz);\n    mat3 _446 = mat3(_559, cross(_559, _545) * a_tangent.w, _545);\n    gl_Position = u_projection * (u_view * _522);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _446 * u_lightDir;\n    varying_ViewDir = _446 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _522.xyz);\n    varying_WorldNormal = _545;\n    varying_positionCamera_Fog = (u_view * vec4(_522.xyz, 1.0)).xyz;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _398 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _406 = (_398 * _Color) * _AlbedoIntensity;\n    highp float _408 = _406.w;\n    if ((_408 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _417 = normalize(varying_LightDir);\n    highp vec4 _429 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _484 = (_429.xy - vec2(0.5)) * 2.0;\n    highp vec3 _495 = vec3(_484, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_484, _484))));\n    highp vec4 _466 = vec4(_406.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_417, _495))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _417), _495)), _Shininess * 128.0)) * (_SpecColor.xyz * _398.w))), _408);\n    highp float _530 = length(varying_positionCamera_Fog);\n    highp float _612 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _612 = (u_fogInfos.z - _530) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _613 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _613 = 1.0 / pow(2.7182800769805908203125, _530 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _614 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _614 = 1.0 / pow(2.7182800769805908203125, ((_530 * _530) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _614 = 1.0;\n            }\n            _613 = _614;\n        }\n        _612 = _613;\n    }\n    highp float _576 = clamp(_612, 0.0, 1.0);\n    highp vec3 _585 = (_466.xyz * _576) + (u_fogColor * (1.0 - _576));\n    gl_FragData[0] = vec4(_585.x, _585.y, _585.z, _466.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _795 = int(a_boneIndex.x) * 3;\n    int _800 = _795 + 1;\n    int _804 = _795 + 2;\n    int _846 = int(a_boneIndex.y) * 3;\n    int _851 = _846 + 1;\n    int _855 = _846 + 2;\n    int _897 = int(a_boneIndex.z) * 3;\n    int _902 = _897 + 1;\n    int _906 = _897 + 2;\n    int _948 = int(a_boneIndex.w) * 3;\n    int _953 = _948 + 1;\n    int _957 = _948 + 2;\n    mat4 _692 = mat4(vec4(u_boneOffsetMatrix[_795].xyz, 0.0), vec4(u_boneOffsetMatrix[_800].xyz, 0.0), vec4(u_boneOffsetMatrix[_804].xyz, 0.0), vec4(u_boneOffsetMatrix[_795].w, u_boneOffsetMatrix[_800].w, u_boneOffsetMatrix[_804].w, 1.0)) * a_boneWeight.x;\n    mat4 _696 = mat4(vec4(u_boneOffsetMatrix[_846].xyz, 0.0), vec4(u_boneOffsetMatrix[_851].xyz, 0.0), vec4(u_boneOffsetMatrix[_855].xyz, 0.0), vec4(u_boneOffsetMatrix[_846].w, u_boneOffsetMatrix[_851].w, u_boneOffsetMatrix[_855].w, 1.0)) * a_boneWeight.y;\n    mat4 _714 = mat4(vec4(u_boneOffsetMatrix[_897].xyz, 0.0), vec4(u_boneOffsetMatrix[_902].xyz, 0.0), vec4(u_boneOffsetMatrix[_906].xyz, 0.0), vec4(u_boneOffsetMatrix[_897].w, u_boneOffsetMatrix[_902].w, u_boneOffsetMatrix[_906].w, 1.0)) * a_boneWeight.z;\n    mat4 _732 = mat4(vec4(u_boneOffsetMatrix[_948].xyz, 0.0), vec4(u_boneOffsetMatrix[_953].xyz, 0.0), vec4(u_boneOffsetMatrix[_957].xyz, 0.0), vec4(u_boneOffsetMatrix[_948].w, u_boneOffsetMatrix[_953].w, u_boneOffsetMatrix[_957].w, 1.0)) * a_boneWeight.w;\n    mat4 _750 = u_bindTargetWorldInverse * mat4(((_692[0] + _696[0]) + _714[0]) + _732[0], ((_692[1] + _696[1]) + _714[1]) + _732[1], ((_692[2] + _696[2]) + _714[2]) + _732[2], ((_692[3] + _696[3]) + _714[3]) + _732[3]);\n    vec4 _995 = u_world * (_750 * a_position);\n    gl_Position = u_projection * (u_view * _995);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _995.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_750[0].xyz, _750[1].xyz, _750[2].xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_995.xyz, 1.0)).xyz;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _444 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _452 = (_444 * _Color) * _AlbedoIntensity;\n    highp vec4 _477 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _479 = _477.xyz * 2.0;\n    highp vec4 _489 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _508 = vec4(_452.xyz * (min(_479, mix(max(_479, u_shadowColor), _479, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_489.xyz * _SpecColor.xyz))), _452.w);\n    highp vec4 _514 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _607 = length(varying_positionCamera_Fog);\n    highp float _693 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _693 = (u_fogInfos.z - _607) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _694 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _694 = 1.0 / pow(2.7182800769805908203125, _607 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _695 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _695 = 1.0 / pow(2.7182800769805908203125, ((_607 * _607) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _695 = 1.0;\n            }\n            _694 = _695;\n        }\n        _693 = _694;\n    }\n    highp float _653 = clamp(_693, 0.0, 1.0);\n    highp vec3 _662 = ((_508.xyz + (_EmissionColor.xyz * _514.x)).xyz * _653) + (u_fogColor * (1.0 - _653));\n    gl_FragData[0] = vec4(_662.x, _662.y, _662.z, _508.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _767 = int(a_boneIndex.x) * 3;\n    int _772 = _767 + 1;\n    int _776 = _767 + 2;\n    int _818 = int(a_boneIndex.y) * 3;\n    int _823 = _818 + 1;\n    int _827 = _818 + 2;\n    int _869 = int(a_boneIndex.z) * 3;\n    int _874 = _869 + 1;\n    int _878 = _869 + 2;\n    int _920 = int(a_boneIndex.w) * 3;\n    int _925 = _920 + 1;\n    int _929 = _920 + 2;\n    mat4 _668 = mat4(vec4(u_boneOffsetMatrix[_767].xyz, 0.0), vec4(u_boneOffsetMatrix[_772].xyz, 0.0), vec4(u_boneOffsetMatrix[_776].xyz, 0.0), vec4(u_boneOffsetMatrix[_767].w, u_boneOffsetMatrix[_772].w, u_boneOffsetMatrix[_776].w, 1.0)) * a_boneWeight.x;\n    mat4 _672 = mat4(vec4(u_boneOffsetMatrix[_818].xyz, 0.0), vec4(u_boneOffsetMatrix[_823].xyz, 0.0), vec4(u_boneOffsetMatrix[_827].xyz, 0.0), vec4(u_boneOffsetMatrix[_818].w, u_boneOffsetMatrix[_823].w, u_boneOffsetMatrix[_827].w, 1.0)) * a_boneWeight.y;\n    mat4 _690 = mat4(vec4(u_boneOffsetMatrix[_869].xyz, 0.0), vec4(u_boneOffsetMatrix[_874].xyz, 0.0), vec4(u_boneOffsetMatrix[_878].xyz, 0.0), vec4(u_boneOffsetMatrix[_869].w, u_boneOffsetMatrix[_874].w, u_boneOffsetMatrix[_878].w, 1.0)) * a_boneWeight.z;\n    mat4 _708 = mat4(vec4(u_boneOffsetMatrix[_920].xyz, 0.0), vec4(u_boneOffsetMatrix[_925].xyz, 0.0), vec4(u_boneOffsetMatrix[_929].xyz, 0.0), vec4(u_boneOffsetMatrix[_920].w, u_boneOffsetMatrix[_925].w, u_boneOffsetMatrix[_929].w, 1.0)) * a_boneWeight.w;\n    vec4 _712 = ((_668[0] + _672[0]) + _690[0]) + _708[0];\n    vec4 _715 = ((_668[1] + _672[1]) + _690[1]) + _708[1];\n    vec4 _718 = ((_668[2] + _672[2]) + _690[2]) + _708[2];\n    vec4 _967 = u_world * (mat4(_712, _715, _718, ((_668[3] + _672[3]) + _690[3]) + _708[3]) * a_position);\n    vec3 _558 = _967.xyz;\n    gl_Position = u_projection * (u_view * _967);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _558);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_712.xyz, _715.xyz, _718.xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_ShadowPosition = _558;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _813 = int(a_boneIndex.x) * 3;\n    int _818 = _813 + 1;\n    int _822 = _813 + 2;\n    int _864 = int(a_boneIndex.y) * 3;\n    int _869 = _864 + 1;\n    int _873 = _864 + 2;\n    int _915 = int(a_boneIndex.z) * 3;\n    int _920 = _915 + 1;\n    int _924 = _915 + 2;\n    int _966 = int(a_boneIndex.w) * 3;\n    int _971 = _966 + 1;\n    int _975 = _966 + 2;\n    mat4 _714 = mat4(vec4(u_boneOffsetMatrix[_813].xyz, 0.0), vec4(u_boneOffsetMatrix[_818].xyz, 0.0), vec4(u_boneOffsetMatrix[_822].xyz, 0.0), vec4(u_boneOffsetMatrix[_813].w, u_boneOffsetMatrix[_818].w, u_boneOffsetMatrix[_822].w, 1.0)) * a_boneWeight.x;\n    mat4 _718 = mat4(vec4(u_boneOffsetMatrix[_864].xyz, 0.0), vec4(u_boneOffsetMatrix[_869].xyz, 0.0), vec4(u_boneOffsetMatrix[_873].xyz, 0.0), vec4(u_boneOffsetMatrix[_864].w, u_boneOffsetMatrix[_869].w, u_boneOffsetMatrix[_873].w, 1.0)) * a_boneWeight.y;\n    mat4 _736 = mat4(vec4(u_boneOffsetMatrix[_915].xyz, 0.0), vec4(u_boneOffsetMatrix[_920].xyz, 0.0), vec4(u_boneOffsetMatrix[_924].xyz, 0.0), vec4(u_boneOffsetMatrix[_915].w, u_boneOffsetMatrix[_920].w, u_boneOffsetMatrix[_924].w, 1.0)) * a_boneWeight.z;\n    mat4 _754 = mat4(vec4(u_boneOffsetMatrix[_966].xyz, 0.0), vec4(u_boneOffsetMatrix[_971].xyz, 0.0), vec4(u_boneOffsetMatrix[_975].xyz, 0.0), vec4(u_boneOffsetMatrix[_966].w, u_boneOffsetMatrix[_971].w, u_boneOffsetMatrix[_975].w, 1.0)) * a_boneWeight.w;\n    vec4 _758 = ((_714[0] + _718[0]) + _736[0]) + _754[0];\n    vec4 _761 = ((_714[1] + _718[1]) + _736[1]) + _754[1];\n    vec4 _764 = ((_714[2] + _718[2]) + _736[2]) + _754[2];\n    mat3 _776 = mat3(_758.xyz, _761.xyz, _764.xyz);\n    vec4 _1013 = u_world * (mat4(_758, _761, _764, ((_714[3] + _718[3]) + _736[3]) + _754[3]) * a_position);\n    mat3 _1033 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1036 = normalize(_1033 * (_776 * a_normal));\n    vec3 _1050 = normalize(_1033 * (_776 * a_tangent.xyz).xyz);\n    mat3 _619 = mat3(_1050, cross(_1050, _1036) * a_tangent.w, _1036);\n    gl_Position = u_projection * (u_view * _1013);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _619 * u_lightDir;\n    varying_ViewDir = _619 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1013.xyz);\n    varying_WorldNormal = _1036;\n    varying_positionCamera_Fog = (u_view * vec4(_1013.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    int _766 = int(a_boneIndex.x) * 3;\n    int _771 = _766 + 1;\n    int _775 = _766 + 2;\n    int _817 = int(a_boneIndex.y) * 3;\n    int _822 = _817 + 1;\n    int _826 = _817 + 2;\n    int _868 = int(a_boneIndex.z) * 3;\n    int _873 = _868 + 1;\n    int _877 = _868 + 2;\n    int _919 = int(a_boneIndex.w) * 3;\n    int _924 = _919 + 1;\n    int _928 = _919 + 2;\n    mat4 _663 = mat4(vec4(u_boneOffsetMatrix[_766].xyz, 0.0), vec4(u_boneOffsetMatrix[_771].xyz, 0.0), vec4(u_boneOffsetMatrix[_775].xyz, 0.0), vec4(u_boneOffsetMatrix[_766].w, u_boneOffsetMatrix[_771].w, u_boneOffsetMatrix[_775].w, 1.0)) * a_boneWeight.x;\n    mat4 _667 = mat4(vec4(u_boneOffsetMatrix[_817].xyz, 0.0), vec4(u_boneOffsetMatrix[_822].xyz, 0.0), vec4(u_boneOffsetMatrix[_826].xyz, 0.0), vec4(u_boneOffsetMatrix[_817].w, u_boneOffsetMatrix[_822].w, u_boneOffsetMatrix[_826].w, 1.0)) * a_boneWeight.y;\n    mat4 _685 = mat4(vec4(u_boneOffsetMatrix[_868].xyz, 0.0), vec4(u_boneOffsetMatrix[_873].xyz, 0.0), vec4(u_boneOffsetMatrix[_877].xyz, 0.0), vec4(u_boneOffsetMatrix[_868].w, u_boneOffsetMatrix[_873].w, u_boneOffsetMatrix[_877].w, 1.0)) * a_boneWeight.z;\n    mat4 _703 = mat4(vec4(u_boneOffsetMatrix[_919].xyz, 0.0), vec4(u_boneOffsetMatrix[_924].xyz, 0.0), vec4(u_boneOffsetMatrix[_928].xyz, 0.0), vec4(u_boneOffsetMatrix[_919].w, u_boneOffsetMatrix[_924].w, u_boneOffsetMatrix[_928].w, 1.0)) * a_boneWeight.w;\n    mat4 _721 = u_bindTargetWorldInverse * mat4(((_663[0] + _667[0]) + _685[0]) + _703[0], ((_663[1] + _667[1]) + _685[1]) + _703[1], ((_663[2] + _667[2]) + _685[2]) + _703[2], ((_663[3] + _667[3]) + _685[3]) + _703[3]);\n    vec4 _966 = u_world * (_721 * a_position);\n    gl_Position = u_projection * (u_view * _966);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _966.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_721[0].xyz, _721[1].xyz, _721[2].xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    float _805 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _811 = (3.0 * (_805 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _814 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _818 = floor(_811 * _814);\n    float _824 = _811 - (_818 * u_skinnedAnimationMapInfo.x);\n    float _829 = (_818 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _839 = texture2D(u_skinnedAnimationMap, vec2((_824 + 0.5) * _814, _829));\n    vec4 _849 = texture2D(u_skinnedAnimationMap, vec2((_824 + 1.5) * _814, _829));\n    vec4 _859 = texture2D(u_skinnedAnimationMap, vec2((_824 + 2.5) * _814, _829));\n    float _910 = (3.0 * (_805 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _917 = floor(_910 * _814);\n    float _923 = _910 - (_917 * u_skinnedAnimationMapInfo.x);\n    float _928 = (_917 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _938 = texture2D(u_skinnedAnimationMap, vec2((_923 + 0.5) * _814, _928));\n    vec4 _948 = texture2D(u_skinnedAnimationMap, vec2((_923 + 1.5) * _814, _928));\n    vec4 _958 = texture2D(u_skinnedAnimationMap, vec2((_923 + 2.5) * _814, _928));\n    float _1009 = (3.0 * (_805 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1016 = floor(_1009 * _814);\n    float _1022 = _1009 - (_1016 * u_skinnedAnimationMapInfo.x);\n    float _1027 = (_1016 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1037 = texture2D(u_skinnedAnimationMap, vec2((_1022 + 0.5) * _814, _1027));\n    vec4 _1047 = texture2D(u_skinnedAnimationMap, vec2((_1022 + 1.5) * _814, _1027));\n    vec4 _1057 = texture2D(u_skinnedAnimationMap, vec2((_1022 + 2.5) * _814, _1027));\n    float _1108 = (3.0 * (_805 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1115 = floor(_1108 * _814);\n    float _1121 = _1108 - (_1115 * u_skinnedAnimationMapInfo.x);\n    float _1126 = (_1115 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1136 = texture2D(u_skinnedAnimationMap, vec2((_1121 + 0.5) * _814, _1126));\n    vec4 _1146 = texture2D(u_skinnedAnimationMap, vec2((_1121 + 1.5) * _814, _1126));\n    vec4 _1156 = texture2D(u_skinnedAnimationMap, vec2((_1121 + 2.5) * _814, _1126));\n    mat4 _701 = mat4(vec4(_839.xyz, 0.0), vec4(_849.xyz, 0.0), vec4(_859.xyz, 0.0), vec4(_839.w, _849.w, _859.w, 1.0)) * a_boneWeight.x;\n    mat4 _705 = mat4(vec4(_938.xyz, 0.0), vec4(_948.xyz, 0.0), vec4(_958.xyz, 0.0), vec4(_938.w, _948.w, _958.w, 1.0)) * a_boneWeight.y;\n    mat4 _723 = mat4(vec4(_1037.xyz, 0.0), vec4(_1047.xyz, 0.0), vec4(_1057.xyz, 0.0), vec4(_1037.w, _1047.w, _1057.w, 1.0)) * a_boneWeight.z;\n    mat4 _741 = mat4(vec4(_1136.xyz, 0.0), vec4(_1146.xyz, 0.0), vec4(_1156.xyz, 0.0), vec4(_1136.w, _1146.w, _1156.w, 1.0)) * a_boneWeight.w;\n    vec4 _745 = ((_701[0] + _705[0]) + _723[0]) + _741[0];\n    vec4 _748 = ((_701[1] + _705[1]) + _723[1]) + _741[1];\n    vec4 _751 = ((_701[2] + _705[2]) + _723[2]) + _741[2];\n    vec4 _1192 = u_world * (mat4(_745, _748, _751, ((_701[3] + _705[3]) + _723[3]) + _741[3]) * a_position);\n    gl_Position = u_projection * (u_view * _1192);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1192.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_745.xyz, _748.xyz, _751.xyz) * a_normal));\n    varying_positionCamera_Fog = (u_view * vec4(_1192.xyz, 1.0)).xyz;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _368 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _376 = (_368 * _Color) * _AlbedoIntensity;\n    highp float _378 = _376.w;\n    if ((_378 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _387 = normalize(varying_LightDir);\n    highp vec3 _393 = normalize(varying_WorldNormal);\n    highp vec4 _415 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _434 = vec4(_376.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_387, _393))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _387), _393)), _Shininess * 128.0)) * (_415.xyz * _SpecColor.xyz))), _378);\n    highp float _478 = length(varying_positionCamera_Fog);\n    highp float _560 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _560 = (u_fogInfos.z - _478) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _561 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _561 = 1.0 / pow(2.7182800769805908203125, _478 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _562 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _562 = 1.0 / pow(2.7182800769805908203125, ((_478 * _478) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _562 = 1.0;\n            }\n            _561 = _562;\n        }\n        _560 = _561;\n    }\n    highp float _524 = clamp(_560, 0.0, 1.0);\n    highp vec3 _533 = (_434.xyz * _524) + (u_fogColor * (1.0 - _524));\n    gl_FragData[0] = vec4(_533.x, _533.y, _533.z, _434.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _775 = int(a_boneIndex.x) * 3;\n    int _780 = _775 + 1;\n    int _784 = _775 + 2;\n    int _826 = int(a_boneIndex.y) * 3;\n    int _831 = _826 + 1;\n    int _835 = _826 + 2;\n    int _877 = int(a_boneIndex.z) * 3;\n    int _882 = _877 + 1;\n    int _886 = _877 + 2;\n    int _928 = int(a_boneIndex.w) * 3;\n    int _933 = _928 + 1;\n    int _937 = _928 + 2;\n    mat4 _672 = mat4(vec4(u_boneOffsetMatrix[_775].xyz, 0.0), vec4(u_boneOffsetMatrix[_780].xyz, 0.0), vec4(u_boneOffsetMatrix[_784].xyz, 0.0), vec4(u_boneOffsetMatrix[_775].w, u_boneOffsetMatrix[_780].w, u_boneOffsetMatrix[_784].w, 1.0)) * a_boneWeight.x;\n    mat4 _676 = mat4(vec4(u_boneOffsetMatrix[_826].xyz, 0.0), vec4(u_boneOffsetMatrix[_831].xyz, 0.0), vec4(u_boneOffsetMatrix[_835].xyz, 0.0), vec4(u_boneOffsetMatrix[_826].w, u_boneOffsetMatrix[_831].w, u_boneOffsetMatrix[_835].w, 1.0)) * a_boneWeight.y;\n    mat4 _694 = mat4(vec4(u_boneOffsetMatrix[_877].xyz, 0.0), vec4(u_boneOffsetMatrix[_882].xyz, 0.0), vec4(u_boneOffsetMatrix[_886].xyz, 0.0), vec4(u_boneOffsetMatrix[_877].w, u_boneOffsetMatrix[_882].w, u_boneOffsetMatrix[_886].w, 1.0)) * a_boneWeight.z;\n    mat4 _712 = mat4(vec4(u_boneOffsetMatrix[_928].xyz, 0.0), vec4(u_boneOffsetMatrix[_933].xyz, 0.0), vec4(u_boneOffsetMatrix[_937].xyz, 0.0), vec4(u_boneOffsetMatrix[_928].w, u_boneOffsetMatrix[_933].w, u_boneOffsetMatrix[_937].w, 1.0)) * a_boneWeight.w;\n    mat4 _730 = u_bindTargetWorldInverse * mat4(((_672[0] + _676[0]) + _694[0]) + _712[0], ((_672[1] + _676[1]) + _694[1]) + _712[1], ((_672[2] + _676[2]) + _694[2]) + _712[2], ((_672[3] + _676[3]) + _694[3]) + _712[3]);\n    vec4 _975 = u_world * (_730 * a_position);\n    vec3 _562 = _975.xyz;\n    gl_Position = u_projection * (u_view * _975);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _562);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_730[0].xyz, _730[1].xyz, _730[2].xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_ShadowPosition = _562;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _821 = int(a_boneIndex.x) * 3;\n    int _826 = _821 + 1;\n    int _830 = _821 + 2;\n    int _872 = int(a_boneIndex.y) * 3;\n    int _877 = _872 + 1;\n    int _881 = _872 + 2;\n    int _923 = int(a_boneIndex.z) * 3;\n    int _928 = _923 + 1;\n    int _932 = _923 + 2;\n    int _974 = int(a_boneIndex.w) * 3;\n    int _979 = _974 + 1;\n    int _983 = _974 + 2;\n    mat4 _718 = mat4(vec4(u_boneOffsetMatrix[_821].xyz, 0.0), vec4(u_boneOffsetMatrix[_826].xyz, 0.0), vec4(u_boneOffsetMatrix[_830].xyz, 0.0), vec4(u_boneOffsetMatrix[_821].w, u_boneOffsetMatrix[_826].w, u_boneOffsetMatrix[_830].w, 1.0)) * a_boneWeight.x;\n    mat4 _722 = mat4(vec4(u_boneOffsetMatrix[_872].xyz, 0.0), vec4(u_boneOffsetMatrix[_877].xyz, 0.0), vec4(u_boneOffsetMatrix[_881].xyz, 0.0), vec4(u_boneOffsetMatrix[_872].w, u_boneOffsetMatrix[_877].w, u_boneOffsetMatrix[_881].w, 1.0)) * a_boneWeight.y;\n    mat4 _740 = mat4(vec4(u_boneOffsetMatrix[_923].xyz, 0.0), vec4(u_boneOffsetMatrix[_928].xyz, 0.0), vec4(u_boneOffsetMatrix[_932].xyz, 0.0), vec4(u_boneOffsetMatrix[_923].w, u_boneOffsetMatrix[_928].w, u_boneOffsetMatrix[_932].w, 1.0)) * a_boneWeight.z;\n    mat4 _758 = mat4(vec4(u_boneOffsetMatrix[_974].xyz, 0.0), vec4(u_boneOffsetMatrix[_979].xyz, 0.0), vec4(u_boneOffsetMatrix[_983].xyz, 0.0), vec4(u_boneOffsetMatrix[_974].w, u_boneOffsetMatrix[_979].w, u_boneOffsetMatrix[_983].w, 1.0)) * a_boneWeight.w;\n    mat4 _776 = u_bindTargetWorldInverse * mat4(((_718[0] + _722[0]) + _740[0]) + _758[0], ((_718[1] + _722[1]) + _740[1]) + _758[1], ((_718[2] + _722[2]) + _740[2]) + _758[2], ((_718[3] + _722[3]) + _740[3]) + _758[3]);\n    mat3 _784 = mat3(_776[0].xyz, _776[1].xyz, _776[2].xyz);\n    vec4 _1021 = u_world * (_776 * a_position);\n    mat3 _1041 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1044 = normalize(_1041 * (_784 * a_normal));\n    vec3 _1058 = normalize(_1041 * (_784 * a_tangent.xyz).xyz);\n    mat3 _623 = mat3(_1058, cross(_1058, _1044) * a_tangent.w, _1044);\n    gl_Position = u_projection * (u_view * _1021);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _623 * u_lightDir;\n    varying_ViewDir = _623 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1021.xyz);\n    varying_WorldNormal = _1044;\n    varying_positionCamera_Fog = (u_view * vec4(_1021.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    float _840 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _846 = (3.0 * (_840 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _849 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _853 = floor(_846 * _849);\n    float _859 = _846 - (_853 * u_skinnedAnimationMapInfo.x);\n    float _864 = (_853 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _874 = texture2D(u_skinnedAnimationMap, vec2((_859 + 0.5) * _849, _864));\n    vec4 _884 = texture2D(u_skinnedAnimationMap, vec2((_859 + 1.5) * _849, _864));\n    vec4 _894 = texture2D(u_skinnedAnimationMap, vec2((_859 + 2.5) * _849, _864));\n    float _945 = (3.0 * (_840 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _952 = floor(_945 * _849);\n    float _958 = _945 - (_952 * u_skinnedAnimationMapInfo.x);\n    float _963 = (_952 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _973 = texture2D(u_skinnedAnimationMap, vec2((_958 + 0.5) * _849, _963));\n    vec4 _983 = texture2D(u_skinnedAnimationMap, vec2((_958 + 1.5) * _849, _963));\n    vec4 _993 = texture2D(u_skinnedAnimationMap, vec2((_958 + 2.5) * _849, _963));\n    float _1044 = (3.0 * (_840 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1051 = floor(_1044 * _849);\n    float _1057 = _1044 - (_1051 * u_skinnedAnimationMapInfo.x);\n    float _1062 = (_1051 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1072 = texture2D(u_skinnedAnimationMap, vec2((_1057 + 0.5) * _849, _1062));\n    vec4 _1082 = texture2D(u_skinnedAnimationMap, vec2((_1057 + 1.5) * _849, _1062));\n    vec4 _1092 = texture2D(u_skinnedAnimationMap, vec2((_1057 + 2.5) * _849, _1062));\n    float _1143 = (3.0 * (_840 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1150 = floor(_1143 * _849);\n    float _1156 = _1143 - (_1150 * u_skinnedAnimationMapInfo.x);\n    float _1161 = (_1150 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1171 = texture2D(u_skinnedAnimationMap, vec2((_1156 + 0.5) * _849, _1161));\n    vec4 _1181 = texture2D(u_skinnedAnimationMap, vec2((_1156 + 1.5) * _849, _1161));\n    vec4 _1191 = texture2D(u_skinnedAnimationMap, vec2((_1156 + 2.5) * _849, _1161));\n    mat4 _736 = mat4(vec4(_874.xyz, 0.0), vec4(_884.xyz, 0.0), vec4(_894.xyz, 0.0), vec4(_874.w, _884.w, _894.w, 1.0)) * a_boneWeight.x;\n    mat4 _740 = mat4(vec4(_973.xyz, 0.0), vec4(_983.xyz, 0.0), vec4(_993.xyz, 0.0), vec4(_973.w, _983.w, _993.w, 1.0)) * a_boneWeight.y;\n    mat4 _758 = mat4(vec4(_1072.xyz, 0.0), vec4(_1082.xyz, 0.0), vec4(_1092.xyz, 0.0), vec4(_1072.w, _1082.w, _1092.w, 1.0)) * a_boneWeight.z;\n    mat4 _776 = mat4(vec4(_1171.xyz, 0.0), vec4(_1181.xyz, 0.0), vec4(_1191.xyz, 0.0), vec4(_1171.w, _1181.w, _1191.w, 1.0)) * a_boneWeight.w;\n    vec4 _780 = ((_736[0] + _740[0]) + _758[0]) + _776[0];\n    vec4 _783 = ((_736[1] + _740[1]) + _758[1]) + _776[1];\n    vec4 _786 = ((_736[2] + _740[2]) + _758[2]) + _776[2];\n    vec4 _1227 = u_world * (mat4(_780, _783, _786, ((_736[3] + _740[3]) + _758[3]) + _776[3]) * a_position);\n    gl_Position = u_projection * (u_view * _1227);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1227.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_780.xyz, _783.xyz, _786.xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_1227.xyz, 1.0)).xyz;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _417 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _425 = (_417 * _Color) * _AlbedoIntensity;\n    highp vec4 _450 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _452 = _450.xyz * 2.0;\n    highp vec4 _476 = vec4(_425.xyz * (min(_452, mix(max(_452, u_shadowColor), _452, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_SpecColor.xyz * _417.w))), _425.w);\n    highp float _557 = length(varying_positionCamera_Fog);\n    highp float _643 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _643 = (u_fogInfos.z - _557) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _644 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _644 = 1.0 / pow(2.7182800769805908203125, _557 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _645 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _645 = 1.0 / pow(2.7182800769805908203125, ((_557 * _557) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _645 = 1.0;\n            }\n            _644 = _645;\n        }\n        _643 = _644;\n    }\n    highp float _603 = clamp(_643, 0.0, 1.0);\n    highp vec3 _612 = (_476.xyz * _603) + (u_fogColor * (1.0 - _603));\n    gl_FragData[0] = vec4(_612.x, _612.y, _612.z, _476.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _670 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _678 = (_670 * _Color) * _AlbedoIntensity;\n    highp vec3 _687 = normalize(varying_WorldNormal);\n    highp vec4 _783 = vec4(varying_ShadowPosition, 1.0);\n    highp float _787 = -(u_view * _783).z;\n    bool _800 = true && (_787 < u_csmFarBounds.x);\n    highp float _1166 = 0.0;\n    if (_800)\n    {\n        highp vec3 _815 = ((u_csmLightSpaceMatrices[0] * _783).xyz * 0.5) + vec3(0.5);\n        highp float _819 = _815.x;\n        highp float _823 = _815.y;\n        highp float _833 = (((_815.z + step(_819, 0.001000000047497451305389404296875)) + step(_823, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _819)) + step(0.999000012874603271484375, _823);\n        highp float _1163 = 0.0;\n        for (int SPIRV_Cross_Dummy259 = 0; SPIRV_Cross_Dummy259 < 1; SPIRV_Cross_Dummy259++)\n        {\n            if (_833 > 1.0)\n            {\n                _1163 = 1.0;\n                break;\n            }\n            highp float _884 = _833 - 0.001000000047497451305389404296875;\n            highp vec2 _890 = ((_815.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _901 = fract(_890 * vec2(2048.0));\n            highp float _956 = _901.y;\n            _1163 = mix(mix(float(_884 < dot(texture2D(u_shadowMapTex, _890), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_884 < dot(texture2D(u_shadowMapTex, _890 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _956), mix(float(_884 < dot(texture2D(u_shadowMapTex, _890 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_884 < dot(texture2D(u_shadowMapTex, _890 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _956), _901.x);\n            break;\n        }\n        _1166 = _1163;\n    }\n    else\n    {\n        _1166 = 1.0;\n    }\n    bool _1493 = _800 ? true : false;\n    bool _1184 = (!_1493) && (_787 < u_csmFarBounds.y);\n    highp float _1275 = 0.0;\n    if (_1184)\n    {\n        highp vec3 _1195 = ((u_csmLightSpaceMatrices[1] * _783).xyz * 0.5) + vec3(0.5);\n        highp float _1197 = _1195.x;\n        highp float _1200 = _1195.y;\n        highp float _1208 = (((_1195.z + step(_1197, 0.001000000047497451305389404296875)) + step(_1200, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1197)) + step(0.999000012874603271484375, _1200);\n        highp float _1272 = 0.0;\n        for (int SPIRV_Cross_Dummy335 = 0; SPIRV_Cross_Dummy335 < 1; SPIRV_Cross_Dummy335++)\n        {\n            if (_1208 > 1.0)\n            {\n                _1272 = 1.0;\n                break;\n            }\n            highp float _1226 = _1208 - 0.001000000047497451305389404296875;\n            highp vec2 _1230 = ((_1195.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1237 = fract(_1230 * vec2(2048.0));\n            highp float _1265 = _1237.y;\n            _1272 = mix(mix(float(_1226 < dot(texture2D(u_shadowMapTex, _1230), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1226 < dot(texture2D(u_shadowMapTex, _1230 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1265), mix(float(_1226 < dot(texture2D(u_shadowMapTex, _1230 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1226 < dot(texture2D(u_shadowMapTex, _1230 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1265), _1237.x);\n            break;\n        }\n        _1275 = _1272;\n    }\n    else\n    {\n        _1275 = _1166;\n    }\n    bool _1494 = _1184 ? true : _1493;\n    bool _1289 = (!_1494) && (_787 < u_csmFarBounds.z);\n    highp float _1380 = 0.0;\n    if (_1289)\n    {\n        highp vec3 _1300 = ((u_csmLightSpaceMatrices[2] * _783).xyz * 0.5) + vec3(0.5);\n        highp float _1302 = _1300.x;\n        highp float _1305 = _1300.y;\n        highp float _1313 = (((_1300.z + step(_1302, 0.001000000047497451305389404296875)) + step(_1305, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1302)) + step(0.999000012874603271484375, _1305);\n        highp float _1377 = 0.0;\n        for (int SPIRV_Cross_Dummy411 = 0; SPIRV_Cross_Dummy411 < 1; SPIRV_Cross_Dummy411++)\n        {\n            if (_1313 > 1.0)\n            {\n                _1377 = 1.0;\n                break;\n            }\n            highp float _1331 = _1313 - 0.001000000047497451305389404296875;\n            highp vec2 _1335 = ((_1300.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1342 = fract(_1335 * vec2(2048.0));\n            highp float _1370 = _1342.y;\n            _1377 = mix(mix(float(_1331 < dot(texture2D(u_shadowMapTex, _1335), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1331 < dot(texture2D(u_shadowMapTex, _1335 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1370), mix(float(_1331 < dot(texture2D(u_shadowMapTex, _1335 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1331 < dot(texture2D(u_shadowMapTex, _1335 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1370), _1342.x);\n            break;\n        }\n        _1380 = _1377;\n    }\n    else\n    {\n        _1380 = _1275;\n    }\n    highp float _1485 = 0.0;\n    if ((!(_1289 ? true : _1494)) && (_787 < u_csmFarBounds.w))\n    {\n        highp vec3 _1405 = ((u_csmLightSpaceMatrices[3] * _783).xyz * 0.5) + vec3(0.5);\n        highp float _1407 = _1405.x;\n        highp float _1410 = _1405.y;\n        highp float _1418 = (((_1405.z + step(_1407, 0.001000000047497451305389404296875)) + step(_1410, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1407)) + step(0.999000012874603271484375, _1410);\n        highp float _1482 = 0.0;\n        for (int SPIRV_Cross_Dummy481 = 0; SPIRV_Cross_Dummy481 < 1; SPIRV_Cross_Dummy481++)\n        {\n            if (_1418 > 1.0)\n            {\n                _1482 = 1.0;\n                break;\n            }\n            highp float _1436 = _1418 - 0.001000000047497451305389404296875;\n            highp vec2 _1440 = ((_1405.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1447 = fract(_1440 * vec2(2048.0));\n            highp float _1475 = _1447.y;\n            _1482 = mix(mix(float(_1436 < dot(texture2D(u_shadowMapTex, _1440), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1436 < dot(texture2D(u_shadowMapTex, _1440 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1475), mix(float(_1436 < dot(texture2D(u_shadowMapTex, _1440 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1436 < dot(texture2D(u_shadowMapTex, _1440 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1475), _1447.x);\n            break;\n        }\n        _1485 = _1482;\n    }\n    else\n    {\n        _1485 = _1380;\n    }\n    highp vec4 _706 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _708 = _706.xyz * 2.0;\n    highp vec4 _732 = vec4(_678.xyz * (min(_708, mix(max(_708 - (u_lightColor * (clamp(dot(_687, u_lightDir), 0.0, 1.0) * (1.0 - _1485))), u_shadowColor), _708, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _687)), _Shininess * 128.0)) * (_SpecColor.xyz * _670.w))), _678.w);\n    highp float _1042 = length(varying_positionCamera_Fog);\n    highp float _1156 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1156 = (u_fogInfos.z - _1042) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1157 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1157 = 1.0 / pow(2.7182800769805908203125, _1042 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1158 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1158 = 1.0 / pow(2.7182800769805908203125, ((_1042 * _1042) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1158 = 1.0;\n            }\n            _1157 = _1158;\n        }\n        _1156 = _1157;\n    }\n    highp float _1088 = clamp(_1156, 0.0, 1.0);\n    highp vec3 _1097 = (_732.xyz * _1088) + (u_fogColor * (1.0 - _1088));\n    gl_FragData[0] = vec4(_1097.x, _1097.y, _1097.z, _732.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\n\nvoid main()\n{\n    float _845 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _851 = (3.0 * (_845 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _854 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _858 = floor(_851 * _854);\n    float _864 = _851 - (_858 * u_skinnedAnimationMapInfo.x);\n    float _869 = (_858 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _879 = texture2D(u_skinnedAnimationMap, vec2((_864 + 0.5) * _854, _869));\n    vec4 _889 = texture2D(u_skinnedAnimationMap, vec2((_864 + 1.5) * _854, _869));\n    vec4 _899 = texture2D(u_skinnedAnimationMap, vec2((_864 + 2.5) * _854, _869));\n    float _950 = (3.0 * (_845 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _957 = floor(_950 * _854);\n    float _963 = _950 - (_957 * u_skinnedAnimationMapInfo.x);\n    float _968 = (_957 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _978 = texture2D(u_skinnedAnimationMap, vec2((_963 + 0.5) * _854, _968));\n    vec4 _988 = texture2D(u_skinnedAnimationMap, vec2((_963 + 1.5) * _854, _968));\n    vec4 _998 = texture2D(u_skinnedAnimationMap, vec2((_963 + 2.5) * _854, _968));\n    float _1049 = (3.0 * (_845 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1056 = floor(_1049 * _854);\n    float _1062 = _1049 - (_1056 * u_skinnedAnimationMapInfo.x);\n    float _1067 = (_1056 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1077 = texture2D(u_skinnedAnimationMap, vec2((_1062 + 0.5) * _854, _1067));\n    vec4 _1087 = texture2D(u_skinnedAnimationMap, vec2((_1062 + 1.5) * _854, _1067));\n    vec4 _1097 = texture2D(u_skinnedAnimationMap, vec2((_1062 + 2.5) * _854, _1067));\n    float _1148 = (3.0 * (_845 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1155 = floor(_1148 * _854);\n    float _1161 = _1148 - (_1155 * u_skinnedAnimationMapInfo.x);\n    float _1166 = (_1155 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1176 = texture2D(u_skinnedAnimationMap, vec2((_1161 + 0.5) * _854, _1166));\n    vec4 _1186 = texture2D(u_skinnedAnimationMap, vec2((_1161 + 1.5) * _854, _1166));\n    vec4 _1196 = texture2D(u_skinnedAnimationMap, vec2((_1161 + 2.5) * _854, _1166));\n    mat4 _741 = mat4(vec4(_879.xyz, 0.0), vec4(_889.xyz, 0.0), vec4(_899.xyz, 0.0), vec4(_879.w, _889.w, _899.w, 1.0)) * a_boneWeight.x;\n    mat4 _745 = mat4(vec4(_978.xyz, 0.0), vec4(_988.xyz, 0.0), vec4(_998.xyz, 0.0), vec4(_978.w, _988.w, _998.w, 1.0)) * a_boneWeight.y;\n    mat4 _763 = mat4(vec4(_1077.xyz, 0.0), vec4(_1087.xyz, 0.0), vec4(_1097.xyz, 0.0), vec4(_1077.w, _1087.w, _1097.w, 1.0)) * a_boneWeight.z;\n    mat4 _781 = mat4(vec4(_1176.xyz, 0.0), vec4(_1186.xyz, 0.0), vec4(_1196.xyz, 0.0), vec4(_1176.w, _1186.w, _1196.w, 1.0)) * a_boneWeight.w;\n    vec4 _785 = ((_741[0] + _745[0]) + _763[0]) + _781[0];\n    vec4 _788 = ((_741[1] + _745[1]) + _763[1]) + _781[1];\n    vec4 _791 = ((_741[2] + _745[2]) + _763[2]) + _781[2];\n    mat3 _803 = mat3(_785.xyz, _788.xyz, _791.xyz);\n    vec4 _1232 = u_world * (mat4(_785, _788, _791, ((_741[3] + _745[3]) + _763[3]) + _781[3]) * a_position);\n    mat3 _1252 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1255 = normalize(_1252 * (_803 * a_normal));\n    vec3 _1269 = normalize(_1252 * (_803 * a_tangent.xyz).xyz);\n    mat3 _657 = mat3(_1269, cross(_1269, _1255) * a_tangent.w, _1255);\n    gl_Position = u_projection * (u_view * _1232);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _657 * u_lightDir;\n    varying_ViewDir = _657 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1232.xyz);\n    varying_WorldNormal = _1255;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\n\nvoid main()\n{\n    highp vec4 _311 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _319 = (_311 * _Color) * _AlbedoIntensity;\n    highp float _321 = _319.w;\n    if ((_321 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _330 = normalize(varying_LightDir);\n    highp vec2 _390 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _401 = vec3(_390, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_390, _390))));\n    gl_FragData[0] = vec4(_319.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_330, _401))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _330), _401)), _Shininess * 128.0)) * (_SpecColor.xyz * _311.w))), _321);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _642 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _650 = (_642 * _Color) * _AlbedoIntensity;\n    highp float _652 = _650.w;\n    if ((_652 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _661 = normalize(varying_LightDir);\n    highp vec3 _667 = normalize(varying_WorldNormal);\n    highp vec4 _781 = vec4(varying_ShadowPosition, 1.0);\n    highp float _785 = -(u_view * _781).z;\n    bool _798 = true && (_785 < u_csmFarBounds.x);\n    highp float _1123 = 0.0;\n    if (_798)\n    {\n        highp vec3 _813 = ((u_csmLightSpaceMatrices[0] * _781).xyz * 0.5) + vec3(0.5);\n        highp float _817 = _813.x;\n        highp float _821 = _813.y;\n        highp float _831 = (((_813.z + step(_817, 0.001000000047497451305389404296875)) + step(_821, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _817)) + step(0.999000012874603271484375, _821);\n        highp float _1120 = 0.0;\n        for (int SPIRV_Cross_Dummy271 = 0; SPIRV_Cross_Dummy271 < 1; SPIRV_Cross_Dummy271++)\n        {\n            if (_831 > 1.0)\n            {\n                _1120 = 1.0;\n                break;\n            }\n            highp float _882 = _831 - 0.001000000047497451305389404296875;\n            highp vec2 _888 = ((_813.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _899 = fract(_888 * vec2(2048.0));\n            highp float _954 = _899.y;\n            _1120 = mix(mix(float(_882 < dot(texture2D(u_shadowMapTex, _888), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_882 < dot(texture2D(u_shadowMapTex, _888 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _954), mix(float(_882 < dot(texture2D(u_shadowMapTex, _888 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_882 < dot(texture2D(u_shadowMapTex, _888 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _954), _899.x);\n            break;\n        }\n        _1123 = _1120;\n    }\n    else\n    {\n        _1123 = 1.0;\n    }\n    bool _1450 = _798 ? true : false;\n    bool _1141 = (!_1450) && (_785 < u_csmFarBounds.y);\n    highp float _1232 = 0.0;\n    if (_1141)\n    {\n        highp vec3 _1152 = ((u_csmLightSpaceMatrices[1] * _781).xyz * 0.5) + vec3(0.5);\n        highp float _1154 = _1152.x;\n        highp float _1157 = _1152.y;\n        highp float _1165 = (((_1152.z + step(_1154, 0.001000000047497451305389404296875)) + step(_1157, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1154)) + step(0.999000012874603271484375, _1157);\n        highp float _1229 = 0.0;\n        for (int SPIRV_Cross_Dummy347 = 0; SPIRV_Cross_Dummy347 < 1; SPIRV_Cross_Dummy347++)\n        {\n            if (_1165 > 1.0)\n            {\n                _1229 = 1.0;\n                break;\n            }\n            highp float _1183 = _1165 - 0.001000000047497451305389404296875;\n            highp vec2 _1187 = ((_1152.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1194 = fract(_1187 * vec2(2048.0));\n            highp float _1222 = _1194.y;\n            _1229 = mix(mix(float(_1183 < dot(texture2D(u_shadowMapTex, _1187), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1183 < dot(texture2D(u_shadowMapTex, _1187 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1222), mix(float(_1183 < dot(texture2D(u_shadowMapTex, _1187 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1183 < dot(texture2D(u_shadowMapTex, _1187 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1222), _1194.x);\n            break;\n        }\n        _1232 = _1229;\n    }\n    else\n    {\n        _1232 = _1123;\n    }\n    bool _1451 = _1141 ? true : _1450;\n    bool _1246 = (!_1451) && (_785 < u_csmFarBounds.z);\n    highp float _1337 = 0.0;\n    if (_1246)\n    {\n        highp vec3 _1257 = ((u_csmLightSpaceMatrices[2] * _781).xyz * 0.5) + vec3(0.5);\n        highp float _1259 = _1257.x;\n        highp float _1262 = _1257.y;\n        highp float _1270 = (((_1257.z + step(_1259, 0.001000000047497451305389404296875)) + step(_1262, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1259)) + step(0.999000012874603271484375, _1262);\n        highp float _1334 = 0.0;\n        for (int SPIRV_Cross_Dummy423 = 0; SPIRV_Cross_Dummy423 < 1; SPIRV_Cross_Dummy423++)\n        {\n            if (_1270 > 1.0)\n            {\n                _1334 = 1.0;\n                break;\n            }\n            highp float _1288 = _1270 - 0.001000000047497451305389404296875;\n            highp vec2 _1292 = ((_1257.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1299 = fract(_1292 * vec2(2048.0));\n            highp float _1327 = _1299.y;\n            _1334 = mix(mix(float(_1288 < dot(texture2D(u_shadowMapTex, _1292), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1288 < dot(texture2D(u_shadowMapTex, _1292 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1327), mix(float(_1288 < dot(texture2D(u_shadowMapTex, _1292 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1288 < dot(texture2D(u_shadowMapTex, _1292 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1327), _1299.x);\n            break;\n        }\n        _1337 = _1334;\n    }\n    else\n    {\n        _1337 = _1232;\n    }\n    highp float _1442 = 0.0;\n    if ((!(_1246 ? true : _1451)) && (_785 < u_csmFarBounds.w))\n    {\n        highp vec3 _1362 = ((u_csmLightSpaceMatrices[3] * _781).xyz * 0.5) + vec3(0.5);\n        highp float _1364 = _1362.x;\n        highp float _1367 = _1362.y;\n        highp float _1375 = (((_1362.z + step(_1364, 0.001000000047497451305389404296875)) + step(_1367, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1364)) + step(0.999000012874603271484375, _1367);\n        highp float _1439 = 0.0;\n        for (int SPIRV_Cross_Dummy493 = 0; SPIRV_Cross_Dummy493 < 1; SPIRV_Cross_Dummy493++)\n        {\n            if (_1375 > 1.0)\n            {\n                _1439 = 1.0;\n                break;\n            }\n            highp float _1393 = _1375 - 0.001000000047497451305389404296875;\n            highp vec2 _1397 = ((_1362.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1404 = fract(_1397 * vec2(2048.0));\n            highp float _1432 = _1404.y;\n            _1439 = mix(mix(float(_1393 < dot(texture2D(u_shadowMapTex, _1397), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1393 < dot(texture2D(u_shadowMapTex, _1397 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1432), mix(float(_1393 < dot(texture2D(u_shadowMapTex, _1397 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1393 < dot(texture2D(u_shadowMapTex, _1397 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1432), _1404.x);\n            break;\n        }\n        _1442 = _1439;\n    }\n    else\n    {\n        _1442 = _1337;\n    }\n    highp vec4 _692 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _711 = vec4(_650.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_661, _667))) * _1442)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _661), _667)), _Shininess * 128.0)) * (_692.xyz * _SpecColor.xyz))), _652);\n    highp vec4 _717 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1002 = length(varying_positionCamera_Fog);\n    highp float _1113 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1113 = (u_fogInfos.z - _1002) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1114 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1114 = 1.0 / pow(2.7182800769805908203125, _1002 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1115 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1115 = 1.0 / pow(2.7182800769805908203125, ((_1002 * _1002) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1115 = 1.0;\n            }\n            _1114 = _1115;\n        }\n        _1113 = _1114;\n    }\n    highp float _1048 = clamp(_1113, 0.0, 1.0);\n    highp vec3 _1057 = ((_711.xyz + (_EmissionColor.xyz * _717.x)).xyz * _1048) + (u_fogColor * (1.0 - _1048));\n    gl_FragData[0] = vec4(_1057.x, _1057.y, _1057.z, _711.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    float _913 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _919 = (3.0 * (_913 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _922 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _926 = floor(_919 * _922);\n    float _932 = _919 - (_926 * u_skinnedAnimationMapInfo.x);\n    float _937 = (_926 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _947 = texture2D(u_skinnedAnimationMap, vec2((_932 + 0.5) * _922, _937));\n    vec4 _957 = texture2D(u_skinnedAnimationMap, vec2((_932 + 1.5) * _922, _937));\n    vec4 _967 = texture2D(u_skinnedAnimationMap, vec2((_932 + 2.5) * _922, _937));\n    float _1018 = (3.0 * (_913 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _1025 = floor(_1018 * _922);\n    float _1031 = _1018 - (_1025 * u_skinnedAnimationMapInfo.x);\n    float _1036 = (_1025 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1046 = texture2D(u_skinnedAnimationMap, vec2((_1031 + 0.5) * _922, _1036));\n    vec4 _1056 = texture2D(u_skinnedAnimationMap, vec2((_1031 + 1.5) * _922, _1036));\n    vec4 _1066 = texture2D(u_skinnedAnimationMap, vec2((_1031 + 2.5) * _922, _1036));\n    float _1117 = (3.0 * (_913 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1124 = floor(_1117 * _922);\n    float _1130 = _1117 - (_1124 * u_skinnedAnimationMapInfo.x);\n    float _1135 = (_1124 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1145 = texture2D(u_skinnedAnimationMap, vec2((_1130 + 0.5) * _922, _1135));\n    vec4 _1155 = texture2D(u_skinnedAnimationMap, vec2((_1130 + 1.5) * _922, _1135));\n    vec4 _1165 = texture2D(u_skinnedAnimationMap, vec2((_1130 + 2.5) * _922, _1135));\n    float _1216 = (3.0 * (_913 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1223 = floor(_1216 * _922);\n    float _1229 = _1216 - (_1223 * u_skinnedAnimationMapInfo.x);\n    float _1234 = (_1223 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1244 = texture2D(u_skinnedAnimationMap, vec2((_1229 + 0.5) * _922, _1234));\n    vec4 _1254 = texture2D(u_skinnedAnimationMap, vec2((_1229 + 1.5) * _922, _1234));\n    vec4 _1264 = texture2D(u_skinnedAnimationMap, vec2((_1229 + 2.5) * _922, _1234));\n    mat4 _809 = mat4(vec4(_947.xyz, 0.0), vec4(_957.xyz, 0.0), vec4(_967.xyz, 0.0), vec4(_947.w, _957.w, _967.w, 1.0)) * a_boneWeight.x;\n    mat4 _813 = mat4(vec4(_1046.xyz, 0.0), vec4(_1056.xyz, 0.0), vec4(_1066.xyz, 0.0), vec4(_1046.w, _1056.w, _1066.w, 1.0)) * a_boneWeight.y;\n    mat4 _831 = mat4(vec4(_1145.xyz, 0.0), vec4(_1155.xyz, 0.0), vec4(_1165.xyz, 0.0), vec4(_1145.w, _1155.w, _1165.w, 1.0)) * a_boneWeight.z;\n    mat4 _849 = mat4(vec4(_1244.xyz, 0.0), vec4(_1254.xyz, 0.0), vec4(_1264.xyz, 0.0), vec4(_1244.w, _1254.w, _1264.w, 1.0)) * a_boneWeight.w;\n    vec4 _853 = ((_809[0] + _813[0]) + _831[0]) + _849[0];\n    vec4 _856 = ((_809[1] + _813[1]) + _831[1]) + _849[1];\n    vec4 _859 = ((_809[2] + _813[2]) + _831[2]) + _849[2];\n    mat3 _871 = mat3(_853.xyz, _856.xyz, _859.xyz);\n    vec4 _1300 = u_world * (mat4(_853, _856, _859, ((_809[3] + _813[3]) + _831[3]) + _849[3]) * a_position);\n    mat3 _1320 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1323 = normalize(_1320 * (_871 * a_normal));\n    vec3 _1337 = normalize(_1320 * (_871 * a_tangent.xyz).xyz);\n    mat3 _694 = mat3(_1337, cross(_1337, _1323) * a_tangent.w, _1323);\n    gl_Position = u_projection * (u_view * _1300);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _694 * u_lightDir;\n    varying_ViewDir = _694 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1300.xyz);\n    varying_WorldNormal = _1323;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_1300.xyz, 1.0)).xyz;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _459 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _467 = (_459 * _Color) * _AlbedoIntensity;\n    highp vec4 _482 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _547 = (_482.xy - vec2(0.5)) * 2.0;\n    highp vec4 _499 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _501 = _499.xyz * 2.0;\n    highp vec4 _511 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _530 = vec4(_467.xyz * (min(_501, mix(max(_501, u_shadowColor), _501, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_547, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_547, _547)))))), _Shininess * 128.0)) * (_511.xyz * _SpecColor.xyz))), _467.w);\n    highp float _631 = length(varying_positionCamera_Fog);\n    highp float _716 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _716 = (u_fogInfos.z - _631) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _717 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _717 = 1.0 / pow(2.7182800769805908203125, _631 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _718 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _718 = 1.0 / pow(2.7182800769805908203125, ((_631 * _631) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _718 = 1.0;\n            }\n            _717 = _718;\n        }\n        _716 = _717;\n    }\n    highp float _677 = clamp(_716, 0.0, 1.0);\n    highp vec3 _686 = (_530.xyz * _677) + (u_fogColor * (1.0 - _677));\n    gl_FragData[0] = vec4(_686.x, _686.y, _686.z, _530.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    vec4 _492 = u_world * a_position;\n    gl_Position = u_projection * (u_view * _492);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _492.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_492.xyz, 1.0)).xyz;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _415 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _423 = (_415 * _Color) * _AlbedoIntensity;\n    highp vec4 _448 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _450 = _448.xyz * 2.0;\n    highp vec4 _474 = vec4(_423.xyz * (min(_450, mix(max(_450, u_shadowColor), _450, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_SpecColor.xyz * _415.w))), _423.w);\n    highp float _555 = length(varying_positionCamera_Fog);\n    highp float _641 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _641 = (u_fogInfos.z - _555) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _642 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _642 = 1.0 / pow(2.7182800769805908203125, _555 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _643 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _643 = 1.0 / pow(2.7182800769805908203125, ((_555 * _555) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _643 = 1.0;\n            }\n            _642 = _643;\n        }\n        _641 = _642;\n    }\n    highp float _601 = clamp(_641, 0.0, 1.0);\n    highp vec3 _610 = (_474.xyz * _601) + (u_fogColor * (1.0 - _601));\n    gl_FragData[0] = vec4(_610.x, _610.y, _610.z, _474.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    float _883 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _889 = (3.0 * (_883 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _892 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _896 = floor(_889 * _892);\n    float _902 = _889 - (_896 * u_skinnedAnimationMapInfo.x);\n    float _907 = (_896 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _917 = texture2D(u_skinnedAnimationMap, vec2((_902 + 0.5) * _892, _907));\n    vec4 _927 = texture2D(u_skinnedAnimationMap, vec2((_902 + 1.5) * _892, _907));\n    vec4 _937 = texture2D(u_skinnedAnimationMap, vec2((_902 + 2.5) * _892, _907));\n    float _988 = (3.0 * (_883 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _995 = floor(_988 * _892);\n    float _1001 = _988 - (_995 * u_skinnedAnimationMapInfo.x);\n    float _1006 = (_995 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1016 = texture2D(u_skinnedAnimationMap, vec2((_1001 + 0.5) * _892, _1006));\n    vec4 _1026 = texture2D(u_skinnedAnimationMap, vec2((_1001 + 1.5) * _892, _1006));\n    vec4 _1036 = texture2D(u_skinnedAnimationMap, vec2((_1001 + 2.5) * _892, _1006));\n    float _1087 = (3.0 * (_883 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1094 = floor(_1087 * _892);\n    float _1100 = _1087 - (_1094 * u_skinnedAnimationMapInfo.x);\n    float _1105 = (_1094 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1115 = texture2D(u_skinnedAnimationMap, vec2((_1100 + 0.5) * _892, _1105));\n    vec4 _1125 = texture2D(u_skinnedAnimationMap, vec2((_1100 + 1.5) * _892, _1105));\n    vec4 _1135 = texture2D(u_skinnedAnimationMap, vec2((_1100 + 2.5) * _892, _1105));\n    float _1186 = (3.0 * (_883 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1193 = floor(_1186 * _892);\n    float _1199 = _1186 - (_1193 * u_skinnedAnimationMapInfo.x);\n    float _1204 = (_1193 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1214 = texture2D(u_skinnedAnimationMap, vec2((_1199 + 0.5) * _892, _1204));\n    vec4 _1224 = texture2D(u_skinnedAnimationMap, vec2((_1199 + 1.5) * _892, _1204));\n    vec4 _1234 = texture2D(u_skinnedAnimationMap, vec2((_1199 + 2.5) * _892, _1204));\n    mat4 _779 = mat4(vec4(_917.xyz, 0.0), vec4(_927.xyz, 0.0), vec4(_937.xyz, 0.0), vec4(_917.w, _927.w, _937.w, 1.0)) * a_boneWeight.x;\n    mat4 _783 = mat4(vec4(_1016.xyz, 0.0), vec4(_1026.xyz, 0.0), vec4(_1036.xyz, 0.0), vec4(_1016.w, _1026.w, _1036.w, 1.0)) * a_boneWeight.y;\n    mat4 _801 = mat4(vec4(_1115.xyz, 0.0), vec4(_1125.xyz, 0.0), vec4(_1135.xyz, 0.0), vec4(_1115.w, _1125.w, _1135.w, 1.0)) * a_boneWeight.z;\n    mat4 _819 = mat4(vec4(_1214.xyz, 0.0), vec4(_1224.xyz, 0.0), vec4(_1234.xyz, 0.0), vec4(_1214.w, _1224.w, _1234.w, 1.0)) * a_boneWeight.w;\n    vec4 _823 = ((_779[0] + _783[0]) + _801[0]) + _819[0];\n    vec4 _826 = ((_779[1] + _783[1]) + _801[1]) + _819[1];\n    vec4 _829 = ((_779[2] + _783[2]) + _801[2]) + _819[2];\n    mat3 _841 = mat3(_823.xyz, _826.xyz, _829.xyz);\n    vec4 _1270 = u_world * (mat4(_823, _826, _829, ((_779[3] + _783[3]) + _801[3]) + _819[3]) * a_position);\n    vec3 _644 = _1270.xyz;\n    mat3 _1290 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1293 = normalize(_1290 * (_841 * a_normal));\n    vec3 _1307 = normalize(_1290 * (_841 * a_tangent.xyz).xyz);\n    mat3 _679 = mat3(_1307, cross(_1307, _1293) * a_tangent.w, _1293);\n    gl_Position = u_projection * (u_view * _1270);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _679 * u_lightDir;\n    varying_ViewDir = _679 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _644);\n    varying_WorldNormal = _1293;\n    varying_positionCamera_Fog = (u_view * vec4(_1270.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _644;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _672 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _680 = (_672 * _Color) * _AlbedoIntensity;\n    highp float _682 = _680.w;\n    if ((_682 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _691 = normalize(varying_LightDir);\n    highp vec4 _703 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _779 = (_703.xy - vec2(0.5)) * 2.0;\n    highp vec3 _790 = vec3(_779, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_779, _779))));\n    highp vec4 _833 = vec4(varying_ShadowPosition, 1.0);\n    highp float _837 = -(u_view * _833).z;\n    bool _850 = true && (_837 < u_csmFarBounds.x);\n    highp float _1175 = 0.0;\n    if (_850)\n    {\n        highp vec3 _865 = ((u_csmLightSpaceMatrices[0] * _833).xyz * 0.5) + vec3(0.5);\n        highp float _869 = _865.x;\n        highp float _873 = _865.y;\n        highp float _883 = (((_865.z + step(_869, 0.001000000047497451305389404296875)) + step(_873, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _869)) + step(0.999000012874603271484375, _873);\n        highp float _1172 = 0.0;\n        for (int SPIRV_Cross_Dummy273 = 0; SPIRV_Cross_Dummy273 < 1; SPIRV_Cross_Dummy273++)\n        {\n            if (_883 > 1.0)\n            {\n                _1172 = 1.0;\n                break;\n            }\n            highp float _934 = _883 - 0.001000000047497451305389404296875;\n            highp vec2 _940 = ((_865.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _951 = fract(_940 * vec2(2048.0));\n            highp float _1006 = _951.y;\n            _1172 = mix(mix(float(_934 < dot(texture2D(u_shadowMapTex, _940), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_934 < dot(texture2D(u_shadowMapTex, _940 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1006), mix(float(_934 < dot(texture2D(u_shadowMapTex, _940 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_934 < dot(texture2D(u_shadowMapTex, _940 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1006), _951.x);\n            break;\n        }\n        _1175 = _1172;\n    }\n    else\n    {\n        _1175 = 1.0;\n    }\n    bool _1503 = _850 ? true : false;\n    bool _1194 = (!_1503) && (_837 < u_csmFarBounds.y);\n    highp float _1285 = 0.0;\n    if (_1194)\n    {\n        highp vec3 _1205 = ((u_csmLightSpaceMatrices[1] * _833).xyz * 0.5) + vec3(0.5);\n        highp float _1207 = _1205.x;\n        highp float _1210 = _1205.y;\n        highp float _1218 = (((_1205.z + step(_1207, 0.001000000047497451305389404296875)) + step(_1210, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1207)) + step(0.999000012874603271484375, _1210);\n        highp float _1282 = 0.0;\n        for (int SPIRV_Cross_Dummy349 = 0; SPIRV_Cross_Dummy349 < 1; SPIRV_Cross_Dummy349++)\n        {\n            if (_1218 > 1.0)\n            {\n                _1282 = 1.0;\n                break;\n            }\n            highp float _1236 = _1218 - 0.001000000047497451305389404296875;\n            highp vec2 _1240 = ((_1205.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1247 = fract(_1240 * vec2(2048.0));\n            highp float _1275 = _1247.y;\n            _1282 = mix(mix(float(_1236 < dot(texture2D(u_shadowMapTex, _1240), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1236 < dot(texture2D(u_shadowMapTex, _1240 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1275), mix(float(_1236 < dot(texture2D(u_shadowMapTex, _1240 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1236 < dot(texture2D(u_shadowMapTex, _1240 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1275), _1247.x);\n            break;\n        }\n        _1285 = _1282;\n    }\n    else\n    {\n        _1285 = _1175;\n    }\n    bool _1504 = _1194 ? true : _1503;\n    bool _1299 = (!_1504) && (_837 < u_csmFarBounds.z);\n    highp float _1390 = 0.0;\n    if (_1299)\n    {\n        highp vec3 _1310 = ((u_csmLightSpaceMatrices[2] * _833).xyz * 0.5) + vec3(0.5);\n        highp float _1312 = _1310.x;\n        highp float _1315 = _1310.y;\n        highp float _1323 = (((_1310.z + step(_1312, 0.001000000047497451305389404296875)) + step(_1315, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1312)) + step(0.999000012874603271484375, _1315);\n        highp float _1387 = 0.0;\n        for (int SPIRV_Cross_Dummy425 = 0; SPIRV_Cross_Dummy425 < 1; SPIRV_Cross_Dummy425++)\n        {\n            if (_1323 > 1.0)\n            {\n                _1387 = 1.0;\n                break;\n            }\n            highp float _1341 = _1323 - 0.001000000047497451305389404296875;\n            highp vec2 _1345 = ((_1310.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1352 = fract(_1345 * vec2(2048.0));\n            highp float _1380 = _1352.y;\n            _1387 = mix(mix(float(_1341 < dot(texture2D(u_shadowMapTex, _1345), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1341 < dot(texture2D(u_shadowMapTex, _1345 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1380), mix(float(_1341 < dot(texture2D(u_shadowMapTex, _1345 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1341 < dot(texture2D(u_shadowMapTex, _1345 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1380), _1352.x);\n            break;\n        }\n        _1390 = _1387;\n    }\n    else\n    {\n        _1390 = _1285;\n    }\n    highp float _1495 = 0.0;\n    if ((!(_1299 ? true : _1504)) && (_837 < u_csmFarBounds.w))\n    {\n        highp vec3 _1415 = ((u_csmLightSpaceMatrices[3] * _833).xyz * 0.5) + vec3(0.5);\n        highp float _1417 = _1415.x;\n        highp float _1420 = _1415.y;\n        highp float _1428 = (((_1415.z + step(_1417, 0.001000000047497451305389404296875)) + step(_1420, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1417)) + step(0.999000012874603271484375, _1420);\n        highp float _1492 = 0.0;\n        for (int SPIRV_Cross_Dummy495 = 0; SPIRV_Cross_Dummy495 < 1; SPIRV_Cross_Dummy495++)\n        {\n            if (_1428 > 1.0)\n            {\n                _1492 = 1.0;\n                break;\n            }\n            highp float _1446 = _1428 - 0.001000000047497451305389404296875;\n            highp vec2 _1450 = ((_1415.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1457 = fract(_1450 * vec2(2048.0));\n            highp float _1485 = _1457.y;\n            _1492 = mix(mix(float(_1446 < dot(texture2D(u_shadowMapTex, _1450), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1446 < dot(texture2D(u_shadowMapTex, _1450 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1485), mix(float(_1446 < dot(texture2D(u_shadowMapTex, _1450 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1446 < dot(texture2D(u_shadowMapTex, _1450 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1485), _1457.x);\n            break;\n        }\n        _1495 = _1492;\n    }\n    else\n    {\n        _1495 = _1390;\n    }\n    highp vec4 _743 = vec4(_680.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_691, _790))) * _1495)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _691), _790)), _Shininess * 128.0)) * (_SpecColor.xyz * _672.w))), _682);\n    highp vec4 _749 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1054 = length(varying_positionCamera_Fog);\n    highp float _1165 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1165 = (u_fogInfos.z - _1054) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1166 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1166 = 1.0 / pow(2.7182800769805908203125, _1054 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1167 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1167 = 1.0 / pow(2.7182800769805908203125, ((_1054 * _1054) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1167 = 1.0;\n            }\n            _1166 = _1167;\n        }\n        _1165 = _1166;\n    }\n    highp float _1100 = clamp(_1165, 0.0, 1.0);\n    highp vec3 _1109 = ((_743.xyz + (_EmissionColor.xyz * _749.x)).xyz * _1100) + (u_fogColor * (1.0 - _1100));\n    gl_FragData[0] = vec4(_1109.x, _1109.y, _1109.z, _743.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _783 = int(a_boneIndex.x) * 3;\n    int _788 = _783 + 1;\n    int _792 = _783 + 2;\n    int _834 = int(a_boneIndex.y) * 3;\n    int _839 = _834 + 1;\n    int _843 = _834 + 2;\n    int _885 = int(a_boneIndex.z) * 3;\n    int _890 = _885 + 1;\n    int _894 = _885 + 2;\n    int _936 = int(a_boneIndex.w) * 3;\n    int _941 = _936 + 1;\n    int _945 = _936 + 2;\n    mat4 _684 = mat4(vec4(u_boneOffsetMatrix[_783].xyz, 0.0), vec4(u_boneOffsetMatrix[_788].xyz, 0.0), vec4(u_boneOffsetMatrix[_792].xyz, 0.0), vec4(u_boneOffsetMatrix[_783].w, u_boneOffsetMatrix[_788].w, u_boneOffsetMatrix[_792].w, 1.0)) * a_boneWeight.x;\n    mat4 _688 = mat4(vec4(u_boneOffsetMatrix[_834].xyz, 0.0), vec4(u_boneOffsetMatrix[_839].xyz, 0.0), vec4(u_boneOffsetMatrix[_843].xyz, 0.0), vec4(u_boneOffsetMatrix[_834].w, u_boneOffsetMatrix[_839].w, u_boneOffsetMatrix[_843].w, 1.0)) * a_boneWeight.y;\n    mat4 _706 = mat4(vec4(u_boneOffsetMatrix[_885].xyz, 0.0), vec4(u_boneOffsetMatrix[_890].xyz, 0.0), vec4(u_boneOffsetMatrix[_894].xyz, 0.0), vec4(u_boneOffsetMatrix[_885].w, u_boneOffsetMatrix[_890].w, u_boneOffsetMatrix[_894].w, 1.0)) * a_boneWeight.z;\n    mat4 _724 = mat4(vec4(u_boneOffsetMatrix[_936].xyz, 0.0), vec4(u_boneOffsetMatrix[_941].xyz, 0.0), vec4(u_boneOffsetMatrix[_945].xyz, 0.0), vec4(u_boneOffsetMatrix[_936].w, u_boneOffsetMatrix[_941].w, u_boneOffsetMatrix[_945].w, 1.0)) * a_boneWeight.w;\n    vec4 _728 = ((_684[0] + _688[0]) + _706[0]) + _724[0];\n    vec4 _731 = ((_684[1] + _688[1]) + _706[1]) + _724[1];\n    vec4 _734 = ((_684[2] + _688[2]) + _706[2]) + _724[2];\n    vec4 _983 = u_world * (mat4(_728, _731, _734, ((_684[3] + _688[3]) + _706[3]) + _724[3]) * a_position);\n    gl_Position = u_projection * (u_view * _983);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _983.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_728.xyz, _731.xyz, _734.xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_983.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    vec4 _501 = u_world * a_position;\n    vec3 _399 = _501.xyz;\n    gl_Position = u_projection * (u_view * _501);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _399);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_501.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _399;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _668 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _676 = (_668 * _Color) * _AlbedoIntensity;\n    highp vec3 _685 = normalize(varying_WorldNormal);\n    highp vec4 _781 = vec4(varying_ShadowPosition, 1.0);\n    highp float _785 = -(u_view * _781).z;\n    bool _798 = true && (_785 < u_csmFarBounds.x);\n    highp float _1164 = 0.0;\n    if (_798)\n    {\n        highp vec3 _813 = ((u_csmLightSpaceMatrices[0] * _781).xyz * 0.5) + vec3(0.5);\n        highp float _817 = _813.x;\n        highp float _821 = _813.y;\n        highp float _831 = (((_813.z + step(_817, 0.001000000047497451305389404296875)) + step(_821, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _817)) + step(0.999000012874603271484375, _821);\n        highp float _1161 = 0.0;\n        for (int SPIRV_Cross_Dummy259 = 0; SPIRV_Cross_Dummy259 < 1; SPIRV_Cross_Dummy259++)\n        {\n            if (_831 > 1.0)\n            {\n                _1161 = 1.0;\n                break;\n            }\n            highp float _882 = _831 - 0.001000000047497451305389404296875;\n            highp vec2 _888 = ((_813.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _899 = fract(_888 * vec2(2048.0));\n            highp float _954 = _899.y;\n            _1161 = mix(mix(float(_882 < dot(texture2D(u_shadowMapTex, _888), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_882 < dot(texture2D(u_shadowMapTex, _888 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _954), mix(float(_882 < dot(texture2D(u_shadowMapTex, _888 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_882 < dot(texture2D(u_shadowMapTex, _888 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _954), _899.x);\n            break;\n        }\n        _1164 = _1161;\n    }\n    else\n    {\n        _1164 = 1.0;\n    }\n    bool _1491 = _798 ? true : false;\n    bool _1182 = (!_1491) && (_785 < u_csmFarBounds.y);\n    highp float _1273 = 0.0;\n    if (_1182)\n    {\n        highp vec3 _1193 = ((u_csmLightSpaceMatrices[1] * _781).xyz * 0.5) + vec3(0.5);\n        highp float _1195 = _1193.x;\n        highp float _1198 = _1193.y;\n        highp float _1206 = (((_1193.z + step(_1195, 0.001000000047497451305389404296875)) + step(_1198, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1195)) + step(0.999000012874603271484375, _1198);\n        highp float _1270 = 0.0;\n        for (int SPIRV_Cross_Dummy335 = 0; SPIRV_Cross_Dummy335 < 1; SPIRV_Cross_Dummy335++)\n        {\n            if (_1206 > 1.0)\n            {\n                _1270 = 1.0;\n                break;\n            }\n            highp float _1224 = _1206 - 0.001000000047497451305389404296875;\n            highp vec2 _1228 = ((_1193.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1235 = fract(_1228 * vec2(2048.0));\n            highp float _1263 = _1235.y;\n            _1270 = mix(mix(float(_1224 < dot(texture2D(u_shadowMapTex, _1228), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1224 < dot(texture2D(u_shadowMapTex, _1228 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1263), mix(float(_1224 < dot(texture2D(u_shadowMapTex, _1228 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1224 < dot(texture2D(u_shadowMapTex, _1228 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1263), _1235.x);\n            break;\n        }\n        _1273 = _1270;\n    }\n    else\n    {\n        _1273 = _1164;\n    }\n    bool _1492 = _1182 ? true : _1491;\n    bool _1287 = (!_1492) && (_785 < u_csmFarBounds.z);\n    highp float _1378 = 0.0;\n    if (_1287)\n    {\n        highp vec3 _1298 = ((u_csmLightSpaceMatrices[2] * _781).xyz * 0.5) + vec3(0.5);\n        highp float _1300 = _1298.x;\n        highp float _1303 = _1298.y;\n        highp float _1311 = (((_1298.z + step(_1300, 0.001000000047497451305389404296875)) + step(_1303, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1300)) + step(0.999000012874603271484375, _1303);\n        highp float _1375 = 0.0;\n        for (int SPIRV_Cross_Dummy411 = 0; SPIRV_Cross_Dummy411 < 1; SPIRV_Cross_Dummy411++)\n        {\n            if (_1311 > 1.0)\n            {\n                _1375 = 1.0;\n                break;\n            }\n            highp float _1329 = _1311 - 0.001000000047497451305389404296875;\n            highp vec2 _1333 = ((_1298.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1340 = fract(_1333 * vec2(2048.0));\n            highp float _1368 = _1340.y;\n            _1375 = mix(mix(float(_1329 < dot(texture2D(u_shadowMapTex, _1333), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1329 < dot(texture2D(u_shadowMapTex, _1333 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1368), mix(float(_1329 < dot(texture2D(u_shadowMapTex, _1333 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1329 < dot(texture2D(u_shadowMapTex, _1333 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1368), _1340.x);\n            break;\n        }\n        _1378 = _1375;\n    }\n    else\n    {\n        _1378 = _1273;\n    }\n    highp float _1483 = 0.0;\n    if ((!(_1287 ? true : _1492)) && (_785 < u_csmFarBounds.w))\n    {\n        highp vec3 _1403 = ((u_csmLightSpaceMatrices[3] * _781).xyz * 0.5) + vec3(0.5);\n        highp float _1405 = _1403.x;\n        highp float _1408 = _1403.y;\n        highp float _1416 = (((_1403.z + step(_1405, 0.001000000047497451305389404296875)) + step(_1408, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1405)) + step(0.999000012874603271484375, _1408);\n        highp float _1480 = 0.0;\n        for (int SPIRV_Cross_Dummy481 = 0; SPIRV_Cross_Dummy481 < 1; SPIRV_Cross_Dummy481++)\n        {\n            if (_1416 > 1.0)\n            {\n                _1480 = 1.0;\n                break;\n            }\n            highp float _1434 = _1416 - 0.001000000047497451305389404296875;\n            highp vec2 _1438 = ((_1403.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1445 = fract(_1438 * vec2(2048.0));\n            highp float _1473 = _1445.y;\n            _1480 = mix(mix(float(_1434 < dot(texture2D(u_shadowMapTex, _1438), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1434 < dot(texture2D(u_shadowMapTex, _1438 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1473), mix(float(_1434 < dot(texture2D(u_shadowMapTex, _1438 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1434 < dot(texture2D(u_shadowMapTex, _1438 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1473), _1445.x);\n            break;\n        }\n        _1483 = _1480;\n    }\n    else\n    {\n        _1483 = _1378;\n    }\n    highp vec4 _704 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _706 = _704.xyz * 2.0;\n    highp vec4 _730 = vec4(_676.xyz * (min(_706, mix(max(_706 - (u_lightColor * (clamp(dot(_685, u_lightDir), 0.0, 1.0) * (1.0 - _1483))), u_shadowColor), _706, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _685)), _Shininess * 128.0)) * (_SpecColor.xyz * _668.w))), _676.w);\n    highp float _1040 = length(varying_positionCamera_Fog);\n    highp float _1154 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1154 = (u_fogInfos.z - _1040) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1155 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1155 = 1.0 / pow(2.7182800769805908203125, _1040 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1156 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1156 = 1.0 / pow(2.7182800769805908203125, ((_1040 * _1040) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1156 = 1.0;\n            }\n            _1155 = _1156;\n        }\n        _1154 = _1155;\n    }\n    highp float _1086 = clamp(_1154, 0.0, 1.0);\n    highp vec3 _1095 = (_730.xyz * _1086) + (u_fogColor * (1.0 - _1086));\n    gl_FragData[0] = vec4(_1095.x, _1095.y, _1095.z, _730.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\n\nvoid main()\n{\n    vec4 _497 = u_world * a_position;\n    mat3 _517 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _520 = normalize(_517 * a_normal);\n    vec3 _534 = normalize(_517 * a_tangent.xyz);\n    mat3 _432 = mat3(_534, cross(_534, _520) * a_tangent.w, _520);\n    gl_Position = u_projection * (u_view * _497);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _432 * u_lightDir;\n    varying_ViewDir = _432 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _497.xyz);\n    varying_WorldNormal = _520;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\n\nvoid main()\n{\n    highp vec4 _309 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _317 = (_309 * _Color) * _AlbedoIntensity;\n    highp float _319 = _317.w;\n    if ((_319 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _328 = normalize(varying_LightDir);\n    highp vec2 _388 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _399 = vec3(_388, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_388, _388))));\n    gl_FragData[0] = vec4(_317.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_328, _399))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _328), _399)), _Shininess * 128.0)) * (_SpecColor.xyz * _309.w))), _319);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    int _770 = int(a_boneIndex.x) * 3;\n    int _775 = _770 + 1;\n    int _779 = _770 + 2;\n    int _821 = int(a_boneIndex.y) * 3;\n    int _826 = _821 + 1;\n    int _830 = _821 + 2;\n    int _872 = int(a_boneIndex.z) * 3;\n    int _877 = _872 + 1;\n    int _881 = _872 + 2;\n    int _923 = int(a_boneIndex.w) * 3;\n    int _928 = _923 + 1;\n    int _932 = _923 + 2;\n    mat4 _667 = mat4(vec4(u_boneOffsetMatrix[_770].xyz, 0.0), vec4(u_boneOffsetMatrix[_775].xyz, 0.0), vec4(u_boneOffsetMatrix[_779].xyz, 0.0), vec4(u_boneOffsetMatrix[_770].w, u_boneOffsetMatrix[_775].w, u_boneOffsetMatrix[_779].w, 1.0)) * a_boneWeight.x;\n    mat4 _671 = mat4(vec4(u_boneOffsetMatrix[_821].xyz, 0.0), vec4(u_boneOffsetMatrix[_826].xyz, 0.0), vec4(u_boneOffsetMatrix[_830].xyz, 0.0), vec4(u_boneOffsetMatrix[_821].w, u_boneOffsetMatrix[_826].w, u_boneOffsetMatrix[_830].w, 1.0)) * a_boneWeight.y;\n    mat4 _689 = mat4(vec4(u_boneOffsetMatrix[_872].xyz, 0.0), vec4(u_boneOffsetMatrix[_877].xyz, 0.0), vec4(u_boneOffsetMatrix[_881].xyz, 0.0), vec4(u_boneOffsetMatrix[_872].w, u_boneOffsetMatrix[_877].w, u_boneOffsetMatrix[_881].w, 1.0)) * a_boneWeight.z;\n    mat4 _707 = mat4(vec4(u_boneOffsetMatrix[_923].xyz, 0.0), vec4(u_boneOffsetMatrix[_928].xyz, 0.0), vec4(u_boneOffsetMatrix[_932].xyz, 0.0), vec4(u_boneOffsetMatrix[_923].w, u_boneOffsetMatrix[_928].w, u_boneOffsetMatrix[_932].w, 1.0)) * a_boneWeight.w;\n    mat4 _725 = u_bindTargetWorldInverse * mat4(((_667[0] + _671[0]) + _689[0]) + _707[0], ((_667[1] + _671[1]) + _689[1]) + _707[1], ((_667[2] + _671[2]) + _689[2]) + _707[2], ((_667[3] + _671[3]) + _689[3]) + _707[3]);\n    vec4 _970 = u_world * (_725 * a_position);\n    gl_Position = u_projection * (u_view * _970);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _970.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_725[0].xyz, _725[1].xyz, _725[2].xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _362 = (texture2D(_MainTex, varying_TexCoord) * _Color) * _AlbedoIntensity;\n    highp vec3 _389 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _418 = vec4(_362.xyz * (min(_389, mix(max(_389, u_shadowColor), _389, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _362.w);\n    highp vec3 _434 = _418.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_434.x, _434.y, _434.z, _418.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _792 = int(a_boneIndex.x) * 3;\n    int _797 = _792 + 1;\n    int _801 = _792 + 2;\n    int _843 = int(a_boneIndex.y) * 3;\n    int _848 = _843 + 1;\n    int _852 = _843 + 2;\n    int _894 = int(a_boneIndex.z) * 3;\n    int _899 = _894 + 1;\n    int _903 = _894 + 2;\n    int _945 = int(a_boneIndex.w) * 3;\n    int _950 = _945 + 1;\n    int _954 = _945 + 2;\n    mat4 _693 = mat4(vec4(u_boneOffsetMatrix[_792].xyz, 0.0), vec4(u_boneOffsetMatrix[_797].xyz, 0.0), vec4(u_boneOffsetMatrix[_801].xyz, 0.0), vec4(u_boneOffsetMatrix[_792].w, u_boneOffsetMatrix[_797].w, u_boneOffsetMatrix[_801].w, 1.0)) * a_boneWeight.x;\n    mat4 _697 = mat4(vec4(u_boneOffsetMatrix[_843].xyz, 0.0), vec4(u_boneOffsetMatrix[_848].xyz, 0.0), vec4(u_boneOffsetMatrix[_852].xyz, 0.0), vec4(u_boneOffsetMatrix[_843].w, u_boneOffsetMatrix[_848].w, u_boneOffsetMatrix[_852].w, 1.0)) * a_boneWeight.y;\n    mat4 _715 = mat4(vec4(u_boneOffsetMatrix[_894].xyz, 0.0), vec4(u_boneOffsetMatrix[_899].xyz, 0.0), vec4(u_boneOffsetMatrix[_903].xyz, 0.0), vec4(u_boneOffsetMatrix[_894].w, u_boneOffsetMatrix[_899].w, u_boneOffsetMatrix[_903].w, 1.0)) * a_boneWeight.z;\n    mat4 _733 = mat4(vec4(u_boneOffsetMatrix[_945].xyz, 0.0), vec4(u_boneOffsetMatrix[_950].xyz, 0.0), vec4(u_boneOffsetMatrix[_954].xyz, 0.0), vec4(u_boneOffsetMatrix[_945].w, u_boneOffsetMatrix[_950].w, u_boneOffsetMatrix[_954].w, 1.0)) * a_boneWeight.w;\n    vec4 _737 = ((_693[0] + _697[0]) + _715[0]) + _733[0];\n    vec4 _740 = ((_693[1] + _697[1]) + _715[1]) + _733[1];\n    vec4 _743 = ((_693[2] + _697[2]) + _715[2]) + _733[2];\n    vec4 _992 = u_world * (mat4(_737, _740, _743, ((_693[3] + _697[3]) + _715[3]) + _733[3]) * a_position);\n    vec3 _572 = _992.xyz;\n    gl_Position = u_projection * (u_view * _992);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _572);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_737.xyz, _740.xyz, _743.xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_992.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _572;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\n\nvoid main()\n{\n    int _788 = int(a_boneIndex.x) * 3;\n    int _793 = _788 + 1;\n    int _797 = _788 + 2;\n    int _839 = int(a_boneIndex.y) * 3;\n    int _844 = _839 + 1;\n    int _848 = _839 + 2;\n    int _890 = int(a_boneIndex.z) * 3;\n    int _895 = _890 + 1;\n    int _899 = _890 + 2;\n    int _941 = int(a_boneIndex.w) * 3;\n    int _946 = _941 + 1;\n    int _950 = _941 + 2;\n    mat4 _689 = mat4(vec4(u_boneOffsetMatrix[_788].xyz, 0.0), vec4(u_boneOffsetMatrix[_793].xyz, 0.0), vec4(u_boneOffsetMatrix[_797].xyz, 0.0), vec4(u_boneOffsetMatrix[_788].w, u_boneOffsetMatrix[_793].w, u_boneOffsetMatrix[_797].w, 1.0)) * a_boneWeight.x;\n    mat4 _693 = mat4(vec4(u_boneOffsetMatrix[_839].xyz, 0.0), vec4(u_boneOffsetMatrix[_844].xyz, 0.0), vec4(u_boneOffsetMatrix[_848].xyz, 0.0), vec4(u_boneOffsetMatrix[_839].w, u_boneOffsetMatrix[_844].w, u_boneOffsetMatrix[_848].w, 1.0)) * a_boneWeight.y;\n    mat4 _711 = mat4(vec4(u_boneOffsetMatrix[_890].xyz, 0.0), vec4(u_boneOffsetMatrix[_895].xyz, 0.0), vec4(u_boneOffsetMatrix[_899].xyz, 0.0), vec4(u_boneOffsetMatrix[_890].w, u_boneOffsetMatrix[_895].w, u_boneOffsetMatrix[_899].w, 1.0)) * a_boneWeight.z;\n    mat4 _729 = mat4(vec4(u_boneOffsetMatrix[_941].xyz, 0.0), vec4(u_boneOffsetMatrix[_946].xyz, 0.0), vec4(u_boneOffsetMatrix[_950].xyz, 0.0), vec4(u_boneOffsetMatrix[_941].w, u_boneOffsetMatrix[_946].w, u_boneOffsetMatrix[_950].w, 1.0)) * a_boneWeight.w;\n    vec4 _733 = ((_689[0] + _693[0]) + _711[0]) + _729[0];\n    vec4 _736 = ((_689[1] + _693[1]) + _711[1]) + _729[1];\n    vec4 _739 = ((_689[2] + _693[2]) + _711[2]) + _729[2];\n    mat3 _751 = mat3(_733.xyz, _736.xyz, _739.xyz);\n    vec4 _988 = u_world * (mat4(_733, _736, _739, ((_689[3] + _693[3]) + _711[3]) + _729[3]) * a_position);\n    mat3 _1008 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1011 = normalize(_1008 * (_751 * a_normal));\n    vec3 _1025 = normalize(_1008 * (_751 * a_tangent.xyz).xyz);\n    mat3 _605 = mat3(_1025, cross(_1025, _1011) * a_tangent.w, _1011);\n    gl_Position = u_projection * (u_view * _988);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _605 * u_lightDir;\n    varying_ViewDir = _605 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _988.xyz);\n    varying_WorldNormal = _1011;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\n\nvoid main()\n{\n    int _796 = int(a_boneIndex.x) * 3;\n    int _801 = _796 + 1;\n    int _805 = _796 + 2;\n    int _847 = int(a_boneIndex.y) * 3;\n    int _852 = _847 + 1;\n    int _856 = _847 + 2;\n    int _898 = int(a_boneIndex.z) * 3;\n    int _903 = _898 + 1;\n    int _907 = _898 + 2;\n    int _949 = int(a_boneIndex.w) * 3;\n    int _954 = _949 + 1;\n    int _958 = _949 + 2;\n    mat4 _693 = mat4(vec4(u_boneOffsetMatrix[_796].xyz, 0.0), vec4(u_boneOffsetMatrix[_801].xyz, 0.0), vec4(u_boneOffsetMatrix[_805].xyz, 0.0), vec4(u_boneOffsetMatrix[_796].w, u_boneOffsetMatrix[_801].w, u_boneOffsetMatrix[_805].w, 1.0)) * a_boneWeight.x;\n    mat4 _697 = mat4(vec4(u_boneOffsetMatrix[_847].xyz, 0.0), vec4(u_boneOffsetMatrix[_852].xyz, 0.0), vec4(u_boneOffsetMatrix[_856].xyz, 0.0), vec4(u_boneOffsetMatrix[_847].w, u_boneOffsetMatrix[_852].w, u_boneOffsetMatrix[_856].w, 1.0)) * a_boneWeight.y;\n    mat4 _715 = mat4(vec4(u_boneOffsetMatrix[_898].xyz, 0.0), vec4(u_boneOffsetMatrix[_903].xyz, 0.0), vec4(u_boneOffsetMatrix[_907].xyz, 0.0), vec4(u_boneOffsetMatrix[_898].w, u_boneOffsetMatrix[_903].w, u_boneOffsetMatrix[_907].w, 1.0)) * a_boneWeight.z;\n    mat4 _733 = mat4(vec4(u_boneOffsetMatrix[_949].xyz, 0.0), vec4(u_boneOffsetMatrix[_954].xyz, 0.0), vec4(u_boneOffsetMatrix[_958].xyz, 0.0), vec4(u_boneOffsetMatrix[_949].w, u_boneOffsetMatrix[_954].w, u_boneOffsetMatrix[_958].w, 1.0)) * a_boneWeight.w;\n    mat4 _751 = u_bindTargetWorldInverse * mat4(((_693[0] + _697[0]) + _715[0]) + _733[0], ((_693[1] + _697[1]) + _715[1]) + _733[1], ((_693[2] + _697[2]) + _715[2]) + _733[2], ((_693[3] + _697[3]) + _715[3]) + _733[3]);\n    mat3 _759 = mat3(_751[0].xyz, _751[1].xyz, _751[2].xyz);\n    vec4 _996 = u_world * (_751 * a_position);\n    mat3 _1016 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1019 = normalize(_1016 * (_759 * a_normal));\n    vec3 _1033 = normalize(_1016 * (_759 * a_tangent.xyz).xyz);\n    mat3 _609 = mat3(_1033, cross(_1033, _1019) * a_tangent.w, _1019);\n    gl_Position = u_projection * (u_view * _996);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _609 * u_lightDir;\n    varying_ViewDir = _609 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _996.xyz);\n    varying_WorldNormal = _1019;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _800 = int(a_boneIndex.x) * 3;\n    int _805 = _800 + 1;\n    int _809 = _800 + 2;\n    int _851 = int(a_boneIndex.y) * 3;\n    int _856 = _851 + 1;\n    int _860 = _851 + 2;\n    int _902 = int(a_boneIndex.z) * 3;\n    int _907 = _902 + 1;\n    int _911 = _902 + 2;\n    int _953 = int(a_boneIndex.w) * 3;\n    int _958 = _953 + 1;\n    int _962 = _953 + 2;\n    mat4 _697 = mat4(vec4(u_boneOffsetMatrix[_800].xyz, 0.0), vec4(u_boneOffsetMatrix[_805].xyz, 0.0), vec4(u_boneOffsetMatrix[_809].xyz, 0.0), vec4(u_boneOffsetMatrix[_800].w, u_boneOffsetMatrix[_805].w, u_boneOffsetMatrix[_809].w, 1.0)) * a_boneWeight.x;\n    mat4 _701 = mat4(vec4(u_boneOffsetMatrix[_851].xyz, 0.0), vec4(u_boneOffsetMatrix[_856].xyz, 0.0), vec4(u_boneOffsetMatrix[_860].xyz, 0.0), vec4(u_boneOffsetMatrix[_851].w, u_boneOffsetMatrix[_856].w, u_boneOffsetMatrix[_860].w, 1.0)) * a_boneWeight.y;\n    mat4 _719 = mat4(vec4(u_boneOffsetMatrix[_902].xyz, 0.0), vec4(u_boneOffsetMatrix[_907].xyz, 0.0), vec4(u_boneOffsetMatrix[_911].xyz, 0.0), vec4(u_boneOffsetMatrix[_902].w, u_boneOffsetMatrix[_907].w, u_boneOffsetMatrix[_911].w, 1.0)) * a_boneWeight.z;\n    mat4 _737 = mat4(vec4(u_boneOffsetMatrix[_953].xyz, 0.0), vec4(u_boneOffsetMatrix[_958].xyz, 0.0), vec4(u_boneOffsetMatrix[_962].xyz, 0.0), vec4(u_boneOffsetMatrix[_953].w, u_boneOffsetMatrix[_958].w, u_boneOffsetMatrix[_962].w, 1.0)) * a_boneWeight.w;\n    mat4 _755 = u_bindTargetWorldInverse * mat4(((_697[0] + _701[0]) + _719[0]) + _737[0], ((_697[1] + _701[1]) + _719[1]) + _737[1], ((_697[2] + _701[2]) + _719[2]) + _737[2], ((_697[3] + _701[3]) + _719[3]) + _737[3]);\n    vec4 _1000 = u_world * (_755 * a_position);\n    vec3 _576 = _1000.xyz;\n    gl_Position = u_projection * (u_view * _1000);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _576);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_755[0].xyz, _755[1].xyz, _755[2].xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_1000.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _576;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\n\nvoid main()\n{\n    float _780 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _786 = (3.0 * (_780 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _789 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _793 = floor(_786 * _789);\n    float _799 = _786 - (_793 * u_skinnedAnimationMapInfo.x);\n    float _804 = (_793 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _814 = texture2D(u_skinnedAnimationMap, vec2((_799 + 0.5) * _789, _804));\n    vec4 _824 = texture2D(u_skinnedAnimationMap, vec2((_799 + 1.5) * _789, _804));\n    vec4 _834 = texture2D(u_skinnedAnimationMap, vec2((_799 + 2.5) * _789, _804));\n    float _885 = (3.0 * (_780 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _892 = floor(_885 * _789);\n    float _898 = _885 - (_892 * u_skinnedAnimationMapInfo.x);\n    float _903 = (_892 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _913 = texture2D(u_skinnedAnimationMap, vec2((_898 + 0.5) * _789, _903));\n    vec4 _923 = texture2D(u_skinnedAnimationMap, vec2((_898 + 1.5) * _789, _903));\n    vec4 _933 = texture2D(u_skinnedAnimationMap, vec2((_898 + 2.5) * _789, _903));\n    float _984 = (3.0 * (_780 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _991 = floor(_984 * _789);\n    float _997 = _984 - (_991 * u_skinnedAnimationMapInfo.x);\n    float _1002 = (_991 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1012 = texture2D(u_skinnedAnimationMap, vec2((_997 + 0.5) * _789, _1002));\n    vec4 _1022 = texture2D(u_skinnedAnimationMap, vec2((_997 + 1.5) * _789, _1002));\n    vec4 _1032 = texture2D(u_skinnedAnimationMap, vec2((_997 + 2.5) * _789, _1002));\n    float _1083 = (3.0 * (_780 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1090 = floor(_1083 * _789);\n    float _1096 = _1083 - (_1090 * u_skinnedAnimationMapInfo.x);\n    float _1101 = (_1090 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1111 = texture2D(u_skinnedAnimationMap, vec2((_1096 + 0.5) * _789, _1101));\n    vec4 _1121 = texture2D(u_skinnedAnimationMap, vec2((_1096 + 1.5) * _789, _1101));\n    vec4 _1131 = texture2D(u_skinnedAnimationMap, vec2((_1096 + 2.5) * _789, _1101));\n    mat4 _676 = mat4(vec4(_814.xyz, 0.0), vec4(_824.xyz, 0.0), vec4(_834.xyz, 0.0), vec4(_814.w, _824.w, _834.w, 1.0)) * a_boneWeight.x;\n    mat4 _680 = mat4(vec4(_913.xyz, 0.0), vec4(_923.xyz, 0.0), vec4(_933.xyz, 0.0), vec4(_913.w, _923.w, _933.w, 1.0)) * a_boneWeight.y;\n    mat4 _698 = mat4(vec4(_1012.xyz, 0.0), vec4(_1022.xyz, 0.0), vec4(_1032.xyz, 0.0), vec4(_1012.w, _1022.w, _1032.w, 1.0)) * a_boneWeight.z;\n    mat4 _716 = mat4(vec4(_1111.xyz, 0.0), vec4(_1121.xyz, 0.0), vec4(_1131.xyz, 0.0), vec4(_1111.w, _1121.w, _1131.w, 1.0)) * a_boneWeight.w;\n    vec4 _720 = ((_676[0] + _680[0]) + _698[0]) + _716[0];\n    vec4 _723 = ((_676[1] + _680[1]) + _698[1]) + _716[1];\n    vec4 _726 = ((_676[2] + _680[2]) + _698[2]) + _716[2];\n    vec4 _1167 = u_world * (mat4(_720, _723, _726, ((_676[3] + _680[3]) + _698[3]) + _716[3]) * a_position);\n    gl_Position = u_projection * (u_view * _1167);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1167.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_720.xyz, _723.xyz, _726.xyz) * a_normal));\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\n\nvoid main()\n{\n    highp vec4 _278 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _286 = (_278 * _Color) * _AlbedoIntensity;\n    highp float _288 = _286.w;\n    if ((_288 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _297 = normalize(varying_LightDir);\n    highp vec3 _303 = normalize(varying_WorldNormal);\n    gl_FragData[0] = vec4(_286.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_297, _303))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _297), _303)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _288);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _791 = int(a_boneIndex.x) * 3;\n    int _796 = _791 + 1;\n    int _800 = _791 + 2;\n    int _842 = int(a_boneIndex.y) * 3;\n    int _847 = _842 + 1;\n    int _851 = _842 + 2;\n    int _893 = int(a_boneIndex.z) * 3;\n    int _898 = _893 + 1;\n    int _902 = _893 + 2;\n    int _944 = int(a_boneIndex.w) * 3;\n    int _949 = _944 + 1;\n    int _953 = _944 + 2;\n    mat4 _688 = mat4(vec4(u_boneOffsetMatrix[_791].xyz, 0.0), vec4(u_boneOffsetMatrix[_796].xyz, 0.0), vec4(u_boneOffsetMatrix[_800].xyz, 0.0), vec4(u_boneOffsetMatrix[_791].w, u_boneOffsetMatrix[_796].w, u_boneOffsetMatrix[_800].w, 1.0)) * a_boneWeight.x;\n    mat4 _692 = mat4(vec4(u_boneOffsetMatrix[_842].xyz, 0.0), vec4(u_boneOffsetMatrix[_847].xyz, 0.0), vec4(u_boneOffsetMatrix[_851].xyz, 0.0), vec4(u_boneOffsetMatrix[_842].w, u_boneOffsetMatrix[_847].w, u_boneOffsetMatrix[_851].w, 1.0)) * a_boneWeight.y;\n    mat4 _710 = mat4(vec4(u_boneOffsetMatrix[_893].xyz, 0.0), vec4(u_boneOffsetMatrix[_898].xyz, 0.0), vec4(u_boneOffsetMatrix[_902].xyz, 0.0), vec4(u_boneOffsetMatrix[_893].w, u_boneOffsetMatrix[_898].w, u_boneOffsetMatrix[_902].w, 1.0)) * a_boneWeight.z;\n    mat4 _728 = mat4(vec4(u_boneOffsetMatrix[_944].xyz, 0.0), vec4(u_boneOffsetMatrix[_949].xyz, 0.0), vec4(u_boneOffsetMatrix[_953].xyz, 0.0), vec4(u_boneOffsetMatrix[_944].w, u_boneOffsetMatrix[_949].w, u_boneOffsetMatrix[_953].w, 1.0)) * a_boneWeight.w;\n    mat4 _746 = u_bindTargetWorldInverse * mat4(((_688[0] + _692[0]) + _710[0]) + _728[0], ((_688[1] + _692[1]) + _710[1]) + _728[1], ((_688[2] + _692[2]) + _710[2]) + _728[2], ((_688[3] + _692[3]) + _710[3]) + _728[3]);\n    vec4 _991 = u_world * (_746 * a_position);\n    gl_Position = u_projection * (u_view * _991);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _991.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_746[0].xyz, _746[1].xyz, _746[2].xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_991.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    float _789 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _795 = (3.0 * (_789 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _798 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _802 = floor(_795 * _798);\n    float _808 = _795 - (_802 * u_skinnedAnimationMapInfo.x);\n    float _813 = (_802 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _823 = texture2D(u_skinnedAnimationMap, vec2((_808 + 0.5) * _798, _813));\n    vec4 _833 = texture2D(u_skinnedAnimationMap, vec2((_808 + 1.5) * _798, _813));\n    vec4 _843 = texture2D(u_skinnedAnimationMap, vec2((_808 + 2.5) * _798, _813));\n    float _894 = (3.0 * (_789 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _901 = floor(_894 * _798);\n    float _907 = _894 - (_901 * u_skinnedAnimationMapInfo.x);\n    float _912 = (_901 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _922 = texture2D(u_skinnedAnimationMap, vec2((_907 + 0.5) * _798, _912));\n    vec4 _932 = texture2D(u_skinnedAnimationMap, vec2((_907 + 1.5) * _798, _912));\n    vec4 _942 = texture2D(u_skinnedAnimationMap, vec2((_907 + 2.5) * _798, _912));\n    float _993 = (3.0 * (_789 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1000 = floor(_993 * _798);\n    float _1006 = _993 - (_1000 * u_skinnedAnimationMapInfo.x);\n    float _1011 = (_1000 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1021 = texture2D(u_skinnedAnimationMap, vec2((_1006 + 0.5) * _798, _1011));\n    vec4 _1031 = texture2D(u_skinnedAnimationMap, vec2((_1006 + 1.5) * _798, _1011));\n    vec4 _1041 = texture2D(u_skinnedAnimationMap, vec2((_1006 + 2.5) * _798, _1011));\n    float _1092 = (3.0 * (_789 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1099 = floor(_1092 * _798);\n    float _1105 = _1092 - (_1099 * u_skinnedAnimationMapInfo.x);\n    float _1110 = (_1099 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1120 = texture2D(u_skinnedAnimationMap, vec2((_1105 + 0.5) * _798, _1110));\n    vec4 _1130 = texture2D(u_skinnedAnimationMap, vec2((_1105 + 1.5) * _798, _1110));\n    vec4 _1140 = texture2D(u_skinnedAnimationMap, vec2((_1105 + 2.5) * _798, _1110));\n    mat4 _685 = mat4(vec4(_823.xyz, 0.0), vec4(_833.xyz, 0.0), vec4(_843.xyz, 0.0), vec4(_823.w, _833.w, _843.w, 1.0)) * a_boneWeight.x;\n    mat4 _689 = mat4(vec4(_922.xyz, 0.0), vec4(_932.xyz, 0.0), vec4(_942.xyz, 0.0), vec4(_922.w, _932.w, _942.w, 1.0)) * a_boneWeight.y;\n    mat4 _707 = mat4(vec4(_1021.xyz, 0.0), vec4(_1031.xyz, 0.0), vec4(_1041.xyz, 0.0), vec4(_1021.w, _1031.w, _1041.w, 1.0)) * a_boneWeight.z;\n    mat4 _725 = mat4(vec4(_1120.xyz, 0.0), vec4(_1130.xyz, 0.0), vec4(_1140.xyz, 0.0), vec4(_1120.w, _1130.w, _1140.w, 1.0)) * a_boneWeight.w;\n    vec4 _729 = ((_685[0] + _689[0]) + _707[0]) + _725[0];\n    vec4 _732 = ((_685[1] + _689[1]) + _707[1]) + _725[1];\n    vec4 _735 = ((_685[2] + _689[2]) + _707[2]) + _725[2];\n    vec4 _1176 = u_world * (mat4(_729, _732, _735, ((_685[3] + _689[3]) + _707[3]) + _725[3]) * a_position);\n    vec3 _591 = _1176.xyz;\n    gl_Position = u_projection * (u_view * _1176);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _591);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_729.xyz, _732.xyz, _735.xyz) * a_normal));\n    varying_ShadowPosition = _591;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _856 = int(a_boneIndex.x) * 3;\n    int _861 = _856 + 1;\n    int _865 = _856 + 2;\n    int _907 = int(a_boneIndex.y) * 3;\n    int _912 = _907 + 1;\n    int _916 = _907 + 2;\n    int _958 = int(a_boneIndex.z) * 3;\n    int _963 = _958 + 1;\n    int _967 = _958 + 2;\n    int _1009 = int(a_boneIndex.w) * 3;\n    int _1014 = _1009 + 1;\n    int _1018 = _1009 + 2;\n    mat4 _757 = mat4(vec4(u_boneOffsetMatrix[_856].xyz, 0.0), vec4(u_boneOffsetMatrix[_861].xyz, 0.0), vec4(u_boneOffsetMatrix[_865].xyz, 0.0), vec4(u_boneOffsetMatrix[_856].w, u_boneOffsetMatrix[_861].w, u_boneOffsetMatrix[_865].w, 1.0)) * a_boneWeight.x;\n    mat4 _761 = mat4(vec4(u_boneOffsetMatrix[_907].xyz, 0.0), vec4(u_boneOffsetMatrix[_912].xyz, 0.0), vec4(u_boneOffsetMatrix[_916].xyz, 0.0), vec4(u_boneOffsetMatrix[_907].w, u_boneOffsetMatrix[_912].w, u_boneOffsetMatrix[_916].w, 1.0)) * a_boneWeight.y;\n    mat4 _779 = mat4(vec4(u_boneOffsetMatrix[_958].xyz, 0.0), vec4(u_boneOffsetMatrix[_963].xyz, 0.0), vec4(u_boneOffsetMatrix[_967].xyz, 0.0), vec4(u_boneOffsetMatrix[_958].w, u_boneOffsetMatrix[_963].w, u_boneOffsetMatrix[_967].w, 1.0)) * a_boneWeight.z;\n    mat4 _797 = mat4(vec4(u_boneOffsetMatrix[_1009].xyz, 0.0), vec4(u_boneOffsetMatrix[_1014].xyz, 0.0), vec4(u_boneOffsetMatrix[_1018].xyz, 0.0), vec4(u_boneOffsetMatrix[_1009].w, u_boneOffsetMatrix[_1014].w, u_boneOffsetMatrix[_1018].w, 1.0)) * a_boneWeight.w;\n    vec4 _801 = ((_757[0] + _761[0]) + _779[0]) + _797[0];\n    vec4 _804 = ((_757[1] + _761[1]) + _779[1]) + _797[1];\n    vec4 _807 = ((_757[2] + _761[2]) + _779[2]) + _797[2];\n    mat3 _819 = mat3(_801.xyz, _804.xyz, _807.xyz);\n    vec4 _1056 = u_world * (mat4(_801, _804, _807, ((_757[3] + _761[3]) + _779[3]) + _797[3]) * a_position);\n    mat3 _1076 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1079 = normalize(_1076 * (_819 * a_normal));\n    vec3 _1093 = normalize(_1076 * (_819 * a_tangent.xyz).xyz);\n    mat3 _642 = mat3(_1093, cross(_1093, _1079) * a_tangent.w, _1079);\n    gl_Position = u_projection * (u_view * _1056);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _642 * u_lightDir;\n    varying_ViewDir = _642 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1056.xyz);\n    varying_WorldNormal = _1079;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_1056.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _732 = int(a_boneIndex.x) * 3;\n    int _737 = _732 + 1;\n    int _741 = _732 + 2;\n    int _783 = int(a_boneIndex.y) * 3;\n    int _788 = _783 + 1;\n    int _792 = _783 + 2;\n    int _834 = int(a_boneIndex.z) * 3;\n    int _839 = _834 + 1;\n    int _843 = _834 + 2;\n    int _885 = int(a_boneIndex.w) * 3;\n    int _890 = _885 + 1;\n    int _894 = _885 + 2;\n    mat4 _633 = mat4(vec4(u_boneOffsetMatrix[_732].xyz, 0.0), vec4(u_boneOffsetMatrix[_737].xyz, 0.0), vec4(u_boneOffsetMatrix[_741].xyz, 0.0), vec4(u_boneOffsetMatrix[_732].w, u_boneOffsetMatrix[_737].w, u_boneOffsetMatrix[_741].w, 1.0)) * a_boneWeight.x;\n    mat4 _637 = mat4(vec4(u_boneOffsetMatrix[_783].xyz, 0.0), vec4(u_boneOffsetMatrix[_788].xyz, 0.0), vec4(u_boneOffsetMatrix[_792].xyz, 0.0), vec4(u_boneOffsetMatrix[_783].w, u_boneOffsetMatrix[_788].w, u_boneOffsetMatrix[_792].w, 1.0)) * a_boneWeight.y;\n    mat4 _655 = mat4(vec4(u_boneOffsetMatrix[_834].xyz, 0.0), vec4(u_boneOffsetMatrix[_839].xyz, 0.0), vec4(u_boneOffsetMatrix[_843].xyz, 0.0), vec4(u_boneOffsetMatrix[_834].w, u_boneOffsetMatrix[_839].w, u_boneOffsetMatrix[_843].w, 1.0)) * a_boneWeight.z;\n    mat4 _673 = mat4(vec4(u_boneOffsetMatrix[_885].xyz, 0.0), vec4(u_boneOffsetMatrix[_890].xyz, 0.0), vec4(u_boneOffsetMatrix[_894].xyz, 0.0), vec4(u_boneOffsetMatrix[_885].w, u_boneOffsetMatrix[_890].w, u_boneOffsetMatrix[_894].w, 1.0)) * a_boneWeight.w;\n    vec4 _677 = ((_633[0] + _637[0]) + _655[0]) + _673[0];\n    vec4 _680 = ((_633[1] + _637[1]) + _655[1]) + _673[1];\n    vec4 _683 = ((_633[2] + _637[2]) + _655[2]) + _673[2];\n    vec4 _932 = u_world * (mat4(_677, _680, _683, ((_633[3] + _637[3]) + _655[3]) + _673[3]) * a_position);\n    vec3 _539 = _932.xyz;\n    gl_Position = u_projection * (u_view * _932);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _539);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_677.xyz, _680.xyz, _683.xyz) * a_normal));\n    varying_ShadowPosition = _539;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    vec4 _565 = u_world * a_position;\n    mat3 _585 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _588 = normalize(_585 * a_normal);\n    vec3 _602 = normalize(_585 * a_tangent.xyz);\n    mat3 _469 = mat3(_602, cross(_602, _588) * a_tangent.w, _588);\n    gl_Position = u_projection * (u_view * _565);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _469 * u_lightDir;\n    varying_ViewDir = _469 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _565.xyz);\n    varying_WorldNormal = _588;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_565.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    vec4 _441 = u_world * a_position;\n    vec3 _366 = _441.xyz;\n    gl_Position = u_projection * (u_view * _441);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _366);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_ShadowPosition = _366;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\n\nvoid main()\n{\n    int _723 = int(a_boneIndex.x) * 3;\n    int _728 = _723 + 1;\n    int _732 = _723 + 2;\n    int _774 = int(a_boneIndex.y) * 3;\n    int _779 = _774 + 1;\n    int _783 = _774 + 2;\n    int _825 = int(a_boneIndex.z) * 3;\n    int _830 = _825 + 1;\n    int _834 = _825 + 2;\n    int _876 = int(a_boneIndex.w) * 3;\n    int _881 = _876 + 1;\n    int _885 = _876 + 2;\n    mat4 _624 = mat4(vec4(u_boneOffsetMatrix[_723].xyz, 0.0), vec4(u_boneOffsetMatrix[_728].xyz, 0.0), vec4(u_boneOffsetMatrix[_732].xyz, 0.0), vec4(u_boneOffsetMatrix[_723].w, u_boneOffsetMatrix[_728].w, u_boneOffsetMatrix[_732].w, 1.0)) * a_boneWeight.x;\n    mat4 _628 = mat4(vec4(u_boneOffsetMatrix[_774].xyz, 0.0), vec4(u_boneOffsetMatrix[_779].xyz, 0.0), vec4(u_boneOffsetMatrix[_783].xyz, 0.0), vec4(u_boneOffsetMatrix[_774].w, u_boneOffsetMatrix[_779].w, u_boneOffsetMatrix[_783].w, 1.0)) * a_boneWeight.y;\n    mat4 _646 = mat4(vec4(u_boneOffsetMatrix[_825].xyz, 0.0), vec4(u_boneOffsetMatrix[_830].xyz, 0.0), vec4(u_boneOffsetMatrix[_834].xyz, 0.0), vec4(u_boneOffsetMatrix[_825].w, u_boneOffsetMatrix[_830].w, u_boneOffsetMatrix[_834].w, 1.0)) * a_boneWeight.z;\n    mat4 _664 = mat4(vec4(u_boneOffsetMatrix[_876].xyz, 0.0), vec4(u_boneOffsetMatrix[_881].xyz, 0.0), vec4(u_boneOffsetMatrix[_885].xyz, 0.0), vec4(u_boneOffsetMatrix[_876].w, u_boneOffsetMatrix[_881].w, u_boneOffsetMatrix[_885].w, 1.0)) * a_boneWeight.w;\n    vec4 _668 = ((_624[0] + _628[0]) + _646[0]) + _664[0];\n    vec4 _671 = ((_624[1] + _628[1]) + _646[1]) + _664[1];\n    vec4 _674 = ((_624[2] + _628[2]) + _646[2]) + _664[2];\n    vec4 _923 = u_world * (mat4(_668, _671, _674, ((_624[3] + _628[3]) + _646[3]) + _664[3]) * a_position);\n    gl_Position = u_projection * (u_view * _923);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _923.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_668.xyz, _671.xyz, _674.xyz) * a_normal));\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    float _893 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _899 = (3.0 * (_893 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _902 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _906 = floor(_899 * _902);\n    float _912 = _899 - (_906 * u_skinnedAnimationMapInfo.x);\n    float _917 = (_906 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _927 = texture2D(u_skinnedAnimationMap, vec2((_912 + 0.5) * _902, _917));\n    vec4 _937 = texture2D(u_skinnedAnimationMap, vec2((_912 + 1.5) * _902, _917));\n    vec4 _947 = texture2D(u_skinnedAnimationMap, vec2((_912 + 2.5) * _902, _917));\n    float _998 = (3.0 * (_893 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _1005 = floor(_998 * _902);\n    float _1011 = _998 - (_1005 * u_skinnedAnimationMapInfo.x);\n    float _1016 = (_1005 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1026 = texture2D(u_skinnedAnimationMap, vec2((_1011 + 0.5) * _902, _1016));\n    vec4 _1036 = texture2D(u_skinnedAnimationMap, vec2((_1011 + 1.5) * _902, _1016));\n    vec4 _1046 = texture2D(u_skinnedAnimationMap, vec2((_1011 + 2.5) * _902, _1016));\n    float _1097 = (3.0 * (_893 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1104 = floor(_1097 * _902);\n    float _1110 = _1097 - (_1104 * u_skinnedAnimationMapInfo.x);\n    float _1115 = (_1104 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1125 = texture2D(u_skinnedAnimationMap, vec2((_1110 + 0.5) * _902, _1115));\n    vec4 _1135 = texture2D(u_skinnedAnimationMap, vec2((_1110 + 1.5) * _902, _1115));\n    vec4 _1145 = texture2D(u_skinnedAnimationMap, vec2((_1110 + 2.5) * _902, _1115));\n    float _1196 = (3.0 * (_893 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1203 = floor(_1196 * _902);\n    float _1209 = _1196 - (_1203 * u_skinnedAnimationMapInfo.x);\n    float _1214 = (_1203 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1224 = texture2D(u_skinnedAnimationMap, vec2((_1209 + 0.5) * _902, _1214));\n    vec4 _1234 = texture2D(u_skinnedAnimationMap, vec2((_1209 + 1.5) * _902, _1214));\n    vec4 _1244 = texture2D(u_skinnedAnimationMap, vec2((_1209 + 2.5) * _902, _1214));\n    mat4 _789 = mat4(vec4(_927.xyz, 0.0), vec4(_937.xyz, 0.0), vec4(_947.xyz, 0.0), vec4(_927.w, _937.w, _947.w, 1.0)) * a_boneWeight.x;\n    mat4 _793 = mat4(vec4(_1026.xyz, 0.0), vec4(_1036.xyz, 0.0), vec4(_1046.xyz, 0.0), vec4(_1026.w, _1036.w, _1046.w, 1.0)) * a_boneWeight.y;\n    mat4 _811 = mat4(vec4(_1125.xyz, 0.0), vec4(_1135.xyz, 0.0), vec4(_1145.xyz, 0.0), vec4(_1125.w, _1135.w, _1145.w, 1.0)) * a_boneWeight.z;\n    mat4 _829 = mat4(vec4(_1224.xyz, 0.0), vec4(_1234.xyz, 0.0), vec4(_1244.xyz, 0.0), vec4(_1224.w, _1234.w, _1244.w, 1.0)) * a_boneWeight.w;\n    vec4 _833 = ((_789[0] + _793[0]) + _811[0]) + _829[0];\n    vec4 _836 = ((_789[1] + _793[1]) + _811[1]) + _829[1];\n    vec4 _839 = ((_789[2] + _793[2]) + _811[2]) + _829[2];\n    mat3 _851 = mat3(_833.xyz, _836.xyz, _839.xyz);\n    vec4 _1280 = u_world * (mat4(_833, _836, _839, ((_789[3] + _793[3]) + _811[3]) + _829[3]) * a_position);\n    vec3 _649 = _1280.xyz;\n    mat3 _1300 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1303 = normalize(_1300 * (_851 * a_normal));\n    vec3 _1317 = normalize(_1300 * (_851 * a_tangent.xyz).xyz);\n    mat3 _684 = mat3(_1317, cross(_1317, _1303) * a_tangent.w, _1303);\n    gl_Position = u_projection * (u_view * _1280);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _684 * u_lightDir;\n    varying_ViewDir = _684 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _649);\n    varying_WorldNormal = _1303;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_ShadowPosition = _649;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\n\nvoid main()\n{\n    vec4 _432 = u_world * a_position;\n    gl_Position = u_projection * (u_view * _432);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _432.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    float _828 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _834 = (3.0 * (_828 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _837 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _841 = floor(_834 * _837);\n    float _847 = _834 - (_841 * u_skinnedAnimationMapInfo.x);\n    float _852 = (_841 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _862 = texture2D(u_skinnedAnimationMap, vec2((_847 + 0.5) * _837, _852));\n    vec4 _872 = texture2D(u_skinnedAnimationMap, vec2((_847 + 1.5) * _837, _852));\n    vec4 _882 = texture2D(u_skinnedAnimationMap, vec2((_847 + 2.5) * _837, _852));\n    float _933 = (3.0 * (_828 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _940 = floor(_933 * _837);\n    float _946 = _933 - (_940 * u_skinnedAnimationMapInfo.x);\n    float _951 = (_940 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _961 = texture2D(u_skinnedAnimationMap, vec2((_946 + 0.5) * _837, _951));\n    vec4 _971 = texture2D(u_skinnedAnimationMap, vec2((_946 + 1.5) * _837, _951));\n    vec4 _981 = texture2D(u_skinnedAnimationMap, vec2((_946 + 2.5) * _837, _951));\n    float _1032 = (3.0 * (_828 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1039 = floor(_1032 * _837);\n    float _1045 = _1032 - (_1039 * u_skinnedAnimationMapInfo.x);\n    float _1050 = (_1039 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1060 = texture2D(u_skinnedAnimationMap, vec2((_1045 + 0.5) * _837, _1050));\n    vec4 _1070 = texture2D(u_skinnedAnimationMap, vec2((_1045 + 1.5) * _837, _1050));\n    vec4 _1080 = texture2D(u_skinnedAnimationMap, vec2((_1045 + 2.5) * _837, _1050));\n    float _1131 = (3.0 * (_828 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1138 = floor(_1131 * _837);\n    float _1144 = _1131 - (_1138 * u_skinnedAnimationMapInfo.x);\n    float _1149 = (_1138 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1159 = texture2D(u_skinnedAnimationMap, vec2((_1144 + 0.5) * _837, _1149));\n    vec4 _1169 = texture2D(u_skinnedAnimationMap, vec2((_1144 + 1.5) * _837, _1149));\n    vec4 _1179 = texture2D(u_skinnedAnimationMap, vec2((_1144 + 2.5) * _837, _1149));\n    mat4 _724 = mat4(vec4(_862.xyz, 0.0), vec4(_872.xyz, 0.0), vec4(_882.xyz, 0.0), vec4(_862.w, _872.w, _882.w, 1.0)) * a_boneWeight.x;\n    mat4 _728 = mat4(vec4(_961.xyz, 0.0), vec4(_971.xyz, 0.0), vec4(_981.xyz, 0.0), vec4(_961.w, _971.w, _981.w, 1.0)) * a_boneWeight.y;\n    mat4 _746 = mat4(vec4(_1060.xyz, 0.0), vec4(_1070.xyz, 0.0), vec4(_1080.xyz, 0.0), vec4(_1060.w, _1070.w, _1080.w, 1.0)) * a_boneWeight.z;\n    mat4 _764 = mat4(vec4(_1159.xyz, 0.0), vec4(_1169.xyz, 0.0), vec4(_1179.xyz, 0.0), vec4(_1159.w, _1169.w, _1179.w, 1.0)) * a_boneWeight.w;\n    vec4 _768 = ((_724[0] + _728[0]) + _746[0]) + _764[0];\n    vec4 _771 = ((_724[1] + _728[1]) + _746[1]) + _764[1];\n    vec4 _774 = ((_724[2] + _728[2]) + _746[2]) + _764[2];\n    vec4 _1215 = u_world * (mat4(_768, _771, _774, ((_724[3] + _728[3]) + _746[3]) + _764[3]) * a_position);\n    vec3 _612 = _1215.xyz;\n    gl_Position = u_projection * (u_view * _1215);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _612);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_768.xyz, _771.xyz, _774.xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_ShadowPosition = _612;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _864 = int(a_boneIndex.x) * 3;\n    int _869 = _864 + 1;\n    int _873 = _864 + 2;\n    int _915 = int(a_boneIndex.y) * 3;\n    int _920 = _915 + 1;\n    int _924 = _915 + 2;\n    int _966 = int(a_boneIndex.z) * 3;\n    int _971 = _966 + 1;\n    int _975 = _966 + 2;\n    int _1017 = int(a_boneIndex.w) * 3;\n    int _1022 = _1017 + 1;\n    int _1026 = _1017 + 2;\n    mat4 _761 = mat4(vec4(u_boneOffsetMatrix[_864].xyz, 0.0), vec4(u_boneOffsetMatrix[_869].xyz, 0.0), vec4(u_boneOffsetMatrix[_873].xyz, 0.0), vec4(u_boneOffsetMatrix[_864].w, u_boneOffsetMatrix[_869].w, u_boneOffsetMatrix[_873].w, 1.0)) * a_boneWeight.x;\n    mat4 _765 = mat4(vec4(u_boneOffsetMatrix[_915].xyz, 0.0), vec4(u_boneOffsetMatrix[_920].xyz, 0.0), vec4(u_boneOffsetMatrix[_924].xyz, 0.0), vec4(u_boneOffsetMatrix[_915].w, u_boneOffsetMatrix[_920].w, u_boneOffsetMatrix[_924].w, 1.0)) * a_boneWeight.y;\n    mat4 _783 = mat4(vec4(u_boneOffsetMatrix[_966].xyz, 0.0), vec4(u_boneOffsetMatrix[_971].xyz, 0.0), vec4(u_boneOffsetMatrix[_975].xyz, 0.0), vec4(u_boneOffsetMatrix[_966].w, u_boneOffsetMatrix[_971].w, u_boneOffsetMatrix[_975].w, 1.0)) * a_boneWeight.z;\n    mat4 _801 = mat4(vec4(u_boneOffsetMatrix[_1017].xyz, 0.0), vec4(u_boneOffsetMatrix[_1022].xyz, 0.0), vec4(u_boneOffsetMatrix[_1026].xyz, 0.0), vec4(u_boneOffsetMatrix[_1017].w, u_boneOffsetMatrix[_1022].w, u_boneOffsetMatrix[_1026].w, 1.0)) * a_boneWeight.w;\n    mat4 _819 = u_bindTargetWorldInverse * mat4(((_761[0] + _765[0]) + _783[0]) + _801[0], ((_761[1] + _765[1]) + _783[1]) + _801[1], ((_761[2] + _765[2]) + _783[2]) + _801[2], ((_761[3] + _765[3]) + _783[3]) + _801[3]);\n    mat3 _827 = mat3(_819[0].xyz, _819[1].xyz, _819[2].xyz);\n    vec4 _1064 = u_world * (_819 * a_position);\n    mat3 _1084 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1087 = normalize(_1084 * (_827 * a_normal));\n    vec3 _1101 = normalize(_1084 * (_827 * a_tangent.xyz).xyz);\n    mat3 _646 = mat3(_1101, cross(_1101, _1087) * a_tangent.w, _1087);\n    gl_Position = u_projection * (u_view * _1064);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _646 * u_lightDir;\n    varying_ViewDir = _646 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1064.xyz);\n    varying_WorldNormal = _1087;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_1064.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _740 = int(a_boneIndex.x) * 3;\n    int _745 = _740 + 1;\n    int _749 = _740 + 2;\n    int _791 = int(a_boneIndex.y) * 3;\n    int _796 = _791 + 1;\n    int _800 = _791 + 2;\n    int _842 = int(a_boneIndex.z) * 3;\n    int _847 = _842 + 1;\n    int _851 = _842 + 2;\n    int _893 = int(a_boneIndex.w) * 3;\n    int _898 = _893 + 1;\n    int _902 = _893 + 2;\n    mat4 _637 = mat4(vec4(u_boneOffsetMatrix[_740].xyz, 0.0), vec4(u_boneOffsetMatrix[_745].xyz, 0.0), vec4(u_boneOffsetMatrix[_749].xyz, 0.0), vec4(u_boneOffsetMatrix[_740].w, u_boneOffsetMatrix[_745].w, u_boneOffsetMatrix[_749].w, 1.0)) * a_boneWeight.x;\n    mat4 _641 = mat4(vec4(u_boneOffsetMatrix[_791].xyz, 0.0), vec4(u_boneOffsetMatrix[_796].xyz, 0.0), vec4(u_boneOffsetMatrix[_800].xyz, 0.0), vec4(u_boneOffsetMatrix[_791].w, u_boneOffsetMatrix[_796].w, u_boneOffsetMatrix[_800].w, 1.0)) * a_boneWeight.y;\n    mat4 _659 = mat4(vec4(u_boneOffsetMatrix[_842].xyz, 0.0), vec4(u_boneOffsetMatrix[_847].xyz, 0.0), vec4(u_boneOffsetMatrix[_851].xyz, 0.0), vec4(u_boneOffsetMatrix[_842].w, u_boneOffsetMatrix[_847].w, u_boneOffsetMatrix[_851].w, 1.0)) * a_boneWeight.z;\n    mat4 _677 = mat4(vec4(u_boneOffsetMatrix[_893].xyz, 0.0), vec4(u_boneOffsetMatrix[_898].xyz, 0.0), vec4(u_boneOffsetMatrix[_902].xyz, 0.0), vec4(u_boneOffsetMatrix[_893].w, u_boneOffsetMatrix[_898].w, u_boneOffsetMatrix[_902].w, 1.0)) * a_boneWeight.w;\n    mat4 _695 = u_bindTargetWorldInverse * mat4(((_637[0] + _641[0]) + _659[0]) + _677[0], ((_637[1] + _641[1]) + _659[1]) + _677[1], ((_637[2] + _641[2]) + _659[2]) + _677[2], ((_637[3] + _641[3]) + _659[3]) + _677[3]);\n    vec4 _940 = u_world * (_695 * a_position);\n    vec3 _543 = _940.xyz;\n    gl_Position = u_projection * (u_view * _940);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _543);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_695[0].xyz, _695[1].xyz, _695[2].xyz) * a_normal));\n    varying_ShadowPosition = _543;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    float _814 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _820 = (3.0 * (_814 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _823 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _827 = floor(_820 * _823);\n    float _833 = _820 - (_827 * u_skinnedAnimationMapInfo.x);\n    float _838 = (_827 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _848 = texture2D(u_skinnedAnimationMap, vec2((_833 + 0.5) * _823, _838));\n    vec4 _858 = texture2D(u_skinnedAnimationMap, vec2((_833 + 1.5) * _823, _838));\n    vec4 _868 = texture2D(u_skinnedAnimationMap, vec2((_833 + 2.5) * _823, _838));\n    float _919 = (3.0 * (_814 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _926 = floor(_919 * _823);\n    float _932 = _919 - (_926 * u_skinnedAnimationMapInfo.x);\n    float _937 = (_926 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _947 = texture2D(u_skinnedAnimationMap, vec2((_932 + 0.5) * _823, _937));\n    vec4 _957 = texture2D(u_skinnedAnimationMap, vec2((_932 + 1.5) * _823, _937));\n    vec4 _967 = texture2D(u_skinnedAnimationMap, vec2((_932 + 2.5) * _823, _937));\n    float _1018 = (3.0 * (_814 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1025 = floor(_1018 * _823);\n    float _1031 = _1018 - (_1025 * u_skinnedAnimationMapInfo.x);\n    float _1036 = (_1025 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1046 = texture2D(u_skinnedAnimationMap, vec2((_1031 + 0.5) * _823, _1036));\n    vec4 _1056 = texture2D(u_skinnedAnimationMap, vec2((_1031 + 1.5) * _823, _1036));\n    vec4 _1066 = texture2D(u_skinnedAnimationMap, vec2((_1031 + 2.5) * _823, _1036));\n    float _1117 = (3.0 * (_814 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1124 = floor(_1117 * _823);\n    float _1130 = _1117 - (_1124 * u_skinnedAnimationMapInfo.x);\n    float _1135 = (_1124 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1145 = texture2D(u_skinnedAnimationMap, vec2((_1130 + 0.5) * _823, _1135));\n    vec4 _1155 = texture2D(u_skinnedAnimationMap, vec2((_1130 + 1.5) * _823, _1135));\n    vec4 _1165 = texture2D(u_skinnedAnimationMap, vec2((_1130 + 2.5) * _823, _1135));\n    mat4 _710 = mat4(vec4(_848.xyz, 0.0), vec4(_858.xyz, 0.0), vec4(_868.xyz, 0.0), vec4(_848.w, _858.w, _868.w, 1.0)) * a_boneWeight.x;\n    mat4 _714 = mat4(vec4(_947.xyz, 0.0), vec4(_957.xyz, 0.0), vec4(_967.xyz, 0.0), vec4(_947.w, _957.w, _967.w, 1.0)) * a_boneWeight.y;\n    mat4 _732 = mat4(vec4(_1046.xyz, 0.0), vec4(_1056.xyz, 0.0), vec4(_1066.xyz, 0.0), vec4(_1046.w, _1056.w, _1066.w, 1.0)) * a_boneWeight.z;\n    mat4 _750 = mat4(vec4(_1145.xyz, 0.0), vec4(_1155.xyz, 0.0), vec4(_1165.xyz, 0.0), vec4(_1145.w, _1155.w, _1165.w, 1.0)) * a_boneWeight.w;\n    vec4 _754 = ((_710[0] + _714[0]) + _732[0]) + _750[0];\n    vec4 _757 = ((_710[1] + _714[1]) + _732[1]) + _750[1];\n    vec4 _760 = ((_710[2] + _714[2]) + _732[2]) + _750[2];\n    vec4 _1201 = u_world * (mat4(_754, _757, _760, ((_710[3] + _714[3]) + _732[3]) + _750[3]) * a_position);\n    vec3 _605 = _1201.xyz;\n    gl_Position = u_projection * (u_view * _1201);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _605);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_754.xyz, _757.xyz, _760.xyz) * a_normal));\n    varying_positionCamera_Fog = (u_view * vec4(_1201.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _605;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    int _831 = int(a_boneIndex.x) * 3;\n    int _836 = _831 + 1;\n    int _840 = _831 + 2;\n    int _882 = int(a_boneIndex.y) * 3;\n    int _887 = _882 + 1;\n    int _891 = _882 + 2;\n    int _933 = int(a_boneIndex.z) * 3;\n    int _938 = _933 + 1;\n    int _942 = _933 + 2;\n    int _984 = int(a_boneIndex.w) * 3;\n    int _989 = _984 + 1;\n    int _993 = _984 + 2;\n    mat4 _732 = mat4(vec4(u_boneOffsetMatrix[_831].xyz, 0.0), vec4(u_boneOffsetMatrix[_836].xyz, 0.0), vec4(u_boneOffsetMatrix[_840].xyz, 0.0), vec4(u_boneOffsetMatrix[_831].w, u_boneOffsetMatrix[_836].w, u_boneOffsetMatrix[_840].w, 1.0)) * a_boneWeight.x;\n    mat4 _736 = mat4(vec4(u_boneOffsetMatrix[_882].xyz, 0.0), vec4(u_boneOffsetMatrix[_887].xyz, 0.0), vec4(u_boneOffsetMatrix[_891].xyz, 0.0), vec4(u_boneOffsetMatrix[_882].w, u_boneOffsetMatrix[_887].w, u_boneOffsetMatrix[_891].w, 1.0)) * a_boneWeight.y;\n    mat4 _754 = mat4(vec4(u_boneOffsetMatrix[_933].xyz, 0.0), vec4(u_boneOffsetMatrix[_938].xyz, 0.0), vec4(u_boneOffsetMatrix[_942].xyz, 0.0), vec4(u_boneOffsetMatrix[_933].w, u_boneOffsetMatrix[_938].w, u_boneOffsetMatrix[_942].w, 1.0)) * a_boneWeight.z;\n    mat4 _772 = mat4(vec4(u_boneOffsetMatrix[_984].xyz, 0.0), vec4(u_boneOffsetMatrix[_989].xyz, 0.0), vec4(u_boneOffsetMatrix[_993].xyz, 0.0), vec4(u_boneOffsetMatrix[_984].w, u_boneOffsetMatrix[_989].w, u_boneOffsetMatrix[_993].w, 1.0)) * a_boneWeight.w;\n    vec4 _776 = ((_732[0] + _736[0]) + _754[0]) + _772[0];\n    vec4 _779 = ((_732[1] + _736[1]) + _754[1]) + _772[1];\n    vec4 _782 = ((_732[2] + _736[2]) + _754[2]) + _772[2];\n    mat3 _794 = mat3(_776.xyz, _779.xyz, _782.xyz);\n    vec4 _1031 = u_world * (mat4(_776, _779, _782, ((_732[3] + _736[3]) + _754[3]) + _772[3]) * a_position);\n    mat3 _1051 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1054 = normalize(_1051 * (_794 * a_normal));\n    vec3 _1068 = normalize(_1051 * (_794 * a_tangent.xyz).xyz);\n    mat3 _628 = mat3(_1068, cross(_1068, _1054) * a_tangent.w, _1054);\n    gl_Position = u_projection * (u_view * _1031);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _628 * u_lightDir;\n    varying_ViewDir = _628 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1031.xyz);\n    varying_WorldNormal = _1054;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _757 = int(a_boneIndex.x) * 3;\n    int _762 = _757 + 1;\n    int _766 = _757 + 2;\n    int _808 = int(a_boneIndex.y) * 3;\n    int _813 = _808 + 1;\n    int _817 = _808 + 2;\n    int _859 = int(a_boneIndex.z) * 3;\n    int _864 = _859 + 1;\n    int _868 = _859 + 2;\n    int _910 = int(a_boneIndex.w) * 3;\n    int _915 = _910 + 1;\n    int _919 = _910 + 2;\n    mat4 _658 = mat4(vec4(u_boneOffsetMatrix[_757].xyz, 0.0), vec4(u_boneOffsetMatrix[_762].xyz, 0.0), vec4(u_boneOffsetMatrix[_766].xyz, 0.0), vec4(u_boneOffsetMatrix[_757].w, u_boneOffsetMatrix[_762].w, u_boneOffsetMatrix[_766].w, 1.0)) * a_boneWeight.x;\n    mat4 _662 = mat4(vec4(u_boneOffsetMatrix[_808].xyz, 0.0), vec4(u_boneOffsetMatrix[_813].xyz, 0.0), vec4(u_boneOffsetMatrix[_817].xyz, 0.0), vec4(u_boneOffsetMatrix[_808].w, u_boneOffsetMatrix[_813].w, u_boneOffsetMatrix[_817].w, 1.0)) * a_boneWeight.y;\n    mat4 _680 = mat4(vec4(u_boneOffsetMatrix[_859].xyz, 0.0), vec4(u_boneOffsetMatrix[_864].xyz, 0.0), vec4(u_boneOffsetMatrix[_868].xyz, 0.0), vec4(u_boneOffsetMatrix[_859].w, u_boneOffsetMatrix[_864].w, u_boneOffsetMatrix[_868].w, 1.0)) * a_boneWeight.z;\n    mat4 _698 = mat4(vec4(u_boneOffsetMatrix[_910].xyz, 0.0), vec4(u_boneOffsetMatrix[_915].xyz, 0.0), vec4(u_boneOffsetMatrix[_919].xyz, 0.0), vec4(u_boneOffsetMatrix[_910].w, u_boneOffsetMatrix[_915].w, u_boneOffsetMatrix[_919].w, 1.0)) * a_boneWeight.w;\n    vec4 _702 = ((_658[0] + _662[0]) + _680[0]) + _698[0];\n    vec4 _705 = ((_658[1] + _662[1]) + _680[1]) + _698[1];\n    vec4 _708 = ((_658[2] + _662[2]) + _680[2]) + _698[2];\n    vec4 _957 = u_world * (mat4(_702, _705, _708, ((_658[3] + _662[3]) + _680[3]) + _698[3]) * a_position);\n    vec3 _553 = _957.xyz;\n    gl_Position = u_projection * (u_view * _957);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _553);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_702.xyz, _705.xyz, _708.xyz) * a_normal));\n    varying_positionCamera_Fog = (u_view * vec4(_957.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _553;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    vec4 _540 = u_world * a_position;\n    mat3 _560 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _563 = normalize(_560 * a_normal);\n    vec3 _577 = normalize(_560 * a_tangent.xyz);\n    mat3 _455 = mat3(_577, cross(_577, _563) * a_tangent.w, _563);\n    gl_Position = u_projection * (u_view * _540);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _455 * u_lightDir;\n    varying_ViewDir = _455 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _540.xyz);\n    varying_WorldNormal = _563;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    vec4 _466 = u_world * a_position;\n    vec3 _380 = _466.xyz;\n    gl_Position = u_projection * (u_view * _466);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _380);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_positionCamera_Fog = (u_view * vec4(_466.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _380;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _748 = int(a_boneIndex.x) * 3;\n    int _753 = _748 + 1;\n    int _757 = _748 + 2;\n    int _799 = int(a_boneIndex.y) * 3;\n    int _804 = _799 + 1;\n    int _808 = _799 + 2;\n    int _850 = int(a_boneIndex.z) * 3;\n    int _855 = _850 + 1;\n    int _859 = _850 + 2;\n    int _901 = int(a_boneIndex.w) * 3;\n    int _906 = _901 + 1;\n    int _910 = _901 + 2;\n    mat4 _649 = mat4(vec4(u_boneOffsetMatrix[_748].xyz, 0.0), vec4(u_boneOffsetMatrix[_753].xyz, 0.0), vec4(u_boneOffsetMatrix[_757].xyz, 0.0), vec4(u_boneOffsetMatrix[_748].w, u_boneOffsetMatrix[_753].w, u_boneOffsetMatrix[_757].w, 1.0)) * a_boneWeight.x;\n    mat4 _653 = mat4(vec4(u_boneOffsetMatrix[_799].xyz, 0.0), vec4(u_boneOffsetMatrix[_804].xyz, 0.0), vec4(u_boneOffsetMatrix[_808].xyz, 0.0), vec4(u_boneOffsetMatrix[_799].w, u_boneOffsetMatrix[_804].w, u_boneOffsetMatrix[_808].w, 1.0)) * a_boneWeight.y;\n    mat4 _671 = mat4(vec4(u_boneOffsetMatrix[_850].xyz, 0.0), vec4(u_boneOffsetMatrix[_855].xyz, 0.0), vec4(u_boneOffsetMatrix[_859].xyz, 0.0), vec4(u_boneOffsetMatrix[_850].w, u_boneOffsetMatrix[_855].w, u_boneOffsetMatrix[_859].w, 1.0)) * a_boneWeight.z;\n    mat4 _689 = mat4(vec4(u_boneOffsetMatrix[_901].xyz, 0.0), vec4(u_boneOffsetMatrix[_906].xyz, 0.0), vec4(u_boneOffsetMatrix[_910].xyz, 0.0), vec4(u_boneOffsetMatrix[_901].w, u_boneOffsetMatrix[_906].w, u_boneOffsetMatrix[_910].w, 1.0)) * a_boneWeight.w;\n    vec4 _693 = ((_649[0] + _653[0]) + _671[0]) + _689[0];\n    vec4 _696 = ((_649[1] + _653[1]) + _671[1]) + _689[1];\n    vec4 _699 = ((_649[2] + _653[2]) + _671[2]) + _689[2];\n    vec4 _948 = u_world * (mat4(_693, _696, _699, ((_649[3] + _653[3]) + _671[3]) + _689[3]) * a_position);\n    gl_Position = u_projection * (u_view * _948);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _948.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_693.xyz, _696.xyz, _699.xyz) * a_normal));\n    varying_positionCamera_Fog = (u_view * vec4(_948.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    float _918 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _924 = (3.0 * (_918 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _927 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _931 = floor(_924 * _927);\n    float _937 = _924 - (_931 * u_skinnedAnimationMapInfo.x);\n    float _942 = (_931 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _952 = texture2D(u_skinnedAnimationMap, vec2((_937 + 0.5) * _927, _942));\n    vec4 _962 = texture2D(u_skinnedAnimationMap, vec2((_937 + 1.5) * _927, _942));\n    vec4 _972 = texture2D(u_skinnedAnimationMap, vec2((_937 + 2.5) * _927, _942));\n    float _1023 = (3.0 * (_918 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _1030 = floor(_1023 * _927);\n    float _1036 = _1023 - (_1030 * u_skinnedAnimationMapInfo.x);\n    float _1041 = (_1030 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1051 = texture2D(u_skinnedAnimationMap, vec2((_1036 + 0.5) * _927, _1041));\n    vec4 _1061 = texture2D(u_skinnedAnimationMap, vec2((_1036 + 1.5) * _927, _1041));\n    vec4 _1071 = texture2D(u_skinnedAnimationMap, vec2((_1036 + 2.5) * _927, _1041));\n    float _1122 = (3.0 * (_918 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1129 = floor(_1122 * _927);\n    float _1135 = _1122 - (_1129 * u_skinnedAnimationMapInfo.x);\n    float _1140 = (_1129 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1150 = texture2D(u_skinnedAnimationMap, vec2((_1135 + 0.5) * _927, _1140));\n    vec4 _1160 = texture2D(u_skinnedAnimationMap, vec2((_1135 + 1.5) * _927, _1140));\n    vec4 _1170 = texture2D(u_skinnedAnimationMap, vec2((_1135 + 2.5) * _927, _1140));\n    float _1221 = (3.0 * (_918 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1228 = floor(_1221 * _927);\n    float _1234 = _1221 - (_1228 * u_skinnedAnimationMapInfo.x);\n    float _1239 = (_1228 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1249 = texture2D(u_skinnedAnimationMap, vec2((_1234 + 0.5) * _927, _1239));\n    vec4 _1259 = texture2D(u_skinnedAnimationMap, vec2((_1234 + 1.5) * _927, _1239));\n    vec4 _1269 = texture2D(u_skinnedAnimationMap, vec2((_1234 + 2.5) * _927, _1239));\n    mat4 _814 = mat4(vec4(_952.xyz, 0.0), vec4(_962.xyz, 0.0), vec4(_972.xyz, 0.0), vec4(_952.w, _962.w, _972.w, 1.0)) * a_boneWeight.x;\n    mat4 _818 = mat4(vec4(_1051.xyz, 0.0), vec4(_1061.xyz, 0.0), vec4(_1071.xyz, 0.0), vec4(_1051.w, _1061.w, _1071.w, 1.0)) * a_boneWeight.y;\n    mat4 _836 = mat4(vec4(_1150.xyz, 0.0), vec4(_1160.xyz, 0.0), vec4(_1170.xyz, 0.0), vec4(_1150.w, _1160.w, _1170.w, 1.0)) * a_boneWeight.z;\n    mat4 _854 = mat4(vec4(_1249.xyz, 0.0), vec4(_1259.xyz, 0.0), vec4(_1269.xyz, 0.0), vec4(_1249.w, _1259.w, _1269.w, 1.0)) * a_boneWeight.w;\n    vec4 _858 = ((_814[0] + _818[0]) + _836[0]) + _854[0];\n    vec4 _861 = ((_814[1] + _818[1]) + _836[1]) + _854[1];\n    vec4 _864 = ((_814[2] + _818[2]) + _836[2]) + _854[2];\n    mat3 _876 = mat3(_858.xyz, _861.xyz, _864.xyz);\n    vec4 _1305 = u_world * (mat4(_858, _861, _864, ((_814[3] + _818[3]) + _836[3]) + _854[3]) * a_position);\n    vec3 _663 = _1305.xyz;\n    mat3 _1325 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1328 = normalize(_1325 * (_876 * a_normal));\n    vec3 _1342 = normalize(_1325 * (_876 * a_tangent.xyz).xyz);\n    mat3 _698 = mat3(_1342, cross(_1342, _1328) * a_tangent.w, _1328);\n    gl_Position = u_projection * (u_view * _1305);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _698 * u_lightDir;\n    varying_ViewDir = _698 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _663);\n    varying_WorldNormal = _1328;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_1305.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _663;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    vec4 _457 = u_world * a_position;\n    gl_Position = u_projection * (u_view * _457);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _457.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_positionCamera_Fog = (u_view * vec4(_457.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    float _853 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _859 = (3.0 * (_853 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _862 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _866 = floor(_859 * _862);\n    float _872 = _859 - (_866 * u_skinnedAnimationMapInfo.x);\n    float _877 = (_866 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _887 = texture2D(u_skinnedAnimationMap, vec2((_872 + 0.5) * _862, _877));\n    vec4 _897 = texture2D(u_skinnedAnimationMap, vec2((_872 + 1.5) * _862, _877));\n    vec4 _907 = texture2D(u_skinnedAnimationMap, vec2((_872 + 2.5) * _862, _877));\n    float _958 = (3.0 * (_853 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _965 = floor(_958 * _862);\n    float _971 = _958 - (_965 * u_skinnedAnimationMapInfo.x);\n    float _976 = (_965 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _986 = texture2D(u_skinnedAnimationMap, vec2((_971 + 0.5) * _862, _976));\n    vec4 _996 = texture2D(u_skinnedAnimationMap, vec2((_971 + 1.5) * _862, _976));\n    vec4 _1006 = texture2D(u_skinnedAnimationMap, vec2((_971 + 2.5) * _862, _976));\n    float _1057 = (3.0 * (_853 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1064 = floor(_1057 * _862);\n    float _1070 = _1057 - (_1064 * u_skinnedAnimationMapInfo.x);\n    float _1075 = (_1064 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1085 = texture2D(u_skinnedAnimationMap, vec2((_1070 + 0.5) * _862, _1075));\n    vec4 _1095 = texture2D(u_skinnedAnimationMap, vec2((_1070 + 1.5) * _862, _1075));\n    vec4 _1105 = texture2D(u_skinnedAnimationMap, vec2((_1070 + 2.5) * _862, _1075));\n    float _1156 = (3.0 * (_853 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1163 = floor(_1156 * _862);\n    float _1169 = _1156 - (_1163 * u_skinnedAnimationMapInfo.x);\n    float _1174 = (_1163 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1184 = texture2D(u_skinnedAnimationMap, vec2((_1169 + 0.5) * _862, _1174));\n    vec4 _1194 = texture2D(u_skinnedAnimationMap, vec2((_1169 + 1.5) * _862, _1174));\n    vec4 _1204 = texture2D(u_skinnedAnimationMap, vec2((_1169 + 2.5) * _862, _1174));\n    mat4 _749 = mat4(vec4(_887.xyz, 0.0), vec4(_897.xyz, 0.0), vec4(_907.xyz, 0.0), vec4(_887.w, _897.w, _907.w, 1.0)) * a_boneWeight.x;\n    mat4 _753 = mat4(vec4(_986.xyz, 0.0), vec4(_996.xyz, 0.0), vec4(_1006.xyz, 0.0), vec4(_986.w, _996.w, _1006.w, 1.0)) * a_boneWeight.y;\n    mat4 _771 = mat4(vec4(_1085.xyz, 0.0), vec4(_1095.xyz, 0.0), vec4(_1105.xyz, 0.0), vec4(_1085.w, _1095.w, _1105.w, 1.0)) * a_boneWeight.z;\n    mat4 _789 = mat4(vec4(_1184.xyz, 0.0), vec4(_1194.xyz, 0.0), vec4(_1204.xyz, 0.0), vec4(_1184.w, _1194.w, _1204.w, 1.0)) * a_boneWeight.w;\n    vec4 _793 = ((_749[0] + _753[0]) + _771[0]) + _789[0];\n    vec4 _796 = ((_749[1] + _753[1]) + _771[1]) + _789[1];\n    vec4 _799 = ((_749[2] + _753[2]) + _771[2]) + _789[2];\n    vec4 _1240 = u_world * (mat4(_793, _796, _799, ((_749[3] + _753[3]) + _771[3]) + _789[3]) * a_position);\n    vec3 _626 = _1240.xyz;\n    gl_Position = u_projection * (u_view * _1240);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _626);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_793.xyz, _796.xyz, _799.xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_1240.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _626;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    int _839 = int(a_boneIndex.x) * 3;\n    int _844 = _839 + 1;\n    int _848 = _839 + 2;\n    int _890 = int(a_boneIndex.y) * 3;\n    int _895 = _890 + 1;\n    int _899 = _890 + 2;\n    int _941 = int(a_boneIndex.z) * 3;\n    int _946 = _941 + 1;\n    int _950 = _941 + 2;\n    int _992 = int(a_boneIndex.w) * 3;\n    int _997 = _992 + 1;\n    int _1001 = _992 + 2;\n    mat4 _736 = mat4(vec4(u_boneOffsetMatrix[_839].xyz, 0.0), vec4(u_boneOffsetMatrix[_844].xyz, 0.0), vec4(u_boneOffsetMatrix[_848].xyz, 0.0), vec4(u_boneOffsetMatrix[_839].w, u_boneOffsetMatrix[_844].w, u_boneOffsetMatrix[_848].w, 1.0)) * a_boneWeight.x;\n    mat4 _740 = mat4(vec4(u_boneOffsetMatrix[_890].xyz, 0.0), vec4(u_boneOffsetMatrix[_895].xyz, 0.0), vec4(u_boneOffsetMatrix[_899].xyz, 0.0), vec4(u_boneOffsetMatrix[_890].w, u_boneOffsetMatrix[_895].w, u_boneOffsetMatrix[_899].w, 1.0)) * a_boneWeight.y;\n    mat4 _758 = mat4(vec4(u_boneOffsetMatrix[_941].xyz, 0.0), vec4(u_boneOffsetMatrix[_946].xyz, 0.0), vec4(u_boneOffsetMatrix[_950].xyz, 0.0), vec4(u_boneOffsetMatrix[_941].w, u_boneOffsetMatrix[_946].w, u_boneOffsetMatrix[_950].w, 1.0)) * a_boneWeight.z;\n    mat4 _776 = mat4(vec4(u_boneOffsetMatrix[_992].xyz, 0.0), vec4(u_boneOffsetMatrix[_997].xyz, 0.0), vec4(u_boneOffsetMatrix[_1001].xyz, 0.0), vec4(u_boneOffsetMatrix[_992].w, u_boneOffsetMatrix[_997].w, u_boneOffsetMatrix[_1001].w, 1.0)) * a_boneWeight.w;\n    mat4 _794 = u_bindTargetWorldInverse * mat4(((_736[0] + _740[0]) + _758[0]) + _776[0], ((_736[1] + _740[1]) + _758[1]) + _776[1], ((_736[2] + _740[2]) + _758[2]) + _776[2], ((_736[3] + _740[3]) + _758[3]) + _776[3]);\n    mat3 _802 = mat3(_794[0].xyz, _794[1].xyz, _794[2].xyz);\n    vec4 _1039 = u_world * (_794 * a_position);\n    mat3 _1059 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1062 = normalize(_1059 * (_802 * a_normal));\n    vec3 _1076 = normalize(_1059 * (_802 * a_tangent.xyz).xyz);\n    mat3 _632 = mat3(_1076, cross(_1076, _1062) * a_tangent.w, _1062);\n    gl_Position = u_projection * (u_view * _1039);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _632 * u_lightDir;\n    varying_ViewDir = _632 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1039.xyz);\n    varying_WorldNormal = _1062;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _765 = int(a_boneIndex.x) * 3;\n    int _770 = _765 + 1;\n    int _774 = _765 + 2;\n    int _816 = int(a_boneIndex.y) * 3;\n    int _821 = _816 + 1;\n    int _825 = _816 + 2;\n    int _867 = int(a_boneIndex.z) * 3;\n    int _872 = _867 + 1;\n    int _876 = _867 + 2;\n    int _918 = int(a_boneIndex.w) * 3;\n    int _923 = _918 + 1;\n    int _927 = _918 + 2;\n    mat4 _662 = mat4(vec4(u_boneOffsetMatrix[_765].xyz, 0.0), vec4(u_boneOffsetMatrix[_770].xyz, 0.0), vec4(u_boneOffsetMatrix[_774].xyz, 0.0), vec4(u_boneOffsetMatrix[_765].w, u_boneOffsetMatrix[_770].w, u_boneOffsetMatrix[_774].w, 1.0)) * a_boneWeight.x;\n    mat4 _666 = mat4(vec4(u_boneOffsetMatrix[_816].xyz, 0.0), vec4(u_boneOffsetMatrix[_821].xyz, 0.0), vec4(u_boneOffsetMatrix[_825].xyz, 0.0), vec4(u_boneOffsetMatrix[_816].w, u_boneOffsetMatrix[_821].w, u_boneOffsetMatrix[_825].w, 1.0)) * a_boneWeight.y;\n    mat4 _684 = mat4(vec4(u_boneOffsetMatrix[_867].xyz, 0.0), vec4(u_boneOffsetMatrix[_872].xyz, 0.0), vec4(u_boneOffsetMatrix[_876].xyz, 0.0), vec4(u_boneOffsetMatrix[_867].w, u_boneOffsetMatrix[_872].w, u_boneOffsetMatrix[_876].w, 1.0)) * a_boneWeight.z;\n    mat4 _702 = mat4(vec4(u_boneOffsetMatrix[_918].xyz, 0.0), vec4(u_boneOffsetMatrix[_923].xyz, 0.0), vec4(u_boneOffsetMatrix[_927].xyz, 0.0), vec4(u_boneOffsetMatrix[_918].w, u_boneOffsetMatrix[_923].w, u_boneOffsetMatrix[_927].w, 1.0)) * a_boneWeight.w;\n    mat4 _720 = u_bindTargetWorldInverse * mat4(((_662[0] + _666[0]) + _684[0]) + _702[0], ((_662[1] + _666[1]) + _684[1]) + _702[1], ((_662[2] + _666[2]) + _684[2]) + _702[2], ((_662[3] + _666[3]) + _684[3]) + _702[3]);\n    vec4 _965 = u_world * (_720 * a_position);\n    vec3 _557 = _965.xyz;\n    gl_Position = u_projection * (u_view * _965);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _557);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_720[0].xyz, _720[1].xyz, _720[2].xyz) * a_normal));\n    varying_positionCamera_Fog = (u_view * vec4(_965.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _557;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _817 = int(a_boneIndex.x) * 3;\n    int _822 = _817 + 1;\n    int _826 = _817 + 2;\n    int _868 = int(a_boneIndex.y) * 3;\n    int _873 = _868 + 1;\n    int _877 = _868 + 2;\n    int _919 = int(a_boneIndex.z) * 3;\n    int _924 = _919 + 1;\n    int _928 = _919 + 2;\n    int _970 = int(a_boneIndex.w) * 3;\n    int _975 = _970 + 1;\n    int _979 = _970 + 2;\n    mat4 _718 = mat4(vec4(u_boneOffsetMatrix[_817].xyz, 0.0), vec4(u_boneOffsetMatrix[_822].xyz, 0.0), vec4(u_boneOffsetMatrix[_826].xyz, 0.0), vec4(u_boneOffsetMatrix[_817].w, u_boneOffsetMatrix[_822].w, u_boneOffsetMatrix[_826].w, 1.0)) * a_boneWeight.x;\n    mat4 _722 = mat4(vec4(u_boneOffsetMatrix[_868].xyz, 0.0), vec4(u_boneOffsetMatrix[_873].xyz, 0.0), vec4(u_boneOffsetMatrix[_877].xyz, 0.0), vec4(u_boneOffsetMatrix[_868].w, u_boneOffsetMatrix[_873].w, u_boneOffsetMatrix[_877].w, 1.0)) * a_boneWeight.y;\n    mat4 _740 = mat4(vec4(u_boneOffsetMatrix[_919].xyz, 0.0), vec4(u_boneOffsetMatrix[_924].xyz, 0.0), vec4(u_boneOffsetMatrix[_928].xyz, 0.0), vec4(u_boneOffsetMatrix[_919].w, u_boneOffsetMatrix[_924].w, u_boneOffsetMatrix[_928].w, 1.0)) * a_boneWeight.z;\n    mat4 _758 = mat4(vec4(u_boneOffsetMatrix[_970].xyz, 0.0), vec4(u_boneOffsetMatrix[_975].xyz, 0.0), vec4(u_boneOffsetMatrix[_979].xyz, 0.0), vec4(u_boneOffsetMatrix[_970].w, u_boneOffsetMatrix[_975].w, u_boneOffsetMatrix[_979].w, 1.0)) * a_boneWeight.w;\n    vec4 _762 = ((_718[0] + _722[0]) + _740[0]) + _758[0];\n    vec4 _765 = ((_718[1] + _722[1]) + _740[1]) + _758[1];\n    vec4 _768 = ((_718[2] + _722[2]) + _740[2]) + _758[2];\n    mat3 _780 = mat3(_762.xyz, _765.xyz, _768.xyz);\n    vec4 _1017 = u_world * (mat4(_762, _765, _768, ((_718[3] + _722[3]) + _740[3]) + _758[3]) * a_position);\n    mat3 _1037 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1040 = normalize(_1037 * (_780 * a_normal));\n    vec3 _1054 = normalize(_1037 * (_780 * a_tangent.xyz).xyz);\n    mat3 _621 = mat3(_1054, cross(_1054, _1040) * a_tangent.w, _1040);\n    gl_Position = u_projection * (u_view * _1017);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _621 * u_lightDir;\n    varying_ViewDir = _621 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1017.xyz);\n    varying_WorldNormal = _1040;\n    varying_positionCamera_Fog = (u_view * vec4(_1017.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _771 = int(a_boneIndex.x) * 3;\n    int _776 = _771 + 1;\n    int _780 = _771 + 2;\n    int _822 = int(a_boneIndex.y) * 3;\n    int _827 = _822 + 1;\n    int _831 = _822 + 2;\n    int _873 = int(a_boneIndex.z) * 3;\n    int _878 = _873 + 1;\n    int _882 = _873 + 2;\n    int _924 = int(a_boneIndex.w) * 3;\n    int _929 = _924 + 1;\n    int _933 = _924 + 2;\n    mat4 _672 = mat4(vec4(u_boneOffsetMatrix[_771].xyz, 0.0), vec4(u_boneOffsetMatrix[_776].xyz, 0.0), vec4(u_boneOffsetMatrix[_780].xyz, 0.0), vec4(u_boneOffsetMatrix[_771].w, u_boneOffsetMatrix[_776].w, u_boneOffsetMatrix[_780].w, 1.0)) * a_boneWeight.x;\n    mat4 _676 = mat4(vec4(u_boneOffsetMatrix[_822].xyz, 0.0), vec4(u_boneOffsetMatrix[_827].xyz, 0.0), vec4(u_boneOffsetMatrix[_831].xyz, 0.0), vec4(u_boneOffsetMatrix[_822].w, u_boneOffsetMatrix[_827].w, u_boneOffsetMatrix[_831].w, 1.0)) * a_boneWeight.y;\n    mat4 _694 = mat4(vec4(u_boneOffsetMatrix[_873].xyz, 0.0), vec4(u_boneOffsetMatrix[_878].xyz, 0.0), vec4(u_boneOffsetMatrix[_882].xyz, 0.0), vec4(u_boneOffsetMatrix[_873].w, u_boneOffsetMatrix[_878].w, u_boneOffsetMatrix[_882].w, 1.0)) * a_boneWeight.z;\n    mat4 _712 = mat4(vec4(u_boneOffsetMatrix[_924].xyz, 0.0), vec4(u_boneOffsetMatrix[_929].xyz, 0.0), vec4(u_boneOffsetMatrix[_933].xyz, 0.0), vec4(u_boneOffsetMatrix[_924].w, u_boneOffsetMatrix[_929].w, u_boneOffsetMatrix[_933].w, 1.0)) * a_boneWeight.w;\n    vec4 _716 = ((_672[0] + _676[0]) + _694[0]) + _712[0];\n    vec4 _719 = ((_672[1] + _676[1]) + _694[1]) + _712[1];\n    vec4 _722 = ((_672[2] + _676[2]) + _694[2]) + _712[2];\n    vec4 _971 = u_world * (mat4(_716, _719, _722, ((_672[3] + _676[3]) + _694[3]) + _712[3]) * a_position);\n    vec3 _560 = _971.xyz;\n    gl_Position = u_projection * (u_view * _971);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _560);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_716.xyz, _719.xyz, _722.xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_ShadowPosition = _560;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    vec4 _526 = u_world * a_position;\n    mat3 _546 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _549 = normalize(_546 * a_normal);\n    vec3 _563 = normalize(_546 * a_tangent.xyz);\n    mat3 _448 = mat3(_563, cross(_563, _549) * a_tangent.w, _549);\n    gl_Position = u_projection * (u_view * _526);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _448 * u_lightDir;\n    varying_ViewDir = _448 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _526.xyz);\n    varying_WorldNormal = _549;\n    varying_positionCamera_Fog = (u_view * vec4(_526.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    vec4 _480 = u_world * a_position;\n    vec3 _387 = _480.xyz;\n    gl_Position = u_projection * (u_view * _480);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _387);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_ShadowPosition = _387;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    int _762 = int(a_boneIndex.x) * 3;\n    int _767 = _762 + 1;\n    int _771 = _762 + 2;\n    int _813 = int(a_boneIndex.y) * 3;\n    int _818 = _813 + 1;\n    int _822 = _813 + 2;\n    int _864 = int(a_boneIndex.z) * 3;\n    int _869 = _864 + 1;\n    int _873 = _864 + 2;\n    int _915 = int(a_boneIndex.w) * 3;\n    int _920 = _915 + 1;\n    int _924 = _915 + 2;\n    mat4 _663 = mat4(vec4(u_boneOffsetMatrix[_762].xyz, 0.0), vec4(u_boneOffsetMatrix[_767].xyz, 0.0), vec4(u_boneOffsetMatrix[_771].xyz, 0.0), vec4(u_boneOffsetMatrix[_762].w, u_boneOffsetMatrix[_767].w, u_boneOffsetMatrix[_771].w, 1.0)) * a_boneWeight.x;\n    mat4 _667 = mat4(vec4(u_boneOffsetMatrix[_813].xyz, 0.0), vec4(u_boneOffsetMatrix[_818].xyz, 0.0), vec4(u_boneOffsetMatrix[_822].xyz, 0.0), vec4(u_boneOffsetMatrix[_813].w, u_boneOffsetMatrix[_818].w, u_boneOffsetMatrix[_822].w, 1.0)) * a_boneWeight.y;\n    mat4 _685 = mat4(vec4(u_boneOffsetMatrix[_864].xyz, 0.0), vec4(u_boneOffsetMatrix[_869].xyz, 0.0), vec4(u_boneOffsetMatrix[_873].xyz, 0.0), vec4(u_boneOffsetMatrix[_864].w, u_boneOffsetMatrix[_869].w, u_boneOffsetMatrix[_873].w, 1.0)) * a_boneWeight.z;\n    mat4 _703 = mat4(vec4(u_boneOffsetMatrix[_915].xyz, 0.0), vec4(u_boneOffsetMatrix[_920].xyz, 0.0), vec4(u_boneOffsetMatrix[_924].xyz, 0.0), vec4(u_boneOffsetMatrix[_915].w, u_boneOffsetMatrix[_920].w, u_boneOffsetMatrix[_924].w, 1.0)) * a_boneWeight.w;\n    vec4 _707 = ((_663[0] + _667[0]) + _685[0]) + _703[0];\n    vec4 _710 = ((_663[1] + _667[1]) + _685[1]) + _703[1];\n    vec4 _713 = ((_663[2] + _667[2]) + _685[2]) + _703[2];\n    vec4 _962 = u_world * (mat4(_707, _710, _713, ((_663[3] + _667[3]) + _685[3]) + _703[3]) * a_position);\n    gl_Position = u_projection * (u_view * _962);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _962.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_707.xyz, _710.xyz, _713.xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    float _854 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _860 = (3.0 * (_854 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _863 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _867 = floor(_860 * _863);\n    float _873 = _860 - (_867 * u_skinnedAnimationMapInfo.x);\n    float _878 = (_867 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _888 = texture2D(u_skinnedAnimationMap, vec2((_873 + 0.5) * _863, _878));\n    vec4 _898 = texture2D(u_skinnedAnimationMap, vec2((_873 + 1.5) * _863, _878));\n    vec4 _908 = texture2D(u_skinnedAnimationMap, vec2((_873 + 2.5) * _863, _878));\n    float _959 = (3.0 * (_854 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _966 = floor(_959 * _863);\n    float _972 = _959 - (_966 * u_skinnedAnimationMapInfo.x);\n    float _977 = (_966 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _987 = texture2D(u_skinnedAnimationMap, vec2((_972 + 0.5) * _863, _977));\n    vec4 _997 = texture2D(u_skinnedAnimationMap, vec2((_972 + 1.5) * _863, _977));\n    vec4 _1007 = texture2D(u_skinnedAnimationMap, vec2((_972 + 2.5) * _863, _977));\n    float _1058 = (3.0 * (_854 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1065 = floor(_1058 * _863);\n    float _1071 = _1058 - (_1065 * u_skinnedAnimationMapInfo.x);\n    float _1076 = (_1065 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1086 = texture2D(u_skinnedAnimationMap, vec2((_1071 + 0.5) * _863, _1076));\n    vec4 _1096 = texture2D(u_skinnedAnimationMap, vec2((_1071 + 1.5) * _863, _1076));\n    vec4 _1106 = texture2D(u_skinnedAnimationMap, vec2((_1071 + 2.5) * _863, _1076));\n    float _1157 = (3.0 * (_854 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1164 = floor(_1157 * _863);\n    float _1170 = _1157 - (_1164 * u_skinnedAnimationMapInfo.x);\n    float _1175 = (_1164 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1185 = texture2D(u_skinnedAnimationMap, vec2((_1170 + 0.5) * _863, _1175));\n    vec4 _1195 = texture2D(u_skinnedAnimationMap, vec2((_1170 + 1.5) * _863, _1175));\n    vec4 _1205 = texture2D(u_skinnedAnimationMap, vec2((_1170 + 2.5) * _863, _1175));\n    mat4 _750 = mat4(vec4(_888.xyz, 0.0), vec4(_898.xyz, 0.0), vec4(_908.xyz, 0.0), vec4(_888.w, _898.w, _908.w, 1.0)) * a_boneWeight.x;\n    mat4 _754 = mat4(vec4(_987.xyz, 0.0), vec4(_997.xyz, 0.0), vec4(_1007.xyz, 0.0), vec4(_987.w, _997.w, _1007.w, 1.0)) * a_boneWeight.y;\n    mat4 _772 = mat4(vec4(_1086.xyz, 0.0), vec4(_1096.xyz, 0.0), vec4(_1106.xyz, 0.0), vec4(_1086.w, _1096.w, _1106.w, 1.0)) * a_boneWeight.z;\n    mat4 _790 = mat4(vec4(_1185.xyz, 0.0), vec4(_1195.xyz, 0.0), vec4(_1205.xyz, 0.0), vec4(_1185.w, _1195.w, _1205.w, 1.0)) * a_boneWeight.w;\n    vec4 _794 = ((_750[0] + _754[0]) + _772[0]) + _790[0];\n    vec4 _797 = ((_750[1] + _754[1]) + _772[1]) + _790[1];\n    vec4 _800 = ((_750[2] + _754[2]) + _772[2]) + _790[2];\n    mat3 _812 = mat3(_794.xyz, _797.xyz, _800.xyz);\n    vec4 _1241 = u_world * (mat4(_794, _797, _800, ((_750[3] + _754[3]) + _772[3]) + _790[3]) * a_position);\n    vec3 _628 = _1241.xyz;\n    mat3 _1261 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1264 = normalize(_1261 * (_812 * a_normal));\n    vec3 _1278 = normalize(_1261 * (_812 * a_tangent.xyz).xyz);\n    mat3 _663 = mat3(_1278, cross(_1278, _1264) * a_tangent.w, _1264);\n    gl_Position = u_projection * (u_view * _1241);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _663 * u_lightDir;\n    varying_ViewDir = _663 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _628);\n    varying_WorldNormal = _1264;\n    varying_ShadowPosition = _628;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    vec4 _471 = u_world * a_position;\n    gl_Position = u_projection * (u_view * _471);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _471.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _825 = int(a_boneIndex.x) * 3;\n    int _830 = _825 + 1;\n    int _834 = _825 + 2;\n    int _876 = int(a_boneIndex.y) * 3;\n    int _881 = _876 + 1;\n    int _885 = _876 + 2;\n    int _927 = int(a_boneIndex.z) * 3;\n    int _932 = _927 + 1;\n    int _936 = _927 + 2;\n    int _978 = int(a_boneIndex.w) * 3;\n    int _983 = _978 + 1;\n    int _987 = _978 + 2;\n    mat4 _722 = mat4(vec4(u_boneOffsetMatrix[_825].xyz, 0.0), vec4(u_boneOffsetMatrix[_830].xyz, 0.0), vec4(u_boneOffsetMatrix[_834].xyz, 0.0), vec4(u_boneOffsetMatrix[_825].w, u_boneOffsetMatrix[_830].w, u_boneOffsetMatrix[_834].w, 1.0)) * a_boneWeight.x;\n    mat4 _726 = mat4(vec4(u_boneOffsetMatrix[_876].xyz, 0.0), vec4(u_boneOffsetMatrix[_881].xyz, 0.0), vec4(u_boneOffsetMatrix[_885].xyz, 0.0), vec4(u_boneOffsetMatrix[_876].w, u_boneOffsetMatrix[_881].w, u_boneOffsetMatrix[_885].w, 1.0)) * a_boneWeight.y;\n    mat4 _744 = mat4(vec4(u_boneOffsetMatrix[_927].xyz, 0.0), vec4(u_boneOffsetMatrix[_932].xyz, 0.0), vec4(u_boneOffsetMatrix[_936].xyz, 0.0), vec4(u_boneOffsetMatrix[_927].w, u_boneOffsetMatrix[_932].w, u_boneOffsetMatrix[_936].w, 1.0)) * a_boneWeight.z;\n    mat4 _762 = mat4(vec4(u_boneOffsetMatrix[_978].xyz, 0.0), vec4(u_boneOffsetMatrix[_983].xyz, 0.0), vec4(u_boneOffsetMatrix[_987].xyz, 0.0), vec4(u_boneOffsetMatrix[_978].w, u_boneOffsetMatrix[_983].w, u_boneOffsetMatrix[_987].w, 1.0)) * a_boneWeight.w;\n    mat4 _780 = u_bindTargetWorldInverse * mat4(((_722[0] + _726[0]) + _744[0]) + _762[0], ((_722[1] + _726[1]) + _744[1]) + _762[1], ((_722[2] + _726[2]) + _744[2]) + _762[2], ((_722[3] + _726[3]) + _744[3]) + _762[3]);\n    mat3 _788 = mat3(_780[0].xyz, _780[1].xyz, _780[2].xyz);\n    vec4 _1025 = u_world * (_780 * a_position);\n    mat3 _1045 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1048 = normalize(_1045 * (_788 * a_normal));\n    vec3 _1062 = normalize(_1045 * (_788 * a_tangent.xyz).xyz);\n    mat3 _625 = mat3(_1062, cross(_1062, _1048) * a_tangent.w, _1048);\n    gl_Position = u_projection * (u_view * _1025);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _625 * u_lightDir;\n    varying_ViewDir = _625 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1025.xyz);\n    varying_WorldNormal = _1048;\n    varying_positionCamera_Fog = (u_view * vec4(_1025.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _779 = int(a_boneIndex.x) * 3;\n    int _784 = _779 + 1;\n    int _788 = _779 + 2;\n    int _830 = int(a_boneIndex.y) * 3;\n    int _835 = _830 + 1;\n    int _839 = _830 + 2;\n    int _881 = int(a_boneIndex.z) * 3;\n    int _886 = _881 + 1;\n    int _890 = _881 + 2;\n    int _932 = int(a_boneIndex.w) * 3;\n    int _937 = _932 + 1;\n    int _941 = _932 + 2;\n    mat4 _676 = mat4(vec4(u_boneOffsetMatrix[_779].xyz, 0.0), vec4(u_boneOffsetMatrix[_784].xyz, 0.0), vec4(u_boneOffsetMatrix[_788].xyz, 0.0), vec4(u_boneOffsetMatrix[_779].w, u_boneOffsetMatrix[_784].w, u_boneOffsetMatrix[_788].w, 1.0)) * a_boneWeight.x;\n    mat4 _680 = mat4(vec4(u_boneOffsetMatrix[_830].xyz, 0.0), vec4(u_boneOffsetMatrix[_835].xyz, 0.0), vec4(u_boneOffsetMatrix[_839].xyz, 0.0), vec4(u_boneOffsetMatrix[_830].w, u_boneOffsetMatrix[_835].w, u_boneOffsetMatrix[_839].w, 1.0)) * a_boneWeight.y;\n    mat4 _698 = mat4(vec4(u_boneOffsetMatrix[_881].xyz, 0.0), vec4(u_boneOffsetMatrix[_886].xyz, 0.0), vec4(u_boneOffsetMatrix[_890].xyz, 0.0), vec4(u_boneOffsetMatrix[_881].w, u_boneOffsetMatrix[_886].w, u_boneOffsetMatrix[_890].w, 1.0)) * a_boneWeight.z;\n    mat4 _716 = mat4(vec4(u_boneOffsetMatrix[_932].xyz, 0.0), vec4(u_boneOffsetMatrix[_937].xyz, 0.0), vec4(u_boneOffsetMatrix[_941].xyz, 0.0), vec4(u_boneOffsetMatrix[_932].w, u_boneOffsetMatrix[_937].w, u_boneOffsetMatrix[_941].w, 1.0)) * a_boneWeight.w;\n    mat4 _734 = u_bindTargetWorldInverse * mat4(((_676[0] + _680[0]) + _698[0]) + _716[0], ((_676[1] + _680[1]) + _698[1]) + _716[1], ((_676[2] + _680[2]) + _698[2]) + _716[2], ((_676[3] + _680[3]) + _698[3]) + _716[3]);\n    vec4 _979 = u_world * (_734 * a_position);\n    vec3 _564 = _979.xyz;\n    gl_Position = u_projection * (u_view * _979);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _564);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_734[0].xyz, _734[1].xyz, _734[2].xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_ShadowPosition = _564;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\n\nvoid main()\n{\n    int _792 = int(a_boneIndex.x) * 3;\n    int _797 = _792 + 1;\n    int _801 = _792 + 2;\n    int _843 = int(a_boneIndex.y) * 3;\n    int _848 = _843 + 1;\n    int _852 = _843 + 2;\n    int _894 = int(a_boneIndex.z) * 3;\n    int _899 = _894 + 1;\n    int _903 = _894 + 2;\n    int _945 = int(a_boneIndex.w) * 3;\n    int _950 = _945 + 1;\n    int _954 = _945 + 2;\n    mat4 _693 = mat4(vec4(u_boneOffsetMatrix[_792].xyz, 0.0), vec4(u_boneOffsetMatrix[_797].xyz, 0.0), vec4(u_boneOffsetMatrix[_801].xyz, 0.0), vec4(u_boneOffsetMatrix[_792].w, u_boneOffsetMatrix[_797].w, u_boneOffsetMatrix[_801].w, 1.0)) * a_boneWeight.x;\n    mat4 _697 = mat4(vec4(u_boneOffsetMatrix[_843].xyz, 0.0), vec4(u_boneOffsetMatrix[_848].xyz, 0.0), vec4(u_boneOffsetMatrix[_852].xyz, 0.0), vec4(u_boneOffsetMatrix[_843].w, u_boneOffsetMatrix[_848].w, u_boneOffsetMatrix[_852].w, 1.0)) * a_boneWeight.y;\n    mat4 _715 = mat4(vec4(u_boneOffsetMatrix[_894].xyz, 0.0), vec4(u_boneOffsetMatrix[_899].xyz, 0.0), vec4(u_boneOffsetMatrix[_903].xyz, 0.0), vec4(u_boneOffsetMatrix[_894].w, u_boneOffsetMatrix[_899].w, u_boneOffsetMatrix[_903].w, 1.0)) * a_boneWeight.z;\n    mat4 _733 = mat4(vec4(u_boneOffsetMatrix[_945].xyz, 0.0), vec4(u_boneOffsetMatrix[_950].xyz, 0.0), vec4(u_boneOffsetMatrix[_954].xyz, 0.0), vec4(u_boneOffsetMatrix[_945].w, u_boneOffsetMatrix[_950].w, u_boneOffsetMatrix[_954].w, 1.0)) * a_boneWeight.w;\n    vec4 _737 = ((_693[0] + _697[0]) + _715[0]) + _733[0];\n    vec4 _740 = ((_693[1] + _697[1]) + _715[1]) + _733[1];\n    vec4 _743 = ((_693[2] + _697[2]) + _715[2]) + _733[2];\n    mat3 _755 = mat3(_737.xyz, _740.xyz, _743.xyz);\n    vec4 _992 = u_world * (mat4(_737, _740, _743, ((_693[3] + _697[3]) + _715[3]) + _733[3]) * a_position);\n    mat3 _1012 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1015 = normalize(_1012 * (_755 * a_normal));\n    vec3 _1029 = normalize(_1012 * (_755 * a_tangent.xyz).xyz);\n    mat3 _607 = mat3(_1029, cross(_1029, _1015) * a_tangent.w, _1015);\n    gl_Position = u_projection * (u_view * _992);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _607 * u_lightDir;\n    varying_ViewDir = _607 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _992.xyz);\n    varying_WorldNormal = _1015;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _796 = int(a_boneIndex.x) * 3;\n    int _801 = _796 + 1;\n    int _805 = _796 + 2;\n    int _847 = int(a_boneIndex.y) * 3;\n    int _852 = _847 + 1;\n    int _856 = _847 + 2;\n    int _898 = int(a_boneIndex.z) * 3;\n    int _903 = _898 + 1;\n    int _907 = _898 + 2;\n    int _949 = int(a_boneIndex.w) * 3;\n    int _954 = _949 + 1;\n    int _958 = _949 + 2;\n    mat4 _697 = mat4(vec4(u_boneOffsetMatrix[_796].xyz, 0.0), vec4(u_boneOffsetMatrix[_801].xyz, 0.0), vec4(u_boneOffsetMatrix[_805].xyz, 0.0), vec4(u_boneOffsetMatrix[_796].w, u_boneOffsetMatrix[_801].w, u_boneOffsetMatrix[_805].w, 1.0)) * a_boneWeight.x;\n    mat4 _701 = mat4(vec4(u_boneOffsetMatrix[_847].xyz, 0.0), vec4(u_boneOffsetMatrix[_852].xyz, 0.0), vec4(u_boneOffsetMatrix[_856].xyz, 0.0), vec4(u_boneOffsetMatrix[_847].w, u_boneOffsetMatrix[_852].w, u_boneOffsetMatrix[_856].w, 1.0)) * a_boneWeight.y;\n    mat4 _719 = mat4(vec4(u_boneOffsetMatrix[_898].xyz, 0.0), vec4(u_boneOffsetMatrix[_903].xyz, 0.0), vec4(u_boneOffsetMatrix[_907].xyz, 0.0), vec4(u_boneOffsetMatrix[_898].w, u_boneOffsetMatrix[_903].w, u_boneOffsetMatrix[_907].w, 1.0)) * a_boneWeight.z;\n    mat4 _737 = mat4(vec4(u_boneOffsetMatrix[_949].xyz, 0.0), vec4(u_boneOffsetMatrix[_954].xyz, 0.0), vec4(u_boneOffsetMatrix[_958].xyz, 0.0), vec4(u_boneOffsetMatrix[_949].w, u_boneOffsetMatrix[_954].w, u_boneOffsetMatrix[_958].w, 1.0)) * a_boneWeight.w;\n    vec4 _741 = ((_697[0] + _701[0]) + _719[0]) + _737[0];\n    vec4 _744 = ((_697[1] + _701[1]) + _719[1]) + _737[1];\n    vec4 _747 = ((_697[2] + _701[2]) + _719[2]) + _737[2];\n    vec4 _996 = u_world * (mat4(_741, _744, _747, ((_697[3] + _701[3]) + _719[3]) + _737[3]) * a_position);\n    vec3 _574 = _996.xyz;\n    gl_Position = u_projection * (u_view * _996);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _574);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_741.xyz, _744.xyz, _747.xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_996.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _574;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\n\nvoid main()\n{\n    vec4 _501 = u_world * a_position;\n    mat3 _521 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _524 = normalize(_521 * a_normal);\n    vec3 _538 = normalize(_521 * a_tangent.xyz);\n    mat3 _434 = mat3(_538, cross(_538, _524) * a_tangent.w, _524);\n    gl_Position = u_projection * (u_view * _501);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _434 * u_lightDir;\n    varying_ViewDir = _434 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _501.xyz);\n    varying_WorldNormal = _524;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    vec4 _505 = u_world * a_position;\n    vec3 _401 = _505.xyz;\n    gl_Position = u_projection * (u_view * _505);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _401);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_505.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _401;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _787 = int(a_boneIndex.x) * 3;\n    int _792 = _787 + 1;\n    int _796 = _787 + 2;\n    int _838 = int(a_boneIndex.y) * 3;\n    int _843 = _838 + 1;\n    int _847 = _838 + 2;\n    int _889 = int(a_boneIndex.z) * 3;\n    int _894 = _889 + 1;\n    int _898 = _889 + 2;\n    int _940 = int(a_boneIndex.w) * 3;\n    int _945 = _940 + 1;\n    int _949 = _940 + 2;\n    mat4 _688 = mat4(vec4(u_boneOffsetMatrix[_787].xyz, 0.0), vec4(u_boneOffsetMatrix[_792].xyz, 0.0), vec4(u_boneOffsetMatrix[_796].xyz, 0.0), vec4(u_boneOffsetMatrix[_787].w, u_boneOffsetMatrix[_792].w, u_boneOffsetMatrix[_796].w, 1.0)) * a_boneWeight.x;\n    mat4 _692 = mat4(vec4(u_boneOffsetMatrix[_838].xyz, 0.0), vec4(u_boneOffsetMatrix[_843].xyz, 0.0), vec4(u_boneOffsetMatrix[_847].xyz, 0.0), vec4(u_boneOffsetMatrix[_838].w, u_boneOffsetMatrix[_843].w, u_boneOffsetMatrix[_847].w, 1.0)) * a_boneWeight.y;\n    mat4 _710 = mat4(vec4(u_boneOffsetMatrix[_889].xyz, 0.0), vec4(u_boneOffsetMatrix[_894].xyz, 0.0), vec4(u_boneOffsetMatrix[_898].xyz, 0.0), vec4(u_boneOffsetMatrix[_889].w, u_boneOffsetMatrix[_894].w, u_boneOffsetMatrix[_898].w, 1.0)) * a_boneWeight.z;\n    mat4 _728 = mat4(vec4(u_boneOffsetMatrix[_940].xyz, 0.0), vec4(u_boneOffsetMatrix[_945].xyz, 0.0), vec4(u_boneOffsetMatrix[_949].xyz, 0.0), vec4(u_boneOffsetMatrix[_940].w, u_boneOffsetMatrix[_945].w, u_boneOffsetMatrix[_949].w, 1.0)) * a_boneWeight.w;\n    vec4 _732 = ((_688[0] + _692[0]) + _710[0]) + _728[0];\n    vec4 _735 = ((_688[1] + _692[1]) + _710[1]) + _728[1];\n    vec4 _738 = ((_688[2] + _692[2]) + _710[2]) + _728[2];\n    vec4 _987 = u_world * (mat4(_732, _735, _738, ((_688[3] + _692[3]) + _710[3]) + _728[3]) * a_position);\n    gl_Position = u_projection * (u_view * _987);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _987.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_732.xyz, _735.xyz, _738.xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_987.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    float _879 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _885 = (3.0 * (_879 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _888 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _892 = floor(_885 * _888);\n    float _898 = _885 - (_892 * u_skinnedAnimationMapInfo.x);\n    float _903 = (_892 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _913 = texture2D(u_skinnedAnimationMap, vec2((_898 + 0.5) * _888, _903));\n    vec4 _923 = texture2D(u_skinnedAnimationMap, vec2((_898 + 1.5) * _888, _903));\n    vec4 _933 = texture2D(u_skinnedAnimationMap, vec2((_898 + 2.5) * _888, _903));\n    float _984 = (3.0 * (_879 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _991 = floor(_984 * _888);\n    float _997 = _984 - (_991 * u_skinnedAnimationMapInfo.x);\n    float _1002 = (_991 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1012 = texture2D(u_skinnedAnimationMap, vec2((_997 + 0.5) * _888, _1002));\n    vec4 _1022 = texture2D(u_skinnedAnimationMap, vec2((_997 + 1.5) * _888, _1002));\n    vec4 _1032 = texture2D(u_skinnedAnimationMap, vec2((_997 + 2.5) * _888, _1002));\n    float _1083 = (3.0 * (_879 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1090 = floor(_1083 * _888);\n    float _1096 = _1083 - (_1090 * u_skinnedAnimationMapInfo.x);\n    float _1101 = (_1090 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1111 = texture2D(u_skinnedAnimationMap, vec2((_1096 + 0.5) * _888, _1101));\n    vec4 _1121 = texture2D(u_skinnedAnimationMap, vec2((_1096 + 1.5) * _888, _1101));\n    vec4 _1131 = texture2D(u_skinnedAnimationMap, vec2((_1096 + 2.5) * _888, _1101));\n    float _1182 = (3.0 * (_879 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1189 = floor(_1182 * _888);\n    float _1195 = _1182 - (_1189 * u_skinnedAnimationMapInfo.x);\n    float _1200 = (_1189 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1210 = texture2D(u_skinnedAnimationMap, vec2((_1195 + 0.5) * _888, _1200));\n    vec4 _1220 = texture2D(u_skinnedAnimationMap, vec2((_1195 + 1.5) * _888, _1200));\n    vec4 _1230 = texture2D(u_skinnedAnimationMap, vec2((_1195 + 2.5) * _888, _1200));\n    mat4 _775 = mat4(vec4(_913.xyz, 0.0), vec4(_923.xyz, 0.0), vec4(_933.xyz, 0.0), vec4(_913.w, _923.w, _933.w, 1.0)) * a_boneWeight.x;\n    mat4 _779 = mat4(vec4(_1012.xyz, 0.0), vec4(_1022.xyz, 0.0), vec4(_1032.xyz, 0.0), vec4(_1012.w, _1022.w, _1032.w, 1.0)) * a_boneWeight.y;\n    mat4 _797 = mat4(vec4(_1111.xyz, 0.0), vec4(_1121.xyz, 0.0), vec4(_1131.xyz, 0.0), vec4(_1111.w, _1121.w, _1131.w, 1.0)) * a_boneWeight.z;\n    mat4 _815 = mat4(vec4(_1210.xyz, 0.0), vec4(_1220.xyz, 0.0), vec4(_1230.xyz, 0.0), vec4(_1210.w, _1220.w, _1230.w, 1.0)) * a_boneWeight.w;\n    vec4 _819 = ((_775[0] + _779[0]) + _797[0]) + _815[0];\n    vec4 _822 = ((_775[1] + _779[1]) + _797[1]) + _815[1];\n    vec4 _825 = ((_775[2] + _779[2]) + _797[2]) + _815[2];\n    mat3 _837 = mat3(_819.xyz, _822.xyz, _825.xyz);\n    vec4 _1266 = u_world * (mat4(_819, _822, _825, ((_775[3] + _779[3]) + _797[3]) + _815[3]) * a_position);\n    vec3 _642 = _1266.xyz;\n    mat3 _1286 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1289 = normalize(_1286 * (_837 * a_normal));\n    vec3 _1303 = normalize(_1286 * (_837 * a_tangent.xyz).xyz);\n    mat3 _677 = mat3(_1303, cross(_1303, _1289) * a_tangent.w, _1289);\n    gl_Position = u_projection * (u_view * _1266);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _677 * u_lightDir;\n    varying_ViewDir = _677 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _642);\n    varying_WorldNormal = _1289;\n    varying_positionCamera_Fog = (u_view * vec4(_1266.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _642;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    vec4 _496 = u_world * a_position;\n    gl_Position = u_projection * (u_view * _496);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _496.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_496.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\n\nvoid main()\n{\n    int _800 = int(a_boneIndex.x) * 3;\n    int _805 = _800 + 1;\n    int _809 = _800 + 2;\n    int _851 = int(a_boneIndex.y) * 3;\n    int _856 = _851 + 1;\n    int _860 = _851 + 2;\n    int _902 = int(a_boneIndex.z) * 3;\n    int _907 = _902 + 1;\n    int _911 = _902 + 2;\n    int _953 = int(a_boneIndex.w) * 3;\n    int _958 = _953 + 1;\n    int _962 = _953 + 2;\n    mat4 _697 = mat4(vec4(u_boneOffsetMatrix[_800].xyz, 0.0), vec4(u_boneOffsetMatrix[_805].xyz, 0.0), vec4(u_boneOffsetMatrix[_809].xyz, 0.0), vec4(u_boneOffsetMatrix[_800].w, u_boneOffsetMatrix[_805].w, u_boneOffsetMatrix[_809].w, 1.0)) * a_boneWeight.x;\n    mat4 _701 = mat4(vec4(u_boneOffsetMatrix[_851].xyz, 0.0), vec4(u_boneOffsetMatrix[_856].xyz, 0.0), vec4(u_boneOffsetMatrix[_860].xyz, 0.0), vec4(u_boneOffsetMatrix[_851].w, u_boneOffsetMatrix[_856].w, u_boneOffsetMatrix[_860].w, 1.0)) * a_boneWeight.y;\n    mat4 _719 = mat4(vec4(u_boneOffsetMatrix[_902].xyz, 0.0), vec4(u_boneOffsetMatrix[_907].xyz, 0.0), vec4(u_boneOffsetMatrix[_911].xyz, 0.0), vec4(u_boneOffsetMatrix[_902].w, u_boneOffsetMatrix[_907].w, u_boneOffsetMatrix[_911].w, 1.0)) * a_boneWeight.z;\n    mat4 _737 = mat4(vec4(u_boneOffsetMatrix[_953].xyz, 0.0), vec4(u_boneOffsetMatrix[_958].xyz, 0.0), vec4(u_boneOffsetMatrix[_962].xyz, 0.0), vec4(u_boneOffsetMatrix[_953].w, u_boneOffsetMatrix[_958].w, u_boneOffsetMatrix[_962].w, 1.0)) * a_boneWeight.w;\n    mat4 _755 = u_bindTargetWorldInverse * mat4(((_697[0] + _701[0]) + _719[0]) + _737[0], ((_697[1] + _701[1]) + _719[1]) + _737[1], ((_697[2] + _701[2]) + _719[2]) + _737[2], ((_697[3] + _701[3]) + _719[3]) + _737[3]);\n    mat3 _763 = mat3(_755[0].xyz, _755[1].xyz, _755[2].xyz);\n    vec4 _1000 = u_world * (_755 * a_position);\n    mat3 _1020 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1023 = normalize(_1020 * (_763 * a_normal));\n    vec3 _1037 = normalize(_1020 * (_763 * a_tangent.xyz).xyz);\n    mat3 _611 = mat3(_1037, cross(_1037, _1023) * a_tangent.w, _1023);\n    gl_Position = u_projection * (u_view * _1000);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _611 * u_lightDir;\n    varying_ViewDir = _611 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1000.xyz);\n    varying_WorldNormal = _1023;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _804 = int(a_boneIndex.x) * 3;\n    int _809 = _804 + 1;\n    int _813 = _804 + 2;\n    int _855 = int(a_boneIndex.y) * 3;\n    int _860 = _855 + 1;\n    int _864 = _855 + 2;\n    int _906 = int(a_boneIndex.z) * 3;\n    int _911 = _906 + 1;\n    int _915 = _906 + 2;\n    int _957 = int(a_boneIndex.w) * 3;\n    int _962 = _957 + 1;\n    int _966 = _957 + 2;\n    mat4 _701 = mat4(vec4(u_boneOffsetMatrix[_804].xyz, 0.0), vec4(u_boneOffsetMatrix[_809].xyz, 0.0), vec4(u_boneOffsetMatrix[_813].xyz, 0.0), vec4(u_boneOffsetMatrix[_804].w, u_boneOffsetMatrix[_809].w, u_boneOffsetMatrix[_813].w, 1.0)) * a_boneWeight.x;\n    mat4 _705 = mat4(vec4(u_boneOffsetMatrix[_855].xyz, 0.0), vec4(u_boneOffsetMatrix[_860].xyz, 0.0), vec4(u_boneOffsetMatrix[_864].xyz, 0.0), vec4(u_boneOffsetMatrix[_855].w, u_boneOffsetMatrix[_860].w, u_boneOffsetMatrix[_864].w, 1.0)) * a_boneWeight.y;\n    mat4 _723 = mat4(vec4(u_boneOffsetMatrix[_906].xyz, 0.0), vec4(u_boneOffsetMatrix[_911].xyz, 0.0), vec4(u_boneOffsetMatrix[_915].xyz, 0.0), vec4(u_boneOffsetMatrix[_906].w, u_boneOffsetMatrix[_911].w, u_boneOffsetMatrix[_915].w, 1.0)) * a_boneWeight.z;\n    mat4 _741 = mat4(vec4(u_boneOffsetMatrix[_957].xyz, 0.0), vec4(u_boneOffsetMatrix[_962].xyz, 0.0), vec4(u_boneOffsetMatrix[_966].xyz, 0.0), vec4(u_boneOffsetMatrix[_957].w, u_boneOffsetMatrix[_962].w, u_boneOffsetMatrix[_966].w, 1.0)) * a_boneWeight.w;\n    mat4 _759 = u_bindTargetWorldInverse * mat4(((_701[0] + _705[0]) + _723[0]) + _741[0], ((_701[1] + _705[1]) + _723[1]) + _741[1], ((_701[2] + _705[2]) + _723[2]) + _741[2], ((_701[3] + _705[3]) + _723[3]) + _741[3]);\n    vec4 _1004 = u_world * (_759 * a_position);\n    vec3 _578 = _1004.xyz;\n    gl_Position = u_projection * (u_view * _1004);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _578);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_759[0].xyz, _759[1].xyz, _759[2].xyz) * a_normal));\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_1004.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _578;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\n\nvoid main()\n{\n    highp vec4 _275 = (texture2D(_MainTex, varying_TexCoord) * _Color) * _AlbedoIntensity;\n    highp vec3 _278 = normalize(varying_LightDir);\n    highp vec3 _284 = normalize(varying_WorldNormal);\n    gl_FragData[0] = vec4(_275.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_278, _284))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _278), _284)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _275.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\n\nvoid main()\n{\n    highp vec4 _300 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _308 = (_300 * _Color) * _AlbedoIntensity;\n    highp vec3 _311 = normalize(varying_LightDir);\n    highp vec2 _370 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _381 = vec3(_370, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_370, _370))));\n    gl_FragData[0] = vec4(_308.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_311, _381))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _311), _381)), _Shininess * 128.0)) * (_SpecColor.xyz * _300.w))), _308.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _614 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _622 = (_614 * _Color) * _AlbedoIntensity;\n    highp float _624 = _622.w;\n    if ((_624 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _639 = normalize(varying_WorldNormal);\n    highp vec4 _747 = vec4(varying_ShadowPosition, 1.0);\n    highp float _751 = -(u_view * _747).z;\n    bool _764 = true && (_751 < u_csmFarBounds.x);\n    highp float _1057 = 0.0;\n    if (_764)\n    {\n        highp vec3 _779 = ((u_csmLightSpaceMatrices[0] * _747).xyz * 0.5) + vec3(0.5);\n        highp float _783 = _779.x;\n        highp float _787 = _779.y;\n        highp float _797 = (((_779.z + step(_783, 0.001000000047497451305389404296875)) + step(_787, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _783)) + step(0.999000012874603271484375, _787);\n        highp float _1054 = 0.0;\n        for (int SPIRV_Cross_Dummy268 = 0; SPIRV_Cross_Dummy268 < 1; SPIRV_Cross_Dummy268++)\n        {\n            if (_797 > 1.0)\n            {\n                _1054 = 1.0;\n                break;\n            }\n            highp float _848 = _797 - 0.001000000047497451305389404296875;\n            highp vec2 _854 = ((_779.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _865 = fract(_854 * vec2(2048.0));\n            highp float _920 = _865.y;\n            _1054 = mix(mix(float(_848 < dot(texture2D(u_shadowMapTex, _854), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_848 < dot(texture2D(u_shadowMapTex, _854 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _920), mix(float(_848 < dot(texture2D(u_shadowMapTex, _854 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_848 < dot(texture2D(u_shadowMapTex, _854 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _920), _865.x);\n            break;\n        }\n        _1057 = _1054;\n    }\n    else\n    {\n        _1057 = 1.0;\n    }\n    bool _1383 = _764 ? true : false;\n    bool _1075 = (!_1383) && (_751 < u_csmFarBounds.y);\n    highp float _1166 = 0.0;\n    if (_1075)\n    {\n        highp vec3 _1086 = ((u_csmLightSpaceMatrices[1] * _747).xyz * 0.5) + vec3(0.5);\n        highp float _1088 = _1086.x;\n        highp float _1091 = _1086.y;\n        highp float _1099 = (((_1086.z + step(_1088, 0.001000000047497451305389404296875)) + step(_1091, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1088)) + step(0.999000012874603271484375, _1091);\n        highp float _1163 = 0.0;\n        for (int SPIRV_Cross_Dummy344 = 0; SPIRV_Cross_Dummy344 < 1; SPIRV_Cross_Dummy344++)\n        {\n            if (_1099 > 1.0)\n            {\n                _1163 = 1.0;\n                break;\n            }\n            highp float _1117 = _1099 - 0.001000000047497451305389404296875;\n            highp vec2 _1121 = ((_1086.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1128 = fract(_1121 * vec2(2048.0));\n            highp float _1156 = _1128.y;\n            _1163 = mix(mix(float(_1117 < dot(texture2D(u_shadowMapTex, _1121), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1117 < dot(texture2D(u_shadowMapTex, _1121 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1156), mix(float(_1117 < dot(texture2D(u_shadowMapTex, _1121 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1117 < dot(texture2D(u_shadowMapTex, _1121 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1156), _1128.x);\n            break;\n        }\n        _1166 = _1163;\n    }\n    else\n    {\n        _1166 = _1057;\n    }\n    bool _1384 = _1075 ? true : _1383;\n    bool _1180 = (!_1384) && (_751 < u_csmFarBounds.z);\n    highp float _1271 = 0.0;\n    if (_1180)\n    {\n        highp vec3 _1191 = ((u_csmLightSpaceMatrices[2] * _747).xyz * 0.5) + vec3(0.5);\n        highp float _1193 = _1191.x;\n        highp float _1196 = _1191.y;\n        highp float _1204 = (((_1191.z + step(_1193, 0.001000000047497451305389404296875)) + step(_1196, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1193)) + step(0.999000012874603271484375, _1196);\n        highp float _1268 = 0.0;\n        for (int SPIRV_Cross_Dummy420 = 0; SPIRV_Cross_Dummy420 < 1; SPIRV_Cross_Dummy420++)\n        {\n            if (_1204 > 1.0)\n            {\n                _1268 = 1.0;\n                break;\n            }\n            highp float _1222 = _1204 - 0.001000000047497451305389404296875;\n            highp vec2 _1226 = ((_1191.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1233 = fract(_1226 * vec2(2048.0));\n            highp float _1261 = _1233.y;\n            _1268 = mix(mix(float(_1222 < dot(texture2D(u_shadowMapTex, _1226), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1222 < dot(texture2D(u_shadowMapTex, _1226 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1261), mix(float(_1222 < dot(texture2D(u_shadowMapTex, _1226 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1222 < dot(texture2D(u_shadowMapTex, _1226 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1261), _1233.x);\n            break;\n        }\n        _1271 = _1268;\n    }\n    else\n    {\n        _1271 = _1166;\n    }\n    highp float _1376 = 0.0;\n    if ((!(_1180 ? true : _1384)) && (_751 < u_csmFarBounds.w))\n    {\n        highp vec3 _1296 = ((u_csmLightSpaceMatrices[3] * _747).xyz * 0.5) + vec3(0.5);\n        highp float _1298 = _1296.x;\n        highp float _1301 = _1296.y;\n        highp float _1309 = (((_1296.z + step(_1298, 0.001000000047497451305389404296875)) + step(_1301, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1298)) + step(0.999000012874603271484375, _1301);\n        highp float _1373 = 0.0;\n        for (int SPIRV_Cross_Dummy490 = 0; SPIRV_Cross_Dummy490 < 1; SPIRV_Cross_Dummy490++)\n        {\n            if (_1309 > 1.0)\n            {\n                _1373 = 1.0;\n                break;\n            }\n            highp float _1327 = _1309 - 0.001000000047497451305389404296875;\n            highp vec2 _1331 = ((_1296.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1338 = fract(_1331 * vec2(2048.0));\n            highp float _1366 = _1338.y;\n            _1373 = mix(mix(float(_1327 < dot(texture2D(u_shadowMapTex, _1331), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1327 < dot(texture2D(u_shadowMapTex, _1331 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1366), mix(float(_1327 < dot(texture2D(u_shadowMapTex, _1331 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1327 < dot(texture2D(u_shadowMapTex, _1331 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1366), _1338.x);\n            break;\n        }\n        _1376 = _1373;\n    }\n    else\n    {\n        _1376 = _1271;\n    }\n    highp vec3 _660 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _684 = vec4(_622.xyz * (min(_660, mix(max(_660 - (u_lightColor * (clamp(dot(_639, u_lightDir), 0.0, 1.0) * (1.0 - _1376))), u_shadowColor), _660, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _639)), _Shininess * 128.0)) * (_SpecColor.xyz * _614.w))), _624);\n    highp vec3 _700 = _684.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_700.x, _700.y, _700.z, _684.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _848 = int(a_boneIndex.x) * 3;\n    int _853 = _848 + 1;\n    int _857 = _848 + 2;\n    int _899 = int(a_boneIndex.y) * 3;\n    int _904 = _899 + 1;\n    int _908 = _899 + 2;\n    int _950 = int(a_boneIndex.z) * 3;\n    int _955 = _950 + 1;\n    int _959 = _950 + 2;\n    int _1001 = int(a_boneIndex.w) * 3;\n    int _1006 = _1001 + 1;\n    int _1010 = _1001 + 2;\n    mat4 _745 = mat4(vec4(u_boneOffsetMatrix[_848].xyz, 0.0), vec4(u_boneOffsetMatrix[_853].xyz, 0.0), vec4(u_boneOffsetMatrix[_857].xyz, 0.0), vec4(u_boneOffsetMatrix[_848].w, u_boneOffsetMatrix[_853].w, u_boneOffsetMatrix[_857].w, 1.0)) * a_boneWeight.x;\n    mat4 _749 = mat4(vec4(u_boneOffsetMatrix[_899].xyz, 0.0), vec4(u_boneOffsetMatrix[_904].xyz, 0.0), vec4(u_boneOffsetMatrix[_908].xyz, 0.0), vec4(u_boneOffsetMatrix[_899].w, u_boneOffsetMatrix[_904].w, u_boneOffsetMatrix[_908].w, 1.0)) * a_boneWeight.y;\n    mat4 _767 = mat4(vec4(u_boneOffsetMatrix[_950].xyz, 0.0), vec4(u_boneOffsetMatrix[_955].xyz, 0.0), vec4(u_boneOffsetMatrix[_959].xyz, 0.0), vec4(u_boneOffsetMatrix[_950].w, u_boneOffsetMatrix[_955].w, u_boneOffsetMatrix[_959].w, 1.0)) * a_boneWeight.z;\n    mat4 _785 = mat4(vec4(u_boneOffsetMatrix[_1001].xyz, 0.0), vec4(u_boneOffsetMatrix[_1006].xyz, 0.0), vec4(u_boneOffsetMatrix[_1010].xyz, 0.0), vec4(u_boneOffsetMatrix[_1001].w, u_boneOffsetMatrix[_1006].w, u_boneOffsetMatrix[_1010].w, 1.0)) * a_boneWeight.w;\n    mat4 _803 = u_bindTargetWorldInverse * mat4(((_745[0] + _749[0]) + _767[0]) + _785[0], ((_745[1] + _749[1]) + _767[1]) + _785[1], ((_745[2] + _749[2]) + _767[2]) + _785[2], ((_745[3] + _749[3]) + _767[3]) + _785[3]);\n    mat3 _811 = mat3(_803[0].xyz, _803[1].xyz, _803[2].xyz);\n    vec4 _1048 = u_world * (_803 * a_position);\n    vec3 _603 = _1048.xyz;\n    mat3 _1068 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1071 = normalize(_1068 * (_811 * a_normal));\n    vec3 _1085 = normalize(_1068 * (_811 * a_tangent.xyz).xyz);\n    mat3 _638 = mat3(_1085, cross(_1085, _1071) * a_tangent.w, _1071);\n    gl_Position = u_projection * (u_view * _1048);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _638 * u_lightDir;\n    varying_ViewDir = _638 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _603);\n    varying_WorldNormal = _1071;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_ShadowPosition = _603;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _654 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _662 = (_654 * _Color) * _AlbedoIntensity;\n    highp float _664 = _662.w;\n    if ((_664 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _685 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _765 = (_685.xy - vec2(0.5)) * 2.0;\n    highp vec4 _819 = vec4(varying_ShadowPosition, 1.0);\n    highp float _823 = -(u_view * _819).z;\n    bool _836 = true && (_823 < u_csmFarBounds.x);\n    highp float _1128 = 0.0;\n    if (_836)\n    {\n        highp vec3 _851 = ((u_csmLightSpaceMatrices[0] * _819).xyz * 0.5) + vec3(0.5);\n        highp float _855 = _851.x;\n        highp float _859 = _851.y;\n        highp float _869 = (((_851.z + step(_855, 0.001000000047497451305389404296875)) + step(_859, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _855)) + step(0.999000012874603271484375, _859);\n        highp float _1125 = 0.0;\n        for (int SPIRV_Cross_Dummy277 = 0; SPIRV_Cross_Dummy277 < 1; SPIRV_Cross_Dummy277++)\n        {\n            if (_869 > 1.0)\n            {\n                _1125 = 1.0;\n                break;\n            }\n            highp float _920 = _869 - 0.001000000047497451305389404296875;\n            highp vec2 _926 = ((_851.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _937 = fract(_926 * vec2(2048.0));\n            highp float _992 = _937.y;\n            _1125 = mix(mix(float(_920 < dot(texture2D(u_shadowMapTex, _926), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_920 < dot(texture2D(u_shadowMapTex, _926 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _992), mix(float(_920 < dot(texture2D(u_shadowMapTex, _926 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_920 < dot(texture2D(u_shadowMapTex, _926 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _992), _937.x);\n            break;\n        }\n        _1128 = _1125;\n    }\n    else\n    {\n        _1128 = 1.0;\n    }\n    bool _1455 = _836 ? true : false;\n    bool _1147 = (!_1455) && (_823 < u_csmFarBounds.y);\n    highp float _1238 = 0.0;\n    if (_1147)\n    {\n        highp vec3 _1158 = ((u_csmLightSpaceMatrices[1] * _819).xyz * 0.5) + vec3(0.5);\n        highp float _1160 = _1158.x;\n        highp float _1163 = _1158.y;\n        highp float _1171 = (((_1158.z + step(_1160, 0.001000000047497451305389404296875)) + step(_1163, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1160)) + step(0.999000012874603271484375, _1163);\n        highp float _1235 = 0.0;\n        for (int SPIRV_Cross_Dummy353 = 0; SPIRV_Cross_Dummy353 < 1; SPIRV_Cross_Dummy353++)\n        {\n            if (_1171 > 1.0)\n            {\n                _1235 = 1.0;\n                break;\n            }\n            highp float _1189 = _1171 - 0.001000000047497451305389404296875;\n            highp vec2 _1193 = ((_1158.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1200 = fract(_1193 * vec2(2048.0));\n            highp float _1228 = _1200.y;\n            _1235 = mix(mix(float(_1189 < dot(texture2D(u_shadowMapTex, _1193), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1189 < dot(texture2D(u_shadowMapTex, _1193 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1228), mix(float(_1189 < dot(texture2D(u_shadowMapTex, _1193 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1189 < dot(texture2D(u_shadowMapTex, _1193 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1228), _1200.x);\n            break;\n        }\n        _1238 = _1235;\n    }\n    else\n    {\n        _1238 = _1128;\n    }\n    bool _1456 = _1147 ? true : _1455;\n    bool _1252 = (!_1456) && (_823 < u_csmFarBounds.z);\n    highp float _1343 = 0.0;\n    if (_1252)\n    {\n        highp vec3 _1263 = ((u_csmLightSpaceMatrices[2] * _819).xyz * 0.5) + vec3(0.5);\n        highp float _1265 = _1263.x;\n        highp float _1268 = _1263.y;\n        highp float _1276 = (((_1263.z + step(_1265, 0.001000000047497451305389404296875)) + step(_1268, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1265)) + step(0.999000012874603271484375, _1268);\n        highp float _1340 = 0.0;\n        for (int SPIRV_Cross_Dummy429 = 0; SPIRV_Cross_Dummy429 < 1; SPIRV_Cross_Dummy429++)\n        {\n            if (_1276 > 1.0)\n            {\n                _1340 = 1.0;\n                break;\n            }\n            highp float _1294 = _1276 - 0.001000000047497451305389404296875;\n            highp vec2 _1298 = ((_1263.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1305 = fract(_1298 * vec2(2048.0));\n            highp float _1333 = _1305.y;\n            _1340 = mix(mix(float(_1294 < dot(texture2D(u_shadowMapTex, _1298), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1294 < dot(texture2D(u_shadowMapTex, _1298 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1333), mix(float(_1294 < dot(texture2D(u_shadowMapTex, _1298 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1294 < dot(texture2D(u_shadowMapTex, _1298 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1333), _1305.x);\n            break;\n        }\n        _1343 = _1340;\n    }\n    else\n    {\n        _1343 = _1238;\n    }\n    highp float _1448 = 0.0;\n    if ((!(_1252 ? true : _1456)) && (_823 < u_csmFarBounds.w))\n    {\n        highp vec3 _1368 = ((u_csmLightSpaceMatrices[3] * _819).xyz * 0.5) + vec3(0.5);\n        highp float _1370 = _1368.x;\n        highp float _1373 = _1368.y;\n        highp float _1381 = (((_1368.z + step(_1370, 0.001000000047497451305389404296875)) + step(_1373, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1370)) + step(0.999000012874603271484375, _1373);\n        highp float _1445 = 0.0;\n        for (int SPIRV_Cross_Dummy499 = 0; SPIRV_Cross_Dummy499 < 1; SPIRV_Cross_Dummy499++)\n        {\n            if (_1381 > 1.0)\n            {\n                _1445 = 1.0;\n                break;\n            }\n            highp float _1399 = _1381 - 0.001000000047497451305389404296875;\n            highp vec2 _1403 = ((_1368.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1410 = fract(_1403 * vec2(2048.0));\n            highp float _1438 = _1410.y;\n            _1445 = mix(mix(float(_1399 < dot(texture2D(u_shadowMapTex, _1403), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1399 < dot(texture2D(u_shadowMapTex, _1403 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1438), mix(float(_1399 < dot(texture2D(u_shadowMapTex, _1403 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1399 < dot(texture2D(u_shadowMapTex, _1403 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1438), _1410.x);\n            break;\n        }\n        _1448 = _1445;\n    }\n    else\n    {\n        _1448 = _1343;\n    }\n    highp vec3 _707 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _736 = vec4(_662.xyz * (min(_707, mix(max(_707 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1448))), u_shadowColor), _707, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_765, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_765, _765)))))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _664);\n    highp vec3 _752 = _736.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_752.x, _752.y, _752.z, _736.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\n\nvoid main()\n{\n    highp vec4 _273 = (texture2D(_MainTex, varying_TexCoord) * _Color) * _AlbedoIntensity;\n    highp vec3 _276 = normalize(varying_LightDir);\n    highp vec3 _282 = normalize(varying_WorldNormal);\n    gl_FragData[0] = vec4(_273.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_276, _282))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _276), _282)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _273.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _612 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _620 = (_612 * _Color) * _AlbedoIntensity;\n    highp float _622 = _620.w;\n    if ((_622 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _637 = normalize(varying_WorldNormal);\n    highp vec4 _745 = vec4(varying_ShadowPosition, 1.0);\n    highp float _749 = -(u_view * _745).z;\n    bool _762 = true && (_749 < u_csmFarBounds.x);\n    highp float _1055 = 0.0;\n    if (_762)\n    {\n        highp vec3 _777 = ((u_csmLightSpaceMatrices[0] * _745).xyz * 0.5) + vec3(0.5);\n        highp float _781 = _777.x;\n        highp float _785 = _777.y;\n        highp float _795 = (((_777.z + step(_781, 0.001000000047497451305389404296875)) + step(_785, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _781)) + step(0.999000012874603271484375, _785);\n        highp float _1052 = 0.0;\n        for (int SPIRV_Cross_Dummy268 = 0; SPIRV_Cross_Dummy268 < 1; SPIRV_Cross_Dummy268++)\n        {\n            if (_795 > 1.0)\n            {\n                _1052 = 1.0;\n                break;\n            }\n            highp float _846 = _795 - 0.001000000047497451305389404296875;\n            highp vec2 _852 = ((_777.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _863 = fract(_852 * vec2(2048.0));\n            highp float _918 = _863.y;\n            _1052 = mix(mix(float(_846 < dot(texture2D(u_shadowMapTex, _852), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_846 < dot(texture2D(u_shadowMapTex, _852 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _918), mix(float(_846 < dot(texture2D(u_shadowMapTex, _852 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_846 < dot(texture2D(u_shadowMapTex, _852 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _918), _863.x);\n            break;\n        }\n        _1055 = _1052;\n    }\n    else\n    {\n        _1055 = 1.0;\n    }\n    bool _1381 = _762 ? true : false;\n    bool _1073 = (!_1381) && (_749 < u_csmFarBounds.y);\n    highp float _1164 = 0.0;\n    if (_1073)\n    {\n        highp vec3 _1084 = ((u_csmLightSpaceMatrices[1] * _745).xyz * 0.5) + vec3(0.5);\n        highp float _1086 = _1084.x;\n        highp float _1089 = _1084.y;\n        highp float _1097 = (((_1084.z + step(_1086, 0.001000000047497451305389404296875)) + step(_1089, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1086)) + step(0.999000012874603271484375, _1089);\n        highp float _1161 = 0.0;\n        for (int SPIRV_Cross_Dummy344 = 0; SPIRV_Cross_Dummy344 < 1; SPIRV_Cross_Dummy344++)\n        {\n            if (_1097 > 1.0)\n            {\n                _1161 = 1.0;\n                break;\n            }\n            highp float _1115 = _1097 - 0.001000000047497451305389404296875;\n            highp vec2 _1119 = ((_1084.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1126 = fract(_1119 * vec2(2048.0));\n            highp float _1154 = _1126.y;\n            _1161 = mix(mix(float(_1115 < dot(texture2D(u_shadowMapTex, _1119), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1115 < dot(texture2D(u_shadowMapTex, _1119 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1154), mix(float(_1115 < dot(texture2D(u_shadowMapTex, _1119 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1115 < dot(texture2D(u_shadowMapTex, _1119 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1154), _1126.x);\n            break;\n        }\n        _1164 = _1161;\n    }\n    else\n    {\n        _1164 = _1055;\n    }\n    bool _1382 = _1073 ? true : _1381;\n    bool _1178 = (!_1382) && (_749 < u_csmFarBounds.z);\n    highp float _1269 = 0.0;\n    if (_1178)\n    {\n        highp vec3 _1189 = ((u_csmLightSpaceMatrices[2] * _745).xyz * 0.5) + vec3(0.5);\n        highp float _1191 = _1189.x;\n        highp float _1194 = _1189.y;\n        highp float _1202 = (((_1189.z + step(_1191, 0.001000000047497451305389404296875)) + step(_1194, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1191)) + step(0.999000012874603271484375, _1194);\n        highp float _1266 = 0.0;\n        for (int SPIRV_Cross_Dummy420 = 0; SPIRV_Cross_Dummy420 < 1; SPIRV_Cross_Dummy420++)\n        {\n            if (_1202 > 1.0)\n            {\n                _1266 = 1.0;\n                break;\n            }\n            highp float _1220 = _1202 - 0.001000000047497451305389404296875;\n            highp vec2 _1224 = ((_1189.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1231 = fract(_1224 * vec2(2048.0));\n            highp float _1259 = _1231.y;\n            _1266 = mix(mix(float(_1220 < dot(texture2D(u_shadowMapTex, _1224), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1220 < dot(texture2D(u_shadowMapTex, _1224 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1259), mix(float(_1220 < dot(texture2D(u_shadowMapTex, _1224 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1220 < dot(texture2D(u_shadowMapTex, _1224 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1259), _1231.x);\n            break;\n        }\n        _1269 = _1266;\n    }\n    else\n    {\n        _1269 = _1164;\n    }\n    highp float _1374 = 0.0;\n    if ((!(_1178 ? true : _1382)) && (_749 < u_csmFarBounds.w))\n    {\n        highp vec3 _1294 = ((u_csmLightSpaceMatrices[3] * _745).xyz * 0.5) + vec3(0.5);\n        highp float _1296 = _1294.x;\n        highp float _1299 = _1294.y;\n        highp float _1307 = (((_1294.z + step(_1296, 0.001000000047497451305389404296875)) + step(_1299, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1296)) + step(0.999000012874603271484375, _1299);\n        highp float _1371 = 0.0;\n        for (int SPIRV_Cross_Dummy490 = 0; SPIRV_Cross_Dummy490 < 1; SPIRV_Cross_Dummy490++)\n        {\n            if (_1307 > 1.0)\n            {\n                _1371 = 1.0;\n                break;\n            }\n            highp float _1325 = _1307 - 0.001000000047497451305389404296875;\n            highp vec2 _1329 = ((_1294.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1336 = fract(_1329 * vec2(2048.0));\n            highp float _1364 = _1336.y;\n            _1371 = mix(mix(float(_1325 < dot(texture2D(u_shadowMapTex, _1329), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1325 < dot(texture2D(u_shadowMapTex, _1329 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1364), mix(float(_1325 < dot(texture2D(u_shadowMapTex, _1329 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1325 < dot(texture2D(u_shadowMapTex, _1329 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1364), _1336.x);\n            break;\n        }\n        _1374 = _1371;\n    }\n    else\n    {\n        _1374 = _1269;\n    }\n    highp vec3 _658 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _682 = vec4(_620.xyz * (min(_658, mix(max(_658 - (u_lightColor * (clamp(dot(_637, u_lightDir), 0.0, 1.0) * (1.0 - _1374))), u_shadowColor), _658, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _637)), _Shininess * 128.0)) * (_SpecColor.xyz * _612.w))), _622);\n    highp vec3 _698 = _682.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_698.x, _698.y, _698.z, _682.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _402 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _410 = (_402 * _Color) * _AlbedoIntensity;\n    highp float _412 = _410.w;\n    if ((_412 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec2 _510 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _452 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _481 = vec4(_410.xyz * (min(_452, mix(max(_452, u_shadowColor), _452, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_510, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_510, _510)))))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _412);\n    highp vec3 _497 = _481.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_497.x, _497.y, _497.z, _481.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _826 = int(a_boneIndex.x) * 3;\n    int _831 = _826 + 1;\n    int _835 = _826 + 2;\n    int _877 = int(a_boneIndex.y) * 3;\n    int _882 = _877 + 1;\n    int _886 = _877 + 2;\n    int _928 = int(a_boneIndex.z) * 3;\n    int _933 = _928 + 1;\n    int _937 = _928 + 2;\n    int _979 = int(a_boneIndex.w) * 3;\n    int _984 = _979 + 1;\n    int _988 = _979 + 2;\n    mat4 _727 = mat4(vec4(u_boneOffsetMatrix[_826].xyz, 0.0), vec4(u_boneOffsetMatrix[_831].xyz, 0.0), vec4(u_boneOffsetMatrix[_835].xyz, 0.0), vec4(u_boneOffsetMatrix[_826].w, u_boneOffsetMatrix[_831].w, u_boneOffsetMatrix[_835].w, 1.0)) * a_boneWeight.x;\n    mat4 _731 = mat4(vec4(u_boneOffsetMatrix[_877].xyz, 0.0), vec4(u_boneOffsetMatrix[_882].xyz, 0.0), vec4(u_boneOffsetMatrix[_886].xyz, 0.0), vec4(u_boneOffsetMatrix[_877].w, u_boneOffsetMatrix[_882].w, u_boneOffsetMatrix[_886].w, 1.0)) * a_boneWeight.y;\n    mat4 _749 = mat4(vec4(u_boneOffsetMatrix[_928].xyz, 0.0), vec4(u_boneOffsetMatrix[_933].xyz, 0.0), vec4(u_boneOffsetMatrix[_937].xyz, 0.0), vec4(u_boneOffsetMatrix[_928].w, u_boneOffsetMatrix[_933].w, u_boneOffsetMatrix[_937].w, 1.0)) * a_boneWeight.z;\n    mat4 _767 = mat4(vec4(u_boneOffsetMatrix[_979].xyz, 0.0), vec4(u_boneOffsetMatrix[_984].xyz, 0.0), vec4(u_boneOffsetMatrix[_988].xyz, 0.0), vec4(u_boneOffsetMatrix[_979].w, u_boneOffsetMatrix[_984].w, u_boneOffsetMatrix[_988].w, 1.0)) * a_boneWeight.w;\n    vec4 _771 = ((_727[0] + _731[0]) + _749[0]) + _767[0];\n    vec4 _774 = ((_727[1] + _731[1]) + _749[1]) + _767[1];\n    vec4 _777 = ((_727[2] + _731[2]) + _749[2]) + _767[2];\n    mat3 _789 = mat3(_771.xyz, _774.xyz, _777.xyz);\n    vec4 _1026 = u_world * (mat4(_771, _774, _777, ((_727[3] + _731[3]) + _749[3]) + _767[3]) * a_position);\n    vec3 _592 = _1026.xyz;\n    mat3 _1046 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1049 = normalize(_1046 * (_789 * a_normal));\n    vec3 _1063 = normalize(_1046 * (_789 * a_tangent.xyz).xyz);\n    mat3 _627 = mat3(_1063, cross(_1063, _1049) * a_tangent.w, _1049);\n    gl_Position = u_projection * (u_view * _1026);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _627 * u_lightDir;\n    varying_ViewDir = _627 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _592);\n    varying_WorldNormal = _1049;\n    varying_positionCamera_Fog = (u_view * vec4(_1026.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _592;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _663 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _671 = (_663 * _Color) * _AlbedoIntensity;\n    highp vec3 _674 = normalize(varying_LightDir);\n    highp vec4 _686 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _761 = (_686.xy - vec2(0.5)) * 2.0;\n    highp vec3 _772 = vec3(_761, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_761, _761))));\n    highp vec4 _815 = vec4(varying_ShadowPosition, 1.0);\n    highp float _819 = -(u_view * _815).z;\n    bool _832 = true && (_819 < u_csmFarBounds.x);\n    highp float _1156 = 0.0;\n    if (_832)\n    {\n        highp vec3 _847 = ((u_csmLightSpaceMatrices[0] * _815).xyz * 0.5) + vec3(0.5);\n        highp float _851 = _847.x;\n        highp float _855 = _847.y;\n        highp float _865 = (((_847.z + step(_851, 0.001000000047497451305389404296875)) + step(_855, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _851)) + step(0.999000012874603271484375, _855);\n        highp float _1153 = 0.0;\n        for (int SPIRV_Cross_Dummy263 = 0; SPIRV_Cross_Dummy263 < 1; SPIRV_Cross_Dummy263++)\n        {\n            if (_865 > 1.0)\n            {\n                _1153 = 1.0;\n                break;\n            }\n            highp float _916 = _865 - 0.001000000047497451305389404296875;\n            highp vec2 _922 = ((_847.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _933 = fract(_922 * vec2(2048.0));\n            highp float _988 = _933.y;\n            _1153 = mix(mix(float(_916 < dot(texture2D(u_shadowMapTex, _922), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_916 < dot(texture2D(u_shadowMapTex, _922 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _988), mix(float(_916 < dot(texture2D(u_shadowMapTex, _922 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_916 < dot(texture2D(u_shadowMapTex, _922 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _988), _933.x);\n            break;\n        }\n        _1156 = _1153;\n    }\n    else\n    {\n        _1156 = 1.0;\n    }\n    bool _1484 = _832 ? true : false;\n    bool _1175 = (!_1484) && (_819 < u_csmFarBounds.y);\n    highp float _1266 = 0.0;\n    if (_1175)\n    {\n        highp vec3 _1186 = ((u_csmLightSpaceMatrices[1] * _815).xyz * 0.5) + vec3(0.5);\n        highp float _1188 = _1186.x;\n        highp float _1191 = _1186.y;\n        highp float _1199 = (((_1186.z + step(_1188, 0.001000000047497451305389404296875)) + step(_1191, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1188)) + step(0.999000012874603271484375, _1191);\n        highp float _1263 = 0.0;\n        for (int SPIRV_Cross_Dummy339 = 0; SPIRV_Cross_Dummy339 < 1; SPIRV_Cross_Dummy339++)\n        {\n            if (_1199 > 1.0)\n            {\n                _1263 = 1.0;\n                break;\n            }\n            highp float _1217 = _1199 - 0.001000000047497451305389404296875;\n            highp vec2 _1221 = ((_1186.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1228 = fract(_1221 * vec2(2048.0));\n            highp float _1256 = _1228.y;\n            _1263 = mix(mix(float(_1217 < dot(texture2D(u_shadowMapTex, _1221), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1217 < dot(texture2D(u_shadowMapTex, _1221 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1256), mix(float(_1217 < dot(texture2D(u_shadowMapTex, _1221 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1217 < dot(texture2D(u_shadowMapTex, _1221 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1256), _1228.x);\n            break;\n        }\n        _1266 = _1263;\n    }\n    else\n    {\n        _1266 = _1156;\n    }\n    bool _1485 = _1175 ? true : _1484;\n    bool _1280 = (!_1485) && (_819 < u_csmFarBounds.z);\n    highp float _1371 = 0.0;\n    if (_1280)\n    {\n        highp vec3 _1291 = ((u_csmLightSpaceMatrices[2] * _815).xyz * 0.5) + vec3(0.5);\n        highp float _1293 = _1291.x;\n        highp float _1296 = _1291.y;\n        highp float _1304 = (((_1291.z + step(_1293, 0.001000000047497451305389404296875)) + step(_1296, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1293)) + step(0.999000012874603271484375, _1296);\n        highp float _1368 = 0.0;\n        for (int SPIRV_Cross_Dummy415 = 0; SPIRV_Cross_Dummy415 < 1; SPIRV_Cross_Dummy415++)\n        {\n            if (_1304 > 1.0)\n            {\n                _1368 = 1.0;\n                break;\n            }\n            highp float _1322 = _1304 - 0.001000000047497451305389404296875;\n            highp vec2 _1326 = ((_1291.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1333 = fract(_1326 * vec2(2048.0));\n            highp float _1361 = _1333.y;\n            _1368 = mix(mix(float(_1322 < dot(texture2D(u_shadowMapTex, _1326), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1322 < dot(texture2D(u_shadowMapTex, _1326 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1361), mix(float(_1322 < dot(texture2D(u_shadowMapTex, _1326 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1322 < dot(texture2D(u_shadowMapTex, _1326 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1361), _1333.x);\n            break;\n        }\n        _1371 = _1368;\n    }\n    else\n    {\n        _1371 = _1266;\n    }\n    highp float _1476 = 0.0;\n    if ((!(_1280 ? true : _1485)) && (_819 < u_csmFarBounds.w))\n    {\n        highp vec3 _1396 = ((u_csmLightSpaceMatrices[3] * _815).xyz * 0.5) + vec3(0.5);\n        highp float _1398 = _1396.x;\n        highp float _1401 = _1396.y;\n        highp float _1409 = (((_1396.z + step(_1398, 0.001000000047497451305389404296875)) + step(_1401, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1398)) + step(0.999000012874603271484375, _1401);\n        highp float _1473 = 0.0;\n        for (int SPIRV_Cross_Dummy485 = 0; SPIRV_Cross_Dummy485 < 1; SPIRV_Cross_Dummy485++)\n        {\n            if (_1409 > 1.0)\n            {\n                _1473 = 1.0;\n                break;\n            }\n            highp float _1427 = _1409 - 0.001000000047497451305389404296875;\n            highp vec2 _1431 = ((_1396.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1438 = fract(_1431 * vec2(2048.0));\n            highp float _1466 = _1438.y;\n            _1473 = mix(mix(float(_1427 < dot(texture2D(u_shadowMapTex, _1431), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1427 < dot(texture2D(u_shadowMapTex, _1431 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1466), mix(float(_1427 < dot(texture2D(u_shadowMapTex, _1431 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1427 < dot(texture2D(u_shadowMapTex, _1431 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1466), _1438.x);\n            break;\n        }\n        _1476 = _1473;\n    }\n    else\n    {\n        _1476 = _1371;\n    }\n    highp vec4 _726 = vec4(_671.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_674, _772))) * _1476)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _674), _772)), _Shininess * 128.0)) * (_SpecColor.xyz * _663.w))), _671.w);\n    highp vec4 _732 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1036 = length(varying_positionCamera_Fog);\n    highp float _1146 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1146 = (u_fogInfos.z - _1036) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1147 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1147 = 1.0 / pow(2.7182800769805908203125, _1036 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1148 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1148 = 1.0 / pow(2.7182800769805908203125, ((_1036 * _1036) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1148 = 1.0;\n            }\n            _1147 = _1148;\n        }\n        _1146 = _1147;\n    }\n    highp float _1082 = clamp(_1146, 0.0, 1.0);\n    highp vec3 _1091 = ((_726.xyz + (_EmissionColor.xyz * _732.x)).xyz * _1082) + (u_fogColor * (1.0 - _1082));\n    gl_FragData[0] = vec4(_1091.x, _1091.y, _1091.z, _726.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _468 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _476 = (_468 * _Color) * _AlbedoIntensity;\n    highp float _478 = _476.w;\n    if ((_478 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _499 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _565 = (_499.xy - vec2(0.5)) * 2.0;\n    highp vec4 _516 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _518 = _516.xyz * 2.0;\n    highp vec4 _528 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _547 = vec4(_476.xyz * (min(_518, mix(max(_518, u_shadowColor), _518, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_565, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_565, _565)))))), _Shininess * 128.0)) * (_528.xyz * _SpecColor.xyz))), _478);\n    highp float _649 = length(varying_positionCamera_Fog);\n    highp float _735 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _735 = (u_fogInfos.z - _649) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _736 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _736 = 1.0 / pow(2.7182800769805908203125, _649 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _737 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _737 = 1.0 / pow(2.7182800769805908203125, ((_649 * _649) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _737 = 1.0;\n            }\n            _736 = _737;\n        }\n        _735 = _736;\n    }\n    highp float _695 = clamp(_735, 0.0, 1.0);\n    highp vec3 _704 = (_547.xyz * _695) + (u_fogColor * (1.0 - _695));\n    gl_FragData[0] = vec4(_704.x, _704.y, _704.z, _547.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _523 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _531 = (_523 * _Color) * _AlbedoIntensity;\n    highp vec3 _534 = normalize(varying_LightDir);\n    highp vec3 _540 = normalize(varying_WorldNormal);\n    highp vec4 _628 = vec4(varying_ShadowPosition, 1.0);\n    highp float _632 = -(u_view * _628).z;\n    bool _645 = true && (_632 < u_csmFarBounds.x);\n    highp float _893 = 0.0;\n    if (_645)\n    {\n        highp vec3 _660 = ((u_csmLightSpaceMatrices[0] * _628).xyz * 0.5) + vec3(0.5);\n        highp float _664 = _660.x;\n        highp float _668 = _660.y;\n        highp float _678 = (((_660.z + step(_664, 0.001000000047497451305389404296875)) + step(_668, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _664)) + step(0.999000012874603271484375, _668);\n        highp float _890 = 0.0;\n        for (int SPIRV_Cross_Dummy254 = 0; SPIRV_Cross_Dummy254 < 1; SPIRV_Cross_Dummy254++)\n        {\n            if (_678 > 1.0)\n            {\n                _890 = 1.0;\n                break;\n            }\n            highp float _729 = _678 - 0.001000000047497451305389404296875;\n            highp vec2 _735 = ((_660.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _746 = fract(_735 * vec2(2048.0));\n            highp float _801 = _746.y;\n            _890 = mix(mix(float(_729 < dot(texture2D(u_shadowMapTex, _735), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_729 < dot(texture2D(u_shadowMapTex, _735 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _801), mix(float(_729 < dot(texture2D(u_shadowMapTex, _735 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_729 < dot(texture2D(u_shadowMapTex, _735 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _801), _746.x);\n            break;\n        }\n        _893 = _890;\n    }\n    else\n    {\n        _893 = 1.0;\n    }\n    bool _1220 = _645 ? true : false;\n    bool _911 = (!_1220) && (_632 < u_csmFarBounds.y);\n    highp float _1002 = 0.0;\n    if (_911)\n    {\n        highp vec3 _922 = ((u_csmLightSpaceMatrices[1] * _628).xyz * 0.5) + vec3(0.5);\n        highp float _924 = _922.x;\n        highp float _927 = _922.y;\n        highp float _935 = (((_922.z + step(_924, 0.001000000047497451305389404296875)) + step(_927, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _924)) + step(0.999000012874603271484375, _927);\n        highp float _999 = 0.0;\n        for (int SPIRV_Cross_Dummy330 = 0; SPIRV_Cross_Dummy330 < 1; SPIRV_Cross_Dummy330++)\n        {\n            if (_935 > 1.0)\n            {\n                _999 = 1.0;\n                break;\n            }\n            highp float _953 = _935 - 0.001000000047497451305389404296875;\n            highp vec2 _957 = ((_922.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _964 = fract(_957 * vec2(2048.0));\n            highp float _992 = _964.y;\n            _999 = mix(mix(float(_953 < dot(texture2D(u_shadowMapTex, _957), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_953 < dot(texture2D(u_shadowMapTex, _957 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _992), mix(float(_953 < dot(texture2D(u_shadowMapTex, _957 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_953 < dot(texture2D(u_shadowMapTex, _957 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _992), _964.x);\n            break;\n        }\n        _1002 = _999;\n    }\n    else\n    {\n        _1002 = _893;\n    }\n    bool _1221 = _911 ? true : _1220;\n    bool _1016 = (!_1221) && (_632 < u_csmFarBounds.z);\n    highp float _1107 = 0.0;\n    if (_1016)\n    {\n        highp vec3 _1027 = ((u_csmLightSpaceMatrices[2] * _628).xyz * 0.5) + vec3(0.5);\n        highp float _1029 = _1027.x;\n        highp float _1032 = _1027.y;\n        highp float _1040 = (((_1027.z + step(_1029, 0.001000000047497451305389404296875)) + step(_1032, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1029)) + step(0.999000012874603271484375, _1032);\n        highp float _1104 = 0.0;\n        for (int SPIRV_Cross_Dummy406 = 0; SPIRV_Cross_Dummy406 < 1; SPIRV_Cross_Dummy406++)\n        {\n            if (_1040 > 1.0)\n            {\n                _1104 = 1.0;\n                break;\n            }\n            highp float _1058 = _1040 - 0.001000000047497451305389404296875;\n            highp vec2 _1062 = ((_1027.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1069 = fract(_1062 * vec2(2048.0));\n            highp float _1097 = _1069.y;\n            _1104 = mix(mix(float(_1058 < dot(texture2D(u_shadowMapTex, _1062), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1058 < dot(texture2D(u_shadowMapTex, _1062 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1097), mix(float(_1058 < dot(texture2D(u_shadowMapTex, _1062 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1058 < dot(texture2D(u_shadowMapTex, _1062 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1097), _1069.x);\n            break;\n        }\n        _1107 = _1104;\n    }\n    else\n    {\n        _1107 = _1002;\n    }\n    highp float _1212 = 0.0;\n    if ((!(_1016 ? true : _1221)) && (_632 < u_csmFarBounds.w))\n    {\n        highp vec3 _1132 = ((u_csmLightSpaceMatrices[3] * _628).xyz * 0.5) + vec3(0.5);\n        highp float _1134 = _1132.x;\n        highp float _1137 = _1132.y;\n        highp float _1145 = (((_1132.z + step(_1134, 0.001000000047497451305389404296875)) + step(_1137, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1134)) + step(0.999000012874603271484375, _1137);\n        highp float _1209 = 0.0;\n        for (int SPIRV_Cross_Dummy476 = 0; SPIRV_Cross_Dummy476 < 1; SPIRV_Cross_Dummy476++)\n        {\n            if (_1145 > 1.0)\n            {\n                _1209 = 1.0;\n                break;\n            }\n            highp float _1163 = _1145 - 0.001000000047497451305389404296875;\n            highp vec2 _1167 = ((_1132.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1174 = fract(_1167 * vec2(2048.0));\n            highp float _1202 = _1174.y;\n            _1209 = mix(mix(float(_1163 < dot(texture2D(u_shadowMapTex, _1167), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1163 < dot(texture2D(u_shadowMapTex, _1167 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1202), mix(float(_1163 < dot(texture2D(u_shadowMapTex, _1167 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1163 < dot(texture2D(u_shadowMapTex, _1167 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1202), _1174.x);\n            break;\n        }\n        _1212 = _1209;\n    }\n    else\n    {\n        _1212 = _1107;\n    }\n    gl_FragData[0] = vec4(_531.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_534, _540))) * _1212)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _534), _540)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _531.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _809 = int(a_boneIndex.x) * 3;\n    int _814 = _809 + 1;\n    int _818 = _809 + 2;\n    int _860 = int(a_boneIndex.y) * 3;\n    int _865 = _860 + 1;\n    int _869 = _860 + 2;\n    int _911 = int(a_boneIndex.z) * 3;\n    int _916 = _911 + 1;\n    int _920 = _911 + 2;\n    int _962 = int(a_boneIndex.w) * 3;\n    int _967 = _962 + 1;\n    int _971 = _962 + 2;\n    mat4 _706 = mat4(vec4(u_boneOffsetMatrix[_809].xyz, 0.0), vec4(u_boneOffsetMatrix[_814].xyz, 0.0), vec4(u_boneOffsetMatrix[_818].xyz, 0.0), vec4(u_boneOffsetMatrix[_809].w, u_boneOffsetMatrix[_814].w, u_boneOffsetMatrix[_818].w, 1.0)) * a_boneWeight.x;\n    mat4 _710 = mat4(vec4(u_boneOffsetMatrix[_860].xyz, 0.0), vec4(u_boneOffsetMatrix[_865].xyz, 0.0), vec4(u_boneOffsetMatrix[_869].xyz, 0.0), vec4(u_boneOffsetMatrix[_860].w, u_boneOffsetMatrix[_865].w, u_boneOffsetMatrix[_869].w, 1.0)) * a_boneWeight.y;\n    mat4 _728 = mat4(vec4(u_boneOffsetMatrix[_911].xyz, 0.0), vec4(u_boneOffsetMatrix[_916].xyz, 0.0), vec4(u_boneOffsetMatrix[_920].xyz, 0.0), vec4(u_boneOffsetMatrix[_911].w, u_boneOffsetMatrix[_916].w, u_boneOffsetMatrix[_920].w, 1.0)) * a_boneWeight.z;\n    mat4 _746 = mat4(vec4(u_boneOffsetMatrix[_962].xyz, 0.0), vec4(u_boneOffsetMatrix[_967].xyz, 0.0), vec4(u_boneOffsetMatrix[_971].xyz, 0.0), vec4(u_boneOffsetMatrix[_962].w, u_boneOffsetMatrix[_967].w, u_boneOffsetMatrix[_971].w, 1.0)) * a_boneWeight.w;\n    mat4 _764 = u_bindTargetWorldInverse * mat4(((_706[0] + _710[0]) + _728[0]) + _746[0], ((_706[1] + _710[1]) + _728[1]) + _746[1], ((_706[2] + _710[2]) + _728[2]) + _746[2], ((_706[3] + _710[3]) + _728[3]) + _746[3]);\n    mat3 _772 = mat3(_764[0].xyz, _764[1].xyz, _764[2].xyz);\n    vec4 _1009 = u_world * (_764 * a_position);\n    vec3 _582 = _1009.xyz;\n    mat3 _1029 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1032 = normalize(_1029 * (_772 * a_normal));\n    vec3 _1046 = normalize(_1029 * (_772 * a_tangent.xyz).xyz);\n    mat3 _617 = mat3(_1046, cross(_1046, _1032) * a_tangent.w, _1032);\n    gl_Position = u_projection * (u_view * _1009);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _617 * u_lightDir;\n    varying_ViewDir = _617 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _582);\n    varying_WorldNormal = _1032;\n    varying_ShadowPosition = _582;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _554 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _562 = (_554 * _Color) * _AlbedoIntensity;\n    highp vec3 _565 = normalize(varying_LightDir);\n    highp vec4 _577 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _627 = (_577.xy - vec2(0.5)) * 2.0;\n    highp vec3 _638 = vec3(_627, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_627, _627))));\n    highp vec4 _681 = vec4(varying_ShadowPosition, 1.0);\n    highp float _685 = -(u_view * _681).z;\n    bool _698 = true && (_685 < u_csmFarBounds.x);\n    highp float _946 = 0.0;\n    if (_698)\n    {\n        highp vec3 _713 = ((u_csmLightSpaceMatrices[0] * _681).xyz * 0.5) + vec3(0.5);\n        highp float _717 = _713.x;\n        highp float _721 = _713.y;\n        highp float _731 = (((_713.z + step(_717, 0.001000000047497451305389404296875)) + step(_721, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _717)) + step(0.999000012874603271484375, _721);\n        highp float _943 = 0.0;\n        for (int SPIRV_Cross_Dummy256 = 0; SPIRV_Cross_Dummy256 < 1; SPIRV_Cross_Dummy256++)\n        {\n            if (_731 > 1.0)\n            {\n                _943 = 1.0;\n                break;\n            }\n            highp float _782 = _731 - 0.001000000047497451305389404296875;\n            highp vec2 _788 = ((_713.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _799 = fract(_788 * vec2(2048.0));\n            highp float _854 = _799.y;\n            _943 = mix(mix(float(_782 < dot(texture2D(u_shadowMapTex, _788), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_782 < dot(texture2D(u_shadowMapTex, _788 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _854), mix(float(_782 < dot(texture2D(u_shadowMapTex, _788 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_782 < dot(texture2D(u_shadowMapTex, _788 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _854), _799.x);\n            break;\n        }\n        _946 = _943;\n    }\n    else\n    {\n        _946 = 1.0;\n    }\n    bool _1274 = _698 ? true : false;\n    bool _965 = (!_1274) && (_685 < u_csmFarBounds.y);\n    highp float _1056 = 0.0;\n    if (_965)\n    {\n        highp vec3 _976 = ((u_csmLightSpaceMatrices[1] * _681).xyz * 0.5) + vec3(0.5);\n        highp float _978 = _976.x;\n        highp float _981 = _976.y;\n        highp float _989 = (((_976.z + step(_978, 0.001000000047497451305389404296875)) + step(_981, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _978)) + step(0.999000012874603271484375, _981);\n        highp float _1053 = 0.0;\n        for (int SPIRV_Cross_Dummy332 = 0; SPIRV_Cross_Dummy332 < 1; SPIRV_Cross_Dummy332++)\n        {\n            if (_989 > 1.0)\n            {\n                _1053 = 1.0;\n                break;\n            }\n            highp float _1007 = _989 - 0.001000000047497451305389404296875;\n            highp vec2 _1011 = ((_976.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1018 = fract(_1011 * vec2(2048.0));\n            highp float _1046 = _1018.y;\n            _1053 = mix(mix(float(_1007 < dot(texture2D(u_shadowMapTex, _1011), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1007 < dot(texture2D(u_shadowMapTex, _1011 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1046), mix(float(_1007 < dot(texture2D(u_shadowMapTex, _1011 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1007 < dot(texture2D(u_shadowMapTex, _1011 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1046), _1018.x);\n            break;\n        }\n        _1056 = _1053;\n    }\n    else\n    {\n        _1056 = _946;\n    }\n    bool _1275 = _965 ? true : _1274;\n    bool _1070 = (!_1275) && (_685 < u_csmFarBounds.z);\n    highp float _1161 = 0.0;\n    if (_1070)\n    {\n        highp vec3 _1081 = ((u_csmLightSpaceMatrices[2] * _681).xyz * 0.5) + vec3(0.5);\n        highp float _1083 = _1081.x;\n        highp float _1086 = _1081.y;\n        highp float _1094 = (((_1081.z + step(_1083, 0.001000000047497451305389404296875)) + step(_1086, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1083)) + step(0.999000012874603271484375, _1086);\n        highp float _1158 = 0.0;\n        for (int SPIRV_Cross_Dummy408 = 0; SPIRV_Cross_Dummy408 < 1; SPIRV_Cross_Dummy408++)\n        {\n            if (_1094 > 1.0)\n            {\n                _1158 = 1.0;\n                break;\n            }\n            highp float _1112 = _1094 - 0.001000000047497451305389404296875;\n            highp vec2 _1116 = ((_1081.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1123 = fract(_1116 * vec2(2048.0));\n            highp float _1151 = _1123.y;\n            _1158 = mix(mix(float(_1112 < dot(texture2D(u_shadowMapTex, _1116), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1112 < dot(texture2D(u_shadowMapTex, _1116 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1151), mix(float(_1112 < dot(texture2D(u_shadowMapTex, _1116 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1112 < dot(texture2D(u_shadowMapTex, _1116 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1151), _1123.x);\n            break;\n        }\n        _1161 = _1158;\n    }\n    else\n    {\n        _1161 = _1056;\n    }\n    highp float _1266 = 0.0;\n    if ((!(_1070 ? true : _1275)) && (_685 < u_csmFarBounds.w))\n    {\n        highp vec3 _1186 = ((u_csmLightSpaceMatrices[3] * _681).xyz * 0.5) + vec3(0.5);\n        highp float _1188 = _1186.x;\n        highp float _1191 = _1186.y;\n        highp float _1199 = (((_1186.z + step(_1188, 0.001000000047497451305389404296875)) + step(_1191, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1188)) + step(0.999000012874603271484375, _1191);\n        highp float _1263 = 0.0;\n        for (int SPIRV_Cross_Dummy478 = 0; SPIRV_Cross_Dummy478 < 1; SPIRV_Cross_Dummy478++)\n        {\n            if (_1199 > 1.0)\n            {\n                _1263 = 1.0;\n                break;\n            }\n            highp float _1217 = _1199 - 0.001000000047497451305389404296875;\n            highp vec2 _1221 = ((_1186.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1228 = fract(_1221 * vec2(2048.0));\n            highp float _1256 = _1228.y;\n            _1263 = mix(mix(float(_1217 < dot(texture2D(u_shadowMapTex, _1221), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1217 < dot(texture2D(u_shadowMapTex, _1221 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1256), mix(float(_1217 < dot(texture2D(u_shadowMapTex, _1221 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1217 < dot(texture2D(u_shadowMapTex, _1221 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1256), _1228.x);\n            break;\n        }\n        _1266 = _1263;\n    }\n    else\n    {\n        _1266 = _1161;\n    }\n    gl_FragData[0] = vec4(_562.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_565, _638))) * _1266)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _565), _638)), _Shininess * 128.0)) * (_SpecColor.xyz * _554.w))), _562.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _424 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _432 = (_424 * _Color) * _AlbedoIntensity;\n    highp float _434 = _432.w;\n    if ((_434 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _465 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _467 = _465.xyz * 2.0;\n    highp vec4 _491 = vec4(_432.xyz * (min(_467, mix(max(_467, u_shadowColor), _467, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_SpecColor.xyz * _424.w))), _434);\n    highp float _573 = length(varying_positionCamera_Fog);\n    highp float _660 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _660 = (u_fogInfos.z - _573) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _661 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _661 = 1.0 / pow(2.7182800769805908203125, _573 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _662 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _662 = 1.0 / pow(2.7182800769805908203125, ((_573 * _573) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _662 = 1.0;\n            }\n            _661 = _662;\n        }\n        _660 = _661;\n    }\n    highp float _619 = clamp(_660, 0.0, 1.0);\n    highp vec3 _628 = (_491.xyz * _619) + (u_fogColor * (1.0 - _619));\n    gl_FragData[0] = vec4(_628.x, _628.y, _628.z, _491.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _466 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _474 = (_466 * _Color) * _AlbedoIntensity;\n    highp float _476 = _474.w;\n    if ((_476 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _497 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _563 = (_497.xy - vec2(0.5)) * 2.0;\n    highp vec4 _514 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _516 = _514.xyz * 2.0;\n    highp vec4 _526 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _545 = vec4(_474.xyz * (min(_516, mix(max(_516, u_shadowColor), _516, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_563, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_563, _563)))))), _Shininess * 128.0)) * (_526.xyz * _SpecColor.xyz))), _476);\n    highp float _647 = length(varying_positionCamera_Fog);\n    highp float _733 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _733 = (u_fogInfos.z - _647) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _734 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _734 = 1.0 / pow(2.7182800769805908203125, _647 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _735 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _735 = 1.0 / pow(2.7182800769805908203125, ((_647 * _647) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _735 = 1.0;\n            }\n            _734 = _735;\n        }\n        _733 = _734;\n    }\n    highp float _693 = clamp(_733, 0.0, 1.0);\n    highp vec3 _702 = (_545.xyz * _693) + (u_fogColor * (1.0 - _693));\n    gl_FragData[0] = vec4(_702.x, _702.y, _702.z, _545.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _521 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _529 = (_521 * _Color) * _AlbedoIntensity;\n    highp vec3 _532 = normalize(varying_LightDir);\n    highp vec3 _538 = normalize(varying_WorldNormal);\n    highp vec4 _626 = vec4(varying_ShadowPosition, 1.0);\n    highp float _630 = -(u_view * _626).z;\n    bool _643 = true && (_630 < u_csmFarBounds.x);\n    highp float _891 = 0.0;\n    if (_643)\n    {\n        highp vec3 _658 = ((u_csmLightSpaceMatrices[0] * _626).xyz * 0.5) + vec3(0.5);\n        highp float _662 = _658.x;\n        highp float _666 = _658.y;\n        highp float _676 = (((_658.z + step(_662, 0.001000000047497451305389404296875)) + step(_666, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _662)) + step(0.999000012874603271484375, _666);\n        highp float _888 = 0.0;\n        for (int SPIRV_Cross_Dummy254 = 0; SPIRV_Cross_Dummy254 < 1; SPIRV_Cross_Dummy254++)\n        {\n            if (_676 > 1.0)\n            {\n                _888 = 1.0;\n                break;\n            }\n            highp float _727 = _676 - 0.001000000047497451305389404296875;\n            highp vec2 _733 = ((_658.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _744 = fract(_733 * vec2(2048.0));\n            highp float _799 = _744.y;\n            _888 = mix(mix(float(_727 < dot(texture2D(u_shadowMapTex, _733), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_727 < dot(texture2D(u_shadowMapTex, _733 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _799), mix(float(_727 < dot(texture2D(u_shadowMapTex, _733 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_727 < dot(texture2D(u_shadowMapTex, _733 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _799), _744.x);\n            break;\n        }\n        _891 = _888;\n    }\n    else\n    {\n        _891 = 1.0;\n    }\n    bool _1218 = _643 ? true : false;\n    bool _909 = (!_1218) && (_630 < u_csmFarBounds.y);\n    highp float _1000 = 0.0;\n    if (_909)\n    {\n        highp vec3 _920 = ((u_csmLightSpaceMatrices[1] * _626).xyz * 0.5) + vec3(0.5);\n        highp float _922 = _920.x;\n        highp float _925 = _920.y;\n        highp float _933 = (((_920.z + step(_922, 0.001000000047497451305389404296875)) + step(_925, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _922)) + step(0.999000012874603271484375, _925);\n        highp float _997 = 0.0;\n        for (int SPIRV_Cross_Dummy330 = 0; SPIRV_Cross_Dummy330 < 1; SPIRV_Cross_Dummy330++)\n        {\n            if (_933 > 1.0)\n            {\n                _997 = 1.0;\n                break;\n            }\n            highp float _951 = _933 - 0.001000000047497451305389404296875;\n            highp vec2 _955 = ((_920.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _962 = fract(_955 * vec2(2048.0));\n            highp float _990 = _962.y;\n            _997 = mix(mix(float(_951 < dot(texture2D(u_shadowMapTex, _955), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_951 < dot(texture2D(u_shadowMapTex, _955 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _990), mix(float(_951 < dot(texture2D(u_shadowMapTex, _955 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_951 < dot(texture2D(u_shadowMapTex, _955 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _990), _962.x);\n            break;\n        }\n        _1000 = _997;\n    }\n    else\n    {\n        _1000 = _891;\n    }\n    bool _1219 = _909 ? true : _1218;\n    bool _1014 = (!_1219) && (_630 < u_csmFarBounds.z);\n    highp float _1105 = 0.0;\n    if (_1014)\n    {\n        highp vec3 _1025 = ((u_csmLightSpaceMatrices[2] * _626).xyz * 0.5) + vec3(0.5);\n        highp float _1027 = _1025.x;\n        highp float _1030 = _1025.y;\n        highp float _1038 = (((_1025.z + step(_1027, 0.001000000047497451305389404296875)) + step(_1030, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1027)) + step(0.999000012874603271484375, _1030);\n        highp float _1102 = 0.0;\n        for (int SPIRV_Cross_Dummy406 = 0; SPIRV_Cross_Dummy406 < 1; SPIRV_Cross_Dummy406++)\n        {\n            if (_1038 > 1.0)\n            {\n                _1102 = 1.0;\n                break;\n            }\n            highp float _1056 = _1038 - 0.001000000047497451305389404296875;\n            highp vec2 _1060 = ((_1025.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1067 = fract(_1060 * vec2(2048.0));\n            highp float _1095 = _1067.y;\n            _1102 = mix(mix(float(_1056 < dot(texture2D(u_shadowMapTex, _1060), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1056 < dot(texture2D(u_shadowMapTex, _1060 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1095), mix(float(_1056 < dot(texture2D(u_shadowMapTex, _1060 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1056 < dot(texture2D(u_shadowMapTex, _1060 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1095), _1067.x);\n            break;\n        }\n        _1105 = _1102;\n    }\n    else\n    {\n        _1105 = _1000;\n    }\n    highp float _1210 = 0.0;\n    if ((!(_1014 ? true : _1219)) && (_630 < u_csmFarBounds.w))\n    {\n        highp vec3 _1130 = ((u_csmLightSpaceMatrices[3] * _626).xyz * 0.5) + vec3(0.5);\n        highp float _1132 = _1130.x;\n        highp float _1135 = _1130.y;\n        highp float _1143 = (((_1130.z + step(_1132, 0.001000000047497451305389404296875)) + step(_1135, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1132)) + step(0.999000012874603271484375, _1135);\n        highp float _1207 = 0.0;\n        for (int SPIRV_Cross_Dummy476 = 0; SPIRV_Cross_Dummy476 < 1; SPIRV_Cross_Dummy476++)\n        {\n            if (_1143 > 1.0)\n            {\n                _1207 = 1.0;\n                break;\n            }\n            highp float _1161 = _1143 - 0.001000000047497451305389404296875;\n            highp vec2 _1165 = ((_1130.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1172 = fract(_1165 * vec2(2048.0));\n            highp float _1200 = _1172.y;\n            _1207 = mix(mix(float(_1161 < dot(texture2D(u_shadowMapTex, _1165), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1161 < dot(texture2D(u_shadowMapTex, _1165 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1200), mix(float(_1161 < dot(texture2D(u_shadowMapTex, _1165 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1161 < dot(texture2D(u_shadowMapTex, _1165 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1200), _1172.x);\n            break;\n        }\n        _1210 = _1207;\n    }\n    else\n    {\n        _1210 = _1105;\n    }\n    gl_FragData[0] = vec4(_529.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_532, _538))) * _1210)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _532), _538)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _529.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _840 = int(a_boneIndex.x) * 3;\n    int _845 = _840 + 1;\n    int _849 = _840 + 2;\n    int _891 = int(a_boneIndex.y) * 3;\n    int _896 = _891 + 1;\n    int _900 = _891 + 2;\n    int _942 = int(a_boneIndex.z) * 3;\n    int _947 = _942 + 1;\n    int _951 = _942 + 2;\n    int _993 = int(a_boneIndex.w) * 3;\n    int _998 = _993 + 1;\n    int _1002 = _993 + 2;\n    mat4 _741 = mat4(vec4(u_boneOffsetMatrix[_840].xyz, 0.0), vec4(u_boneOffsetMatrix[_845].xyz, 0.0), vec4(u_boneOffsetMatrix[_849].xyz, 0.0), vec4(u_boneOffsetMatrix[_840].w, u_boneOffsetMatrix[_845].w, u_boneOffsetMatrix[_849].w, 1.0)) * a_boneWeight.x;\n    mat4 _745 = mat4(vec4(u_boneOffsetMatrix[_891].xyz, 0.0), vec4(u_boneOffsetMatrix[_896].xyz, 0.0), vec4(u_boneOffsetMatrix[_900].xyz, 0.0), vec4(u_boneOffsetMatrix[_891].w, u_boneOffsetMatrix[_896].w, u_boneOffsetMatrix[_900].w, 1.0)) * a_boneWeight.y;\n    mat4 _763 = mat4(vec4(u_boneOffsetMatrix[_942].xyz, 0.0), vec4(u_boneOffsetMatrix[_947].xyz, 0.0), vec4(u_boneOffsetMatrix[_951].xyz, 0.0), vec4(u_boneOffsetMatrix[_942].w, u_boneOffsetMatrix[_947].w, u_boneOffsetMatrix[_951].w, 1.0)) * a_boneWeight.z;\n    mat4 _781 = mat4(vec4(u_boneOffsetMatrix[_993].xyz, 0.0), vec4(u_boneOffsetMatrix[_998].xyz, 0.0), vec4(u_boneOffsetMatrix[_1002].xyz, 0.0), vec4(u_boneOffsetMatrix[_993].w, u_boneOffsetMatrix[_998].w, u_boneOffsetMatrix[_1002].w, 1.0)) * a_boneWeight.w;\n    vec4 _785 = ((_741[0] + _745[0]) + _763[0]) + _781[0];\n    vec4 _788 = ((_741[1] + _745[1]) + _763[1]) + _781[1];\n    vec4 _791 = ((_741[2] + _745[2]) + _763[2]) + _781[2];\n    mat3 _803 = mat3(_785.xyz, _788.xyz, _791.xyz);\n    vec4 _1040 = u_world * (mat4(_785, _788, _791, ((_741[3] + _745[3]) + _763[3]) + _781[3]) * a_position);\n    vec3 _599 = _1040.xyz;\n    mat3 _1060 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1063 = normalize(_1060 * (_803 * a_normal));\n    vec3 _1077 = normalize(_1060 * (_803 * a_tangent.xyz).xyz);\n    mat3 _634 = mat3(_1077, cross(_1077, _1063) * a_tangent.w, _1063);\n    gl_Position = u_projection * (u_view * _1040);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _634 * u_lightDir;\n    varying_ViewDir = _634 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _599);\n    varying_WorldNormal = _1063;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_ShadowPosition = _599;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _359 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _367 = (_359 * _Color) * _AlbedoIntensity;\n    highp vec3 _370 = normalize(varying_LightDir);\n    highp vec3 _376 = normalize(varying_WorldNormal);\n    highp vec4 _398 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _417 = vec4(_367.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_370, _376))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _370), _376)), _Shininess * 128.0)) * (_398.xyz * _SpecColor.xyz))), _367.w);\n    highp float _460 = length(varying_positionCamera_Fog);\n    highp float _541 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _541 = (u_fogInfos.z - _460) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _542 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _542 = 1.0 / pow(2.7182800769805908203125, _460 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _543 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _543 = 1.0 / pow(2.7182800769805908203125, ((_460 * _460) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _543 = 1.0;\n            }\n            _542 = _543;\n        }\n        _541 = _542;\n    }\n    highp float _506 = clamp(_541, 0.0, 1.0);\n    highp vec3 _515 = (_417.xyz * _506) + (u_fogColor * (1.0 - _506));\n    gl_FragData[0] = vec4(_515.x, _515.y, _515.z, _417.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _391 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _399 = (_391 * _Color) * _AlbedoIntensity;\n    highp vec3 _402 = normalize(varying_LightDir);\n    highp vec4 _414 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _468 = (_414.xy - vec2(0.5)) * 2.0;\n    highp vec3 _479 = vec3(_468, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_468, _468))));\n    highp vec4 _451 = vec4(_399.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_402, _479))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _402), _479)), _Shininess * 128.0)) * (_SpecColor.xyz * _391.w))), _399.w);\n    highp float _514 = length(varying_positionCamera_Fog);\n    highp float _595 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _595 = (u_fogInfos.z - _514) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _596 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _596 = 1.0 / pow(2.7182800769805908203125, _514 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _597 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _597 = 1.0 / pow(2.7182800769805908203125, ((_514 * _514) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _597 = 1.0;\n            }\n            _596 = _597;\n        }\n        _595 = _596;\n    }\n    highp float _560 = clamp(_595, 0.0, 1.0);\n    highp vec3 _569 = (_451.xyz * _560) + (u_fogColor * (1.0 - _560));\n    gl_FragData[0] = vec4(_569.x, _569.y, _569.z, _451.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _701 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _709 = (_701 * _Color) * _AlbedoIntensity;\n    highp float _711 = _709.w;\n    if ((_711 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _726 = normalize(varying_WorldNormal);\n    highp vec4 _841 = vec4(varying_ShadowPosition, 1.0);\n    highp float _845 = -(u_view * _841).z;\n    bool _858 = true && (_845 < u_csmFarBounds.x);\n    highp float _1226 = 0.0;\n    if (_858)\n    {\n        highp vec3 _873 = ((u_csmLightSpaceMatrices[0] * _841).xyz * 0.5) + vec3(0.5);\n        highp float _877 = _873.x;\n        highp float _881 = _873.y;\n        highp float _891 = (((_873.z + step(_877, 0.001000000047497451305389404296875)) + step(_881, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _877)) + step(0.999000012874603271484375, _881);\n        highp float _1223 = 0.0;\n        for (int SPIRV_Cross_Dummy272 = 0; SPIRV_Cross_Dummy272 < 1; SPIRV_Cross_Dummy272++)\n        {\n            if (_891 > 1.0)\n            {\n                _1223 = 1.0;\n                break;\n            }\n            highp float _942 = _891 - 0.001000000047497451305389404296875;\n            highp vec2 _948 = ((_873.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _959 = fract(_948 * vec2(2048.0));\n            highp float _1014 = _959.y;\n            _1223 = mix(mix(float(_942 < dot(texture2D(u_shadowMapTex, _948), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_942 < dot(texture2D(u_shadowMapTex, _948 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1014), mix(float(_942 < dot(texture2D(u_shadowMapTex, _948 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_942 < dot(texture2D(u_shadowMapTex, _948 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1014), _959.x);\n            break;\n        }\n        _1226 = _1223;\n    }\n    else\n    {\n        _1226 = 1.0;\n    }\n    bool _1553 = _858 ? true : false;\n    bool _1244 = (!_1553) && (_845 < u_csmFarBounds.y);\n    highp float _1335 = 0.0;\n    if (_1244)\n    {\n        highp vec3 _1255 = ((u_csmLightSpaceMatrices[1] * _841).xyz * 0.5) + vec3(0.5);\n        highp float _1257 = _1255.x;\n        highp float _1260 = _1255.y;\n        highp float _1268 = (((_1255.z + step(_1257, 0.001000000047497451305389404296875)) + step(_1260, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1257)) + step(0.999000012874603271484375, _1260);\n        highp float _1332 = 0.0;\n        for (int SPIRV_Cross_Dummy348 = 0; SPIRV_Cross_Dummy348 < 1; SPIRV_Cross_Dummy348++)\n        {\n            if (_1268 > 1.0)\n            {\n                _1332 = 1.0;\n                break;\n            }\n            highp float _1286 = _1268 - 0.001000000047497451305389404296875;\n            highp vec2 _1290 = ((_1255.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1297 = fract(_1290 * vec2(2048.0));\n            highp float _1325 = _1297.y;\n            _1332 = mix(mix(float(_1286 < dot(texture2D(u_shadowMapTex, _1290), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1286 < dot(texture2D(u_shadowMapTex, _1290 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1325), mix(float(_1286 < dot(texture2D(u_shadowMapTex, _1290 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1286 < dot(texture2D(u_shadowMapTex, _1290 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1325), _1297.x);\n            break;\n        }\n        _1335 = _1332;\n    }\n    else\n    {\n        _1335 = _1226;\n    }\n    bool _1554 = _1244 ? true : _1553;\n    bool _1349 = (!_1554) && (_845 < u_csmFarBounds.z);\n    highp float _1440 = 0.0;\n    if (_1349)\n    {\n        highp vec3 _1360 = ((u_csmLightSpaceMatrices[2] * _841).xyz * 0.5) + vec3(0.5);\n        highp float _1362 = _1360.x;\n        highp float _1365 = _1360.y;\n        highp float _1373 = (((_1360.z + step(_1362, 0.001000000047497451305389404296875)) + step(_1365, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1362)) + step(0.999000012874603271484375, _1365);\n        highp float _1437 = 0.0;\n        for (int SPIRV_Cross_Dummy424 = 0; SPIRV_Cross_Dummy424 < 1; SPIRV_Cross_Dummy424++)\n        {\n            if (_1373 > 1.0)\n            {\n                _1437 = 1.0;\n                break;\n            }\n            highp float _1391 = _1373 - 0.001000000047497451305389404296875;\n            highp vec2 _1395 = ((_1360.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1402 = fract(_1395 * vec2(2048.0));\n            highp float _1430 = _1402.y;\n            _1437 = mix(mix(float(_1391 < dot(texture2D(u_shadowMapTex, _1395), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1391 < dot(texture2D(u_shadowMapTex, _1395 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1430), mix(float(_1391 < dot(texture2D(u_shadowMapTex, _1395 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1391 < dot(texture2D(u_shadowMapTex, _1395 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1430), _1402.x);\n            break;\n        }\n        _1440 = _1437;\n    }\n    else\n    {\n        _1440 = _1335;\n    }\n    highp float _1545 = 0.0;\n    if ((!(_1349 ? true : _1554)) && (_845 < u_csmFarBounds.w))\n    {\n        highp vec3 _1465 = ((u_csmLightSpaceMatrices[3] * _841).xyz * 0.5) + vec3(0.5);\n        highp float _1467 = _1465.x;\n        highp float _1470 = _1465.y;\n        highp float _1478 = (((_1465.z + step(_1467, 0.001000000047497451305389404296875)) + step(_1470, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1467)) + step(0.999000012874603271484375, _1470);\n        highp float _1542 = 0.0;\n        for (int SPIRV_Cross_Dummy494 = 0; SPIRV_Cross_Dummy494 < 1; SPIRV_Cross_Dummy494++)\n        {\n            if (_1478 > 1.0)\n            {\n                _1542 = 1.0;\n                break;\n            }\n            highp float _1496 = _1478 - 0.001000000047497451305389404296875;\n            highp vec2 _1500 = ((_1465.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1507 = fract(_1500 * vec2(2048.0));\n            highp float _1535 = _1507.y;\n            _1542 = mix(mix(float(_1496 < dot(texture2D(u_shadowMapTex, _1500), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1496 < dot(texture2D(u_shadowMapTex, _1500 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1535), mix(float(_1496 < dot(texture2D(u_shadowMapTex, _1500 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1496 < dot(texture2D(u_shadowMapTex, _1500 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1535), _1507.x);\n            break;\n        }\n        _1545 = _1542;\n    }\n    else\n    {\n        _1545 = _1440;\n    }\n    highp vec4 _745 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _747 = _745.xyz * 2.0;\n    highp vec4 _771 = vec4(_709.xyz * (min(_747, mix(max(_747 - (u_lightColor * (clamp(dot(_726, u_lightDir), 0.0, 1.0) * (1.0 - _1545))), u_shadowColor), _747, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _726)), _Shininess * 128.0)) * (_SpecColor.xyz * _701.w))), _711);\n    highp vec4 _777 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1100 = length(varying_positionCamera_Fog);\n    highp float _1216 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1216 = (u_fogInfos.z - _1100) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1217 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1217 = 1.0 / pow(2.7182800769805908203125, _1100 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1218 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1218 = 1.0 / pow(2.7182800769805908203125, ((_1100 * _1100) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1218 = 1.0;\n            }\n            _1217 = _1218;\n        }\n        _1216 = _1217;\n    }\n    highp float _1146 = clamp(_1216, 0.0, 1.0);\n    highp vec3 _1155 = ((_771.xyz + (_EmissionColor.xyz * _777.x)).xyz * _1146) + (u_fogColor * (1.0 - _1146));\n    gl_FragData[0] = vec4(_1155.x, _1155.y, _1155.z, _771.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _873 = int(a_boneIndex.x) * 3;\n    int _878 = _873 + 1;\n    int _882 = _873 + 2;\n    int _924 = int(a_boneIndex.y) * 3;\n    int _929 = _924 + 1;\n    int _933 = _924 + 2;\n    int _975 = int(a_boneIndex.z) * 3;\n    int _980 = _975 + 1;\n    int _984 = _975 + 2;\n    int _1026 = int(a_boneIndex.w) * 3;\n    int _1031 = _1026 + 1;\n    int _1035 = _1026 + 2;\n    mat4 _770 = mat4(vec4(u_boneOffsetMatrix[_873].xyz, 0.0), vec4(u_boneOffsetMatrix[_878].xyz, 0.0), vec4(u_boneOffsetMatrix[_882].xyz, 0.0), vec4(u_boneOffsetMatrix[_873].w, u_boneOffsetMatrix[_878].w, u_boneOffsetMatrix[_882].w, 1.0)) * a_boneWeight.x;\n    mat4 _774 = mat4(vec4(u_boneOffsetMatrix[_924].xyz, 0.0), vec4(u_boneOffsetMatrix[_929].xyz, 0.0), vec4(u_boneOffsetMatrix[_933].xyz, 0.0), vec4(u_boneOffsetMatrix[_924].w, u_boneOffsetMatrix[_929].w, u_boneOffsetMatrix[_933].w, 1.0)) * a_boneWeight.y;\n    mat4 _792 = mat4(vec4(u_boneOffsetMatrix[_975].xyz, 0.0), vec4(u_boneOffsetMatrix[_980].xyz, 0.0), vec4(u_boneOffsetMatrix[_984].xyz, 0.0), vec4(u_boneOffsetMatrix[_975].w, u_boneOffsetMatrix[_980].w, u_boneOffsetMatrix[_984].w, 1.0)) * a_boneWeight.z;\n    mat4 _810 = mat4(vec4(u_boneOffsetMatrix[_1026].xyz, 0.0), vec4(u_boneOffsetMatrix[_1031].xyz, 0.0), vec4(u_boneOffsetMatrix[_1035].xyz, 0.0), vec4(u_boneOffsetMatrix[_1026].w, u_boneOffsetMatrix[_1031].w, u_boneOffsetMatrix[_1035].w, 1.0)) * a_boneWeight.w;\n    mat4 _828 = u_bindTargetWorldInverse * mat4(((_770[0] + _774[0]) + _792[0]) + _810[0], ((_770[1] + _774[1]) + _792[1]) + _810[1], ((_770[2] + _774[2]) + _792[2]) + _810[2], ((_770[3] + _774[3]) + _792[3]) + _810[3]);\n    mat3 _836 = mat3(_828[0].xyz, _828[1].xyz, _828[2].xyz);\n    vec4 _1073 = u_world * (_828 * a_position);\n    vec3 _617 = _1073.xyz;\n    mat3 _1093 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1096 = normalize(_1093 * (_836 * a_normal));\n    vec3 _1110 = normalize(_1093 * (_836 * a_tangent.xyz).xyz);\n    mat3 _652 = mat3(_1110, cross(_1110, _1096) * a_tangent.w, _1096);\n    gl_Position = u_projection * (u_view * _1073);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _652 * u_lightDir;\n    varying_ViewDir = _652 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _617);\n    varying_WorldNormal = _1096;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_1073.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _617;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _741 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _749 = (_741 * _Color) * _AlbedoIntensity;\n    highp float _751 = _749.w;\n    if ((_751 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _772 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _859 = (_772.xy - vec2(0.5)) * 2.0;\n    highp vec4 _913 = vec4(varying_ShadowPosition, 1.0);\n    highp float _917 = -(u_view * _913).z;\n    bool _930 = true && (_917 < u_csmFarBounds.x);\n    highp float _1297 = 0.0;\n    if (_930)\n    {\n        highp vec3 _945 = ((u_csmLightSpaceMatrices[0] * _913).xyz * 0.5) + vec3(0.5);\n        highp float _949 = _945.x;\n        highp float _953 = _945.y;\n        highp float _963 = (((_945.z + step(_949, 0.001000000047497451305389404296875)) + step(_953, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _949)) + step(0.999000012874603271484375, _953);\n        highp float _1294 = 0.0;\n        for (int SPIRV_Cross_Dummy281 = 0; SPIRV_Cross_Dummy281 < 1; SPIRV_Cross_Dummy281++)\n        {\n            if (_963 > 1.0)\n            {\n                _1294 = 1.0;\n                break;\n            }\n            highp float _1014 = _963 - 0.001000000047497451305389404296875;\n            highp vec2 _1020 = ((_945.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _1031 = fract(_1020 * vec2(2048.0));\n            highp float _1086 = _1031.y;\n            _1294 = mix(mix(float(_1014 < dot(texture2D(u_shadowMapTex, _1020), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1014 < dot(texture2D(u_shadowMapTex, _1020 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1086), mix(float(_1014 < dot(texture2D(u_shadowMapTex, _1020 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1014 < dot(texture2D(u_shadowMapTex, _1020 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1086), _1031.x);\n            break;\n        }\n        _1297 = _1294;\n    }\n    else\n    {\n        _1297 = 1.0;\n    }\n    bool _1625 = _930 ? true : false;\n    bool _1316 = (!_1625) && (_917 < u_csmFarBounds.y);\n    highp float _1407 = 0.0;\n    if (_1316)\n    {\n        highp vec3 _1327 = ((u_csmLightSpaceMatrices[1] * _913).xyz * 0.5) + vec3(0.5);\n        highp float _1329 = _1327.x;\n        highp float _1332 = _1327.y;\n        highp float _1340 = (((_1327.z + step(_1329, 0.001000000047497451305389404296875)) + step(_1332, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1329)) + step(0.999000012874603271484375, _1332);\n        highp float _1404 = 0.0;\n        for (int SPIRV_Cross_Dummy357 = 0; SPIRV_Cross_Dummy357 < 1; SPIRV_Cross_Dummy357++)\n        {\n            if (_1340 > 1.0)\n            {\n                _1404 = 1.0;\n                break;\n            }\n            highp float _1358 = _1340 - 0.001000000047497451305389404296875;\n            highp vec2 _1362 = ((_1327.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1369 = fract(_1362 * vec2(2048.0));\n            highp float _1397 = _1369.y;\n            _1404 = mix(mix(float(_1358 < dot(texture2D(u_shadowMapTex, _1362), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1358 < dot(texture2D(u_shadowMapTex, _1362 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1397), mix(float(_1358 < dot(texture2D(u_shadowMapTex, _1362 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1358 < dot(texture2D(u_shadowMapTex, _1362 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1397), _1369.x);\n            break;\n        }\n        _1407 = _1404;\n    }\n    else\n    {\n        _1407 = _1297;\n    }\n    bool _1626 = _1316 ? true : _1625;\n    bool _1421 = (!_1626) && (_917 < u_csmFarBounds.z);\n    highp float _1512 = 0.0;\n    if (_1421)\n    {\n        highp vec3 _1432 = ((u_csmLightSpaceMatrices[2] * _913).xyz * 0.5) + vec3(0.5);\n        highp float _1434 = _1432.x;\n        highp float _1437 = _1432.y;\n        highp float _1445 = (((_1432.z + step(_1434, 0.001000000047497451305389404296875)) + step(_1437, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1434)) + step(0.999000012874603271484375, _1437);\n        highp float _1509 = 0.0;\n        for (int SPIRV_Cross_Dummy433 = 0; SPIRV_Cross_Dummy433 < 1; SPIRV_Cross_Dummy433++)\n        {\n            if (_1445 > 1.0)\n            {\n                _1509 = 1.0;\n                break;\n            }\n            highp float _1463 = _1445 - 0.001000000047497451305389404296875;\n            highp vec2 _1467 = ((_1432.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1474 = fract(_1467 * vec2(2048.0));\n            highp float _1502 = _1474.y;\n            _1509 = mix(mix(float(_1463 < dot(texture2D(u_shadowMapTex, _1467), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1463 < dot(texture2D(u_shadowMapTex, _1467 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1502), mix(float(_1463 < dot(texture2D(u_shadowMapTex, _1467 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1463 < dot(texture2D(u_shadowMapTex, _1467 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1502), _1474.x);\n            break;\n        }\n        _1512 = _1509;\n    }\n    else\n    {\n        _1512 = _1407;\n    }\n    highp float _1617 = 0.0;\n    if ((!(_1421 ? true : _1626)) && (_917 < u_csmFarBounds.w))\n    {\n        highp vec3 _1537 = ((u_csmLightSpaceMatrices[3] * _913).xyz * 0.5) + vec3(0.5);\n        highp float _1539 = _1537.x;\n        highp float _1542 = _1537.y;\n        highp float _1550 = (((_1537.z + step(_1539, 0.001000000047497451305389404296875)) + step(_1542, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1539)) + step(0.999000012874603271484375, _1542);\n        highp float _1614 = 0.0;\n        for (int SPIRV_Cross_Dummy503 = 0; SPIRV_Cross_Dummy503 < 1; SPIRV_Cross_Dummy503++)\n        {\n            if (_1550 > 1.0)\n            {\n                _1614 = 1.0;\n                break;\n            }\n            highp float _1568 = _1550 - 0.001000000047497451305389404296875;\n            highp vec2 _1572 = ((_1537.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1579 = fract(_1572 * vec2(2048.0));\n            highp float _1607 = _1579.y;\n            _1614 = mix(mix(float(_1568 < dot(texture2D(u_shadowMapTex, _1572), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1568 < dot(texture2D(u_shadowMapTex, _1572 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1607), mix(float(_1568 < dot(texture2D(u_shadowMapTex, _1572 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1568 < dot(texture2D(u_shadowMapTex, _1572 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1607), _1579.x);\n            break;\n        }\n        _1617 = _1614;\n    }\n    else\n    {\n        _1617 = _1512;\n    }\n    highp vec4 _792 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _794 = _792.xyz * 2.0;\n    highp vec4 _804 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _823 = vec4(_749.xyz * (min(_794, mix(max(_794 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1617))), u_shadowColor), _794, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_859, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_859, _859)))))), _Shininess * 128.0)) * (_804.xyz * _SpecColor.xyz))), _751);\n    highp vec4 _829 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1172 = length(varying_positionCamera_Fog);\n    highp float _1287 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1287 = (u_fogInfos.z - _1172) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1288 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1288 = 1.0 / pow(2.7182800769805908203125, _1172 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1289 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1289 = 1.0 / pow(2.7182800769805908203125, ((_1172 * _1172) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1289 = 1.0;\n            }\n            _1288 = _1289;\n        }\n        _1287 = _1288;\n    }\n    highp float _1218 = clamp(_1287, 0.0, 1.0);\n    highp vec3 _1227 = ((_823.xyz + (_EmissionColor.xyz * _829.x)).xyz * _1218) + (u_fogColor * (1.0 - _1218));\n    gl_FragData[0] = vec4(_1227.x, _1227.y, _1227.z, _823.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _357 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _365 = (_357 * _Color) * _AlbedoIntensity;\n    highp vec3 _368 = normalize(varying_LightDir);\n    highp vec3 _374 = normalize(varying_WorldNormal);\n    highp vec4 _396 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _415 = vec4(_365.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_368, _374))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _368), _374)), _Shininess * 128.0)) * (_396.xyz * _SpecColor.xyz))), _365.w);\n    highp float _458 = length(varying_positionCamera_Fog);\n    highp float _539 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _539 = (u_fogInfos.z - _458) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _540 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _540 = 1.0 / pow(2.7182800769805908203125, _458 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _541 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _541 = 1.0 / pow(2.7182800769805908203125, ((_458 * _458) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _541 = 1.0;\n            }\n            _540 = _541;\n        }\n        _539 = _540;\n    }\n    highp float _504 = clamp(_539, 0.0, 1.0);\n    highp vec3 _513 = (_415.xyz * _504) + (u_fogColor * (1.0 - _504));\n    gl_FragData[0] = vec4(_513.x, _513.y, _513.z, _415.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _699 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _707 = (_699 * _Color) * _AlbedoIntensity;\n    highp float _709 = _707.w;\n    if ((_709 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _724 = normalize(varying_WorldNormal);\n    highp vec4 _839 = vec4(varying_ShadowPosition, 1.0);\n    highp float _843 = -(u_view * _839).z;\n    bool _856 = true && (_843 < u_csmFarBounds.x);\n    highp float _1224 = 0.0;\n    if (_856)\n    {\n        highp vec3 _871 = ((u_csmLightSpaceMatrices[0] * _839).xyz * 0.5) + vec3(0.5);\n        highp float _875 = _871.x;\n        highp float _879 = _871.y;\n        highp float _889 = (((_871.z + step(_875, 0.001000000047497451305389404296875)) + step(_879, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _875)) + step(0.999000012874603271484375, _879);\n        highp float _1221 = 0.0;\n        for (int SPIRV_Cross_Dummy272 = 0; SPIRV_Cross_Dummy272 < 1; SPIRV_Cross_Dummy272++)\n        {\n            if (_889 > 1.0)\n            {\n                _1221 = 1.0;\n                break;\n            }\n            highp float _940 = _889 - 0.001000000047497451305389404296875;\n            highp vec2 _946 = ((_871.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _957 = fract(_946 * vec2(2048.0));\n            highp float _1012 = _957.y;\n            _1221 = mix(mix(float(_940 < dot(texture2D(u_shadowMapTex, _946), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_940 < dot(texture2D(u_shadowMapTex, _946 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1012), mix(float(_940 < dot(texture2D(u_shadowMapTex, _946 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_940 < dot(texture2D(u_shadowMapTex, _946 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1012), _957.x);\n            break;\n        }\n        _1224 = _1221;\n    }\n    else\n    {\n        _1224 = 1.0;\n    }\n    bool _1551 = _856 ? true : false;\n    bool _1242 = (!_1551) && (_843 < u_csmFarBounds.y);\n    highp float _1333 = 0.0;\n    if (_1242)\n    {\n        highp vec3 _1253 = ((u_csmLightSpaceMatrices[1] * _839).xyz * 0.5) + vec3(0.5);\n        highp float _1255 = _1253.x;\n        highp float _1258 = _1253.y;\n        highp float _1266 = (((_1253.z + step(_1255, 0.001000000047497451305389404296875)) + step(_1258, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1255)) + step(0.999000012874603271484375, _1258);\n        highp float _1330 = 0.0;\n        for (int SPIRV_Cross_Dummy348 = 0; SPIRV_Cross_Dummy348 < 1; SPIRV_Cross_Dummy348++)\n        {\n            if (_1266 > 1.0)\n            {\n                _1330 = 1.0;\n                break;\n            }\n            highp float _1284 = _1266 - 0.001000000047497451305389404296875;\n            highp vec2 _1288 = ((_1253.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1295 = fract(_1288 * vec2(2048.0));\n            highp float _1323 = _1295.y;\n            _1330 = mix(mix(float(_1284 < dot(texture2D(u_shadowMapTex, _1288), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1284 < dot(texture2D(u_shadowMapTex, _1288 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1323), mix(float(_1284 < dot(texture2D(u_shadowMapTex, _1288 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1284 < dot(texture2D(u_shadowMapTex, _1288 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1323), _1295.x);\n            break;\n        }\n        _1333 = _1330;\n    }\n    else\n    {\n        _1333 = _1224;\n    }\n    bool _1552 = _1242 ? true : _1551;\n    bool _1347 = (!_1552) && (_843 < u_csmFarBounds.z);\n    highp float _1438 = 0.0;\n    if (_1347)\n    {\n        highp vec3 _1358 = ((u_csmLightSpaceMatrices[2] * _839).xyz * 0.5) + vec3(0.5);\n        highp float _1360 = _1358.x;\n        highp float _1363 = _1358.y;\n        highp float _1371 = (((_1358.z + step(_1360, 0.001000000047497451305389404296875)) + step(_1363, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1360)) + step(0.999000012874603271484375, _1363);\n        highp float _1435 = 0.0;\n        for (int SPIRV_Cross_Dummy424 = 0; SPIRV_Cross_Dummy424 < 1; SPIRV_Cross_Dummy424++)\n        {\n            if (_1371 > 1.0)\n            {\n                _1435 = 1.0;\n                break;\n            }\n            highp float _1389 = _1371 - 0.001000000047497451305389404296875;\n            highp vec2 _1393 = ((_1358.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1400 = fract(_1393 * vec2(2048.0));\n            highp float _1428 = _1400.y;\n            _1435 = mix(mix(float(_1389 < dot(texture2D(u_shadowMapTex, _1393), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1389 < dot(texture2D(u_shadowMapTex, _1393 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1428), mix(float(_1389 < dot(texture2D(u_shadowMapTex, _1393 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1389 < dot(texture2D(u_shadowMapTex, _1393 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1428), _1400.x);\n            break;\n        }\n        _1438 = _1435;\n    }\n    else\n    {\n        _1438 = _1333;\n    }\n    highp float _1543 = 0.0;\n    if ((!(_1347 ? true : _1552)) && (_843 < u_csmFarBounds.w))\n    {\n        highp vec3 _1463 = ((u_csmLightSpaceMatrices[3] * _839).xyz * 0.5) + vec3(0.5);\n        highp float _1465 = _1463.x;\n        highp float _1468 = _1463.y;\n        highp float _1476 = (((_1463.z + step(_1465, 0.001000000047497451305389404296875)) + step(_1468, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1465)) + step(0.999000012874603271484375, _1468);\n        highp float _1540 = 0.0;\n        for (int SPIRV_Cross_Dummy494 = 0; SPIRV_Cross_Dummy494 < 1; SPIRV_Cross_Dummy494++)\n        {\n            if (_1476 > 1.0)\n            {\n                _1540 = 1.0;\n                break;\n            }\n            highp float _1494 = _1476 - 0.001000000047497451305389404296875;\n            highp vec2 _1498 = ((_1463.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1505 = fract(_1498 * vec2(2048.0));\n            highp float _1533 = _1505.y;\n            _1540 = mix(mix(float(_1494 < dot(texture2D(u_shadowMapTex, _1498), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1494 < dot(texture2D(u_shadowMapTex, _1498 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1533), mix(float(_1494 < dot(texture2D(u_shadowMapTex, _1498 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1494 < dot(texture2D(u_shadowMapTex, _1498 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1533), _1505.x);\n            break;\n        }\n        _1543 = _1540;\n    }\n    else\n    {\n        _1543 = _1438;\n    }\n    highp vec4 _743 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _745 = _743.xyz * 2.0;\n    highp vec4 _769 = vec4(_707.xyz * (min(_745, mix(max(_745 - (u_lightColor * (clamp(dot(_724, u_lightDir), 0.0, 1.0) * (1.0 - _1543))), u_shadowColor), _745, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _724)), _Shininess * 128.0)) * (_SpecColor.xyz * _699.w))), _709);\n    highp vec4 _775 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1098 = length(varying_positionCamera_Fog);\n    highp float _1214 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1214 = (u_fogInfos.z - _1098) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1215 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1215 = 1.0 / pow(2.7182800769805908203125, _1098 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1216 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1216 = 1.0 / pow(2.7182800769805908203125, ((_1098 * _1098) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1216 = 1.0;\n            }\n            _1215 = _1216;\n        }\n        _1214 = _1215;\n    }\n    highp float _1144 = clamp(_1214, 0.0, 1.0);\n    highp vec3 _1153 = ((_769.xyz + (_EmissionColor.xyz * _775.x)).xyz * _1144) + (u_fogColor * (1.0 - _1144));\n    gl_FragData[0] = vec4(_1153.x, _1153.y, _1153.z, _769.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _490 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _498 = (_490 * _Color) * _AlbedoIntensity;\n    highp float _500 = _498.w;\n    if ((_500 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _521 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _605 = (_521.xy - vec2(0.5)) * 2.0;\n    highp vec4 _538 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _540 = _538.xyz * 2.0;\n    highp vec4 _550 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _569 = vec4(_498.xyz * (min(_540, mix(max(_540, u_shadowColor), _540, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_605, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_605, _605)))))), _Shininess * 128.0)) * (_550.xyz * _SpecColor.xyz))), _500);\n    highp vec4 _575 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _689 = length(varying_positionCamera_Fog);\n    highp float _776 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _776 = (u_fogInfos.z - _689) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _777 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _777 = 1.0 / pow(2.7182800769805908203125, _689 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _778 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _778 = 1.0 / pow(2.7182800769805908203125, ((_689 * _689) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _778 = 1.0;\n            }\n            _777 = _778;\n        }\n        _776 = _777;\n    }\n    highp float _735 = clamp(_776, 0.0, 1.0);\n    highp vec3 _744 = ((_569.xyz + (_EmissionColor.xyz * _575.x)).xyz * _735) + (u_fogColor * (1.0 - _735));\n    gl_FragData[0] = vec4(_744.x, _744.y, _744.z, _569.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _801 = int(a_boneIndex.x) * 3;\n    int _806 = _801 + 1;\n    int _810 = _801 + 2;\n    int _852 = int(a_boneIndex.y) * 3;\n    int _857 = _852 + 1;\n    int _861 = _852 + 2;\n    int _903 = int(a_boneIndex.z) * 3;\n    int _908 = _903 + 1;\n    int _912 = _903 + 2;\n    int _954 = int(a_boneIndex.w) * 3;\n    int _959 = _954 + 1;\n    int _963 = _954 + 2;\n    mat4 _702 = mat4(vec4(u_boneOffsetMatrix[_801].xyz, 0.0), vec4(u_boneOffsetMatrix[_806].xyz, 0.0), vec4(u_boneOffsetMatrix[_810].xyz, 0.0), vec4(u_boneOffsetMatrix[_801].w, u_boneOffsetMatrix[_806].w, u_boneOffsetMatrix[_810].w, 1.0)) * a_boneWeight.x;\n    mat4 _706 = mat4(vec4(u_boneOffsetMatrix[_852].xyz, 0.0), vec4(u_boneOffsetMatrix[_857].xyz, 0.0), vec4(u_boneOffsetMatrix[_861].xyz, 0.0), vec4(u_boneOffsetMatrix[_852].w, u_boneOffsetMatrix[_857].w, u_boneOffsetMatrix[_861].w, 1.0)) * a_boneWeight.y;\n    mat4 _724 = mat4(vec4(u_boneOffsetMatrix[_903].xyz, 0.0), vec4(u_boneOffsetMatrix[_908].xyz, 0.0), vec4(u_boneOffsetMatrix[_912].xyz, 0.0), vec4(u_boneOffsetMatrix[_903].w, u_boneOffsetMatrix[_908].w, u_boneOffsetMatrix[_912].w, 1.0)) * a_boneWeight.z;\n    mat4 _742 = mat4(vec4(u_boneOffsetMatrix[_954].xyz, 0.0), vec4(u_boneOffsetMatrix[_959].xyz, 0.0), vec4(u_boneOffsetMatrix[_963].xyz, 0.0), vec4(u_boneOffsetMatrix[_954].w, u_boneOffsetMatrix[_959].w, u_boneOffsetMatrix[_963].w, 1.0)) * a_boneWeight.w;\n    vec4 _746 = ((_702[0] + _706[0]) + _724[0]) + _742[0];\n    vec4 _749 = ((_702[1] + _706[1]) + _724[1]) + _742[1];\n    vec4 _752 = ((_702[2] + _706[2]) + _724[2]) + _742[2];\n    mat3 _764 = mat3(_746.xyz, _749.xyz, _752.xyz);\n    vec4 _1001 = u_world * (mat4(_746, _749, _752, ((_702[3] + _706[3]) + _724[3]) + _742[3]) * a_position);\n    vec3 _578 = _1001.xyz;\n    mat3 _1021 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1024 = normalize(_1021 * (_764 * a_normal));\n    vec3 _1038 = normalize(_1021 * (_764 * a_tangent.xyz).xyz);\n    mat3 _613 = mat3(_1038, cross(_1038, _1024) * a_tangent.w, _1024);\n    gl_Position = u_projection * (u_view * _1001);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _613 * u_lightDir;\n    varying_ViewDir = _613 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _578);\n    varying_WorldNormal = _1024;\n    varying_ShadowPosition = _578;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _576 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _584 = (_576 * _Color) * _AlbedoIntensity;\n    highp vec3 _587 = normalize(varying_LightDir);\n    highp vec4 _599 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _667 = (_599.xy - vec2(0.5)) * 2.0;\n    highp vec3 _678 = vec3(_667, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_667, _667))));\n    highp vec4 _721 = vec4(varying_ShadowPosition, 1.0);\n    highp float _725 = -(u_view * _721).z;\n    bool _738 = true && (_725 < u_csmFarBounds.x);\n    highp float _987 = 0.0;\n    if (_738)\n    {\n        highp vec3 _753 = ((u_csmLightSpaceMatrices[0] * _721).xyz * 0.5) + vec3(0.5);\n        highp float _757 = _753.x;\n        highp float _761 = _753.y;\n        highp float _771 = (((_753.z + step(_757, 0.001000000047497451305389404296875)) + step(_761, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _757)) + step(0.999000012874603271484375, _761);\n        highp float _984 = 0.0;\n        for (int SPIRV_Cross_Dummy259 = 0; SPIRV_Cross_Dummy259 < 1; SPIRV_Cross_Dummy259++)\n        {\n            if (_771 > 1.0)\n            {\n                _984 = 1.0;\n                break;\n            }\n            highp float _822 = _771 - 0.001000000047497451305389404296875;\n            highp vec2 _828 = ((_753.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _839 = fract(_828 * vec2(2048.0));\n            highp float _894 = _839.y;\n            _984 = mix(mix(float(_822 < dot(texture2D(u_shadowMapTex, _828), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_822 < dot(texture2D(u_shadowMapTex, _828 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _894), mix(float(_822 < dot(texture2D(u_shadowMapTex, _828 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_822 < dot(texture2D(u_shadowMapTex, _828 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _894), _839.x);\n            break;\n        }\n        _987 = _984;\n    }\n    else\n    {\n        _987 = 1.0;\n    }\n    bool _1314 = _738 ? true : false;\n    bool _1006 = (!_1314) && (_725 < u_csmFarBounds.y);\n    highp float _1097 = 0.0;\n    if (_1006)\n    {\n        highp vec3 _1017 = ((u_csmLightSpaceMatrices[1] * _721).xyz * 0.5) + vec3(0.5);\n        highp float _1019 = _1017.x;\n        highp float _1022 = _1017.y;\n        highp float _1030 = (((_1017.z + step(_1019, 0.001000000047497451305389404296875)) + step(_1022, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1019)) + step(0.999000012874603271484375, _1022);\n        highp float _1094 = 0.0;\n        for (int SPIRV_Cross_Dummy335 = 0; SPIRV_Cross_Dummy335 < 1; SPIRV_Cross_Dummy335++)\n        {\n            if (_1030 > 1.0)\n            {\n                _1094 = 1.0;\n                break;\n            }\n            highp float _1048 = _1030 - 0.001000000047497451305389404296875;\n            highp vec2 _1052 = ((_1017.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1059 = fract(_1052 * vec2(2048.0));\n            highp float _1087 = _1059.y;\n            _1094 = mix(mix(float(_1048 < dot(texture2D(u_shadowMapTex, _1052), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1048 < dot(texture2D(u_shadowMapTex, _1052 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1087), mix(float(_1048 < dot(texture2D(u_shadowMapTex, _1052 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1048 < dot(texture2D(u_shadowMapTex, _1052 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1087), _1059.x);\n            break;\n        }\n        _1097 = _1094;\n    }\n    else\n    {\n        _1097 = _987;\n    }\n    bool _1315 = _1006 ? true : _1314;\n    bool _1111 = (!_1315) && (_725 < u_csmFarBounds.z);\n    highp float _1202 = 0.0;\n    if (_1111)\n    {\n        highp vec3 _1122 = ((u_csmLightSpaceMatrices[2] * _721).xyz * 0.5) + vec3(0.5);\n        highp float _1124 = _1122.x;\n        highp float _1127 = _1122.y;\n        highp float _1135 = (((_1122.z + step(_1124, 0.001000000047497451305389404296875)) + step(_1127, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1124)) + step(0.999000012874603271484375, _1127);\n        highp float _1199 = 0.0;\n        for (int SPIRV_Cross_Dummy411 = 0; SPIRV_Cross_Dummy411 < 1; SPIRV_Cross_Dummy411++)\n        {\n            if (_1135 > 1.0)\n            {\n                _1199 = 1.0;\n                break;\n            }\n            highp float _1153 = _1135 - 0.001000000047497451305389404296875;\n            highp vec2 _1157 = ((_1122.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1164 = fract(_1157 * vec2(2048.0));\n            highp float _1192 = _1164.y;\n            _1199 = mix(mix(float(_1153 < dot(texture2D(u_shadowMapTex, _1157), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1153 < dot(texture2D(u_shadowMapTex, _1157 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1192), mix(float(_1153 < dot(texture2D(u_shadowMapTex, _1157 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1153 < dot(texture2D(u_shadowMapTex, _1157 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1192), _1164.x);\n            break;\n        }\n        _1202 = _1199;\n    }\n    else\n    {\n        _1202 = _1097;\n    }\n    highp float _1307 = 0.0;\n    if ((!(_1111 ? true : _1315)) && (_725 < u_csmFarBounds.w))\n    {\n        highp vec3 _1227 = ((u_csmLightSpaceMatrices[3] * _721).xyz * 0.5) + vec3(0.5);\n        highp float _1229 = _1227.x;\n        highp float _1232 = _1227.y;\n        highp float _1240 = (((_1227.z + step(_1229, 0.001000000047497451305389404296875)) + step(_1232, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1229)) + step(0.999000012874603271484375, _1232);\n        highp float _1304 = 0.0;\n        for (int SPIRV_Cross_Dummy481 = 0; SPIRV_Cross_Dummy481 < 1; SPIRV_Cross_Dummy481++)\n        {\n            if (_1240 > 1.0)\n            {\n                _1304 = 1.0;\n                break;\n            }\n            highp float _1258 = _1240 - 0.001000000047497451305389404296875;\n            highp vec2 _1262 = ((_1227.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1269 = fract(_1262 * vec2(2048.0));\n            highp float _1297 = _1269.y;\n            _1304 = mix(mix(float(_1258 < dot(texture2D(u_shadowMapTex, _1262), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1258 < dot(texture2D(u_shadowMapTex, _1262 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1297), mix(float(_1258 < dot(texture2D(u_shadowMapTex, _1262 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1258 < dot(texture2D(u_shadowMapTex, _1262 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1297), _1269.x);\n            break;\n        }\n        _1307 = _1304;\n    }\n    else\n    {\n        _1307 = _1202;\n    }\n    highp vec4 _639 = vec4(_584.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_587, _678))) * _1307)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _587), _678)), _Shininess * 128.0)) * (_SpecColor.xyz * _576.w))), _584.w);\n    highp vec3 _655 = _639.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_655.x, _655.y, _655.z, _639.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _379 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _387 = (_379 * _Color) * _AlbedoIntensity;\n    highp float _389 = _387.w;\n    if ((_389 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec2 _469 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _429 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_387.xyz * (min(_429, mix(max(_429, u_shadowColor), _429, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_469, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_469, _469)))))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _389);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _611 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _619 = (_611 * _Color) * _AlbedoIntensity;\n    highp vec3 _622 = normalize(varying_LightDir);\n    highp vec3 _628 = normalize(varying_WorldNormal);\n    highp vec4 _723 = vec4(varying_ShadowPosition, 1.0);\n    highp float _727 = -(u_view * _723).z;\n    bool _740 = true && (_727 < u_csmFarBounds.x);\n    highp float _1063 = 0.0;\n    if (_740)\n    {\n        highp vec3 _755 = ((u_csmLightSpaceMatrices[0] * _723).xyz * 0.5) + vec3(0.5);\n        highp float _759 = _755.x;\n        highp float _763 = _755.y;\n        highp float _773 = (((_755.z + step(_759, 0.001000000047497451305389404296875)) + step(_763, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _759)) + step(0.999000012874603271484375, _763);\n        highp float _1060 = 0.0;\n        for (int SPIRV_Cross_Dummy258 = 0; SPIRV_Cross_Dummy258 < 1; SPIRV_Cross_Dummy258++)\n        {\n            if (_773 > 1.0)\n            {\n                _1060 = 1.0;\n                break;\n            }\n            highp float _824 = _773 - 0.001000000047497451305389404296875;\n            highp vec2 _830 = ((_755.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _841 = fract(_830 * vec2(2048.0));\n            highp float _896 = _841.y;\n            _1060 = mix(mix(float(_824 < dot(texture2D(u_shadowMapTex, _830), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_824 < dot(texture2D(u_shadowMapTex, _830 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _896), mix(float(_824 < dot(texture2D(u_shadowMapTex, _830 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_824 < dot(texture2D(u_shadowMapTex, _830 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _896), _841.x);\n            break;\n        }\n        _1063 = _1060;\n    }\n    else\n    {\n        _1063 = 1.0;\n    }\n    bool _1390 = _740 ? true : false;\n    bool _1081 = (!_1390) && (_727 < u_csmFarBounds.y);\n    highp float _1172 = 0.0;\n    if (_1081)\n    {\n        highp vec3 _1092 = ((u_csmLightSpaceMatrices[1] * _723).xyz * 0.5) + vec3(0.5);\n        highp float _1094 = _1092.x;\n        highp float _1097 = _1092.y;\n        highp float _1105 = (((_1092.z + step(_1094, 0.001000000047497451305389404296875)) + step(_1097, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1094)) + step(0.999000012874603271484375, _1097);\n        highp float _1169 = 0.0;\n        for (int SPIRV_Cross_Dummy334 = 0; SPIRV_Cross_Dummy334 < 1; SPIRV_Cross_Dummy334++)\n        {\n            if (_1105 > 1.0)\n            {\n                _1169 = 1.0;\n                break;\n            }\n            highp float _1123 = _1105 - 0.001000000047497451305389404296875;\n            highp vec2 _1127 = ((_1092.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1134 = fract(_1127 * vec2(2048.0));\n            highp float _1162 = _1134.y;\n            _1169 = mix(mix(float(_1123 < dot(texture2D(u_shadowMapTex, _1127), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1123 < dot(texture2D(u_shadowMapTex, _1127 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1162), mix(float(_1123 < dot(texture2D(u_shadowMapTex, _1127 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1123 < dot(texture2D(u_shadowMapTex, _1127 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1162), _1134.x);\n            break;\n        }\n        _1172 = _1169;\n    }\n    else\n    {\n        _1172 = _1063;\n    }\n    bool _1391 = _1081 ? true : _1390;\n    bool _1186 = (!_1391) && (_727 < u_csmFarBounds.z);\n    highp float _1277 = 0.0;\n    if (_1186)\n    {\n        highp vec3 _1197 = ((u_csmLightSpaceMatrices[2] * _723).xyz * 0.5) + vec3(0.5);\n        highp float _1199 = _1197.x;\n        highp float _1202 = _1197.y;\n        highp float _1210 = (((_1197.z + step(_1199, 0.001000000047497451305389404296875)) + step(_1202, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1199)) + step(0.999000012874603271484375, _1202);\n        highp float _1274 = 0.0;\n        for (int SPIRV_Cross_Dummy410 = 0; SPIRV_Cross_Dummy410 < 1; SPIRV_Cross_Dummy410++)\n        {\n            if (_1210 > 1.0)\n            {\n                _1274 = 1.0;\n                break;\n            }\n            highp float _1228 = _1210 - 0.001000000047497451305389404296875;\n            highp vec2 _1232 = ((_1197.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1239 = fract(_1232 * vec2(2048.0));\n            highp float _1267 = _1239.y;\n            _1274 = mix(mix(float(_1228 < dot(texture2D(u_shadowMapTex, _1232), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1228 < dot(texture2D(u_shadowMapTex, _1232 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1267), mix(float(_1228 < dot(texture2D(u_shadowMapTex, _1232 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1228 < dot(texture2D(u_shadowMapTex, _1232 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1267), _1239.x);\n            break;\n        }\n        _1277 = _1274;\n    }\n    else\n    {\n        _1277 = _1172;\n    }\n    highp float _1382 = 0.0;\n    if ((!(_1186 ? true : _1391)) && (_727 < u_csmFarBounds.w))\n    {\n        highp vec3 _1302 = ((u_csmLightSpaceMatrices[3] * _723).xyz * 0.5) + vec3(0.5);\n        highp float _1304 = _1302.x;\n        highp float _1307 = _1302.y;\n        highp float _1315 = (((_1302.z + step(_1304, 0.001000000047497451305389404296875)) + step(_1307, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1304)) + step(0.999000012874603271484375, _1307);\n        highp float _1379 = 0.0;\n        for (int SPIRV_Cross_Dummy480 = 0; SPIRV_Cross_Dummy480 < 1; SPIRV_Cross_Dummy480++)\n        {\n            if (_1315 > 1.0)\n            {\n                _1379 = 1.0;\n                break;\n            }\n            highp float _1333 = _1315 - 0.001000000047497451305389404296875;\n            highp vec2 _1337 = ((_1302.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1344 = fract(_1337 * vec2(2048.0));\n            highp float _1372 = _1344.y;\n            _1379 = mix(mix(float(_1333 < dot(texture2D(u_shadowMapTex, _1337), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1333 < dot(texture2D(u_shadowMapTex, _1337 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1372), mix(float(_1333 < dot(texture2D(u_shadowMapTex, _1337 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1333 < dot(texture2D(u_shadowMapTex, _1337 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1372), _1344.x);\n            break;\n        }\n        _1382 = _1379;\n    }\n    else\n    {\n        _1382 = _1277;\n    }\n    highp vec4 _653 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _672 = vec4(_619.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_622, _628))) * _1382)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _622), _628)), _Shininess * 128.0)) * (_653.xyz * _SpecColor.xyz))), _619.w);\n    highp float _944 = length(varying_positionCamera_Fog);\n    highp float _1053 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1053 = (u_fogInfos.z - _944) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1054 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1054 = 1.0 / pow(2.7182800769805908203125, _944 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1055 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1055 = 1.0 / pow(2.7182800769805908203125, ((_944 * _944) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1055 = 1.0;\n            }\n            _1054 = _1055;\n        }\n        _1053 = _1054;\n    }\n    highp float _990 = clamp(_1053, 0.0, 1.0);\n    highp vec3 _999 = (_672.xyz * _990) + (u_fogColor * (1.0 - _990));\n    gl_FragData[0] = vec4(_999.x, _999.y, _999.z, _672.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _834 = int(a_boneIndex.x) * 3;\n    int _839 = _834 + 1;\n    int _843 = _834 + 2;\n    int _885 = int(a_boneIndex.y) * 3;\n    int _890 = _885 + 1;\n    int _894 = _885 + 2;\n    int _936 = int(a_boneIndex.z) * 3;\n    int _941 = _936 + 1;\n    int _945 = _936 + 2;\n    int _987 = int(a_boneIndex.w) * 3;\n    int _992 = _987 + 1;\n    int _996 = _987 + 2;\n    mat4 _731 = mat4(vec4(u_boneOffsetMatrix[_834].xyz, 0.0), vec4(u_boneOffsetMatrix[_839].xyz, 0.0), vec4(u_boneOffsetMatrix[_843].xyz, 0.0), vec4(u_boneOffsetMatrix[_834].w, u_boneOffsetMatrix[_839].w, u_boneOffsetMatrix[_843].w, 1.0)) * a_boneWeight.x;\n    mat4 _735 = mat4(vec4(u_boneOffsetMatrix[_885].xyz, 0.0), vec4(u_boneOffsetMatrix[_890].xyz, 0.0), vec4(u_boneOffsetMatrix[_894].xyz, 0.0), vec4(u_boneOffsetMatrix[_885].w, u_boneOffsetMatrix[_890].w, u_boneOffsetMatrix[_894].w, 1.0)) * a_boneWeight.y;\n    mat4 _753 = mat4(vec4(u_boneOffsetMatrix[_936].xyz, 0.0), vec4(u_boneOffsetMatrix[_941].xyz, 0.0), vec4(u_boneOffsetMatrix[_945].xyz, 0.0), vec4(u_boneOffsetMatrix[_936].w, u_boneOffsetMatrix[_941].w, u_boneOffsetMatrix[_945].w, 1.0)) * a_boneWeight.z;\n    mat4 _771 = mat4(vec4(u_boneOffsetMatrix[_987].xyz, 0.0), vec4(u_boneOffsetMatrix[_992].xyz, 0.0), vec4(u_boneOffsetMatrix[_996].xyz, 0.0), vec4(u_boneOffsetMatrix[_987].w, u_boneOffsetMatrix[_992].w, u_boneOffsetMatrix[_996].w, 1.0)) * a_boneWeight.w;\n    mat4 _789 = u_bindTargetWorldInverse * mat4(((_731[0] + _735[0]) + _753[0]) + _771[0], ((_731[1] + _735[1]) + _753[1]) + _771[1], ((_731[2] + _735[2]) + _753[2]) + _771[2], ((_731[3] + _735[3]) + _753[3]) + _771[3]);\n    mat3 _797 = mat3(_789[0].xyz, _789[1].xyz, _789[2].xyz);\n    vec4 _1034 = u_world * (_789 * a_position);\n    vec3 _596 = _1034.xyz;\n    mat3 _1054 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1057 = normalize(_1054 * (_797 * a_normal));\n    vec3 _1071 = normalize(_1054 * (_797 * a_tangent.xyz).xyz);\n    mat3 _631 = mat3(_1071, cross(_1071, _1057) * a_tangent.w, _1057);\n    gl_Position = u_projection * (u_view * _1034);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _631 * u_lightDir;\n    varying_ViewDir = _631 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _596);\n    varying_WorldNormal = _1057;\n    varying_positionCamera_Fog = (u_view * vec4(_1034.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _596;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _641 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _649 = (_641 * _Color) * _AlbedoIntensity;\n    highp vec3 _652 = normalize(varying_LightDir);\n    highp vec4 _664 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _721 = (_664.xy - vec2(0.5)) * 2.0;\n    highp vec3 _732 = vec3(_721, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_721, _721))));\n    highp vec4 _775 = vec4(varying_ShadowPosition, 1.0);\n    highp float _779 = -(u_view * _775).z;\n    bool _792 = true && (_779 < u_csmFarBounds.x);\n    highp float _1115 = 0.0;\n    if (_792)\n    {\n        highp vec3 _807 = ((u_csmLightSpaceMatrices[0] * _775).xyz * 0.5) + vec3(0.5);\n        highp float _811 = _807.x;\n        highp float _815 = _807.y;\n        highp float _825 = (((_807.z + step(_811, 0.001000000047497451305389404296875)) + step(_815, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _811)) + step(0.999000012874603271484375, _815);\n        highp float _1112 = 0.0;\n        for (int SPIRV_Cross_Dummy260 = 0; SPIRV_Cross_Dummy260 < 1; SPIRV_Cross_Dummy260++)\n        {\n            if (_825 > 1.0)\n            {\n                _1112 = 1.0;\n                break;\n            }\n            highp float _876 = _825 - 0.001000000047497451305389404296875;\n            highp vec2 _882 = ((_807.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _893 = fract(_882 * vec2(2048.0));\n            highp float _948 = _893.y;\n            _1112 = mix(mix(float(_876 < dot(texture2D(u_shadowMapTex, _882), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_876 < dot(texture2D(u_shadowMapTex, _882 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _948), mix(float(_876 < dot(texture2D(u_shadowMapTex, _882 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_876 < dot(texture2D(u_shadowMapTex, _882 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _948), _893.x);\n            break;\n        }\n        _1115 = _1112;\n    }\n    else\n    {\n        _1115 = 1.0;\n    }\n    bool _1443 = _792 ? true : false;\n    bool _1134 = (!_1443) && (_779 < u_csmFarBounds.y);\n    highp float _1225 = 0.0;\n    if (_1134)\n    {\n        highp vec3 _1145 = ((u_csmLightSpaceMatrices[1] * _775).xyz * 0.5) + vec3(0.5);\n        highp float _1147 = _1145.x;\n        highp float _1150 = _1145.y;\n        highp float _1158 = (((_1145.z + step(_1147, 0.001000000047497451305389404296875)) + step(_1150, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1147)) + step(0.999000012874603271484375, _1150);\n        highp float _1222 = 0.0;\n        for (int SPIRV_Cross_Dummy336 = 0; SPIRV_Cross_Dummy336 < 1; SPIRV_Cross_Dummy336++)\n        {\n            if (_1158 > 1.0)\n            {\n                _1222 = 1.0;\n                break;\n            }\n            highp float _1176 = _1158 - 0.001000000047497451305389404296875;\n            highp vec2 _1180 = ((_1145.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1187 = fract(_1180 * vec2(2048.0));\n            highp float _1215 = _1187.y;\n            _1222 = mix(mix(float(_1176 < dot(texture2D(u_shadowMapTex, _1180), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1176 < dot(texture2D(u_shadowMapTex, _1180 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1215), mix(float(_1176 < dot(texture2D(u_shadowMapTex, _1180 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1176 < dot(texture2D(u_shadowMapTex, _1180 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1215), _1187.x);\n            break;\n        }\n        _1225 = _1222;\n    }\n    else\n    {\n        _1225 = _1115;\n    }\n    bool _1444 = _1134 ? true : _1443;\n    bool _1239 = (!_1444) && (_779 < u_csmFarBounds.z);\n    highp float _1330 = 0.0;\n    if (_1239)\n    {\n        highp vec3 _1250 = ((u_csmLightSpaceMatrices[2] * _775).xyz * 0.5) + vec3(0.5);\n        highp float _1252 = _1250.x;\n        highp float _1255 = _1250.y;\n        highp float _1263 = (((_1250.z + step(_1252, 0.001000000047497451305389404296875)) + step(_1255, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1252)) + step(0.999000012874603271484375, _1255);\n        highp float _1327 = 0.0;\n        for (int SPIRV_Cross_Dummy412 = 0; SPIRV_Cross_Dummy412 < 1; SPIRV_Cross_Dummy412++)\n        {\n            if (_1263 > 1.0)\n            {\n                _1327 = 1.0;\n                break;\n            }\n            highp float _1281 = _1263 - 0.001000000047497451305389404296875;\n            highp vec2 _1285 = ((_1250.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1292 = fract(_1285 * vec2(2048.0));\n            highp float _1320 = _1292.y;\n            _1327 = mix(mix(float(_1281 < dot(texture2D(u_shadowMapTex, _1285), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1281 < dot(texture2D(u_shadowMapTex, _1285 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1320), mix(float(_1281 < dot(texture2D(u_shadowMapTex, _1285 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1281 < dot(texture2D(u_shadowMapTex, _1285 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1320), _1292.x);\n            break;\n        }\n        _1330 = _1327;\n    }\n    else\n    {\n        _1330 = _1225;\n    }\n    highp float _1435 = 0.0;\n    if ((!(_1239 ? true : _1444)) && (_779 < u_csmFarBounds.w))\n    {\n        highp vec3 _1355 = ((u_csmLightSpaceMatrices[3] * _775).xyz * 0.5) + vec3(0.5);\n        highp float _1357 = _1355.x;\n        highp float _1360 = _1355.y;\n        highp float _1368 = (((_1355.z + step(_1357, 0.001000000047497451305389404296875)) + step(_1360, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1357)) + step(0.999000012874603271484375, _1360);\n        highp float _1432 = 0.0;\n        for (int SPIRV_Cross_Dummy482 = 0; SPIRV_Cross_Dummy482 < 1; SPIRV_Cross_Dummy482++)\n        {\n            if (_1368 > 1.0)\n            {\n                _1432 = 1.0;\n                break;\n            }\n            highp float _1386 = _1368 - 0.001000000047497451305389404296875;\n            highp vec2 _1390 = ((_1355.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1397 = fract(_1390 * vec2(2048.0));\n            highp float _1425 = _1397.y;\n            _1432 = mix(mix(float(_1386 < dot(texture2D(u_shadowMapTex, _1390), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1386 < dot(texture2D(u_shadowMapTex, _1390 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1425), mix(float(_1386 < dot(texture2D(u_shadowMapTex, _1390 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1386 < dot(texture2D(u_shadowMapTex, _1390 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1425), _1397.x);\n            break;\n        }\n        _1435 = _1432;\n    }\n    else\n    {\n        _1435 = _1330;\n    }\n    highp vec4 _704 = vec4(_649.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_652, _732))) * _1435)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _652), _732)), _Shininess * 128.0)) * (_SpecColor.xyz * _641.w))), _649.w);\n    highp float _996 = length(varying_positionCamera_Fog);\n    highp float _1105 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1105 = (u_fogInfos.z - _996) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1106 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1106 = 1.0 / pow(2.7182800769805908203125, _996 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1107 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1107 = 1.0 / pow(2.7182800769805908203125, ((_996 * _996) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1107 = 1.0;\n            }\n            _1106 = _1107;\n        }\n        _1105 = _1106;\n    }\n    highp float _1042 = clamp(_1105, 0.0, 1.0);\n    highp vec3 _1051 = (_704.xyz * _1042) + (u_fogColor * (1.0 - _1042));\n    gl_FragData[0] = vec4(_1051.x, _1051.y, _1051.z, _704.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _335 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _343 = (_335 * _Color) * _AlbedoIntensity;\n    highp float _345 = _343.w;\n    if ((_345 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _378 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_343.xyz * (min(_378, mix(max(_378, u_shadowColor), _378, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_SpecColor.xyz * _335.w))), _345);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _377 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _385 = (_377 * _Color) * _AlbedoIntensity;\n    highp float _387 = _385.w;\n    if ((_387 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec2 _467 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _427 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_385.xyz * (min(_427, mix(max(_427, u_shadowColor), _427, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_467, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_467, _467)))))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _387);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _609 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _617 = (_609 * _Color) * _AlbedoIntensity;\n    highp vec3 _620 = normalize(varying_LightDir);\n    highp vec3 _626 = normalize(varying_WorldNormal);\n    highp vec4 _721 = vec4(varying_ShadowPosition, 1.0);\n    highp float _725 = -(u_view * _721).z;\n    bool _738 = true && (_725 < u_csmFarBounds.x);\n    highp float _1061 = 0.0;\n    if (_738)\n    {\n        highp vec3 _753 = ((u_csmLightSpaceMatrices[0] * _721).xyz * 0.5) + vec3(0.5);\n        highp float _757 = _753.x;\n        highp float _761 = _753.y;\n        highp float _771 = (((_753.z + step(_757, 0.001000000047497451305389404296875)) + step(_761, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _757)) + step(0.999000012874603271484375, _761);\n        highp float _1058 = 0.0;\n        for (int SPIRV_Cross_Dummy258 = 0; SPIRV_Cross_Dummy258 < 1; SPIRV_Cross_Dummy258++)\n        {\n            if (_771 > 1.0)\n            {\n                _1058 = 1.0;\n                break;\n            }\n            highp float _822 = _771 - 0.001000000047497451305389404296875;\n            highp vec2 _828 = ((_753.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _839 = fract(_828 * vec2(2048.0));\n            highp float _894 = _839.y;\n            _1058 = mix(mix(float(_822 < dot(texture2D(u_shadowMapTex, _828), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_822 < dot(texture2D(u_shadowMapTex, _828 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _894), mix(float(_822 < dot(texture2D(u_shadowMapTex, _828 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_822 < dot(texture2D(u_shadowMapTex, _828 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _894), _839.x);\n            break;\n        }\n        _1061 = _1058;\n    }\n    else\n    {\n        _1061 = 1.0;\n    }\n    bool _1388 = _738 ? true : false;\n    bool _1079 = (!_1388) && (_725 < u_csmFarBounds.y);\n    highp float _1170 = 0.0;\n    if (_1079)\n    {\n        highp vec3 _1090 = ((u_csmLightSpaceMatrices[1] * _721).xyz * 0.5) + vec3(0.5);\n        highp float _1092 = _1090.x;\n        highp float _1095 = _1090.y;\n        highp float _1103 = (((_1090.z + step(_1092, 0.001000000047497451305389404296875)) + step(_1095, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1092)) + step(0.999000012874603271484375, _1095);\n        highp float _1167 = 0.0;\n        for (int SPIRV_Cross_Dummy334 = 0; SPIRV_Cross_Dummy334 < 1; SPIRV_Cross_Dummy334++)\n        {\n            if (_1103 > 1.0)\n            {\n                _1167 = 1.0;\n                break;\n            }\n            highp float _1121 = _1103 - 0.001000000047497451305389404296875;\n            highp vec2 _1125 = ((_1090.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1132 = fract(_1125 * vec2(2048.0));\n            highp float _1160 = _1132.y;\n            _1167 = mix(mix(float(_1121 < dot(texture2D(u_shadowMapTex, _1125), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1121 < dot(texture2D(u_shadowMapTex, _1125 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1160), mix(float(_1121 < dot(texture2D(u_shadowMapTex, _1125 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1121 < dot(texture2D(u_shadowMapTex, _1125 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1160), _1132.x);\n            break;\n        }\n        _1170 = _1167;\n    }\n    else\n    {\n        _1170 = _1061;\n    }\n    bool _1389 = _1079 ? true : _1388;\n    bool _1184 = (!_1389) && (_725 < u_csmFarBounds.z);\n    highp float _1275 = 0.0;\n    if (_1184)\n    {\n        highp vec3 _1195 = ((u_csmLightSpaceMatrices[2] * _721).xyz * 0.5) + vec3(0.5);\n        highp float _1197 = _1195.x;\n        highp float _1200 = _1195.y;\n        highp float _1208 = (((_1195.z + step(_1197, 0.001000000047497451305389404296875)) + step(_1200, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1197)) + step(0.999000012874603271484375, _1200);\n        highp float _1272 = 0.0;\n        for (int SPIRV_Cross_Dummy410 = 0; SPIRV_Cross_Dummy410 < 1; SPIRV_Cross_Dummy410++)\n        {\n            if (_1208 > 1.0)\n            {\n                _1272 = 1.0;\n                break;\n            }\n            highp float _1226 = _1208 - 0.001000000047497451305389404296875;\n            highp vec2 _1230 = ((_1195.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1237 = fract(_1230 * vec2(2048.0));\n            highp float _1265 = _1237.y;\n            _1272 = mix(mix(float(_1226 < dot(texture2D(u_shadowMapTex, _1230), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1226 < dot(texture2D(u_shadowMapTex, _1230 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1265), mix(float(_1226 < dot(texture2D(u_shadowMapTex, _1230 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1226 < dot(texture2D(u_shadowMapTex, _1230 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1265), _1237.x);\n            break;\n        }\n        _1275 = _1272;\n    }\n    else\n    {\n        _1275 = _1170;\n    }\n    highp float _1380 = 0.0;\n    if ((!(_1184 ? true : _1389)) && (_725 < u_csmFarBounds.w))\n    {\n        highp vec3 _1300 = ((u_csmLightSpaceMatrices[3] * _721).xyz * 0.5) + vec3(0.5);\n        highp float _1302 = _1300.x;\n        highp float _1305 = _1300.y;\n        highp float _1313 = (((_1300.z + step(_1302, 0.001000000047497451305389404296875)) + step(_1305, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1302)) + step(0.999000012874603271484375, _1305);\n        highp float _1377 = 0.0;\n        for (int SPIRV_Cross_Dummy480 = 0; SPIRV_Cross_Dummy480 < 1; SPIRV_Cross_Dummy480++)\n        {\n            if (_1313 > 1.0)\n            {\n                _1377 = 1.0;\n                break;\n            }\n            highp float _1331 = _1313 - 0.001000000047497451305389404296875;\n            highp vec2 _1335 = ((_1300.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1342 = fract(_1335 * vec2(2048.0));\n            highp float _1370 = _1342.y;\n            _1377 = mix(mix(float(_1331 < dot(texture2D(u_shadowMapTex, _1335), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1331 < dot(texture2D(u_shadowMapTex, _1335 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1370), mix(float(_1331 < dot(texture2D(u_shadowMapTex, _1335 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1331 < dot(texture2D(u_shadowMapTex, _1335 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1370), _1342.x);\n            break;\n        }\n        _1380 = _1377;\n    }\n    else\n    {\n        _1380 = _1275;\n    }\n    highp vec4 _651 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _670 = vec4(_617.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_620, _626))) * _1380)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _620), _626)), _Shininess * 128.0)) * (_651.xyz * _SpecColor.xyz))), _617.w);\n    highp float _942 = length(varying_positionCamera_Fog);\n    highp float _1051 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1051 = (u_fogInfos.z - _942) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1052 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1052 = 1.0 / pow(2.7182800769805908203125, _942 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1053 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1053 = 1.0 / pow(2.7182800769805908203125, ((_942 * _942) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1053 = 1.0;\n            }\n            _1052 = _1053;\n        }\n        _1051 = _1052;\n    }\n    highp float _988 = clamp(_1051, 0.0, 1.0);\n    highp vec3 _997 = (_670.xyz * _988) + (u_fogColor * (1.0 - _988));\n    gl_FragData[0] = vec4(_997.x, _997.y, _997.z, _670.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _865 = int(a_boneIndex.x) * 3;\n    int _870 = _865 + 1;\n    int _874 = _865 + 2;\n    int _916 = int(a_boneIndex.y) * 3;\n    int _921 = _916 + 1;\n    int _925 = _916 + 2;\n    int _967 = int(a_boneIndex.z) * 3;\n    int _972 = _967 + 1;\n    int _976 = _967 + 2;\n    int _1018 = int(a_boneIndex.w) * 3;\n    int _1023 = _1018 + 1;\n    int _1027 = _1018 + 2;\n    mat4 _766 = mat4(vec4(u_boneOffsetMatrix[_865].xyz, 0.0), vec4(u_boneOffsetMatrix[_870].xyz, 0.0), vec4(u_boneOffsetMatrix[_874].xyz, 0.0), vec4(u_boneOffsetMatrix[_865].w, u_boneOffsetMatrix[_870].w, u_boneOffsetMatrix[_874].w, 1.0)) * a_boneWeight.x;\n    mat4 _770 = mat4(vec4(u_boneOffsetMatrix[_916].xyz, 0.0), vec4(u_boneOffsetMatrix[_921].xyz, 0.0), vec4(u_boneOffsetMatrix[_925].xyz, 0.0), vec4(u_boneOffsetMatrix[_916].w, u_boneOffsetMatrix[_921].w, u_boneOffsetMatrix[_925].w, 1.0)) * a_boneWeight.y;\n    mat4 _788 = mat4(vec4(u_boneOffsetMatrix[_967].xyz, 0.0), vec4(u_boneOffsetMatrix[_972].xyz, 0.0), vec4(u_boneOffsetMatrix[_976].xyz, 0.0), vec4(u_boneOffsetMatrix[_967].w, u_boneOffsetMatrix[_972].w, u_boneOffsetMatrix[_976].w, 1.0)) * a_boneWeight.z;\n    mat4 _806 = mat4(vec4(u_boneOffsetMatrix[_1018].xyz, 0.0), vec4(u_boneOffsetMatrix[_1023].xyz, 0.0), vec4(u_boneOffsetMatrix[_1027].xyz, 0.0), vec4(u_boneOffsetMatrix[_1018].w, u_boneOffsetMatrix[_1023].w, u_boneOffsetMatrix[_1027].w, 1.0)) * a_boneWeight.w;\n    vec4 _810 = ((_766[0] + _770[0]) + _788[0]) + _806[0];\n    vec4 _813 = ((_766[1] + _770[1]) + _788[1]) + _806[1];\n    vec4 _816 = ((_766[2] + _770[2]) + _788[2]) + _806[2];\n    mat3 _828 = mat3(_810.xyz, _813.xyz, _816.xyz);\n    vec4 _1065 = u_world * (mat4(_810, _813, _816, ((_766[3] + _770[3]) + _788[3]) + _806[3]) * a_position);\n    vec3 _613 = _1065.xyz;\n    mat3 _1085 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1088 = normalize(_1085 * (_828 * a_normal));\n    vec3 _1102 = normalize(_1085 * (_828 * a_tangent.xyz).xyz);\n    mat3 _648 = mat3(_1102, cross(_1102, _1088) * a_tangent.w, _1088);\n    gl_Position = u_projection * (u_view * _1065);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _648 * u_lightDir;\n    varying_ViewDir = _648 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _613);\n    varying_WorldNormal = _1088;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_1065.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _613;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _339 = (texture2D(_MainTex, varying_TexCoord) * _Color) * _AlbedoIntensity;\n    highp vec3 _366 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_339.xyz * (min(_366, mix(max(_366, u_shadowColor), _366, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _339.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _363 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _371 = (_363 * _Color) * _AlbedoIntensity;\n    highp vec2 _439 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _405 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_371.xyz * (min(_405, mix(max(_405, u_shadowColor), _405, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_439, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_439, _439)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _363.w))), _371.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _550 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _558 = (_550 * _Color) * _AlbedoIntensity;\n    highp float _560 = _558.w;\n    if ((_560 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _569 = normalize(varying_LightDir);\n    highp vec3 _575 = normalize(varying_WorldNormal);\n    highp vec4 _677 = vec4(varying_ShadowPosition, 1.0);\n    highp float _681 = -(u_view * _677).z;\n    bool _694 = true && (_681 < u_csmFarBounds.x);\n    highp float _945 = 0.0;\n    if (_694)\n    {\n        highp vec3 _709 = ((u_csmLightSpaceMatrices[0] * _677).xyz * 0.5) + vec3(0.5);\n        highp float _713 = _709.x;\n        highp float _717 = _709.y;\n        highp float _727 = (((_709.z + step(_713, 0.001000000047497451305389404296875)) + step(_717, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _713)) + step(0.999000012874603271484375, _717);\n        highp float _942 = 0.0;\n        for (int SPIRV_Cross_Dummy264 = 0; SPIRV_Cross_Dummy264 < 1; SPIRV_Cross_Dummy264++)\n        {\n            if (_727 > 1.0)\n            {\n                _942 = 1.0;\n                break;\n            }\n            highp float _778 = _727 - 0.001000000047497451305389404296875;\n            highp vec2 _784 = ((_709.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _795 = fract(_784 * vec2(2048.0));\n            highp float _850 = _795.y;\n            _942 = mix(mix(float(_778 < dot(texture2D(u_shadowMapTex, _784), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_778 < dot(texture2D(u_shadowMapTex, _784 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _850), mix(float(_778 < dot(texture2D(u_shadowMapTex, _784 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_778 < dot(texture2D(u_shadowMapTex, _784 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _850), _795.x);\n            break;\n        }\n        _945 = _942;\n    }\n    else\n    {\n        _945 = 1.0;\n    }\n    bool _1271 = _694 ? true : false;\n    bool _963 = (!_1271) && (_681 < u_csmFarBounds.y);\n    highp float _1054 = 0.0;\n    if (_963)\n    {\n        highp vec3 _974 = ((u_csmLightSpaceMatrices[1] * _677).xyz * 0.5) + vec3(0.5);\n        highp float _976 = _974.x;\n        highp float _979 = _974.y;\n        highp float _987 = (((_974.z + step(_976, 0.001000000047497451305389404296875)) + step(_979, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _976)) + step(0.999000012874603271484375, _979);\n        highp float _1051 = 0.0;\n        for (int SPIRV_Cross_Dummy340 = 0; SPIRV_Cross_Dummy340 < 1; SPIRV_Cross_Dummy340++)\n        {\n            if (_987 > 1.0)\n            {\n                _1051 = 1.0;\n                break;\n            }\n            highp float _1005 = _987 - 0.001000000047497451305389404296875;\n            highp vec2 _1009 = ((_974.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1016 = fract(_1009 * vec2(2048.0));\n            highp float _1044 = _1016.y;\n            _1051 = mix(mix(float(_1005 < dot(texture2D(u_shadowMapTex, _1009), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1005 < dot(texture2D(u_shadowMapTex, _1009 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1044), mix(float(_1005 < dot(texture2D(u_shadowMapTex, _1009 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1005 < dot(texture2D(u_shadowMapTex, _1009 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1044), _1016.x);\n            break;\n        }\n        _1054 = _1051;\n    }\n    else\n    {\n        _1054 = _945;\n    }\n    bool _1272 = _963 ? true : _1271;\n    bool _1068 = (!_1272) && (_681 < u_csmFarBounds.z);\n    highp float _1159 = 0.0;\n    if (_1068)\n    {\n        highp vec3 _1079 = ((u_csmLightSpaceMatrices[2] * _677).xyz * 0.5) + vec3(0.5);\n        highp float _1081 = _1079.x;\n        highp float _1084 = _1079.y;\n        highp float _1092 = (((_1079.z + step(_1081, 0.001000000047497451305389404296875)) + step(_1084, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1081)) + step(0.999000012874603271484375, _1084);\n        highp float _1156 = 0.0;\n        for (int SPIRV_Cross_Dummy416 = 0; SPIRV_Cross_Dummy416 < 1; SPIRV_Cross_Dummy416++)\n        {\n            if (_1092 > 1.0)\n            {\n                _1156 = 1.0;\n                break;\n            }\n            highp float _1110 = _1092 - 0.001000000047497451305389404296875;\n            highp vec2 _1114 = ((_1079.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1121 = fract(_1114 * vec2(2048.0));\n            highp float _1149 = _1121.y;\n            _1156 = mix(mix(float(_1110 < dot(texture2D(u_shadowMapTex, _1114), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1110 < dot(texture2D(u_shadowMapTex, _1114 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1149), mix(float(_1110 < dot(texture2D(u_shadowMapTex, _1114 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1110 < dot(texture2D(u_shadowMapTex, _1114 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1149), _1121.x);\n            break;\n        }\n        _1159 = _1156;\n    }\n    else\n    {\n        _1159 = _1054;\n    }\n    highp float _1264 = 0.0;\n    if ((!(_1068 ? true : _1272)) && (_681 < u_csmFarBounds.w))\n    {\n        highp vec3 _1184 = ((u_csmLightSpaceMatrices[3] * _677).xyz * 0.5) + vec3(0.5);\n        highp float _1186 = _1184.x;\n        highp float _1189 = _1184.y;\n        highp float _1197 = (((_1184.z + step(_1186, 0.001000000047497451305389404296875)) + step(_1189, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1186)) + step(0.999000012874603271484375, _1189);\n        highp float _1261 = 0.0;\n        for (int SPIRV_Cross_Dummy486 = 0; SPIRV_Cross_Dummy486 < 1; SPIRV_Cross_Dummy486++)\n        {\n            if (_1197 > 1.0)\n            {\n                _1261 = 1.0;\n                break;\n            }\n            highp float _1215 = _1197 - 0.001000000047497451305389404296875;\n            highp vec2 _1219 = ((_1184.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1226 = fract(_1219 * vec2(2048.0));\n            highp float _1254 = _1226.y;\n            _1261 = mix(mix(float(_1215 < dot(texture2D(u_shadowMapTex, _1219), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1215 < dot(texture2D(u_shadowMapTex, _1219 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1254), mix(float(_1215 < dot(texture2D(u_shadowMapTex, _1219 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1215 < dot(texture2D(u_shadowMapTex, _1219 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1254), _1226.x);\n            break;\n        }\n        _1264 = _1261;\n    }\n    else\n    {\n        _1264 = _1159;\n    }\n    highp vec4 _614 = vec4(_558.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_569, _575))) * _1264)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _569), _575)), _Shininess * 128.0)) * (_SpecColor.xyz * _550.w))), _560);\n    highp vec3 _630 = _614.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_630.x, _630.y, _630.z, _614.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _591 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _599 = (_591 * _Color) * _AlbedoIntensity;\n    highp float _601 = _599.w;\n    if ((_601 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _610 = normalize(varying_LightDir);\n    highp vec4 _622 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _696 = (_622.xy - vec2(0.5)) * 2.0;\n    highp vec3 _707 = vec3(_696, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_696, _696))));\n    highp vec4 _750 = vec4(varying_ShadowPosition, 1.0);\n    highp float _754 = -(u_view * _750).z;\n    bool _767 = true && (_754 < u_csmFarBounds.x);\n    highp float _1016 = 0.0;\n    if (_767)\n    {\n        highp vec3 _782 = ((u_csmLightSpaceMatrices[0] * _750).xyz * 0.5) + vec3(0.5);\n        highp float _786 = _782.x;\n        highp float _790 = _782.y;\n        highp float _800 = (((_782.z + step(_786, 0.001000000047497451305389404296875)) + step(_790, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _786)) + step(0.999000012874603271484375, _790);\n        highp float _1013 = 0.0;\n        for (int SPIRV_Cross_Dummy272 = 0; SPIRV_Cross_Dummy272 < 1; SPIRV_Cross_Dummy272++)\n        {\n            if (_800 > 1.0)\n            {\n                _1013 = 1.0;\n                break;\n            }\n            highp float _851 = _800 - 0.001000000047497451305389404296875;\n            highp vec2 _857 = ((_782.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _868 = fract(_857 * vec2(2048.0));\n            highp float _923 = _868.y;\n            _1013 = mix(mix(float(_851 < dot(texture2D(u_shadowMapTex, _857), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_851 < dot(texture2D(u_shadowMapTex, _857 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _923), mix(float(_851 < dot(texture2D(u_shadowMapTex, _857 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_851 < dot(texture2D(u_shadowMapTex, _857 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _923), _868.x);\n            break;\n        }\n        _1016 = _1013;\n    }\n    else\n    {\n        _1016 = 1.0;\n    }\n    bool _1343 = _767 ? true : false;\n    bool _1035 = (!_1343) && (_754 < u_csmFarBounds.y);\n    highp float _1126 = 0.0;\n    if (_1035)\n    {\n        highp vec3 _1046 = ((u_csmLightSpaceMatrices[1] * _750).xyz * 0.5) + vec3(0.5);\n        highp float _1048 = _1046.x;\n        highp float _1051 = _1046.y;\n        highp float _1059 = (((_1046.z + step(_1048, 0.001000000047497451305389404296875)) + step(_1051, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1048)) + step(0.999000012874603271484375, _1051);\n        highp float _1123 = 0.0;\n        for (int SPIRV_Cross_Dummy348 = 0; SPIRV_Cross_Dummy348 < 1; SPIRV_Cross_Dummy348++)\n        {\n            if (_1059 > 1.0)\n            {\n                _1123 = 1.0;\n                break;\n            }\n            highp float _1077 = _1059 - 0.001000000047497451305389404296875;\n            highp vec2 _1081 = ((_1046.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1088 = fract(_1081 * vec2(2048.0));\n            highp float _1116 = _1088.y;\n            _1123 = mix(mix(float(_1077 < dot(texture2D(u_shadowMapTex, _1081), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1077 < dot(texture2D(u_shadowMapTex, _1081 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1116), mix(float(_1077 < dot(texture2D(u_shadowMapTex, _1081 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1077 < dot(texture2D(u_shadowMapTex, _1081 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1116), _1088.x);\n            break;\n        }\n        _1126 = _1123;\n    }\n    else\n    {\n        _1126 = _1016;\n    }\n    bool _1344 = _1035 ? true : _1343;\n    bool _1140 = (!_1344) && (_754 < u_csmFarBounds.z);\n    highp float _1231 = 0.0;\n    if (_1140)\n    {\n        highp vec3 _1151 = ((u_csmLightSpaceMatrices[2] * _750).xyz * 0.5) + vec3(0.5);\n        highp float _1153 = _1151.x;\n        highp float _1156 = _1151.y;\n        highp float _1164 = (((_1151.z + step(_1153, 0.001000000047497451305389404296875)) + step(_1156, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1153)) + step(0.999000012874603271484375, _1156);\n        highp float _1228 = 0.0;\n        for (int SPIRV_Cross_Dummy424 = 0; SPIRV_Cross_Dummy424 < 1; SPIRV_Cross_Dummy424++)\n        {\n            if (_1164 > 1.0)\n            {\n                _1228 = 1.0;\n                break;\n            }\n            highp float _1182 = _1164 - 0.001000000047497451305389404296875;\n            highp vec2 _1186 = ((_1151.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1193 = fract(_1186 * vec2(2048.0));\n            highp float _1221 = _1193.y;\n            _1228 = mix(mix(float(_1182 < dot(texture2D(u_shadowMapTex, _1186), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1182 < dot(texture2D(u_shadowMapTex, _1186 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1221), mix(float(_1182 < dot(texture2D(u_shadowMapTex, _1186 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1182 < dot(texture2D(u_shadowMapTex, _1186 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1221), _1193.x);\n            break;\n        }\n        _1231 = _1228;\n    }\n    else\n    {\n        _1231 = _1126;\n    }\n    highp float _1336 = 0.0;\n    if ((!(_1140 ? true : _1344)) && (_754 < u_csmFarBounds.w))\n    {\n        highp vec3 _1256 = ((u_csmLightSpaceMatrices[3] * _750).xyz * 0.5) + vec3(0.5);\n        highp float _1258 = _1256.x;\n        highp float _1261 = _1256.y;\n        highp float _1269 = (((_1256.z + step(_1258, 0.001000000047497451305389404296875)) + step(_1261, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1258)) + step(0.999000012874603271484375, _1261);\n        highp float _1333 = 0.0;\n        for (int SPIRV_Cross_Dummy494 = 0; SPIRV_Cross_Dummy494 < 1; SPIRV_Cross_Dummy494++)\n        {\n            if (_1269 > 1.0)\n            {\n                _1333 = 1.0;\n                break;\n            }\n            highp float _1287 = _1269 - 0.001000000047497451305389404296875;\n            highp vec2 _1291 = ((_1256.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1298 = fract(_1291 * vec2(2048.0));\n            highp float _1326 = _1298.y;\n            _1333 = mix(mix(float(_1287 < dot(texture2D(u_shadowMapTex, _1291), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1287 < dot(texture2D(u_shadowMapTex, _1291 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1326), mix(float(_1287 < dot(texture2D(u_shadowMapTex, _1291 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1287 < dot(texture2D(u_shadowMapTex, _1291 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1326), _1298.x);\n            break;\n        }\n        _1336 = _1333;\n    }\n    else\n    {\n        _1336 = _1231;\n    }\n    highp vec4 _667 = vec4(_599.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_610, _707))) * _1336)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _610), _707)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _601);\n    highp vec3 _683 = _667.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_683.x, _683.y, _683.z, _667.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _337 = (texture2D(_MainTex, varying_TexCoord) * _Color) * _AlbedoIntensity;\n    highp vec3 _364 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_337.xyz * (min(_364, mix(max(_364, u_shadowColor), _364, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _337.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _548 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _556 = (_548 * _Color) * _AlbedoIntensity;\n    highp float _558 = _556.w;\n    if ((_558 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _567 = normalize(varying_LightDir);\n    highp vec3 _573 = normalize(varying_WorldNormal);\n    highp vec4 _675 = vec4(varying_ShadowPosition, 1.0);\n    highp float _679 = -(u_view * _675).z;\n    bool _692 = true && (_679 < u_csmFarBounds.x);\n    highp float _943 = 0.0;\n    if (_692)\n    {\n        highp vec3 _707 = ((u_csmLightSpaceMatrices[0] * _675).xyz * 0.5) + vec3(0.5);\n        highp float _711 = _707.x;\n        highp float _715 = _707.y;\n        highp float _725 = (((_707.z + step(_711, 0.001000000047497451305389404296875)) + step(_715, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _711)) + step(0.999000012874603271484375, _715);\n        highp float _940 = 0.0;\n        for (int SPIRV_Cross_Dummy264 = 0; SPIRV_Cross_Dummy264 < 1; SPIRV_Cross_Dummy264++)\n        {\n            if (_725 > 1.0)\n            {\n                _940 = 1.0;\n                break;\n            }\n            highp float _776 = _725 - 0.001000000047497451305389404296875;\n            highp vec2 _782 = ((_707.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _793 = fract(_782 * vec2(2048.0));\n            highp float _848 = _793.y;\n            _940 = mix(mix(float(_776 < dot(texture2D(u_shadowMapTex, _782), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_776 < dot(texture2D(u_shadowMapTex, _782 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _848), mix(float(_776 < dot(texture2D(u_shadowMapTex, _782 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_776 < dot(texture2D(u_shadowMapTex, _782 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _848), _793.x);\n            break;\n        }\n        _943 = _940;\n    }\n    else\n    {\n        _943 = 1.0;\n    }\n    bool _1269 = _692 ? true : false;\n    bool _961 = (!_1269) && (_679 < u_csmFarBounds.y);\n    highp float _1052 = 0.0;\n    if (_961)\n    {\n        highp vec3 _972 = ((u_csmLightSpaceMatrices[1] * _675).xyz * 0.5) + vec3(0.5);\n        highp float _974 = _972.x;\n        highp float _977 = _972.y;\n        highp float _985 = (((_972.z + step(_974, 0.001000000047497451305389404296875)) + step(_977, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _974)) + step(0.999000012874603271484375, _977);\n        highp float _1049 = 0.0;\n        for (int SPIRV_Cross_Dummy340 = 0; SPIRV_Cross_Dummy340 < 1; SPIRV_Cross_Dummy340++)\n        {\n            if (_985 > 1.0)\n            {\n                _1049 = 1.0;\n                break;\n            }\n            highp float _1003 = _985 - 0.001000000047497451305389404296875;\n            highp vec2 _1007 = ((_972.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1014 = fract(_1007 * vec2(2048.0));\n            highp float _1042 = _1014.y;\n            _1049 = mix(mix(float(_1003 < dot(texture2D(u_shadowMapTex, _1007), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1003 < dot(texture2D(u_shadowMapTex, _1007 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1042), mix(float(_1003 < dot(texture2D(u_shadowMapTex, _1007 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1003 < dot(texture2D(u_shadowMapTex, _1007 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1042), _1014.x);\n            break;\n        }\n        _1052 = _1049;\n    }\n    else\n    {\n        _1052 = _943;\n    }\n    bool _1270 = _961 ? true : _1269;\n    bool _1066 = (!_1270) && (_679 < u_csmFarBounds.z);\n    highp float _1157 = 0.0;\n    if (_1066)\n    {\n        highp vec3 _1077 = ((u_csmLightSpaceMatrices[2] * _675).xyz * 0.5) + vec3(0.5);\n        highp float _1079 = _1077.x;\n        highp float _1082 = _1077.y;\n        highp float _1090 = (((_1077.z + step(_1079, 0.001000000047497451305389404296875)) + step(_1082, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1079)) + step(0.999000012874603271484375, _1082);\n        highp float _1154 = 0.0;\n        for (int SPIRV_Cross_Dummy416 = 0; SPIRV_Cross_Dummy416 < 1; SPIRV_Cross_Dummy416++)\n        {\n            if (_1090 > 1.0)\n            {\n                _1154 = 1.0;\n                break;\n            }\n            highp float _1108 = _1090 - 0.001000000047497451305389404296875;\n            highp vec2 _1112 = ((_1077.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1119 = fract(_1112 * vec2(2048.0));\n            highp float _1147 = _1119.y;\n            _1154 = mix(mix(float(_1108 < dot(texture2D(u_shadowMapTex, _1112), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1108 < dot(texture2D(u_shadowMapTex, _1112 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1147), mix(float(_1108 < dot(texture2D(u_shadowMapTex, _1112 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1108 < dot(texture2D(u_shadowMapTex, _1112 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1147), _1119.x);\n            break;\n        }\n        _1157 = _1154;\n    }\n    else\n    {\n        _1157 = _1052;\n    }\n    highp float _1262 = 0.0;\n    if ((!(_1066 ? true : _1270)) && (_679 < u_csmFarBounds.w))\n    {\n        highp vec3 _1182 = ((u_csmLightSpaceMatrices[3] * _675).xyz * 0.5) + vec3(0.5);\n        highp float _1184 = _1182.x;\n        highp float _1187 = _1182.y;\n        highp float _1195 = (((_1182.z + step(_1184, 0.001000000047497451305389404296875)) + step(_1187, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1184)) + step(0.999000012874603271484375, _1187);\n        highp float _1259 = 0.0;\n        for (int SPIRV_Cross_Dummy486 = 0; SPIRV_Cross_Dummy486 < 1; SPIRV_Cross_Dummy486++)\n        {\n            if (_1195 > 1.0)\n            {\n                _1259 = 1.0;\n                break;\n            }\n            highp float _1213 = _1195 - 0.001000000047497451305389404296875;\n            highp vec2 _1217 = ((_1182.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1224 = fract(_1217 * vec2(2048.0));\n            highp float _1252 = _1224.y;\n            _1259 = mix(mix(float(_1213 < dot(texture2D(u_shadowMapTex, _1217), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1213 < dot(texture2D(u_shadowMapTex, _1217 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1252), mix(float(_1213 < dot(texture2D(u_shadowMapTex, _1217 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1213 < dot(texture2D(u_shadowMapTex, _1217 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1252), _1224.x);\n            break;\n        }\n        _1262 = _1259;\n    }\n    else\n    {\n        _1262 = _1157;\n    }\n    highp vec4 _612 = vec4(_556.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_567, _573))) * _1262)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _567), _573)), _Shininess * 128.0)) * (_SpecColor.xyz * _548.w))), _558);\n    highp vec3 _628 = _612.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_628.x, _628.y, _628.z, _612.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\n\nvoid main()\n{\n    highp vec4 _339 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _347 = (_339 * _Color) * _AlbedoIntensity;\n    highp float _349 = _347.w;\n    if ((_349 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _358 = normalize(varying_LightDir);\n    highp vec2 _441 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _452 = vec3(_441, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_441, _441))));\n    highp vec4 _412 = vec4(_347.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_358, _452))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _358), _452)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _349);\n    highp vec3 _428 = _412.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_428.x, _428.y, _428.z, _412.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _727 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _735 = (_727 * _Color) * _AlbedoIntensity;\n    highp vec4 _750 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _831 = (_750.xy - vec2(0.5)) * 2.0;\n    highp vec4 _885 = vec4(varying_ShadowPosition, 1.0);\n    highp float _889 = -(u_view * _885).z;\n    bool _902 = true && (_889 < u_csmFarBounds.x);\n    highp float _1269 = 0.0;\n    if (_902)\n    {\n        highp vec3 _917 = ((u_csmLightSpaceMatrices[0] * _885).xyz * 0.5) + vec3(0.5);\n        highp float _921 = _917.x;\n        highp float _925 = _917.y;\n        highp float _935 = (((_917.z + step(_921, 0.001000000047497451305389404296875)) + step(_925, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _921)) + step(0.999000012874603271484375, _925);\n        highp float _1266 = 0.0;\n        for (int SPIRV_Cross_Dummy268 = 0; SPIRV_Cross_Dummy268 < 1; SPIRV_Cross_Dummy268++)\n        {\n            if (_935 > 1.0)\n            {\n                _1266 = 1.0;\n                break;\n            }\n            highp float _986 = _935 - 0.001000000047497451305389404296875;\n            highp vec2 _992 = ((_917.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _1003 = fract(_992 * vec2(2048.0));\n            highp float _1058 = _1003.y;\n            _1266 = mix(mix(float(_986 < dot(texture2D(u_shadowMapTex, _992), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_986 < dot(texture2D(u_shadowMapTex, _992 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1058), mix(float(_986 < dot(texture2D(u_shadowMapTex, _992 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_986 < dot(texture2D(u_shadowMapTex, _992 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1058), _1003.x);\n            break;\n        }\n        _1269 = _1266;\n    }\n    else\n    {\n        _1269 = 1.0;\n    }\n    bool _1597 = _902 ? true : false;\n    bool _1288 = (!_1597) && (_889 < u_csmFarBounds.y);\n    highp float _1379 = 0.0;\n    if (_1288)\n    {\n        highp vec3 _1299 = ((u_csmLightSpaceMatrices[1] * _885).xyz * 0.5) + vec3(0.5);\n        highp float _1301 = _1299.x;\n        highp float _1304 = _1299.y;\n        highp float _1312 = (((_1299.z + step(_1301, 0.001000000047497451305389404296875)) + step(_1304, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1301)) + step(0.999000012874603271484375, _1304);\n        highp float _1376 = 0.0;\n        for (int SPIRV_Cross_Dummy344 = 0; SPIRV_Cross_Dummy344 < 1; SPIRV_Cross_Dummy344++)\n        {\n            if (_1312 > 1.0)\n            {\n                _1376 = 1.0;\n                break;\n            }\n            highp float _1330 = _1312 - 0.001000000047497451305389404296875;\n            highp vec2 _1334 = ((_1299.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1341 = fract(_1334 * vec2(2048.0));\n            highp float _1369 = _1341.y;\n            _1376 = mix(mix(float(_1330 < dot(texture2D(u_shadowMapTex, _1334), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1330 < dot(texture2D(u_shadowMapTex, _1334 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1369), mix(float(_1330 < dot(texture2D(u_shadowMapTex, _1334 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1330 < dot(texture2D(u_shadowMapTex, _1334 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1369), _1341.x);\n            break;\n        }\n        _1379 = _1376;\n    }\n    else\n    {\n        _1379 = _1269;\n    }\n    bool _1598 = _1288 ? true : _1597;\n    bool _1393 = (!_1598) && (_889 < u_csmFarBounds.z);\n    highp float _1484 = 0.0;\n    if (_1393)\n    {\n        highp vec3 _1404 = ((u_csmLightSpaceMatrices[2] * _885).xyz * 0.5) + vec3(0.5);\n        highp float _1406 = _1404.x;\n        highp float _1409 = _1404.y;\n        highp float _1417 = (((_1404.z + step(_1406, 0.001000000047497451305389404296875)) + step(_1409, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1406)) + step(0.999000012874603271484375, _1409);\n        highp float _1481 = 0.0;\n        for (int SPIRV_Cross_Dummy420 = 0; SPIRV_Cross_Dummy420 < 1; SPIRV_Cross_Dummy420++)\n        {\n            if (_1417 > 1.0)\n            {\n                _1481 = 1.0;\n                break;\n            }\n            highp float _1435 = _1417 - 0.001000000047497451305389404296875;\n            highp vec2 _1439 = ((_1404.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1446 = fract(_1439 * vec2(2048.0));\n            highp float _1474 = _1446.y;\n            _1481 = mix(mix(float(_1435 < dot(texture2D(u_shadowMapTex, _1439), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1435 < dot(texture2D(u_shadowMapTex, _1439 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1474), mix(float(_1435 < dot(texture2D(u_shadowMapTex, _1439 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1435 < dot(texture2D(u_shadowMapTex, _1439 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1474), _1446.x);\n            break;\n        }\n        _1484 = _1481;\n    }\n    else\n    {\n        _1484 = _1379;\n    }\n    highp float _1589 = 0.0;\n    if ((!(_1393 ? true : _1598)) && (_889 < u_csmFarBounds.w))\n    {\n        highp vec3 _1509 = ((u_csmLightSpaceMatrices[3] * _885).xyz * 0.5) + vec3(0.5);\n        highp float _1511 = _1509.x;\n        highp float _1514 = _1509.y;\n        highp float _1522 = (((_1509.z + step(_1511, 0.001000000047497451305389404296875)) + step(_1514, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1511)) + step(0.999000012874603271484375, _1514);\n        highp float _1586 = 0.0;\n        for (int SPIRV_Cross_Dummy490 = 0; SPIRV_Cross_Dummy490 < 1; SPIRV_Cross_Dummy490++)\n        {\n            if (_1522 > 1.0)\n            {\n                _1586 = 1.0;\n                break;\n            }\n            highp float _1540 = _1522 - 0.001000000047497451305389404296875;\n            highp vec2 _1544 = ((_1509.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1551 = fract(_1544 * vec2(2048.0));\n            highp float _1579 = _1551.y;\n            _1586 = mix(mix(float(_1540 < dot(texture2D(u_shadowMapTex, _1544), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1540 < dot(texture2D(u_shadowMapTex, _1544 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1579), mix(float(_1540 < dot(texture2D(u_shadowMapTex, _1544 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1540 < dot(texture2D(u_shadowMapTex, _1544 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1579), _1551.x);\n            break;\n        }\n        _1589 = _1586;\n    }\n    else\n    {\n        _1589 = _1484;\n    }\n    highp vec4 _770 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _772 = _770.xyz * 2.0;\n    highp vec4 _796 = vec4(_735.xyz * (min(_772, mix(max(_772 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1589))), u_shadowColor), _772, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_831, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_831, _831)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _727.w))), _735.w);\n    highp vec4 _802 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1144 = length(varying_positionCamera_Fog);\n    highp float _1259 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1259 = (u_fogInfos.z - _1144) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1260 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1260 = 1.0 / pow(2.7182800769805908203125, _1144 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1261 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1261 = 1.0 / pow(2.7182800769805908203125, ((_1144 * _1144) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1261 = 1.0;\n            }\n            _1260 = _1261;\n        }\n        _1259 = _1260;\n    }\n    highp float _1190 = clamp(_1259, 0.0, 1.0);\n    highp vec3 _1199 = ((_796.xyz + (_EmissionColor.xyz * _802.x)).xyz * _1190) + (u_fogColor * (1.0 - _1190));\n    gl_FragData[0] = vec4(_1199.x, _1199.y, _1199.z, _796.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _405 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _413 = (_405 * _Color) * _AlbedoIntensity;\n    highp float _415 = _413.w;\n    if ((_415 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _424 = normalize(varying_LightDir);\n    highp vec4 _436 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _496 = (_436.xy - vec2(0.5)) * 2.0;\n    highp vec3 _507 = vec3(_496, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_496, _496))));\n    highp vec4 _459 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _478 = vec4(_413.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_424, _507))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _424), _507)), _Shininess * 128.0)) * (_459.xyz * _SpecColor.xyz))), _415);\n    highp float _542 = length(varying_positionCamera_Fog);\n    highp float _623 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _623 = (u_fogInfos.z - _542) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _624 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _624 = 1.0 / pow(2.7182800769805908203125, _542 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _625 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _625 = 1.0 / pow(2.7182800769805908203125, ((_542 * _542) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _625 = 1.0;\n            }\n            _624 = _625;\n        }\n        _623 = _624;\n    }\n    highp float _588 = clamp(_623, 0.0, 1.0);\n    highp vec3 _597 = (_478.xyz * _588) + (u_fogColor * (1.0 - _588));\n    gl_FragData[0] = vec4(_597.x, _597.y, _597.z, _478.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _588 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _596 = (_588 * _Color) * _AlbedoIntensity;\n    highp vec3 _605 = normalize(varying_WorldNormal);\n    highp vec4 _699 = vec4(varying_ShadowPosition, 1.0);\n    highp float _703 = -(u_view * _699).z;\n    bool _716 = true && (_703 < u_csmFarBounds.x);\n    highp float _1006 = 0.0;\n    if (_716)\n    {\n        highp vec3 _731 = ((u_csmLightSpaceMatrices[0] * _699).xyz * 0.5) + vec3(0.5);\n        highp float _735 = _731.x;\n        highp float _739 = _731.y;\n        highp float _749 = (((_731.z + step(_735, 0.001000000047497451305389404296875)) + step(_739, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _735)) + step(0.999000012874603271484375, _739);\n        highp float _1003 = 0.0;\n        for (int SPIRV_Cross_Dummy258 = 0; SPIRV_Cross_Dummy258 < 1; SPIRV_Cross_Dummy258++)\n        {\n            if (_749 > 1.0)\n            {\n                _1003 = 1.0;\n                break;\n            }\n            highp float _800 = _749 - 0.001000000047497451305389404296875;\n            highp vec2 _806 = ((_731.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _817 = fract(_806 * vec2(2048.0));\n            highp float _872 = _817.y;\n            _1003 = mix(mix(float(_800 < dot(texture2D(u_shadowMapTex, _806), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_800 < dot(texture2D(u_shadowMapTex, _806 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _872), mix(float(_800 < dot(texture2D(u_shadowMapTex, _806 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_800 < dot(texture2D(u_shadowMapTex, _806 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _872), _817.x);\n            break;\n        }\n        _1006 = _1003;\n    }\n    else\n    {\n        _1006 = 1.0;\n    }\n    bool _1333 = _716 ? true : false;\n    bool _1024 = (!_1333) && (_703 < u_csmFarBounds.y);\n    highp float _1115 = 0.0;\n    if (_1024)\n    {\n        highp vec3 _1035 = ((u_csmLightSpaceMatrices[1] * _699).xyz * 0.5) + vec3(0.5);\n        highp float _1037 = _1035.x;\n        highp float _1040 = _1035.y;\n        highp float _1048 = (((_1035.z + step(_1037, 0.001000000047497451305389404296875)) + step(_1040, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1037)) + step(0.999000012874603271484375, _1040);\n        highp float _1112 = 0.0;\n        for (int SPIRV_Cross_Dummy334 = 0; SPIRV_Cross_Dummy334 < 1; SPIRV_Cross_Dummy334++)\n        {\n            if (_1048 > 1.0)\n            {\n                _1112 = 1.0;\n                break;\n            }\n            highp float _1066 = _1048 - 0.001000000047497451305389404296875;\n            highp vec2 _1070 = ((_1035.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1077 = fract(_1070 * vec2(2048.0));\n            highp float _1105 = _1077.y;\n            _1112 = mix(mix(float(_1066 < dot(texture2D(u_shadowMapTex, _1070), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1066 < dot(texture2D(u_shadowMapTex, _1070 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1105), mix(float(_1066 < dot(texture2D(u_shadowMapTex, _1070 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1066 < dot(texture2D(u_shadowMapTex, _1070 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1105), _1077.x);\n            break;\n        }\n        _1115 = _1112;\n    }\n    else\n    {\n        _1115 = _1006;\n    }\n    bool _1334 = _1024 ? true : _1333;\n    bool _1129 = (!_1334) && (_703 < u_csmFarBounds.z);\n    highp float _1220 = 0.0;\n    if (_1129)\n    {\n        highp vec3 _1140 = ((u_csmLightSpaceMatrices[2] * _699).xyz * 0.5) + vec3(0.5);\n        highp float _1142 = _1140.x;\n        highp float _1145 = _1140.y;\n        highp float _1153 = (((_1140.z + step(_1142, 0.001000000047497451305389404296875)) + step(_1145, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1142)) + step(0.999000012874603271484375, _1145);\n        highp float _1217 = 0.0;\n        for (int SPIRV_Cross_Dummy410 = 0; SPIRV_Cross_Dummy410 < 1; SPIRV_Cross_Dummy410++)\n        {\n            if (_1153 > 1.0)\n            {\n                _1217 = 1.0;\n                break;\n            }\n            highp float _1171 = _1153 - 0.001000000047497451305389404296875;\n            highp vec2 _1175 = ((_1140.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1182 = fract(_1175 * vec2(2048.0));\n            highp float _1210 = _1182.y;\n            _1217 = mix(mix(float(_1171 < dot(texture2D(u_shadowMapTex, _1175), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1171 < dot(texture2D(u_shadowMapTex, _1175 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1210), mix(float(_1171 < dot(texture2D(u_shadowMapTex, _1175 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1171 < dot(texture2D(u_shadowMapTex, _1175 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1210), _1182.x);\n            break;\n        }\n        _1220 = _1217;\n    }\n    else\n    {\n        _1220 = _1115;\n    }\n    highp float _1325 = 0.0;\n    if ((!(_1129 ? true : _1334)) && (_703 < u_csmFarBounds.w))\n    {\n        highp vec3 _1245 = ((u_csmLightSpaceMatrices[3] * _699).xyz * 0.5) + vec3(0.5);\n        highp float _1247 = _1245.x;\n        highp float _1250 = _1245.y;\n        highp float _1258 = (((_1245.z + step(_1247, 0.001000000047497451305389404296875)) + step(_1250, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1247)) + step(0.999000012874603271484375, _1250);\n        highp float _1322 = 0.0;\n        for (int SPIRV_Cross_Dummy480 = 0; SPIRV_Cross_Dummy480 < 1; SPIRV_Cross_Dummy480++)\n        {\n            if (_1258 > 1.0)\n            {\n                _1322 = 1.0;\n                break;\n            }\n            highp float _1276 = _1258 - 0.001000000047497451305389404296875;\n            highp vec2 _1280 = ((_1245.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1287 = fract(_1280 * vec2(2048.0));\n            highp float _1315 = _1287.y;\n            _1322 = mix(mix(float(_1276 < dot(texture2D(u_shadowMapTex, _1280), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1276 < dot(texture2D(u_shadowMapTex, _1280 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1315), mix(float(_1276 < dot(texture2D(u_shadowMapTex, _1280 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1276 < dot(texture2D(u_shadowMapTex, _1280 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1315), _1287.x);\n            break;\n        }\n        _1325 = _1322;\n    }\n    else\n    {\n        _1325 = _1220;\n    }\n    highp vec3 _626 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_596.xyz * (min(_626, mix(max(_626 - (u_lightColor * (clamp(dot(_605, u_lightDir), 0.0, 1.0) * (1.0 - _1325))), u_shadowColor), _626, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _605)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _596.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _618 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _626 = (_618 * _Color) * _AlbedoIntensity;\n    highp vec4 _641 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _697 = (_641.xy - vec2(0.5)) * 2.0;\n    highp vec4 _751 = vec4(varying_ShadowPosition, 1.0);\n    highp float _755 = -(u_view * _751).z;\n    bool _768 = true && (_755 < u_csmFarBounds.x);\n    highp float _1059 = 0.0;\n    if (_768)\n    {\n        highp vec3 _783 = ((u_csmLightSpaceMatrices[0] * _751).xyz * 0.5) + vec3(0.5);\n        highp float _787 = _783.x;\n        highp float _791 = _783.y;\n        highp float _801 = (((_783.z + step(_787, 0.001000000047497451305389404296875)) + step(_791, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _787)) + step(0.999000012874603271484375, _791);\n        highp float _1056 = 0.0;\n        for (int SPIRV_Cross_Dummy261 = 0; SPIRV_Cross_Dummy261 < 1; SPIRV_Cross_Dummy261++)\n        {\n            if (_801 > 1.0)\n            {\n                _1056 = 1.0;\n                break;\n            }\n            highp float _852 = _801 - 0.001000000047497451305389404296875;\n            highp vec2 _858 = ((_783.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _869 = fract(_858 * vec2(2048.0));\n            highp float _924 = _869.y;\n            _1056 = mix(mix(float(_852 < dot(texture2D(u_shadowMapTex, _858), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_852 < dot(texture2D(u_shadowMapTex, _858 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _924), mix(float(_852 < dot(texture2D(u_shadowMapTex, _858 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_852 < dot(texture2D(u_shadowMapTex, _858 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _924), _869.x);\n            break;\n        }\n        _1059 = _1056;\n    }\n    else\n    {\n        _1059 = 1.0;\n    }\n    bool _1387 = _768 ? true : false;\n    bool _1078 = (!_1387) && (_755 < u_csmFarBounds.y);\n    highp float _1169 = 0.0;\n    if (_1078)\n    {\n        highp vec3 _1089 = ((u_csmLightSpaceMatrices[1] * _751).xyz * 0.5) + vec3(0.5);\n        highp float _1091 = _1089.x;\n        highp float _1094 = _1089.y;\n        highp float _1102 = (((_1089.z + step(_1091, 0.001000000047497451305389404296875)) + step(_1094, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1091)) + step(0.999000012874603271484375, _1094);\n        highp float _1166 = 0.0;\n        for (int SPIRV_Cross_Dummy337 = 0; SPIRV_Cross_Dummy337 < 1; SPIRV_Cross_Dummy337++)\n        {\n            if (_1102 > 1.0)\n            {\n                _1166 = 1.0;\n                break;\n            }\n            highp float _1120 = _1102 - 0.001000000047497451305389404296875;\n            highp vec2 _1124 = ((_1089.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1131 = fract(_1124 * vec2(2048.0));\n            highp float _1159 = _1131.y;\n            _1166 = mix(mix(float(_1120 < dot(texture2D(u_shadowMapTex, _1124), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1120 < dot(texture2D(u_shadowMapTex, _1124 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1159), mix(float(_1120 < dot(texture2D(u_shadowMapTex, _1124 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1120 < dot(texture2D(u_shadowMapTex, _1124 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1159), _1131.x);\n            break;\n        }\n        _1169 = _1166;\n    }\n    else\n    {\n        _1169 = _1059;\n    }\n    bool _1388 = _1078 ? true : _1387;\n    bool _1183 = (!_1388) && (_755 < u_csmFarBounds.z);\n    highp float _1274 = 0.0;\n    if (_1183)\n    {\n        highp vec3 _1194 = ((u_csmLightSpaceMatrices[2] * _751).xyz * 0.5) + vec3(0.5);\n        highp float _1196 = _1194.x;\n        highp float _1199 = _1194.y;\n        highp float _1207 = (((_1194.z + step(_1196, 0.001000000047497451305389404296875)) + step(_1199, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1196)) + step(0.999000012874603271484375, _1199);\n        highp float _1271 = 0.0;\n        for (int SPIRV_Cross_Dummy413 = 0; SPIRV_Cross_Dummy413 < 1; SPIRV_Cross_Dummy413++)\n        {\n            if (_1207 > 1.0)\n            {\n                _1271 = 1.0;\n                break;\n            }\n            highp float _1225 = _1207 - 0.001000000047497451305389404296875;\n            highp vec2 _1229 = ((_1194.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1236 = fract(_1229 * vec2(2048.0));\n            highp float _1264 = _1236.y;\n            _1271 = mix(mix(float(_1225 < dot(texture2D(u_shadowMapTex, _1229), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1225 < dot(texture2D(u_shadowMapTex, _1229 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1264), mix(float(_1225 < dot(texture2D(u_shadowMapTex, _1229 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1225 < dot(texture2D(u_shadowMapTex, _1229 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1264), _1236.x);\n            break;\n        }\n        _1274 = _1271;\n    }\n    else\n    {\n        _1274 = _1169;\n    }\n    highp float _1379 = 0.0;\n    if ((!(_1183 ? true : _1388)) && (_755 < u_csmFarBounds.w))\n    {\n        highp vec3 _1299 = ((u_csmLightSpaceMatrices[3] * _751).xyz * 0.5) + vec3(0.5);\n        highp float _1301 = _1299.x;\n        highp float _1304 = _1299.y;\n        highp float _1312 = (((_1299.z + step(_1301, 0.001000000047497451305389404296875)) + step(_1304, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1301)) + step(0.999000012874603271484375, _1304);\n        highp float _1376 = 0.0;\n        for (int SPIRV_Cross_Dummy483 = 0; SPIRV_Cross_Dummy483 < 1; SPIRV_Cross_Dummy483++)\n        {\n            if (_1312 > 1.0)\n            {\n                _1376 = 1.0;\n                break;\n            }\n            highp float _1330 = _1312 - 0.001000000047497451305389404296875;\n            highp vec2 _1334 = ((_1299.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1341 = fract(_1334 * vec2(2048.0));\n            highp float _1369 = _1341.y;\n            _1376 = mix(mix(float(_1330 < dot(texture2D(u_shadowMapTex, _1334), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1330 < dot(texture2D(u_shadowMapTex, _1334 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1369), mix(float(_1330 < dot(texture2D(u_shadowMapTex, _1334 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1330 < dot(texture2D(u_shadowMapTex, _1334 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1369), _1341.x);\n            break;\n        }\n        _1379 = _1376;\n    }\n    else\n    {\n        _1379 = _1274;\n    }\n    highp vec3 _663 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_626.xyz * (min(_663, mix(max(_663 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1379))), u_shadowColor), _663, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_697, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_697, _697)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _618.w))), _626.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _361 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _369 = (_361 * _Color) * _AlbedoIntensity;\n    highp float _371 = _369.w;\n    if ((_371 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _380 = normalize(varying_LightDir);\n    highp vec3 _386 = normalize(varying_WorldNormal);\n    highp vec4 _422 = vec4(_369.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_380, _386))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _380), _386)), _Shininess * 128.0)) * (_SpecColor.xyz * _361.w))), _371);\n    highp float _466 = length(varying_positionCamera_Fog);\n    highp float _549 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _549 = (u_fogInfos.z - _466) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _550 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _550 = 1.0 / pow(2.7182800769805908203125, _466 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _551 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _551 = 1.0 / pow(2.7182800769805908203125, ((_466 * _466) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _551 = 1.0;\n            }\n            _550 = _551;\n        }\n        _549 = _550;\n    }\n    highp float _512 = clamp(_549, 0.0, 1.0);\n    highp vec3 _521 = (_422.xyz * _512) + (u_fogColor * (1.0 - _512));\n    gl_FragData[0] = vec4(_521.x, _521.y, _521.z, _422.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _403 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _411 = (_403 * _Color) * _AlbedoIntensity;\n    highp float _413 = _411.w;\n    if ((_413 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _422 = normalize(varying_LightDir);\n    highp vec4 _434 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _494 = (_434.xy - vec2(0.5)) * 2.0;\n    highp vec3 _505 = vec3(_494, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_494, _494))));\n    highp vec4 _457 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _476 = vec4(_411.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_422, _505))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _422), _505)), _Shininess * 128.0)) * (_457.xyz * _SpecColor.xyz))), _413);\n    highp float _540 = length(varying_positionCamera_Fog);\n    highp float _621 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _621 = (u_fogInfos.z - _540) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _622 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _622 = 1.0 / pow(2.7182800769805908203125, _540 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _623 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _623 = 1.0 / pow(2.7182800769805908203125, ((_540 * _540) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _623 = 1.0;\n            }\n            _622 = _623;\n        }\n        _621 = _622;\n    }\n    highp float _586 = clamp(_621, 0.0, 1.0);\n    highp vec3 _595 = (_476.xyz * _586) + (u_fogColor * (1.0 - _586));\n    gl_FragData[0] = vec4(_595.x, _595.y, _595.z, _476.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _586 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _594 = (_586 * _Color) * _AlbedoIntensity;\n    highp vec3 _603 = normalize(varying_WorldNormal);\n    highp vec4 _697 = vec4(varying_ShadowPosition, 1.0);\n    highp float _701 = -(u_view * _697).z;\n    bool _714 = true && (_701 < u_csmFarBounds.x);\n    highp float _1004 = 0.0;\n    if (_714)\n    {\n        highp vec3 _729 = ((u_csmLightSpaceMatrices[0] * _697).xyz * 0.5) + vec3(0.5);\n        highp float _733 = _729.x;\n        highp float _737 = _729.y;\n        highp float _747 = (((_729.z + step(_733, 0.001000000047497451305389404296875)) + step(_737, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _733)) + step(0.999000012874603271484375, _737);\n        highp float _1001 = 0.0;\n        for (int SPIRV_Cross_Dummy258 = 0; SPIRV_Cross_Dummy258 < 1; SPIRV_Cross_Dummy258++)\n        {\n            if (_747 > 1.0)\n            {\n                _1001 = 1.0;\n                break;\n            }\n            highp float _798 = _747 - 0.001000000047497451305389404296875;\n            highp vec2 _804 = ((_729.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _815 = fract(_804 * vec2(2048.0));\n            highp float _870 = _815.y;\n            _1001 = mix(mix(float(_798 < dot(texture2D(u_shadowMapTex, _804), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_798 < dot(texture2D(u_shadowMapTex, _804 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _870), mix(float(_798 < dot(texture2D(u_shadowMapTex, _804 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_798 < dot(texture2D(u_shadowMapTex, _804 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _870), _815.x);\n            break;\n        }\n        _1004 = _1001;\n    }\n    else\n    {\n        _1004 = 1.0;\n    }\n    bool _1331 = _714 ? true : false;\n    bool _1022 = (!_1331) && (_701 < u_csmFarBounds.y);\n    highp float _1113 = 0.0;\n    if (_1022)\n    {\n        highp vec3 _1033 = ((u_csmLightSpaceMatrices[1] * _697).xyz * 0.5) + vec3(0.5);\n        highp float _1035 = _1033.x;\n        highp float _1038 = _1033.y;\n        highp float _1046 = (((_1033.z + step(_1035, 0.001000000047497451305389404296875)) + step(_1038, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1035)) + step(0.999000012874603271484375, _1038);\n        highp float _1110 = 0.0;\n        for (int SPIRV_Cross_Dummy334 = 0; SPIRV_Cross_Dummy334 < 1; SPIRV_Cross_Dummy334++)\n        {\n            if (_1046 > 1.0)\n            {\n                _1110 = 1.0;\n                break;\n            }\n            highp float _1064 = _1046 - 0.001000000047497451305389404296875;\n            highp vec2 _1068 = ((_1033.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1075 = fract(_1068 * vec2(2048.0));\n            highp float _1103 = _1075.y;\n            _1110 = mix(mix(float(_1064 < dot(texture2D(u_shadowMapTex, _1068), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1064 < dot(texture2D(u_shadowMapTex, _1068 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1103), mix(float(_1064 < dot(texture2D(u_shadowMapTex, _1068 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1064 < dot(texture2D(u_shadowMapTex, _1068 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1103), _1075.x);\n            break;\n        }\n        _1113 = _1110;\n    }\n    else\n    {\n        _1113 = _1004;\n    }\n    bool _1332 = _1022 ? true : _1331;\n    bool _1127 = (!_1332) && (_701 < u_csmFarBounds.z);\n    highp float _1218 = 0.0;\n    if (_1127)\n    {\n        highp vec3 _1138 = ((u_csmLightSpaceMatrices[2] * _697).xyz * 0.5) + vec3(0.5);\n        highp float _1140 = _1138.x;\n        highp float _1143 = _1138.y;\n        highp float _1151 = (((_1138.z + step(_1140, 0.001000000047497451305389404296875)) + step(_1143, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1140)) + step(0.999000012874603271484375, _1143);\n        highp float _1215 = 0.0;\n        for (int SPIRV_Cross_Dummy410 = 0; SPIRV_Cross_Dummy410 < 1; SPIRV_Cross_Dummy410++)\n        {\n            if (_1151 > 1.0)\n            {\n                _1215 = 1.0;\n                break;\n            }\n            highp float _1169 = _1151 - 0.001000000047497451305389404296875;\n            highp vec2 _1173 = ((_1138.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1180 = fract(_1173 * vec2(2048.0));\n            highp float _1208 = _1180.y;\n            _1215 = mix(mix(float(_1169 < dot(texture2D(u_shadowMapTex, _1173), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1169 < dot(texture2D(u_shadowMapTex, _1173 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1208), mix(float(_1169 < dot(texture2D(u_shadowMapTex, _1173 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1169 < dot(texture2D(u_shadowMapTex, _1173 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1208), _1180.x);\n            break;\n        }\n        _1218 = _1215;\n    }\n    else\n    {\n        _1218 = _1113;\n    }\n    highp float _1323 = 0.0;\n    if ((!(_1127 ? true : _1332)) && (_701 < u_csmFarBounds.w))\n    {\n        highp vec3 _1243 = ((u_csmLightSpaceMatrices[3] * _697).xyz * 0.5) + vec3(0.5);\n        highp float _1245 = _1243.x;\n        highp float _1248 = _1243.y;\n        highp float _1256 = (((_1243.z + step(_1245, 0.001000000047497451305389404296875)) + step(_1248, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1245)) + step(0.999000012874603271484375, _1248);\n        highp float _1320 = 0.0;\n        for (int SPIRV_Cross_Dummy480 = 0; SPIRV_Cross_Dummy480 < 1; SPIRV_Cross_Dummy480++)\n        {\n            if (_1256 > 1.0)\n            {\n                _1320 = 1.0;\n                break;\n            }\n            highp float _1274 = _1256 - 0.001000000047497451305389404296875;\n            highp vec2 _1278 = ((_1243.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1285 = fract(_1278 * vec2(2048.0));\n            highp float _1313 = _1285.y;\n            _1320 = mix(mix(float(_1274 < dot(texture2D(u_shadowMapTex, _1278), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1274 < dot(texture2D(u_shadowMapTex, _1278 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1313), mix(float(_1274 < dot(texture2D(u_shadowMapTex, _1278 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1274 < dot(texture2D(u_shadowMapTex, _1278 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1313), _1285.x);\n            break;\n        }\n        _1323 = _1320;\n    }\n    else\n    {\n        _1323 = _1218;\n    }\n    highp vec3 _624 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_594.xyz * (min(_624, mix(max(_624 - (u_lightColor * (clamp(dot(_603, u_lightDir), 0.0, 1.0) * (1.0 - _1323))), u_shadowColor), _624, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _603)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _594.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _422 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _430 = (_422 * _Color) * _AlbedoIntensity;\n    highp vec4 _455 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _457 = _455.xyz * 2.0;\n    highp vec4 _467 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _486 = vec4(_430.xyz * (min(_457, mix(max(_457, u_shadowColor), _457, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_467.xyz * _SpecColor.xyz))), _430.w);\n    highp float _567 = length(varying_positionCamera_Fog);\n    highp float _652 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _652 = (u_fogInfos.z - _567) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _653 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _653 = 1.0 / pow(2.7182800769805908203125, _567 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _654 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _654 = 1.0 / pow(2.7182800769805908203125, ((_567 * _567) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _654 = 1.0;\n            }\n            _653 = _654;\n        }\n        _652 = _653;\n    }\n    highp float _613 = clamp(_652, 0.0, 1.0);\n    highp vec3 _622 = (_486.xyz * _613) + (u_fogColor * (1.0 - _613));\n    gl_FragData[0] = vec4(_622.x, _622.y, _622.z, _486.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _454 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _462 = (_454 * _Color) * _AlbedoIntensity;\n    highp vec4 _477 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _537 = (_477.xy - vec2(0.5)) * 2.0;\n    highp vec4 _494 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _496 = _494.xyz * 2.0;\n    highp vec4 _520 = vec4(_462.xyz * (min(_496, mix(max(_496, u_shadowColor), _496, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_537, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_537, _537)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _454.w))), _462.w);\n    highp float _621 = length(varying_positionCamera_Fog);\n    highp float _707 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _707 = (u_fogInfos.z - _621) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _708 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _708 = 1.0 / pow(2.7182800769805908203125, _621 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _709 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _709 = 1.0 / pow(2.7182800769805908203125, ((_621 * _621) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _709 = 1.0;\n            }\n            _708 = _709;\n        }\n        _707 = _708;\n    }\n    highp float _667 = clamp(_707, 0.0, 1.0);\n    highp vec3 _676 = (_520.xyz * _667) + (u_fogColor * (1.0 - _667));\n    gl_FragData[0] = vec4(_676.x, _676.y, _676.z, _520.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _637 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _645 = (_637 * _Color) * _AlbedoIntensity;\n    highp float _647 = _645.w;\n    if ((_647 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _656 = normalize(varying_LightDir);\n    highp vec3 _662 = normalize(varying_WorldNormal);\n    highp vec4 _771 = vec4(varying_ShadowPosition, 1.0);\n    highp float _775 = -(u_view * _771).z;\n    bool _788 = true && (_775 < u_csmFarBounds.x);\n    highp float _1114 = 0.0;\n    if (_788)\n    {\n        highp vec3 _803 = ((u_csmLightSpaceMatrices[0] * _771).xyz * 0.5) + vec3(0.5);\n        highp float _807 = _803.x;\n        highp float _811 = _803.y;\n        highp float _821 = (((_803.z + step(_807, 0.001000000047497451305389404296875)) + step(_811, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _807)) + step(0.999000012874603271484375, _811);\n        highp float _1111 = 0.0;\n        for (int SPIRV_Cross_Dummy268 = 0; SPIRV_Cross_Dummy268 < 1; SPIRV_Cross_Dummy268++)\n        {\n            if (_821 > 1.0)\n            {\n                _1111 = 1.0;\n                break;\n            }\n            highp float _872 = _821 - 0.001000000047497451305389404296875;\n            highp vec2 _878 = ((_803.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _889 = fract(_878 * vec2(2048.0));\n            highp float _944 = _889.y;\n            _1111 = mix(mix(float(_872 < dot(texture2D(u_shadowMapTex, _878), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_872 < dot(texture2D(u_shadowMapTex, _878 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _944), mix(float(_872 < dot(texture2D(u_shadowMapTex, _878 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_872 < dot(texture2D(u_shadowMapTex, _878 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _944), _889.x);\n            break;\n        }\n        _1114 = _1111;\n    }\n    else\n    {\n        _1114 = 1.0;\n    }\n    bool _1441 = _788 ? true : false;\n    bool _1132 = (!_1441) && (_775 < u_csmFarBounds.y);\n    highp float _1223 = 0.0;\n    if (_1132)\n    {\n        highp vec3 _1143 = ((u_csmLightSpaceMatrices[1] * _771).xyz * 0.5) + vec3(0.5);\n        highp float _1145 = _1143.x;\n        highp float _1148 = _1143.y;\n        highp float _1156 = (((_1143.z + step(_1145, 0.001000000047497451305389404296875)) + step(_1148, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1145)) + step(0.999000012874603271484375, _1148);\n        highp float _1220 = 0.0;\n        for (int SPIRV_Cross_Dummy344 = 0; SPIRV_Cross_Dummy344 < 1; SPIRV_Cross_Dummy344++)\n        {\n            if (_1156 > 1.0)\n            {\n                _1220 = 1.0;\n                break;\n            }\n            highp float _1174 = _1156 - 0.001000000047497451305389404296875;\n            highp vec2 _1178 = ((_1143.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1185 = fract(_1178 * vec2(2048.0));\n            highp float _1213 = _1185.y;\n            _1220 = mix(mix(float(_1174 < dot(texture2D(u_shadowMapTex, _1178), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1174 < dot(texture2D(u_shadowMapTex, _1178 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1213), mix(float(_1174 < dot(texture2D(u_shadowMapTex, _1178 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1174 < dot(texture2D(u_shadowMapTex, _1178 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1213), _1185.x);\n            break;\n        }\n        _1223 = _1220;\n    }\n    else\n    {\n        _1223 = _1114;\n    }\n    bool _1442 = _1132 ? true : _1441;\n    bool _1237 = (!_1442) && (_775 < u_csmFarBounds.z);\n    highp float _1328 = 0.0;\n    if (_1237)\n    {\n        highp vec3 _1248 = ((u_csmLightSpaceMatrices[2] * _771).xyz * 0.5) + vec3(0.5);\n        highp float _1250 = _1248.x;\n        highp float _1253 = _1248.y;\n        highp float _1261 = (((_1248.z + step(_1250, 0.001000000047497451305389404296875)) + step(_1253, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1250)) + step(0.999000012874603271484375, _1253);\n        highp float _1325 = 0.0;\n        for (int SPIRV_Cross_Dummy420 = 0; SPIRV_Cross_Dummy420 < 1; SPIRV_Cross_Dummy420++)\n        {\n            if (_1261 > 1.0)\n            {\n                _1325 = 1.0;\n                break;\n            }\n            highp float _1279 = _1261 - 0.001000000047497451305389404296875;\n            highp vec2 _1283 = ((_1248.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1290 = fract(_1283 * vec2(2048.0));\n            highp float _1318 = _1290.y;\n            _1325 = mix(mix(float(_1279 < dot(texture2D(u_shadowMapTex, _1283), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1279 < dot(texture2D(u_shadowMapTex, _1283 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1318), mix(float(_1279 < dot(texture2D(u_shadowMapTex, _1283 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1279 < dot(texture2D(u_shadowMapTex, _1283 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1318), _1290.x);\n            break;\n        }\n        _1328 = _1325;\n    }\n    else\n    {\n        _1328 = _1223;\n    }\n    highp float _1433 = 0.0;\n    if ((!(_1237 ? true : _1442)) && (_775 < u_csmFarBounds.w))\n    {\n        highp vec3 _1353 = ((u_csmLightSpaceMatrices[3] * _771).xyz * 0.5) + vec3(0.5);\n        highp float _1355 = _1353.x;\n        highp float _1358 = _1353.y;\n        highp float _1366 = (((_1353.z + step(_1355, 0.001000000047497451305389404296875)) + step(_1358, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1355)) + step(0.999000012874603271484375, _1358);\n        highp float _1430 = 0.0;\n        for (int SPIRV_Cross_Dummy490 = 0; SPIRV_Cross_Dummy490 < 1; SPIRV_Cross_Dummy490++)\n        {\n            if (_1366 > 1.0)\n            {\n                _1430 = 1.0;\n                break;\n            }\n            highp float _1384 = _1366 - 0.001000000047497451305389404296875;\n            highp vec2 _1388 = ((_1353.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1395 = fract(_1388 * vec2(2048.0));\n            highp float _1423 = _1395.y;\n            _1430 = mix(mix(float(_1384 < dot(texture2D(u_shadowMapTex, _1388), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1384 < dot(texture2D(u_shadowMapTex, _1388 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1423), mix(float(_1384 < dot(texture2D(u_shadowMapTex, _1388 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1384 < dot(texture2D(u_shadowMapTex, _1388 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1423), _1395.x);\n            break;\n        }\n        _1433 = _1430;\n    }\n    else\n    {\n        _1433 = _1328;\n    }\n    highp vec4 _701 = vec4(_645.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_656, _662))) * _1433)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _656), _662)), _Shininess * 128.0)) * (_SpecColor.xyz * _637.w))), _647);\n    highp vec4 _707 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _992 = length(varying_positionCamera_Fog);\n    highp float _1104 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1104 = (u_fogInfos.z - _992) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1105 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1105 = 1.0 / pow(2.7182800769805908203125, _992 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1106 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1106 = 1.0 / pow(2.7182800769805908203125, ((_992 * _992) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1106 = 1.0;\n            }\n            _1105 = _1106;\n        }\n        _1104 = _1105;\n    }\n    highp float _1038 = clamp(_1104, 0.0, 1.0);\n    highp vec3 _1047 = ((_701.xyz + (_EmissionColor.xyz * _707.x)).xyz * _1038) + (u_fogColor * (1.0 - _1038));\n    gl_FragData[0] = vec4(_1047.x, _1047.y, _1047.z, _701.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _677 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _685 = (_677 * _Color) * _AlbedoIntensity;\n    highp float _687 = _685.w;\n    if ((_687 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _696 = normalize(varying_LightDir);\n    highp vec4 _708 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _789 = (_708.xy - vec2(0.5)) * 2.0;\n    highp vec3 _800 = vec3(_789, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_789, _789))));\n    highp vec4 _843 = vec4(varying_ShadowPosition, 1.0);\n    highp float _847 = -(u_view * _843).z;\n    bool _860 = true && (_847 < u_csmFarBounds.x);\n    highp float _1184 = 0.0;\n    if (_860)\n    {\n        highp vec3 _875 = ((u_csmLightSpaceMatrices[0] * _843).xyz * 0.5) + vec3(0.5);\n        highp float _879 = _875.x;\n        highp float _883 = _875.y;\n        highp float _893 = (((_875.z + step(_879, 0.001000000047497451305389404296875)) + step(_883, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _879)) + step(0.999000012874603271484375, _883);\n        highp float _1181 = 0.0;\n        for (int SPIRV_Cross_Dummy276 = 0; SPIRV_Cross_Dummy276 < 1; SPIRV_Cross_Dummy276++)\n        {\n            if (_893 > 1.0)\n            {\n                _1181 = 1.0;\n                break;\n            }\n            highp float _944 = _893 - 0.001000000047497451305389404296875;\n            highp vec2 _950 = ((_875.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _961 = fract(_950 * vec2(2048.0));\n            highp float _1016 = _961.y;\n            _1181 = mix(mix(float(_944 < dot(texture2D(u_shadowMapTex, _950), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_944 < dot(texture2D(u_shadowMapTex, _950 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1016), mix(float(_944 < dot(texture2D(u_shadowMapTex, _950 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_944 < dot(texture2D(u_shadowMapTex, _950 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1016), _961.x);\n            break;\n        }\n        _1184 = _1181;\n    }\n    else\n    {\n        _1184 = 1.0;\n    }\n    bool _1512 = _860 ? true : false;\n    bool _1203 = (!_1512) && (_847 < u_csmFarBounds.y);\n    highp float _1294 = 0.0;\n    if (_1203)\n    {\n        highp vec3 _1214 = ((u_csmLightSpaceMatrices[1] * _843).xyz * 0.5) + vec3(0.5);\n        highp float _1216 = _1214.x;\n        highp float _1219 = _1214.y;\n        highp float _1227 = (((_1214.z + step(_1216, 0.001000000047497451305389404296875)) + step(_1219, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1216)) + step(0.999000012874603271484375, _1219);\n        highp float _1291 = 0.0;\n        for (int SPIRV_Cross_Dummy352 = 0; SPIRV_Cross_Dummy352 < 1; SPIRV_Cross_Dummy352++)\n        {\n            if (_1227 > 1.0)\n            {\n                _1291 = 1.0;\n                break;\n            }\n            highp float _1245 = _1227 - 0.001000000047497451305389404296875;\n            highp vec2 _1249 = ((_1214.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1256 = fract(_1249 * vec2(2048.0));\n            highp float _1284 = _1256.y;\n            _1291 = mix(mix(float(_1245 < dot(texture2D(u_shadowMapTex, _1249), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1245 < dot(texture2D(u_shadowMapTex, _1249 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1284), mix(float(_1245 < dot(texture2D(u_shadowMapTex, _1249 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1245 < dot(texture2D(u_shadowMapTex, _1249 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1284), _1256.x);\n            break;\n        }\n        _1294 = _1291;\n    }\n    else\n    {\n        _1294 = _1184;\n    }\n    bool _1513 = _1203 ? true : _1512;\n    bool _1308 = (!_1513) && (_847 < u_csmFarBounds.z);\n    highp float _1399 = 0.0;\n    if (_1308)\n    {\n        highp vec3 _1319 = ((u_csmLightSpaceMatrices[2] * _843).xyz * 0.5) + vec3(0.5);\n        highp float _1321 = _1319.x;\n        highp float _1324 = _1319.y;\n        highp float _1332 = (((_1319.z + step(_1321, 0.001000000047497451305389404296875)) + step(_1324, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1321)) + step(0.999000012874603271484375, _1324);\n        highp float _1396 = 0.0;\n        for (int SPIRV_Cross_Dummy428 = 0; SPIRV_Cross_Dummy428 < 1; SPIRV_Cross_Dummy428++)\n        {\n            if (_1332 > 1.0)\n            {\n                _1396 = 1.0;\n                break;\n            }\n            highp float _1350 = _1332 - 0.001000000047497451305389404296875;\n            highp vec2 _1354 = ((_1319.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1361 = fract(_1354 * vec2(2048.0));\n            highp float _1389 = _1361.y;\n            _1396 = mix(mix(float(_1350 < dot(texture2D(u_shadowMapTex, _1354), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1350 < dot(texture2D(u_shadowMapTex, _1354 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1389), mix(float(_1350 < dot(texture2D(u_shadowMapTex, _1354 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1350 < dot(texture2D(u_shadowMapTex, _1354 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1389), _1361.x);\n            break;\n        }\n        _1399 = _1396;\n    }\n    else\n    {\n        _1399 = _1294;\n    }\n    highp float _1504 = 0.0;\n    if ((!(_1308 ? true : _1513)) && (_847 < u_csmFarBounds.w))\n    {\n        highp vec3 _1424 = ((u_csmLightSpaceMatrices[3] * _843).xyz * 0.5) + vec3(0.5);\n        highp float _1426 = _1424.x;\n        highp float _1429 = _1424.y;\n        highp float _1437 = (((_1424.z + step(_1426, 0.001000000047497451305389404296875)) + step(_1429, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1426)) + step(0.999000012874603271484375, _1429);\n        highp float _1501 = 0.0;\n        for (int SPIRV_Cross_Dummy498 = 0; SPIRV_Cross_Dummy498 < 1; SPIRV_Cross_Dummy498++)\n        {\n            if (_1437 > 1.0)\n            {\n                _1501 = 1.0;\n                break;\n            }\n            highp float _1455 = _1437 - 0.001000000047497451305389404296875;\n            highp vec2 _1459 = ((_1424.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1466 = fract(_1459 * vec2(2048.0));\n            highp float _1494 = _1466.y;\n            _1501 = mix(mix(float(_1455 < dot(texture2D(u_shadowMapTex, _1459), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1455 < dot(texture2D(u_shadowMapTex, _1459 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1494), mix(float(_1455 < dot(texture2D(u_shadowMapTex, _1459 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1455 < dot(texture2D(u_shadowMapTex, _1459 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1494), _1466.x);\n            break;\n        }\n        _1504 = _1501;\n    }\n    else\n    {\n        _1504 = _1399;\n    }\n    highp vec4 _734 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _753 = vec4(_685.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_696, _800))) * _1504)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _696), _800)), _Shininess * 128.0)) * (_734.xyz * _SpecColor.xyz))), _687);\n    highp vec4 _759 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1064 = length(varying_positionCamera_Fog);\n    highp float _1174 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1174 = (u_fogInfos.z - _1064) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1175 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1175 = 1.0 / pow(2.7182800769805908203125, _1064 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1176 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1176 = 1.0 / pow(2.7182800769805908203125, ((_1064 * _1064) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1176 = 1.0;\n            }\n            _1175 = _1176;\n        }\n        _1174 = _1175;\n    }\n    highp float _1110 = clamp(_1174, 0.0, 1.0);\n    highp vec3 _1119 = ((_753.xyz + (_EmissionColor.xyz * _759.x)).xyz * _1110) + (u_fogColor * (1.0 - _1110));\n    gl_FragData[0] = vec4(_1119.x, _1119.y, _1119.z, _753.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _420 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _428 = (_420 * _Color) * _AlbedoIntensity;\n    highp vec4 _453 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _455 = _453.xyz * 2.0;\n    highp vec4 _465 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _484 = vec4(_428.xyz * (min(_455, mix(max(_455, u_shadowColor), _455, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_465.xyz * _SpecColor.xyz))), _428.w);\n    highp float _565 = length(varying_positionCamera_Fog);\n    highp float _650 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _650 = (u_fogInfos.z - _565) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _651 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _651 = 1.0 / pow(2.7182800769805908203125, _565 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _652 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _652 = 1.0 / pow(2.7182800769805908203125, ((_565 * _565) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _652 = 1.0;\n            }\n            _651 = _652;\n        }\n        _650 = _651;\n    }\n    highp float _611 = clamp(_650, 0.0, 1.0);\n    highp vec3 _620 = (_484.xyz * _611) + (u_fogColor * (1.0 - _611));\n    gl_FragData[0] = vec4(_620.x, _620.y, _620.z, _484.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _635 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _643 = (_635 * _Color) * _AlbedoIntensity;\n    highp float _645 = _643.w;\n    if ((_645 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _654 = normalize(varying_LightDir);\n    highp vec3 _660 = normalize(varying_WorldNormal);\n    highp vec4 _769 = vec4(varying_ShadowPosition, 1.0);\n    highp float _773 = -(u_view * _769).z;\n    bool _786 = true && (_773 < u_csmFarBounds.x);\n    highp float _1112 = 0.0;\n    if (_786)\n    {\n        highp vec3 _801 = ((u_csmLightSpaceMatrices[0] * _769).xyz * 0.5) + vec3(0.5);\n        highp float _805 = _801.x;\n        highp float _809 = _801.y;\n        highp float _819 = (((_801.z + step(_805, 0.001000000047497451305389404296875)) + step(_809, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _805)) + step(0.999000012874603271484375, _809);\n        highp float _1109 = 0.0;\n        for (int SPIRV_Cross_Dummy268 = 0; SPIRV_Cross_Dummy268 < 1; SPIRV_Cross_Dummy268++)\n        {\n            if (_819 > 1.0)\n            {\n                _1109 = 1.0;\n                break;\n            }\n            highp float _870 = _819 - 0.001000000047497451305389404296875;\n            highp vec2 _876 = ((_801.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _887 = fract(_876 * vec2(2048.0));\n            highp float _942 = _887.y;\n            _1109 = mix(mix(float(_870 < dot(texture2D(u_shadowMapTex, _876), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_870 < dot(texture2D(u_shadowMapTex, _876 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _942), mix(float(_870 < dot(texture2D(u_shadowMapTex, _876 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_870 < dot(texture2D(u_shadowMapTex, _876 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _942), _887.x);\n            break;\n        }\n        _1112 = _1109;\n    }\n    else\n    {\n        _1112 = 1.0;\n    }\n    bool _1439 = _786 ? true : false;\n    bool _1130 = (!_1439) && (_773 < u_csmFarBounds.y);\n    highp float _1221 = 0.0;\n    if (_1130)\n    {\n        highp vec3 _1141 = ((u_csmLightSpaceMatrices[1] * _769).xyz * 0.5) + vec3(0.5);\n        highp float _1143 = _1141.x;\n        highp float _1146 = _1141.y;\n        highp float _1154 = (((_1141.z + step(_1143, 0.001000000047497451305389404296875)) + step(_1146, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1143)) + step(0.999000012874603271484375, _1146);\n        highp float _1218 = 0.0;\n        for (int SPIRV_Cross_Dummy344 = 0; SPIRV_Cross_Dummy344 < 1; SPIRV_Cross_Dummy344++)\n        {\n            if (_1154 > 1.0)\n            {\n                _1218 = 1.0;\n                break;\n            }\n            highp float _1172 = _1154 - 0.001000000047497451305389404296875;\n            highp vec2 _1176 = ((_1141.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1183 = fract(_1176 * vec2(2048.0));\n            highp float _1211 = _1183.y;\n            _1218 = mix(mix(float(_1172 < dot(texture2D(u_shadowMapTex, _1176), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1172 < dot(texture2D(u_shadowMapTex, _1176 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1211), mix(float(_1172 < dot(texture2D(u_shadowMapTex, _1176 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1172 < dot(texture2D(u_shadowMapTex, _1176 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1211), _1183.x);\n            break;\n        }\n        _1221 = _1218;\n    }\n    else\n    {\n        _1221 = _1112;\n    }\n    bool _1440 = _1130 ? true : _1439;\n    bool _1235 = (!_1440) && (_773 < u_csmFarBounds.z);\n    highp float _1326 = 0.0;\n    if (_1235)\n    {\n        highp vec3 _1246 = ((u_csmLightSpaceMatrices[2] * _769).xyz * 0.5) + vec3(0.5);\n        highp float _1248 = _1246.x;\n        highp float _1251 = _1246.y;\n        highp float _1259 = (((_1246.z + step(_1248, 0.001000000047497451305389404296875)) + step(_1251, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1248)) + step(0.999000012874603271484375, _1251);\n        highp float _1323 = 0.0;\n        for (int SPIRV_Cross_Dummy420 = 0; SPIRV_Cross_Dummy420 < 1; SPIRV_Cross_Dummy420++)\n        {\n            if (_1259 > 1.0)\n            {\n                _1323 = 1.0;\n                break;\n            }\n            highp float _1277 = _1259 - 0.001000000047497451305389404296875;\n            highp vec2 _1281 = ((_1246.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1288 = fract(_1281 * vec2(2048.0));\n            highp float _1316 = _1288.y;\n            _1323 = mix(mix(float(_1277 < dot(texture2D(u_shadowMapTex, _1281), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1277 < dot(texture2D(u_shadowMapTex, _1281 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1316), mix(float(_1277 < dot(texture2D(u_shadowMapTex, _1281 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1277 < dot(texture2D(u_shadowMapTex, _1281 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1316), _1288.x);\n            break;\n        }\n        _1326 = _1323;\n    }\n    else\n    {\n        _1326 = _1221;\n    }\n    highp float _1431 = 0.0;\n    if ((!(_1235 ? true : _1440)) && (_773 < u_csmFarBounds.w))\n    {\n        highp vec3 _1351 = ((u_csmLightSpaceMatrices[3] * _769).xyz * 0.5) + vec3(0.5);\n        highp float _1353 = _1351.x;\n        highp float _1356 = _1351.y;\n        highp float _1364 = (((_1351.z + step(_1353, 0.001000000047497451305389404296875)) + step(_1356, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1353)) + step(0.999000012874603271484375, _1356);\n        highp float _1428 = 0.0;\n        for (int SPIRV_Cross_Dummy490 = 0; SPIRV_Cross_Dummy490 < 1; SPIRV_Cross_Dummy490++)\n        {\n            if (_1364 > 1.0)\n            {\n                _1428 = 1.0;\n                break;\n            }\n            highp float _1382 = _1364 - 0.001000000047497451305389404296875;\n            highp vec2 _1386 = ((_1351.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1393 = fract(_1386 * vec2(2048.0));\n            highp float _1421 = _1393.y;\n            _1428 = mix(mix(float(_1382 < dot(texture2D(u_shadowMapTex, _1386), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1382 < dot(texture2D(u_shadowMapTex, _1386 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1421), mix(float(_1382 < dot(texture2D(u_shadowMapTex, _1386 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1382 < dot(texture2D(u_shadowMapTex, _1386 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1421), _1393.x);\n            break;\n        }\n        _1431 = _1428;\n    }\n    else\n    {\n        _1431 = _1326;\n    }\n    highp vec4 _699 = vec4(_643.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_654, _660))) * _1431)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _654), _660)), _Shininess * 128.0)) * (_SpecColor.xyz * _635.w))), _645);\n    highp vec4 _705 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _990 = length(varying_positionCamera_Fog);\n    highp float _1102 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1102 = (u_fogInfos.z - _990) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1103 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1103 = 1.0 / pow(2.7182800769805908203125, _990 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1104 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1104 = 1.0 / pow(2.7182800769805908203125, ((_990 * _990) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1104 = 1.0;\n            }\n            _1103 = _1104;\n        }\n        _1102 = _1103;\n    }\n    highp float _1036 = clamp(_1102, 0.0, 1.0);\n    highp vec3 _1045 = ((_699.xyz + (_EmissionColor.xyz * _705.x)).xyz * _1036) + (u_fogColor * (1.0 - _1036));\n    gl_FragData[0] = vec4(_1045.x, _1045.y, _1045.z, _699.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _427 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _435 = (_427 * _Color) * _AlbedoIntensity;\n    highp float _437 = _435.w;\n    if ((_437 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _446 = normalize(varying_LightDir);\n    highp vec4 _458 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _536 = (_458.xy - vec2(0.5)) * 2.0;\n    highp vec3 _547 = vec3(_536, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_536, _536))));\n    highp vec4 _481 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _500 = vec4(_435.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_446, _547))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _446), _547)), _Shininess * 128.0)) * (_481.xyz * _SpecColor.xyz))), _437);\n    highp vec4 _506 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _582 = length(varying_positionCamera_Fog);\n    highp float _664 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _664 = (u_fogInfos.z - _582) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _665 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _665 = 1.0 / pow(2.7182800769805908203125, _582 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _666 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _666 = 1.0 / pow(2.7182800769805908203125, ((_582 * _582) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _666 = 1.0;\n            }\n            _665 = _666;\n        }\n        _664 = _665;\n    }\n    highp float _628 = clamp(_664, 0.0, 1.0);\n    highp vec3 _637 = ((_500.xyz + (_EmissionColor.xyz * _506.x)).xyz * _628) + (u_fogColor * (1.0 - _628));\n    gl_FragData[0] = vec4(_637.x, _637.y, _637.z, _500.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _640 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _648 = (_640 * _Color) * _AlbedoIntensity;\n    highp vec4 _663 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _737 = (_663.xy - vec2(0.5)) * 2.0;\n    highp vec4 _791 = vec4(varying_ShadowPosition, 1.0);\n    highp float _795 = -(u_view * _791).z;\n    bool _808 = true && (_795 < u_csmFarBounds.x);\n    highp float _1100 = 0.0;\n    if (_808)\n    {\n        highp vec3 _823 = ((u_csmLightSpaceMatrices[0] * _791).xyz * 0.5) + vec3(0.5);\n        highp float _827 = _823.x;\n        highp float _831 = _823.y;\n        highp float _841 = (((_823.z + step(_827, 0.001000000047497451305389404296875)) + step(_831, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _827)) + step(0.999000012874603271484375, _831);\n        highp float _1097 = 0.0;\n        for (int SPIRV_Cross_Dummy264 = 0; SPIRV_Cross_Dummy264 < 1; SPIRV_Cross_Dummy264++)\n        {\n            if (_841 > 1.0)\n            {\n                _1097 = 1.0;\n                break;\n            }\n            highp float _892 = _841 - 0.001000000047497451305389404296875;\n            highp vec2 _898 = ((_823.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _909 = fract(_898 * vec2(2048.0));\n            highp float _964 = _909.y;\n            _1097 = mix(mix(float(_892 < dot(texture2D(u_shadowMapTex, _898), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_892 < dot(texture2D(u_shadowMapTex, _898 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _964), mix(float(_892 < dot(texture2D(u_shadowMapTex, _898 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_892 < dot(texture2D(u_shadowMapTex, _898 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _964), _909.x);\n            break;\n        }\n        _1100 = _1097;\n    }\n    else\n    {\n        _1100 = 1.0;\n    }\n    bool _1427 = _808 ? true : false;\n    bool _1119 = (!_1427) && (_795 < u_csmFarBounds.y);\n    highp float _1210 = 0.0;\n    if (_1119)\n    {\n        highp vec3 _1130 = ((u_csmLightSpaceMatrices[1] * _791).xyz * 0.5) + vec3(0.5);\n        highp float _1132 = _1130.x;\n        highp float _1135 = _1130.y;\n        highp float _1143 = (((_1130.z + step(_1132, 0.001000000047497451305389404296875)) + step(_1135, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1132)) + step(0.999000012874603271484375, _1135);\n        highp float _1207 = 0.0;\n        for (int SPIRV_Cross_Dummy340 = 0; SPIRV_Cross_Dummy340 < 1; SPIRV_Cross_Dummy340++)\n        {\n            if (_1143 > 1.0)\n            {\n                _1207 = 1.0;\n                break;\n            }\n            highp float _1161 = _1143 - 0.001000000047497451305389404296875;\n            highp vec2 _1165 = ((_1130.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1172 = fract(_1165 * vec2(2048.0));\n            highp float _1200 = _1172.y;\n            _1207 = mix(mix(float(_1161 < dot(texture2D(u_shadowMapTex, _1165), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1161 < dot(texture2D(u_shadowMapTex, _1165 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1200), mix(float(_1161 < dot(texture2D(u_shadowMapTex, _1165 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1161 < dot(texture2D(u_shadowMapTex, _1165 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1200), _1172.x);\n            break;\n        }\n        _1210 = _1207;\n    }\n    else\n    {\n        _1210 = _1100;\n    }\n    bool _1428 = _1119 ? true : _1427;\n    bool _1224 = (!_1428) && (_795 < u_csmFarBounds.z);\n    highp float _1315 = 0.0;\n    if (_1224)\n    {\n        highp vec3 _1235 = ((u_csmLightSpaceMatrices[2] * _791).xyz * 0.5) + vec3(0.5);\n        highp float _1237 = _1235.x;\n        highp float _1240 = _1235.y;\n        highp float _1248 = (((_1235.z + step(_1237, 0.001000000047497451305389404296875)) + step(_1240, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1237)) + step(0.999000012874603271484375, _1240);\n        highp float _1312 = 0.0;\n        for (int SPIRV_Cross_Dummy416 = 0; SPIRV_Cross_Dummy416 < 1; SPIRV_Cross_Dummy416++)\n        {\n            if (_1248 > 1.0)\n            {\n                _1312 = 1.0;\n                break;\n            }\n            highp float _1266 = _1248 - 0.001000000047497451305389404296875;\n            highp vec2 _1270 = ((_1235.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1277 = fract(_1270 * vec2(2048.0));\n            highp float _1305 = _1277.y;\n            _1312 = mix(mix(float(_1266 < dot(texture2D(u_shadowMapTex, _1270), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1266 < dot(texture2D(u_shadowMapTex, _1270 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1305), mix(float(_1266 < dot(texture2D(u_shadowMapTex, _1270 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1266 < dot(texture2D(u_shadowMapTex, _1270 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1305), _1277.x);\n            break;\n        }\n        _1315 = _1312;\n    }\n    else\n    {\n        _1315 = _1210;\n    }\n    highp float _1420 = 0.0;\n    if ((!(_1224 ? true : _1428)) && (_795 < u_csmFarBounds.w))\n    {\n        highp vec3 _1340 = ((u_csmLightSpaceMatrices[3] * _791).xyz * 0.5) + vec3(0.5);\n        highp float _1342 = _1340.x;\n        highp float _1345 = _1340.y;\n        highp float _1353 = (((_1340.z + step(_1342, 0.001000000047497451305389404296875)) + step(_1345, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1342)) + step(0.999000012874603271484375, _1345);\n        highp float _1417 = 0.0;\n        for (int SPIRV_Cross_Dummy486 = 0; SPIRV_Cross_Dummy486 < 1; SPIRV_Cross_Dummy486++)\n        {\n            if (_1353 > 1.0)\n            {\n                _1417 = 1.0;\n                break;\n            }\n            highp float _1371 = _1353 - 0.001000000047497451305389404296875;\n            highp vec2 _1375 = ((_1340.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1382 = fract(_1375 * vec2(2048.0));\n            highp float _1410 = _1382.y;\n            _1417 = mix(mix(float(_1371 < dot(texture2D(u_shadowMapTex, _1375), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1371 < dot(texture2D(u_shadowMapTex, _1375 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1410), mix(float(_1371 < dot(texture2D(u_shadowMapTex, _1375 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1371 < dot(texture2D(u_shadowMapTex, _1375 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1410), _1382.x);\n            break;\n        }\n        _1420 = _1417;\n    }\n    else\n    {\n        _1420 = _1315;\n    }\n    highp vec3 _685 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _709 = vec4(_648.xyz * (min(_685, mix(max(_685 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1420))), u_shadowColor), _685, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_737, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_737, _737)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _640.w))), _648.w);\n    highp vec3 _725 = _709.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_725.x, _725.y, _725.z, _709.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\n\nvoid main()\n{\n    highp vec4 _316 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _324 = (_316 * _Color) * _AlbedoIntensity;\n    highp float _326 = _324.w;\n    if ((_326 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _335 = normalize(varying_LightDir);\n    highp vec2 _400 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _411 = vec3(_400, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_400, _400))));\n    gl_FragData[0] = vec4(_324.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_335, _411))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _335), _411)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _326);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _675 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _683 = (_675 * _Color) * _AlbedoIntensity;\n    highp vec3 _692 = normalize(varying_WorldNormal);\n    highp vec4 _793 = vec4(varying_ShadowPosition, 1.0);\n    highp float _797 = -(u_view * _793).z;\n    bool _810 = true && (_797 < u_csmFarBounds.x);\n    highp float _1175 = 0.0;\n    if (_810)\n    {\n        highp vec3 _825 = ((u_csmLightSpaceMatrices[0] * _793).xyz * 0.5) + vec3(0.5);\n        highp float _829 = _825.x;\n        highp float _833 = _825.y;\n        highp float _843 = (((_825.z + step(_829, 0.001000000047497451305389404296875)) + step(_833, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _829)) + step(0.999000012874603271484375, _833);\n        highp float _1172 = 0.0;\n        for (int SPIRV_Cross_Dummy262 = 0; SPIRV_Cross_Dummy262 < 1; SPIRV_Cross_Dummy262++)\n        {\n            if (_843 > 1.0)\n            {\n                _1172 = 1.0;\n                break;\n            }\n            highp float _894 = _843 - 0.001000000047497451305389404296875;\n            highp vec2 _900 = ((_825.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _911 = fract(_900 * vec2(2048.0));\n            highp float _966 = _911.y;\n            _1172 = mix(mix(float(_894 < dot(texture2D(u_shadowMapTex, _900), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_894 < dot(texture2D(u_shadowMapTex, _900 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _966), mix(float(_894 < dot(texture2D(u_shadowMapTex, _900 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_894 < dot(texture2D(u_shadowMapTex, _900 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _966), _911.x);\n            break;\n        }\n        _1175 = _1172;\n    }\n    else\n    {\n        _1175 = 1.0;\n    }\n    bool _1502 = _810 ? true : false;\n    bool _1193 = (!_1502) && (_797 < u_csmFarBounds.y);\n    highp float _1284 = 0.0;\n    if (_1193)\n    {\n        highp vec3 _1204 = ((u_csmLightSpaceMatrices[1] * _793).xyz * 0.5) + vec3(0.5);\n        highp float _1206 = _1204.x;\n        highp float _1209 = _1204.y;\n        highp float _1217 = (((_1204.z + step(_1206, 0.001000000047497451305389404296875)) + step(_1209, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1206)) + step(0.999000012874603271484375, _1209);\n        highp float _1281 = 0.0;\n        for (int SPIRV_Cross_Dummy338 = 0; SPIRV_Cross_Dummy338 < 1; SPIRV_Cross_Dummy338++)\n        {\n            if (_1217 > 1.0)\n            {\n                _1281 = 1.0;\n                break;\n            }\n            highp float _1235 = _1217 - 0.001000000047497451305389404296875;\n            highp vec2 _1239 = ((_1204.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1246 = fract(_1239 * vec2(2048.0));\n            highp float _1274 = _1246.y;\n            _1281 = mix(mix(float(_1235 < dot(texture2D(u_shadowMapTex, _1239), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1235 < dot(texture2D(u_shadowMapTex, _1239 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1274), mix(float(_1235 < dot(texture2D(u_shadowMapTex, _1239 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1235 < dot(texture2D(u_shadowMapTex, _1239 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1274), _1246.x);\n            break;\n        }\n        _1284 = _1281;\n    }\n    else\n    {\n        _1284 = _1175;\n    }\n    bool _1503 = _1193 ? true : _1502;\n    bool _1298 = (!_1503) && (_797 < u_csmFarBounds.z);\n    highp float _1389 = 0.0;\n    if (_1298)\n    {\n        highp vec3 _1309 = ((u_csmLightSpaceMatrices[2] * _793).xyz * 0.5) + vec3(0.5);\n        highp float _1311 = _1309.x;\n        highp float _1314 = _1309.y;\n        highp float _1322 = (((_1309.z + step(_1311, 0.001000000047497451305389404296875)) + step(_1314, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1311)) + step(0.999000012874603271484375, _1314);\n        highp float _1386 = 0.0;\n        for (int SPIRV_Cross_Dummy414 = 0; SPIRV_Cross_Dummy414 < 1; SPIRV_Cross_Dummy414++)\n        {\n            if (_1322 > 1.0)\n            {\n                _1386 = 1.0;\n                break;\n            }\n            highp float _1340 = _1322 - 0.001000000047497451305389404296875;\n            highp vec2 _1344 = ((_1309.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1351 = fract(_1344 * vec2(2048.0));\n            highp float _1379 = _1351.y;\n            _1386 = mix(mix(float(_1340 < dot(texture2D(u_shadowMapTex, _1344), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1340 < dot(texture2D(u_shadowMapTex, _1344 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1379), mix(float(_1340 < dot(texture2D(u_shadowMapTex, _1344 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1340 < dot(texture2D(u_shadowMapTex, _1344 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1379), _1351.x);\n            break;\n        }\n        _1389 = _1386;\n    }\n    else\n    {\n        _1389 = _1284;\n    }\n    highp float _1494 = 0.0;\n    if ((!(_1298 ? true : _1503)) && (_797 < u_csmFarBounds.w))\n    {\n        highp vec3 _1414 = ((u_csmLightSpaceMatrices[3] * _793).xyz * 0.5) + vec3(0.5);\n        highp float _1416 = _1414.x;\n        highp float _1419 = _1414.y;\n        highp float _1427 = (((_1414.z + step(_1416, 0.001000000047497451305389404296875)) + step(_1419, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1416)) + step(0.999000012874603271484375, _1419);\n        highp float _1491 = 0.0;\n        for (int SPIRV_Cross_Dummy484 = 0; SPIRV_Cross_Dummy484 < 1; SPIRV_Cross_Dummy484++)\n        {\n            if (_1427 > 1.0)\n            {\n                _1491 = 1.0;\n                break;\n            }\n            highp float _1445 = _1427 - 0.001000000047497451305389404296875;\n            highp vec2 _1449 = ((_1414.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1456 = fract(_1449 * vec2(2048.0));\n            highp float _1484 = _1456.y;\n            _1491 = mix(mix(float(_1445 < dot(texture2D(u_shadowMapTex, _1449), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1445 < dot(texture2D(u_shadowMapTex, _1449 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1484), mix(float(_1445 < dot(texture2D(u_shadowMapTex, _1449 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1445 < dot(texture2D(u_shadowMapTex, _1449 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1484), _1456.x);\n            break;\n        }\n        _1494 = _1491;\n    }\n    else\n    {\n        _1494 = _1389;\n    }\n    highp vec4 _711 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _713 = _711.xyz * 2.0;\n    highp vec4 _723 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _742 = vec4(_683.xyz * (min(_713, mix(max(_713 - (u_lightColor * (clamp(dot(_692, u_lightDir), 0.0, 1.0) * (1.0 - _1494))), u_shadowColor), _713, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _692)), _Shininess * 128.0)) * (_723.xyz * _SpecColor.xyz))), _683.w);\n    highp float _1052 = length(varying_positionCamera_Fog);\n    highp float _1165 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1165 = (u_fogInfos.z - _1052) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1166 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1166 = 1.0 / pow(2.7182800769805908203125, _1052 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1167 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1167 = 1.0 / pow(2.7182800769805908203125, ((_1052 * _1052) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1167 = 1.0;\n            }\n            _1166 = _1167;\n        }\n        _1165 = _1166;\n    }\n    highp float _1098 = clamp(_1165, 0.0, 1.0);\n    highp vec3 _1107 = (_742.xyz * _1098) + (u_fogColor * (1.0 - _1098));\n    gl_FragData[0] = vec4(_1107.x, _1107.y, _1107.z, _742.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _705 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _713 = (_705 * _Color) * _AlbedoIntensity;\n    highp vec4 _728 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _791 = (_728.xy - vec2(0.5)) * 2.0;\n    highp vec4 _845 = vec4(varying_ShadowPosition, 1.0);\n    highp float _849 = -(u_view * _845).z;\n    bool _862 = true && (_849 < u_csmFarBounds.x);\n    highp float _1228 = 0.0;\n    if (_862)\n    {\n        highp vec3 _877 = ((u_csmLightSpaceMatrices[0] * _845).xyz * 0.5) + vec3(0.5);\n        highp float _881 = _877.x;\n        highp float _885 = _877.y;\n        highp float _895 = (((_877.z + step(_881, 0.001000000047497451305389404296875)) + step(_885, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _881)) + step(0.999000012874603271484375, _885);\n        highp float _1225 = 0.0;\n        for (int SPIRV_Cross_Dummy265 = 0; SPIRV_Cross_Dummy265 < 1; SPIRV_Cross_Dummy265++)\n        {\n            if (_895 > 1.0)\n            {\n                _1225 = 1.0;\n                break;\n            }\n            highp float _946 = _895 - 0.001000000047497451305389404296875;\n            highp vec2 _952 = ((_877.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _963 = fract(_952 * vec2(2048.0));\n            highp float _1018 = _963.y;\n            _1225 = mix(mix(float(_946 < dot(texture2D(u_shadowMapTex, _952), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_946 < dot(texture2D(u_shadowMapTex, _952 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1018), mix(float(_946 < dot(texture2D(u_shadowMapTex, _952 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_946 < dot(texture2D(u_shadowMapTex, _952 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1018), _963.x);\n            break;\n        }\n        _1228 = _1225;\n    }\n    else\n    {\n        _1228 = 1.0;\n    }\n    bool _1556 = _862 ? true : false;\n    bool _1247 = (!_1556) && (_849 < u_csmFarBounds.y);\n    highp float _1338 = 0.0;\n    if (_1247)\n    {\n        highp vec3 _1258 = ((u_csmLightSpaceMatrices[1] * _845).xyz * 0.5) + vec3(0.5);\n        highp float _1260 = _1258.x;\n        highp float _1263 = _1258.y;\n        highp float _1271 = (((_1258.z + step(_1260, 0.001000000047497451305389404296875)) + step(_1263, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1260)) + step(0.999000012874603271484375, _1263);\n        highp float _1335 = 0.0;\n        for (int SPIRV_Cross_Dummy341 = 0; SPIRV_Cross_Dummy341 < 1; SPIRV_Cross_Dummy341++)\n        {\n            if (_1271 > 1.0)\n            {\n                _1335 = 1.0;\n                break;\n            }\n            highp float _1289 = _1271 - 0.001000000047497451305389404296875;\n            highp vec2 _1293 = ((_1258.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1300 = fract(_1293 * vec2(2048.0));\n            highp float _1328 = _1300.y;\n            _1335 = mix(mix(float(_1289 < dot(texture2D(u_shadowMapTex, _1293), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1289 < dot(texture2D(u_shadowMapTex, _1293 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1328), mix(float(_1289 < dot(texture2D(u_shadowMapTex, _1293 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1289 < dot(texture2D(u_shadowMapTex, _1293 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1328), _1300.x);\n            break;\n        }\n        _1338 = _1335;\n    }\n    else\n    {\n        _1338 = _1228;\n    }\n    bool _1557 = _1247 ? true : _1556;\n    bool _1352 = (!_1557) && (_849 < u_csmFarBounds.z);\n    highp float _1443 = 0.0;\n    if (_1352)\n    {\n        highp vec3 _1363 = ((u_csmLightSpaceMatrices[2] * _845).xyz * 0.5) + vec3(0.5);\n        highp float _1365 = _1363.x;\n        highp float _1368 = _1363.y;\n        highp float _1376 = (((_1363.z + step(_1365, 0.001000000047497451305389404296875)) + step(_1368, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1365)) + step(0.999000012874603271484375, _1368);\n        highp float _1440 = 0.0;\n        for (int SPIRV_Cross_Dummy417 = 0; SPIRV_Cross_Dummy417 < 1; SPIRV_Cross_Dummy417++)\n        {\n            if (_1376 > 1.0)\n            {\n                _1440 = 1.0;\n                break;\n            }\n            highp float _1394 = _1376 - 0.001000000047497451305389404296875;\n            highp vec2 _1398 = ((_1363.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1405 = fract(_1398 * vec2(2048.0));\n            highp float _1433 = _1405.y;\n            _1440 = mix(mix(float(_1394 < dot(texture2D(u_shadowMapTex, _1398), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1394 < dot(texture2D(u_shadowMapTex, _1398 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1433), mix(float(_1394 < dot(texture2D(u_shadowMapTex, _1398 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1394 < dot(texture2D(u_shadowMapTex, _1398 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1433), _1405.x);\n            break;\n        }\n        _1443 = _1440;\n    }\n    else\n    {\n        _1443 = _1338;\n    }\n    highp float _1548 = 0.0;\n    if ((!(_1352 ? true : _1557)) && (_849 < u_csmFarBounds.w))\n    {\n        highp vec3 _1468 = ((u_csmLightSpaceMatrices[3] * _845).xyz * 0.5) + vec3(0.5);\n        highp float _1470 = _1468.x;\n        highp float _1473 = _1468.y;\n        highp float _1481 = (((_1468.z + step(_1470, 0.001000000047497451305389404296875)) + step(_1473, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1470)) + step(0.999000012874603271484375, _1473);\n        highp float _1545 = 0.0;\n        for (int SPIRV_Cross_Dummy487 = 0; SPIRV_Cross_Dummy487 < 1; SPIRV_Cross_Dummy487++)\n        {\n            if (_1481 > 1.0)\n            {\n                _1545 = 1.0;\n                break;\n            }\n            highp float _1499 = _1481 - 0.001000000047497451305389404296875;\n            highp vec2 _1503 = ((_1468.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1510 = fract(_1503 * vec2(2048.0));\n            highp float _1538 = _1510.y;\n            _1545 = mix(mix(float(_1499 < dot(texture2D(u_shadowMapTex, _1503), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1499 < dot(texture2D(u_shadowMapTex, _1503 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1538), mix(float(_1499 < dot(texture2D(u_shadowMapTex, _1503 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1499 < dot(texture2D(u_shadowMapTex, _1503 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1538), _1510.x);\n            break;\n        }\n        _1548 = _1545;\n    }\n    else\n    {\n        _1548 = _1443;\n    }\n    highp vec4 _748 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _750 = _748.xyz * 2.0;\n    highp vec4 _774 = vec4(_713.xyz * (min(_750, mix(max(_750 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1548))), u_shadowColor), _750, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_791, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_791, _791)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _705.w))), _713.w);\n    highp float _1104 = length(varying_positionCamera_Fog);\n    highp float _1218 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1218 = (u_fogInfos.z - _1104) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1219 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1219 = 1.0 / pow(2.7182800769805908203125, _1104 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1220 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1220 = 1.0 / pow(2.7182800769805908203125, ((_1104 * _1104) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1220 = 1.0;\n            }\n            _1219 = _1220;\n        }\n        _1218 = _1219;\n    }\n    highp float _1150 = clamp(_1218, 0.0, 1.0);\n    highp vec3 _1159 = (_774.xyz * _1150) + (u_fogColor * (1.0 - _1150));\n    gl_FragData[0] = vec4(_1159.x, _1159.y, _1159.z, _774.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\n\nvoid main()\n{\n    highp vec4 _271 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _279 = (_271 * _Color) * _AlbedoIntensity;\n    highp float _281 = _279.w;\n    if ((_281 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _290 = normalize(varying_LightDir);\n    highp vec3 _296 = normalize(varying_WorldNormal);\n    gl_FragData[0] = vec4(_279.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_290, _296))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _290), _296)), _Shininess * 128.0)) * (_SpecColor.xyz * _271.w))), _281);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\n\nvoid main()\n{\n    highp vec4 _314 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _322 = (_314 * _Color) * _AlbedoIntensity;\n    highp float _324 = _322.w;\n    if ((_324 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _333 = normalize(varying_LightDir);\n    highp vec2 _398 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _409 = vec3(_398, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_398, _398))));\n    gl_FragData[0] = vec4(_322.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_333, _409))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _333), _409)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _324);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _673 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _681 = (_673 * _Color) * _AlbedoIntensity;\n    highp vec3 _690 = normalize(varying_WorldNormal);\n    highp vec4 _791 = vec4(varying_ShadowPosition, 1.0);\n    highp float _795 = -(u_view * _791).z;\n    bool _808 = true && (_795 < u_csmFarBounds.x);\n    highp float _1173 = 0.0;\n    if (_808)\n    {\n        highp vec3 _823 = ((u_csmLightSpaceMatrices[0] * _791).xyz * 0.5) + vec3(0.5);\n        highp float _827 = _823.x;\n        highp float _831 = _823.y;\n        highp float _841 = (((_823.z + step(_827, 0.001000000047497451305389404296875)) + step(_831, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _827)) + step(0.999000012874603271484375, _831);\n        highp float _1170 = 0.0;\n        for (int SPIRV_Cross_Dummy262 = 0; SPIRV_Cross_Dummy262 < 1; SPIRV_Cross_Dummy262++)\n        {\n            if (_841 > 1.0)\n            {\n                _1170 = 1.0;\n                break;\n            }\n            highp float _892 = _841 - 0.001000000047497451305389404296875;\n            highp vec2 _898 = ((_823.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _909 = fract(_898 * vec2(2048.0));\n            highp float _964 = _909.y;\n            _1170 = mix(mix(float(_892 < dot(texture2D(u_shadowMapTex, _898), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_892 < dot(texture2D(u_shadowMapTex, _898 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _964), mix(float(_892 < dot(texture2D(u_shadowMapTex, _898 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_892 < dot(texture2D(u_shadowMapTex, _898 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _964), _909.x);\n            break;\n        }\n        _1173 = _1170;\n    }\n    else\n    {\n        _1173 = 1.0;\n    }\n    bool _1500 = _808 ? true : false;\n    bool _1191 = (!_1500) && (_795 < u_csmFarBounds.y);\n    highp float _1282 = 0.0;\n    if (_1191)\n    {\n        highp vec3 _1202 = ((u_csmLightSpaceMatrices[1] * _791).xyz * 0.5) + vec3(0.5);\n        highp float _1204 = _1202.x;\n        highp float _1207 = _1202.y;\n        highp float _1215 = (((_1202.z + step(_1204, 0.001000000047497451305389404296875)) + step(_1207, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1204)) + step(0.999000012874603271484375, _1207);\n        highp float _1279 = 0.0;\n        for (int SPIRV_Cross_Dummy338 = 0; SPIRV_Cross_Dummy338 < 1; SPIRV_Cross_Dummy338++)\n        {\n            if (_1215 > 1.0)\n            {\n                _1279 = 1.0;\n                break;\n            }\n            highp float _1233 = _1215 - 0.001000000047497451305389404296875;\n            highp vec2 _1237 = ((_1202.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1244 = fract(_1237 * vec2(2048.0));\n            highp float _1272 = _1244.y;\n            _1279 = mix(mix(float(_1233 < dot(texture2D(u_shadowMapTex, _1237), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1233 < dot(texture2D(u_shadowMapTex, _1237 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1272), mix(float(_1233 < dot(texture2D(u_shadowMapTex, _1237 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1233 < dot(texture2D(u_shadowMapTex, _1237 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1272), _1244.x);\n            break;\n        }\n        _1282 = _1279;\n    }\n    else\n    {\n        _1282 = _1173;\n    }\n    bool _1501 = _1191 ? true : _1500;\n    bool _1296 = (!_1501) && (_795 < u_csmFarBounds.z);\n    highp float _1387 = 0.0;\n    if (_1296)\n    {\n        highp vec3 _1307 = ((u_csmLightSpaceMatrices[2] * _791).xyz * 0.5) + vec3(0.5);\n        highp float _1309 = _1307.x;\n        highp float _1312 = _1307.y;\n        highp float _1320 = (((_1307.z + step(_1309, 0.001000000047497451305389404296875)) + step(_1312, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1309)) + step(0.999000012874603271484375, _1312);\n        highp float _1384 = 0.0;\n        for (int SPIRV_Cross_Dummy414 = 0; SPIRV_Cross_Dummy414 < 1; SPIRV_Cross_Dummy414++)\n        {\n            if (_1320 > 1.0)\n            {\n                _1384 = 1.0;\n                break;\n            }\n            highp float _1338 = _1320 - 0.001000000047497451305389404296875;\n            highp vec2 _1342 = ((_1307.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1349 = fract(_1342 * vec2(2048.0));\n            highp float _1377 = _1349.y;\n            _1384 = mix(mix(float(_1338 < dot(texture2D(u_shadowMapTex, _1342), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1338 < dot(texture2D(u_shadowMapTex, _1342 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1377), mix(float(_1338 < dot(texture2D(u_shadowMapTex, _1342 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1338 < dot(texture2D(u_shadowMapTex, _1342 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1377), _1349.x);\n            break;\n        }\n        _1387 = _1384;\n    }\n    else\n    {\n        _1387 = _1282;\n    }\n    highp float _1492 = 0.0;\n    if ((!(_1296 ? true : _1501)) && (_795 < u_csmFarBounds.w))\n    {\n        highp vec3 _1412 = ((u_csmLightSpaceMatrices[3] * _791).xyz * 0.5) + vec3(0.5);\n        highp float _1414 = _1412.x;\n        highp float _1417 = _1412.y;\n        highp float _1425 = (((_1412.z + step(_1414, 0.001000000047497451305389404296875)) + step(_1417, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1414)) + step(0.999000012874603271484375, _1417);\n        highp float _1489 = 0.0;\n        for (int SPIRV_Cross_Dummy484 = 0; SPIRV_Cross_Dummy484 < 1; SPIRV_Cross_Dummy484++)\n        {\n            if (_1425 > 1.0)\n            {\n                _1489 = 1.0;\n                break;\n            }\n            highp float _1443 = _1425 - 0.001000000047497451305389404296875;\n            highp vec2 _1447 = ((_1412.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1454 = fract(_1447 * vec2(2048.0));\n            highp float _1482 = _1454.y;\n            _1489 = mix(mix(float(_1443 < dot(texture2D(u_shadowMapTex, _1447), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1443 < dot(texture2D(u_shadowMapTex, _1447 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1482), mix(float(_1443 < dot(texture2D(u_shadowMapTex, _1447 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1443 < dot(texture2D(u_shadowMapTex, _1447 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1482), _1454.x);\n            break;\n        }\n        _1492 = _1489;\n    }\n    else\n    {\n        _1492 = _1387;\n    }\n    highp vec4 _709 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _711 = _709.xyz * 2.0;\n    highp vec4 _721 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _740 = vec4(_681.xyz * (min(_711, mix(max(_711 - (u_lightColor * (clamp(dot(_690, u_lightDir), 0.0, 1.0) * (1.0 - _1492))), u_shadowColor), _711, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _690)), _Shininess * 128.0)) * (_721.xyz * _SpecColor.xyz))), _681.w);\n    highp float _1050 = length(varying_positionCamera_Fog);\n    highp float _1163 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1163 = (u_fogInfos.z - _1050) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1164 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1164 = 1.0 / pow(2.7182800769805908203125, _1050 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1165 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1165 = 1.0 / pow(2.7182800769805908203125, ((_1050 * _1050) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1165 = 1.0;\n            }\n            _1164 = _1165;\n        }\n        _1163 = _1164;\n    }\n    highp float _1096 = clamp(_1163, 0.0, 1.0);\n    highp vec3 _1105 = (_740.xyz * _1096) + (u_fogColor * (1.0 - _1096));\n    gl_FragData[0] = vec4(_1105.x, _1105.y, _1105.z, _740.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _844 = int(a_boneIndex.x) * 3;\n    int _849 = _844 + 1;\n    int _853 = _844 + 2;\n    int _895 = int(a_boneIndex.y) * 3;\n    int _900 = _895 + 1;\n    int _904 = _895 + 2;\n    int _946 = int(a_boneIndex.z) * 3;\n    int _951 = _946 + 1;\n    int _955 = _946 + 2;\n    int _997 = int(a_boneIndex.w) * 3;\n    int _1002 = _997 + 1;\n    int _1006 = _997 + 2;\n    mat4 _741 = mat4(vec4(u_boneOffsetMatrix[_844].xyz, 0.0), vec4(u_boneOffsetMatrix[_849].xyz, 0.0), vec4(u_boneOffsetMatrix[_853].xyz, 0.0), vec4(u_boneOffsetMatrix[_844].w, u_boneOffsetMatrix[_849].w, u_boneOffsetMatrix[_853].w, 1.0)) * a_boneWeight.x;\n    mat4 _745 = mat4(vec4(u_boneOffsetMatrix[_895].xyz, 0.0), vec4(u_boneOffsetMatrix[_900].xyz, 0.0), vec4(u_boneOffsetMatrix[_904].xyz, 0.0), vec4(u_boneOffsetMatrix[_895].w, u_boneOffsetMatrix[_900].w, u_boneOffsetMatrix[_904].w, 1.0)) * a_boneWeight.y;\n    mat4 _763 = mat4(vec4(u_boneOffsetMatrix[_946].xyz, 0.0), vec4(u_boneOffsetMatrix[_951].xyz, 0.0), vec4(u_boneOffsetMatrix[_955].xyz, 0.0), vec4(u_boneOffsetMatrix[_946].w, u_boneOffsetMatrix[_951].w, u_boneOffsetMatrix[_955].w, 1.0)) * a_boneWeight.z;\n    mat4 _781 = mat4(vec4(u_boneOffsetMatrix[_997].xyz, 0.0), vec4(u_boneOffsetMatrix[_1002].xyz, 0.0), vec4(u_boneOffsetMatrix[_1006].xyz, 0.0), vec4(u_boneOffsetMatrix[_997].w, u_boneOffsetMatrix[_1002].w, u_boneOffsetMatrix[_1006].w, 1.0)) * a_boneWeight.w;\n    mat4 _799 = u_bindTargetWorldInverse * mat4(((_741[0] + _745[0]) + _763[0]) + _781[0], ((_741[1] + _745[1]) + _763[1]) + _781[1], ((_741[2] + _745[2]) + _763[2]) + _781[2], ((_741[3] + _745[3]) + _763[3]) + _781[3]);\n    mat3 _807 = mat3(_799[0].xyz, _799[1].xyz, _799[2].xyz);\n    vec4 _1044 = u_world * (_799 * a_position);\n    vec3 _601 = _1044.xyz;\n    mat3 _1064 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1067 = normalize(_1064 * (_807 * a_normal));\n    vec3 _1081 = normalize(_1064 * (_807 * a_tangent.xyz).xyz);\n    mat3 _636 = mat3(_1081, cross(_1081, _1067) * a_tangent.w, _1067);\n    gl_Position = u_projection * (u_view * _1044);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _636 * u_lightDir;\n    varying_ViewDir = _636 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _601);\n    varying_WorldNormal = _1067;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_ShadowPosition = _601;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _822 = int(a_boneIndex.x) * 3;\n    int _827 = _822 + 1;\n    int _831 = _822 + 2;\n    int _873 = int(a_boneIndex.y) * 3;\n    int _878 = _873 + 1;\n    int _882 = _873 + 2;\n    int _924 = int(a_boneIndex.z) * 3;\n    int _929 = _924 + 1;\n    int _933 = _924 + 2;\n    int _975 = int(a_boneIndex.w) * 3;\n    int _980 = _975 + 1;\n    int _984 = _975 + 2;\n    mat4 _723 = mat4(vec4(u_boneOffsetMatrix[_822].xyz, 0.0), vec4(u_boneOffsetMatrix[_827].xyz, 0.0), vec4(u_boneOffsetMatrix[_831].xyz, 0.0), vec4(u_boneOffsetMatrix[_822].w, u_boneOffsetMatrix[_827].w, u_boneOffsetMatrix[_831].w, 1.0)) * a_boneWeight.x;\n    mat4 _727 = mat4(vec4(u_boneOffsetMatrix[_873].xyz, 0.0), vec4(u_boneOffsetMatrix[_878].xyz, 0.0), vec4(u_boneOffsetMatrix[_882].xyz, 0.0), vec4(u_boneOffsetMatrix[_873].w, u_boneOffsetMatrix[_878].w, u_boneOffsetMatrix[_882].w, 1.0)) * a_boneWeight.y;\n    mat4 _745 = mat4(vec4(u_boneOffsetMatrix[_924].xyz, 0.0), vec4(u_boneOffsetMatrix[_929].xyz, 0.0), vec4(u_boneOffsetMatrix[_933].xyz, 0.0), vec4(u_boneOffsetMatrix[_924].w, u_boneOffsetMatrix[_929].w, u_boneOffsetMatrix[_933].w, 1.0)) * a_boneWeight.z;\n    mat4 _763 = mat4(vec4(u_boneOffsetMatrix[_975].xyz, 0.0), vec4(u_boneOffsetMatrix[_980].xyz, 0.0), vec4(u_boneOffsetMatrix[_984].xyz, 0.0), vec4(u_boneOffsetMatrix[_975].w, u_boneOffsetMatrix[_980].w, u_boneOffsetMatrix[_984].w, 1.0)) * a_boneWeight.w;\n    vec4 _767 = ((_723[0] + _727[0]) + _745[0]) + _763[0];\n    vec4 _770 = ((_723[1] + _727[1]) + _745[1]) + _763[1];\n    vec4 _773 = ((_723[2] + _727[2]) + _745[2]) + _763[2];\n    mat3 _785 = mat3(_767.xyz, _770.xyz, _773.xyz);\n    vec4 _1022 = u_world * (mat4(_767, _770, _773, ((_723[3] + _727[3]) + _745[3]) + _763[3]) * a_position);\n    vec3 _590 = _1022.xyz;\n    mat3 _1042 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1045 = normalize(_1042 * (_785 * a_normal));\n    vec3 _1059 = normalize(_1042 * (_785 * a_tangent.xyz).xyz);\n    mat3 _625 = mat3(_1059, cross(_1059, _1045) * a_tangent.w, _1045);\n    gl_Position = u_projection * (u_view * _1022);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _625 * u_lightDir;\n    varying_ViewDir = _625 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _590);\n    varying_WorldNormal = _1045;\n    varying_positionCamera_Fog = (u_view * vec4(_1022.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _590;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _805 = int(a_boneIndex.x) * 3;\n    int _810 = _805 + 1;\n    int _814 = _805 + 2;\n    int _856 = int(a_boneIndex.y) * 3;\n    int _861 = _856 + 1;\n    int _865 = _856 + 2;\n    int _907 = int(a_boneIndex.z) * 3;\n    int _912 = _907 + 1;\n    int _916 = _907 + 2;\n    int _958 = int(a_boneIndex.w) * 3;\n    int _963 = _958 + 1;\n    int _967 = _958 + 2;\n    mat4 _702 = mat4(vec4(u_boneOffsetMatrix[_805].xyz, 0.0), vec4(u_boneOffsetMatrix[_810].xyz, 0.0), vec4(u_boneOffsetMatrix[_814].xyz, 0.0), vec4(u_boneOffsetMatrix[_805].w, u_boneOffsetMatrix[_810].w, u_boneOffsetMatrix[_814].w, 1.0)) * a_boneWeight.x;\n    mat4 _706 = mat4(vec4(u_boneOffsetMatrix[_856].xyz, 0.0), vec4(u_boneOffsetMatrix[_861].xyz, 0.0), vec4(u_boneOffsetMatrix[_865].xyz, 0.0), vec4(u_boneOffsetMatrix[_856].w, u_boneOffsetMatrix[_861].w, u_boneOffsetMatrix[_865].w, 1.0)) * a_boneWeight.y;\n    mat4 _724 = mat4(vec4(u_boneOffsetMatrix[_907].xyz, 0.0), vec4(u_boneOffsetMatrix[_912].xyz, 0.0), vec4(u_boneOffsetMatrix[_916].xyz, 0.0), vec4(u_boneOffsetMatrix[_907].w, u_boneOffsetMatrix[_912].w, u_boneOffsetMatrix[_916].w, 1.0)) * a_boneWeight.z;\n    mat4 _742 = mat4(vec4(u_boneOffsetMatrix[_958].xyz, 0.0), vec4(u_boneOffsetMatrix[_963].xyz, 0.0), vec4(u_boneOffsetMatrix[_967].xyz, 0.0), vec4(u_boneOffsetMatrix[_958].w, u_boneOffsetMatrix[_963].w, u_boneOffsetMatrix[_967].w, 1.0)) * a_boneWeight.w;\n    mat4 _760 = u_bindTargetWorldInverse * mat4(((_702[0] + _706[0]) + _724[0]) + _742[0], ((_702[1] + _706[1]) + _724[1]) + _742[1], ((_702[2] + _706[2]) + _724[2]) + _742[2], ((_702[3] + _706[3]) + _724[3]) + _742[3]);\n    mat3 _768 = mat3(_760[0].xyz, _760[1].xyz, _760[2].xyz);\n    vec4 _1005 = u_world * (_760 * a_position);\n    vec3 _580 = _1005.xyz;\n    mat3 _1025 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1028 = normalize(_1025 * (_768 * a_normal));\n    vec3 _1042 = normalize(_1025 * (_768 * a_tangent.xyz).xyz);\n    mat3 _615 = mat3(_1042, cross(_1042, _1028) * a_tangent.w, _1028);\n    gl_Position = u_projection * (u_view * _1005);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _615 * u_lightDir;\n    varying_ViewDir = _615 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _580);\n    varying_WorldNormal = _1028;\n    varying_ShadowPosition = _580;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _836 = int(a_boneIndex.x) * 3;\n    int _841 = _836 + 1;\n    int _845 = _836 + 2;\n    int _887 = int(a_boneIndex.y) * 3;\n    int _892 = _887 + 1;\n    int _896 = _887 + 2;\n    int _938 = int(a_boneIndex.z) * 3;\n    int _943 = _938 + 1;\n    int _947 = _938 + 2;\n    int _989 = int(a_boneIndex.w) * 3;\n    int _994 = _989 + 1;\n    int _998 = _989 + 2;\n    mat4 _737 = mat4(vec4(u_boneOffsetMatrix[_836].xyz, 0.0), vec4(u_boneOffsetMatrix[_841].xyz, 0.0), vec4(u_boneOffsetMatrix[_845].xyz, 0.0), vec4(u_boneOffsetMatrix[_836].w, u_boneOffsetMatrix[_841].w, u_boneOffsetMatrix[_845].w, 1.0)) * a_boneWeight.x;\n    mat4 _741 = mat4(vec4(u_boneOffsetMatrix[_887].xyz, 0.0), vec4(u_boneOffsetMatrix[_892].xyz, 0.0), vec4(u_boneOffsetMatrix[_896].xyz, 0.0), vec4(u_boneOffsetMatrix[_887].w, u_boneOffsetMatrix[_892].w, u_boneOffsetMatrix[_896].w, 1.0)) * a_boneWeight.y;\n    mat4 _759 = mat4(vec4(u_boneOffsetMatrix[_938].xyz, 0.0), vec4(u_boneOffsetMatrix[_943].xyz, 0.0), vec4(u_boneOffsetMatrix[_947].xyz, 0.0), vec4(u_boneOffsetMatrix[_938].w, u_boneOffsetMatrix[_943].w, u_boneOffsetMatrix[_947].w, 1.0)) * a_boneWeight.z;\n    mat4 _777 = mat4(vec4(u_boneOffsetMatrix[_989].xyz, 0.0), vec4(u_boneOffsetMatrix[_994].xyz, 0.0), vec4(u_boneOffsetMatrix[_998].xyz, 0.0), vec4(u_boneOffsetMatrix[_989].w, u_boneOffsetMatrix[_994].w, u_boneOffsetMatrix[_998].w, 1.0)) * a_boneWeight.w;\n    vec4 _781 = ((_737[0] + _741[0]) + _759[0]) + _777[0];\n    vec4 _784 = ((_737[1] + _741[1]) + _759[1]) + _777[1];\n    vec4 _787 = ((_737[2] + _741[2]) + _759[2]) + _777[2];\n    mat3 _799 = mat3(_781.xyz, _784.xyz, _787.xyz);\n    vec4 _1036 = u_world * (mat4(_781, _784, _787, ((_737[3] + _741[3]) + _759[3]) + _777[3]) * a_position);\n    vec3 _597 = _1036.xyz;\n    mat3 _1056 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1059 = normalize(_1056 * (_799 * a_normal));\n    vec3 _1073 = normalize(_1056 * (_799 * a_tangent.xyz).xyz);\n    mat3 _632 = mat3(_1073, cross(_1073, _1059) * a_tangent.w, _1059);\n    gl_Position = u_projection * (u_view * _1036);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _632 * u_lightDir;\n    varying_ViewDir = _632 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _597);\n    varying_WorldNormal = _1059;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_ShadowPosition = _597;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _869 = int(a_boneIndex.x) * 3;\n    int _874 = _869 + 1;\n    int _878 = _869 + 2;\n    int _920 = int(a_boneIndex.y) * 3;\n    int _925 = _920 + 1;\n    int _929 = _920 + 2;\n    int _971 = int(a_boneIndex.z) * 3;\n    int _976 = _971 + 1;\n    int _980 = _971 + 2;\n    int _1022 = int(a_boneIndex.w) * 3;\n    int _1027 = _1022 + 1;\n    int _1031 = _1022 + 2;\n    mat4 _766 = mat4(vec4(u_boneOffsetMatrix[_869].xyz, 0.0), vec4(u_boneOffsetMatrix[_874].xyz, 0.0), vec4(u_boneOffsetMatrix[_878].xyz, 0.0), vec4(u_boneOffsetMatrix[_869].w, u_boneOffsetMatrix[_874].w, u_boneOffsetMatrix[_878].w, 1.0)) * a_boneWeight.x;\n    mat4 _770 = mat4(vec4(u_boneOffsetMatrix[_920].xyz, 0.0), vec4(u_boneOffsetMatrix[_925].xyz, 0.0), vec4(u_boneOffsetMatrix[_929].xyz, 0.0), vec4(u_boneOffsetMatrix[_920].w, u_boneOffsetMatrix[_925].w, u_boneOffsetMatrix[_929].w, 1.0)) * a_boneWeight.y;\n    mat4 _788 = mat4(vec4(u_boneOffsetMatrix[_971].xyz, 0.0), vec4(u_boneOffsetMatrix[_976].xyz, 0.0), vec4(u_boneOffsetMatrix[_980].xyz, 0.0), vec4(u_boneOffsetMatrix[_971].w, u_boneOffsetMatrix[_976].w, u_boneOffsetMatrix[_980].w, 1.0)) * a_boneWeight.z;\n    mat4 _806 = mat4(vec4(u_boneOffsetMatrix[_1022].xyz, 0.0), vec4(u_boneOffsetMatrix[_1027].xyz, 0.0), vec4(u_boneOffsetMatrix[_1031].xyz, 0.0), vec4(u_boneOffsetMatrix[_1022].w, u_boneOffsetMatrix[_1027].w, u_boneOffsetMatrix[_1031].w, 1.0)) * a_boneWeight.w;\n    mat4 _824 = u_bindTargetWorldInverse * mat4(((_766[0] + _770[0]) + _788[0]) + _806[0], ((_766[1] + _770[1]) + _788[1]) + _806[1], ((_766[2] + _770[2]) + _788[2]) + _806[2], ((_766[3] + _770[3]) + _788[3]) + _806[3]);\n    mat3 _832 = mat3(_824[0].xyz, _824[1].xyz, _824[2].xyz);\n    vec4 _1069 = u_world * (_824 * a_position);\n    vec3 _615 = _1069.xyz;\n    mat3 _1089 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1092 = normalize(_1089 * (_832 * a_normal));\n    vec3 _1106 = normalize(_1089 * (_832 * a_tangent.xyz).xyz);\n    mat3 _650 = mat3(_1106, cross(_1106, _1092) * a_tangent.w, _1092);\n    gl_Position = u_projection * (u_view * _1069);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _650 * u_lightDir;\n    varying_ViewDir = _650 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _615);\n    varying_WorldNormal = _1092;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_1069.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _615;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _797 = int(a_boneIndex.x) * 3;\n    int _802 = _797 + 1;\n    int _806 = _797 + 2;\n    int _848 = int(a_boneIndex.y) * 3;\n    int _853 = _848 + 1;\n    int _857 = _848 + 2;\n    int _899 = int(a_boneIndex.z) * 3;\n    int _904 = _899 + 1;\n    int _908 = _899 + 2;\n    int _950 = int(a_boneIndex.w) * 3;\n    int _955 = _950 + 1;\n    int _959 = _950 + 2;\n    mat4 _698 = mat4(vec4(u_boneOffsetMatrix[_797].xyz, 0.0), vec4(u_boneOffsetMatrix[_802].xyz, 0.0), vec4(u_boneOffsetMatrix[_806].xyz, 0.0), vec4(u_boneOffsetMatrix[_797].w, u_boneOffsetMatrix[_802].w, u_boneOffsetMatrix[_806].w, 1.0)) * a_boneWeight.x;\n    mat4 _702 = mat4(vec4(u_boneOffsetMatrix[_848].xyz, 0.0), vec4(u_boneOffsetMatrix[_853].xyz, 0.0), vec4(u_boneOffsetMatrix[_857].xyz, 0.0), vec4(u_boneOffsetMatrix[_848].w, u_boneOffsetMatrix[_853].w, u_boneOffsetMatrix[_857].w, 1.0)) * a_boneWeight.y;\n    mat4 _720 = mat4(vec4(u_boneOffsetMatrix[_899].xyz, 0.0), vec4(u_boneOffsetMatrix[_904].xyz, 0.0), vec4(u_boneOffsetMatrix[_908].xyz, 0.0), vec4(u_boneOffsetMatrix[_899].w, u_boneOffsetMatrix[_904].w, u_boneOffsetMatrix[_908].w, 1.0)) * a_boneWeight.z;\n    mat4 _738 = mat4(vec4(u_boneOffsetMatrix[_950].xyz, 0.0), vec4(u_boneOffsetMatrix[_955].xyz, 0.0), vec4(u_boneOffsetMatrix[_959].xyz, 0.0), vec4(u_boneOffsetMatrix[_950].w, u_boneOffsetMatrix[_955].w, u_boneOffsetMatrix[_959].w, 1.0)) * a_boneWeight.w;\n    vec4 _742 = ((_698[0] + _702[0]) + _720[0]) + _738[0];\n    vec4 _745 = ((_698[1] + _702[1]) + _720[1]) + _738[1];\n    vec4 _748 = ((_698[2] + _702[2]) + _720[2]) + _738[2];\n    mat3 _760 = mat3(_742.xyz, _745.xyz, _748.xyz);\n    vec4 _997 = u_world * (mat4(_742, _745, _748, ((_698[3] + _702[3]) + _720[3]) + _738[3]) * a_position);\n    vec3 _576 = _997.xyz;\n    mat3 _1017 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1020 = normalize(_1017 * (_760 * a_normal));\n    vec3 _1034 = normalize(_1017 * (_760 * a_tangent.xyz).xyz);\n    mat3 _611 = mat3(_1034, cross(_1034, _1020) * a_tangent.w, _1020);\n    gl_Position = u_projection * (u_view * _997);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _611 * u_lightDir;\n    varying_ViewDir = _611 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _576);\n    varying_WorldNormal = _1020;\n    varying_ShadowPosition = _576;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _830 = int(a_boneIndex.x) * 3;\n    int _835 = _830 + 1;\n    int _839 = _830 + 2;\n    int _881 = int(a_boneIndex.y) * 3;\n    int _886 = _881 + 1;\n    int _890 = _881 + 2;\n    int _932 = int(a_boneIndex.z) * 3;\n    int _937 = _932 + 1;\n    int _941 = _932 + 2;\n    int _983 = int(a_boneIndex.w) * 3;\n    int _988 = _983 + 1;\n    int _992 = _983 + 2;\n    mat4 _727 = mat4(vec4(u_boneOffsetMatrix[_830].xyz, 0.0), vec4(u_boneOffsetMatrix[_835].xyz, 0.0), vec4(u_boneOffsetMatrix[_839].xyz, 0.0), vec4(u_boneOffsetMatrix[_830].w, u_boneOffsetMatrix[_835].w, u_boneOffsetMatrix[_839].w, 1.0)) * a_boneWeight.x;\n    mat4 _731 = mat4(vec4(u_boneOffsetMatrix[_881].xyz, 0.0), vec4(u_boneOffsetMatrix[_886].xyz, 0.0), vec4(u_boneOffsetMatrix[_890].xyz, 0.0), vec4(u_boneOffsetMatrix[_881].w, u_boneOffsetMatrix[_886].w, u_boneOffsetMatrix[_890].w, 1.0)) * a_boneWeight.y;\n    mat4 _749 = mat4(vec4(u_boneOffsetMatrix[_932].xyz, 0.0), vec4(u_boneOffsetMatrix[_937].xyz, 0.0), vec4(u_boneOffsetMatrix[_941].xyz, 0.0), vec4(u_boneOffsetMatrix[_932].w, u_boneOffsetMatrix[_937].w, u_boneOffsetMatrix[_941].w, 1.0)) * a_boneWeight.z;\n    mat4 _767 = mat4(vec4(u_boneOffsetMatrix[_983].xyz, 0.0), vec4(u_boneOffsetMatrix[_988].xyz, 0.0), vec4(u_boneOffsetMatrix[_992].xyz, 0.0), vec4(u_boneOffsetMatrix[_983].w, u_boneOffsetMatrix[_988].w, u_boneOffsetMatrix[_992].w, 1.0)) * a_boneWeight.w;\n    mat4 _785 = u_bindTargetWorldInverse * mat4(((_727[0] + _731[0]) + _749[0]) + _767[0], ((_727[1] + _731[1]) + _749[1]) + _767[1], ((_727[2] + _731[2]) + _749[2]) + _767[2], ((_727[3] + _731[3]) + _749[3]) + _767[3]);\n    mat3 _793 = mat3(_785[0].xyz, _785[1].xyz, _785[2].xyz);\n    vec4 _1030 = u_world * (_785 * a_position);\n    vec3 _594 = _1030.xyz;\n    mat3 _1050 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1053 = normalize(_1050 * (_793 * a_normal));\n    vec3 _1067 = normalize(_1050 * (_793 * a_tangent.xyz).xyz);\n    mat3 _629 = mat3(_1067, cross(_1067, _1053) * a_tangent.w, _1053);\n    gl_Position = u_projection * (u_view * _1030);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _629 * u_lightDir;\n    varying_ViewDir = _629 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _594);\n    varying_WorldNormal = _1053;\n    varying_positionCamera_Fog = (u_view * vec4(_1030.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _594;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    int _861 = int(a_boneIndex.x) * 3;\n    int _866 = _861 + 1;\n    int _870 = _861 + 2;\n    int _912 = int(a_boneIndex.y) * 3;\n    int _917 = _912 + 1;\n    int _921 = _912 + 2;\n    int _963 = int(a_boneIndex.z) * 3;\n    int _968 = _963 + 1;\n    int _972 = _963 + 2;\n    int _1014 = int(a_boneIndex.w) * 3;\n    int _1019 = _1014 + 1;\n    int _1023 = _1014 + 2;\n    mat4 _762 = mat4(vec4(u_boneOffsetMatrix[_861].xyz, 0.0), vec4(u_boneOffsetMatrix[_866].xyz, 0.0), vec4(u_boneOffsetMatrix[_870].xyz, 0.0), vec4(u_boneOffsetMatrix[_861].w, u_boneOffsetMatrix[_866].w, u_boneOffsetMatrix[_870].w, 1.0)) * a_boneWeight.x;\n    mat4 _766 = mat4(vec4(u_boneOffsetMatrix[_912].xyz, 0.0), vec4(u_boneOffsetMatrix[_917].xyz, 0.0), vec4(u_boneOffsetMatrix[_921].xyz, 0.0), vec4(u_boneOffsetMatrix[_912].w, u_boneOffsetMatrix[_917].w, u_boneOffsetMatrix[_921].w, 1.0)) * a_boneWeight.y;\n    mat4 _784 = mat4(vec4(u_boneOffsetMatrix[_963].xyz, 0.0), vec4(u_boneOffsetMatrix[_968].xyz, 0.0), vec4(u_boneOffsetMatrix[_972].xyz, 0.0), vec4(u_boneOffsetMatrix[_963].w, u_boneOffsetMatrix[_968].w, u_boneOffsetMatrix[_972].w, 1.0)) * a_boneWeight.z;\n    mat4 _802 = mat4(vec4(u_boneOffsetMatrix[_1014].xyz, 0.0), vec4(u_boneOffsetMatrix[_1019].xyz, 0.0), vec4(u_boneOffsetMatrix[_1023].xyz, 0.0), vec4(u_boneOffsetMatrix[_1014].w, u_boneOffsetMatrix[_1019].w, u_boneOffsetMatrix[_1023].w, 1.0)) * a_boneWeight.w;\n    vec4 _806 = ((_762[0] + _766[0]) + _784[0]) + _802[0];\n    vec4 _809 = ((_762[1] + _766[1]) + _784[1]) + _802[1];\n    vec4 _812 = ((_762[2] + _766[2]) + _784[2]) + _802[2];\n    mat3 _824 = mat3(_806.xyz, _809.xyz, _812.xyz);\n    vec4 _1061 = u_world * (mat4(_806, _809, _812, ((_762[3] + _766[3]) + _784[3]) + _802[3]) * a_position);\n    vec3 _611 = _1061.xyz;\n    mat3 _1081 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1084 = normalize(_1081 * (_824 * a_normal));\n    vec3 _1098 = normalize(_1081 * (_824 * a_tangent.xyz).xyz);\n    mat3 _646 = mat3(_1098, cross(_1098, _1084) * a_tangent.w, _1084);\n    gl_Position = u_projection * (u_view * _1061);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _646 * u_lightDir;\n    varying_ViewDir = _646 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _611);\n    varying_WorldNormal = _1084;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_1061.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _611;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\n\nvoid main()\n{\n    highp vec4 _285 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _293 = (_285 * _Color) * _AlbedoIntensity;\n    highp vec3 _296 = normalize(varying_LightDir);\n    highp vec3 _302 = normalize(varying_WorldNormal);\n    highp vec4 _338 = vec4(_293.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_296, _302))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _296), _302)), _Shininess * 128.0)) * (_SpecColor.xyz * _285.w))), _293.w);\n    highp vec3 _354 = _338.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_354.x, _354.y, _354.z, _338.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\n\nvoid main()\n{\n    highp vec4 _283 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _291 = (_283 * _Color) * _AlbedoIntensity;\n    highp vec3 _294 = normalize(varying_LightDir);\n    highp vec3 _300 = normalize(varying_WorldNormal);\n    highp vec4 _336 = vec4(_291.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_294, _300))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _294), _300)), _Shininess * 128.0)) * (_SpecColor.xyz * _283.w))), _291.w);\n    highp vec3 _352 = _336.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_352.x, _352.y, _352.z, _336.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\n\nvoid main()\n{\n    highp vec4 _336 = (texture2D(_MainTex, varying_TexCoord) * _Color) * _AlbedoIntensity;\n    highp vec3 _339 = normalize(varying_LightDir);\n    highp vec2 _421 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _432 = vec3(_421, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_421, _421))));\n    highp vec4 _393 = vec4(_336.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_339, _432))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _339), _432)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _336.w);\n    highp vec3 _409 = _393.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_409.x, _409.y, _409.z, _393.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _592 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _600 = (_592 * _Color) * _AlbedoIntensity;\n    highp float _602 = _600.w;\n    if ((_602 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _617 = normalize(varying_WorldNormal);\n    highp vec4 _707 = vec4(varying_ShadowPosition, 1.0);\n    highp float _711 = -(u_view * _707).z;\n    bool _724 = true && (_711 < u_csmFarBounds.x);\n    highp float _1016 = 0.0;\n    if (_724)\n    {\n        highp vec3 _739 = ((u_csmLightSpaceMatrices[0] * _707).xyz * 0.5) + vec3(0.5);\n        highp float _743 = _739.x;\n        highp float _747 = _739.y;\n        highp float _757 = (((_739.z + step(_743, 0.001000000047497451305389404296875)) + step(_747, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _743)) + step(0.999000012874603271484375, _747);\n        highp float _1013 = 0.0;\n        for (int SPIRV_Cross_Dummy265 = 0; SPIRV_Cross_Dummy265 < 1; SPIRV_Cross_Dummy265++)\n        {\n            if (_757 > 1.0)\n            {\n                _1013 = 1.0;\n                break;\n            }\n            highp float _808 = _757 - 0.001000000047497451305389404296875;\n            highp vec2 _814 = ((_739.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _825 = fract(_814 * vec2(2048.0));\n            highp float _880 = _825.y;\n            _1013 = mix(mix(float(_808 < dot(texture2D(u_shadowMapTex, _814), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_808 < dot(texture2D(u_shadowMapTex, _814 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _880), mix(float(_808 < dot(texture2D(u_shadowMapTex, _814 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_808 < dot(texture2D(u_shadowMapTex, _814 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _880), _825.x);\n            break;\n        }\n        _1016 = _1013;\n    }\n    else\n    {\n        _1016 = 1.0;\n    }\n    bool _1343 = _724 ? true : false;\n    bool _1034 = (!_1343) && (_711 < u_csmFarBounds.y);\n    highp float _1125 = 0.0;\n    if (_1034)\n    {\n        highp vec3 _1045 = ((u_csmLightSpaceMatrices[1] * _707).xyz * 0.5) + vec3(0.5);\n        highp float _1047 = _1045.x;\n        highp float _1050 = _1045.y;\n        highp float _1058 = (((_1045.z + step(_1047, 0.001000000047497451305389404296875)) + step(_1050, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1047)) + step(0.999000012874603271484375, _1050);\n        highp float _1122 = 0.0;\n        for (int SPIRV_Cross_Dummy341 = 0; SPIRV_Cross_Dummy341 < 1; SPIRV_Cross_Dummy341++)\n        {\n            if (_1058 > 1.0)\n            {\n                _1122 = 1.0;\n                break;\n            }\n            highp float _1076 = _1058 - 0.001000000047497451305389404296875;\n            highp vec2 _1080 = ((_1045.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1087 = fract(_1080 * vec2(2048.0));\n            highp float _1115 = _1087.y;\n            _1122 = mix(mix(float(_1076 < dot(texture2D(u_shadowMapTex, _1080), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1076 < dot(texture2D(u_shadowMapTex, _1080 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1115), mix(float(_1076 < dot(texture2D(u_shadowMapTex, _1080 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1076 < dot(texture2D(u_shadowMapTex, _1080 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1115), _1087.x);\n            break;\n        }\n        _1125 = _1122;\n    }\n    else\n    {\n        _1125 = _1016;\n    }\n    bool _1344 = _1034 ? true : _1343;\n    bool _1139 = (!_1344) && (_711 < u_csmFarBounds.z);\n    highp float _1230 = 0.0;\n    if (_1139)\n    {\n        highp vec3 _1150 = ((u_csmLightSpaceMatrices[2] * _707).xyz * 0.5) + vec3(0.5);\n        highp float _1152 = _1150.x;\n        highp float _1155 = _1150.y;\n        highp float _1163 = (((_1150.z + step(_1152, 0.001000000047497451305389404296875)) + step(_1155, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1152)) + step(0.999000012874603271484375, _1155);\n        highp float _1227 = 0.0;\n        for (int SPIRV_Cross_Dummy417 = 0; SPIRV_Cross_Dummy417 < 1; SPIRV_Cross_Dummy417++)\n        {\n            if (_1163 > 1.0)\n            {\n                _1227 = 1.0;\n                break;\n            }\n            highp float _1181 = _1163 - 0.001000000047497451305389404296875;\n            highp vec2 _1185 = ((_1150.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1192 = fract(_1185 * vec2(2048.0));\n            highp float _1220 = _1192.y;\n            _1227 = mix(mix(float(_1181 < dot(texture2D(u_shadowMapTex, _1185), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1181 < dot(texture2D(u_shadowMapTex, _1185 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1220), mix(float(_1181 < dot(texture2D(u_shadowMapTex, _1185 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1181 < dot(texture2D(u_shadowMapTex, _1185 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1220), _1192.x);\n            break;\n        }\n        _1230 = _1227;\n    }\n    else\n    {\n        _1230 = _1125;\n    }\n    highp float _1335 = 0.0;\n    if ((!(_1139 ? true : _1344)) && (_711 < u_csmFarBounds.w))\n    {\n        highp vec3 _1255 = ((u_csmLightSpaceMatrices[3] * _707).xyz * 0.5) + vec3(0.5);\n        highp float _1257 = _1255.x;\n        highp float _1260 = _1255.y;\n        highp float _1268 = (((_1255.z + step(_1257, 0.001000000047497451305389404296875)) + step(_1260, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1257)) + step(0.999000012874603271484375, _1260);\n        highp float _1332 = 0.0;\n        for (int SPIRV_Cross_Dummy487 = 0; SPIRV_Cross_Dummy487 < 1; SPIRV_Cross_Dummy487++)\n        {\n            if (_1268 > 1.0)\n            {\n                _1332 = 1.0;\n                break;\n            }\n            highp float _1286 = _1268 - 0.001000000047497451305389404296875;\n            highp vec2 _1290 = ((_1255.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1297 = fract(_1290 * vec2(2048.0));\n            highp float _1325 = _1297.y;\n            _1332 = mix(mix(float(_1286 < dot(texture2D(u_shadowMapTex, _1290), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1286 < dot(texture2D(u_shadowMapTex, _1290 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1325), mix(float(_1286 < dot(texture2D(u_shadowMapTex, _1290 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1286 < dot(texture2D(u_shadowMapTex, _1290 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1325), _1297.x);\n            break;\n        }\n        _1335 = _1332;\n    }\n    else\n    {\n        _1335 = _1230;\n    }\n    highp vec3 _638 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_600.xyz * (min(_638, mix(max(_638 - (u_lightColor * (clamp(dot(_617, u_lightDir), 0.0, 1.0) * (1.0 - _1335))), u_shadowColor), _638, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _617)), _Shininess * 128.0)) * (_SpecColor.xyz * _592.w))), _602);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _595 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _603 = (_595 * _Color) * _AlbedoIntensity;\n    highp float _605 = _603.w;\n    if ((_605 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _620 = normalize(varying_WorldNormal);\n    highp vec4 _715 = vec4(varying_ShadowPosition, 1.0);\n    highp float _719 = -(u_view * _715).z;\n    bool _732 = true && (_719 < u_csmFarBounds.x);\n    highp float _1023 = 0.0;\n    if (_732)\n    {\n        highp vec3 _747 = ((u_csmLightSpaceMatrices[0] * _715).xyz * 0.5) + vec3(0.5);\n        highp float _751 = _747.x;\n        highp float _755 = _747.y;\n        highp float _765 = (((_747.z + step(_751, 0.001000000047497451305389404296875)) + step(_755, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _751)) + step(0.999000012874603271484375, _755);\n        highp float _1020 = 0.0;\n        for (int SPIRV_Cross_Dummy268 = 0; SPIRV_Cross_Dummy268 < 1; SPIRV_Cross_Dummy268++)\n        {\n            if (_765 > 1.0)\n            {\n                _1020 = 1.0;\n                break;\n            }\n            highp float _816 = _765 - 0.001000000047497451305389404296875;\n            highp vec2 _822 = ((_747.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _833 = fract(_822 * vec2(2048.0));\n            highp float _888 = _833.y;\n            _1020 = mix(mix(float(_816 < dot(texture2D(u_shadowMapTex, _822), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_816 < dot(texture2D(u_shadowMapTex, _822 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _888), mix(float(_816 < dot(texture2D(u_shadowMapTex, _822 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_816 < dot(texture2D(u_shadowMapTex, _822 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _888), _833.x);\n            break;\n        }\n        _1023 = _1020;\n    }\n    else\n    {\n        _1023 = 1.0;\n    }\n    bool _1350 = _732 ? true : false;\n    bool _1041 = (!_1350) && (_719 < u_csmFarBounds.y);\n    highp float _1132 = 0.0;\n    if (_1041)\n    {\n        highp vec3 _1052 = ((u_csmLightSpaceMatrices[1] * _715).xyz * 0.5) + vec3(0.5);\n        highp float _1054 = _1052.x;\n        highp float _1057 = _1052.y;\n        highp float _1065 = (((_1052.z + step(_1054, 0.001000000047497451305389404296875)) + step(_1057, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1054)) + step(0.999000012874603271484375, _1057);\n        highp float _1129 = 0.0;\n        for (int SPIRV_Cross_Dummy344 = 0; SPIRV_Cross_Dummy344 < 1; SPIRV_Cross_Dummy344++)\n        {\n            if (_1065 > 1.0)\n            {\n                _1129 = 1.0;\n                break;\n            }\n            highp float _1083 = _1065 - 0.001000000047497451305389404296875;\n            highp vec2 _1087 = ((_1052.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1094 = fract(_1087 * vec2(2048.0));\n            highp float _1122 = _1094.y;\n            _1129 = mix(mix(float(_1083 < dot(texture2D(u_shadowMapTex, _1087), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1083 < dot(texture2D(u_shadowMapTex, _1087 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1122), mix(float(_1083 < dot(texture2D(u_shadowMapTex, _1087 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1083 < dot(texture2D(u_shadowMapTex, _1087 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1122), _1094.x);\n            break;\n        }\n        _1132 = _1129;\n    }\n    else\n    {\n        _1132 = _1023;\n    }\n    bool _1351 = _1041 ? true : _1350;\n    bool _1146 = (!_1351) && (_719 < u_csmFarBounds.z);\n    highp float _1237 = 0.0;\n    if (_1146)\n    {\n        highp vec3 _1157 = ((u_csmLightSpaceMatrices[2] * _715).xyz * 0.5) + vec3(0.5);\n        highp float _1159 = _1157.x;\n        highp float _1162 = _1157.y;\n        highp float _1170 = (((_1157.z + step(_1159, 0.001000000047497451305389404296875)) + step(_1162, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1159)) + step(0.999000012874603271484375, _1162);\n        highp float _1234 = 0.0;\n        for (int SPIRV_Cross_Dummy420 = 0; SPIRV_Cross_Dummy420 < 1; SPIRV_Cross_Dummy420++)\n        {\n            if (_1170 > 1.0)\n            {\n                _1234 = 1.0;\n                break;\n            }\n            highp float _1188 = _1170 - 0.001000000047497451305389404296875;\n            highp vec2 _1192 = ((_1157.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1199 = fract(_1192 * vec2(2048.0));\n            highp float _1227 = _1199.y;\n            _1234 = mix(mix(float(_1188 < dot(texture2D(u_shadowMapTex, _1192), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1188 < dot(texture2D(u_shadowMapTex, _1192 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1227), mix(float(_1188 < dot(texture2D(u_shadowMapTex, _1192 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1188 < dot(texture2D(u_shadowMapTex, _1192 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1227), _1199.x);\n            break;\n        }\n        _1237 = _1234;\n    }\n    else\n    {\n        _1237 = _1132;\n    }\n    highp float _1342 = 0.0;\n    if ((!(_1146 ? true : _1351)) && (_719 < u_csmFarBounds.w))\n    {\n        highp vec3 _1262 = ((u_csmLightSpaceMatrices[3] * _715).xyz * 0.5) + vec3(0.5);\n        highp float _1264 = _1262.x;\n        highp float _1267 = _1262.y;\n        highp float _1275 = (((_1262.z + step(_1264, 0.001000000047497451305389404296875)) + step(_1267, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1264)) + step(0.999000012874603271484375, _1267);\n        highp float _1339 = 0.0;\n        for (int SPIRV_Cross_Dummy490 = 0; SPIRV_Cross_Dummy490 < 1; SPIRV_Cross_Dummy490++)\n        {\n            if (_1275 > 1.0)\n            {\n                _1339 = 1.0;\n                break;\n            }\n            highp float _1293 = _1275 - 0.001000000047497451305389404296875;\n            highp vec2 _1297 = ((_1262.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1304 = fract(_1297 * vec2(2048.0));\n            highp float _1332 = _1304.y;\n            _1339 = mix(mix(float(_1293 < dot(texture2D(u_shadowMapTex, _1297), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1293 < dot(texture2D(u_shadowMapTex, _1297 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1332), mix(float(_1293 < dot(texture2D(u_shadowMapTex, _1297 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1293 < dot(texture2D(u_shadowMapTex, _1297 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1332), _1304.x);\n            break;\n        }\n        _1342 = _1339;\n    }\n    else\n    {\n        _1342 = _1237;\n    }\n    highp vec3 _641 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_603.xyz * (min(_641, mix(max(_641 - (u_lightColor * (clamp(dot(_620, u_lightDir), 0.0, 1.0) * (1.0 - _1342))), u_shadowColor), _641, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _620)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _605);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _485 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _493 = (_485 * _Color) * _AlbedoIntensity;\n    highp float _495 = _493.w;\n    if ((_495 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _516 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _595 = (_516.xy - vec2(0.5)) * 2.0;\n    highp vec4 _533 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _535 = _533.xyz * 2.0;\n    highp vec4 _559 = vec4(_493.xyz * (min(_535, mix(max(_535, u_shadowColor), _535, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_595, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_595, _595)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _485.w))), _495);\n    highp vec4 _565 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _679 = length(varying_positionCamera_Fog);\n    highp float _767 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _767 = (u_fogInfos.z - _679) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _768 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _768 = 1.0 / pow(2.7182800769805908203125, _679 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _769 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _769 = 1.0 / pow(2.7182800769805908203125, ((_679 * _679) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _769 = 1.0;\n            }\n            _768 = _769;\n        }\n        _767 = _768;\n    }\n    highp float _725 = clamp(_767, 0.0, 1.0);\n    highp vec3 _734 = ((_559.xyz + (_EmissionColor.xyz * _565.x)).xyz * _725) + (u_fogColor * (1.0 - _725));\n    gl_FragData[0] = vec4(_734.x, _734.y, _734.z, _559.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _540 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _548 = (_540 * _Color) * _AlbedoIntensity;\n    highp vec3 _551 = normalize(varying_LightDir);\n    highp vec3 _557 = normalize(varying_WorldNormal);\n    highp vec4 _658 = vec4(varying_ShadowPosition, 1.0);\n    highp float _662 = -(u_view * _658).z;\n    bool _675 = true && (_662 < u_csmFarBounds.x);\n    highp float _925 = 0.0;\n    if (_675)\n    {\n        highp vec3 _690 = ((u_csmLightSpaceMatrices[0] * _658).xyz * 0.5) + vec3(0.5);\n        highp float _694 = _690.x;\n        highp float _698 = _690.y;\n        highp float _708 = (((_690.z + step(_694, 0.001000000047497451305389404296875)) + step(_698, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _694)) + step(0.999000012874603271484375, _698);\n        highp float _922 = 0.0;\n        for (int SPIRV_Cross_Dummy254 = 0; SPIRV_Cross_Dummy254 < 1; SPIRV_Cross_Dummy254++)\n        {\n            if (_708 > 1.0)\n            {\n                _922 = 1.0;\n                break;\n            }\n            highp float _759 = _708 - 0.001000000047497451305389404296875;\n            highp vec2 _765 = ((_690.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _776 = fract(_765 * vec2(2048.0));\n            highp float _831 = _776.y;\n            _922 = mix(mix(float(_759 < dot(texture2D(u_shadowMapTex, _765), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_759 < dot(texture2D(u_shadowMapTex, _765 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _831), mix(float(_759 < dot(texture2D(u_shadowMapTex, _765 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_759 < dot(texture2D(u_shadowMapTex, _765 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _831), _776.x);\n            break;\n        }\n        _925 = _922;\n    }\n    else\n    {\n        _925 = 1.0;\n    }\n    bool _1251 = _675 ? true : false;\n    bool _943 = (!_1251) && (_662 < u_csmFarBounds.y);\n    highp float _1034 = 0.0;\n    if (_943)\n    {\n        highp vec3 _954 = ((u_csmLightSpaceMatrices[1] * _658).xyz * 0.5) + vec3(0.5);\n        highp float _956 = _954.x;\n        highp float _959 = _954.y;\n        highp float _967 = (((_954.z + step(_956, 0.001000000047497451305389404296875)) + step(_959, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _956)) + step(0.999000012874603271484375, _959);\n        highp float _1031 = 0.0;\n        for (int SPIRV_Cross_Dummy330 = 0; SPIRV_Cross_Dummy330 < 1; SPIRV_Cross_Dummy330++)\n        {\n            if (_967 > 1.0)\n            {\n                _1031 = 1.0;\n                break;\n            }\n            highp float _985 = _967 - 0.001000000047497451305389404296875;\n            highp vec2 _989 = ((_954.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _996 = fract(_989 * vec2(2048.0));\n            highp float _1024 = _996.y;\n            _1031 = mix(mix(float(_985 < dot(texture2D(u_shadowMapTex, _989), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_985 < dot(texture2D(u_shadowMapTex, _989 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1024), mix(float(_985 < dot(texture2D(u_shadowMapTex, _989 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_985 < dot(texture2D(u_shadowMapTex, _989 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1024), _996.x);\n            break;\n        }\n        _1034 = _1031;\n    }\n    else\n    {\n        _1034 = _925;\n    }\n    bool _1252 = _943 ? true : _1251;\n    bool _1048 = (!_1252) && (_662 < u_csmFarBounds.z);\n    highp float _1139 = 0.0;\n    if (_1048)\n    {\n        highp vec3 _1059 = ((u_csmLightSpaceMatrices[2] * _658).xyz * 0.5) + vec3(0.5);\n        highp float _1061 = _1059.x;\n        highp float _1064 = _1059.y;\n        highp float _1072 = (((_1059.z + step(_1061, 0.001000000047497451305389404296875)) + step(_1064, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1061)) + step(0.999000012874603271484375, _1064);\n        highp float _1136 = 0.0;\n        for (int SPIRV_Cross_Dummy406 = 0; SPIRV_Cross_Dummy406 < 1; SPIRV_Cross_Dummy406++)\n        {\n            if (_1072 > 1.0)\n            {\n                _1136 = 1.0;\n                break;\n            }\n            highp float _1090 = _1072 - 0.001000000047497451305389404296875;\n            highp vec2 _1094 = ((_1059.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1101 = fract(_1094 * vec2(2048.0));\n            highp float _1129 = _1101.y;\n            _1136 = mix(mix(float(_1090 < dot(texture2D(u_shadowMapTex, _1094), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1090 < dot(texture2D(u_shadowMapTex, _1094 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1129), mix(float(_1090 < dot(texture2D(u_shadowMapTex, _1094 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1090 < dot(texture2D(u_shadowMapTex, _1094 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1129), _1101.x);\n            break;\n        }\n        _1139 = _1136;\n    }\n    else\n    {\n        _1139 = _1034;\n    }\n    highp float _1244 = 0.0;\n    if ((!(_1048 ? true : _1252)) && (_662 < u_csmFarBounds.w))\n    {\n        highp vec3 _1164 = ((u_csmLightSpaceMatrices[3] * _658).xyz * 0.5) + vec3(0.5);\n        highp float _1166 = _1164.x;\n        highp float _1169 = _1164.y;\n        highp float _1177 = (((_1164.z + step(_1166, 0.001000000047497451305389404296875)) + step(_1169, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1166)) + step(0.999000012874603271484375, _1169);\n        highp float _1241 = 0.0;\n        for (int SPIRV_Cross_Dummy476 = 0; SPIRV_Cross_Dummy476 < 1; SPIRV_Cross_Dummy476++)\n        {\n            if (_1177 > 1.0)\n            {\n                _1241 = 1.0;\n                break;\n            }\n            highp float _1195 = _1177 - 0.001000000047497451305389404296875;\n            highp vec2 _1199 = ((_1164.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1206 = fract(_1199 * vec2(2048.0));\n            highp float _1234 = _1206.y;\n            _1241 = mix(mix(float(_1195 < dot(texture2D(u_shadowMapTex, _1199), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1195 < dot(texture2D(u_shadowMapTex, _1199 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1234), mix(float(_1195 < dot(texture2D(u_shadowMapTex, _1199 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1195 < dot(texture2D(u_shadowMapTex, _1199 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1234), _1206.x);\n            break;\n        }\n        _1244 = _1241;\n    }\n    else\n    {\n        _1244 = _1139;\n    }\n    highp vec4 _596 = vec4(_548.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_551, _557))) * _1244)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _551), _557)), _Shininess * 128.0)) * (_SpecColor.xyz * _540.w))), _548.w);\n    highp vec3 _612 = _596.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_612.x, _612.y, _612.z, _596.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _453 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _461 = (_453 * _Color) * _AlbedoIntensity;\n    highp float _463 = _461.w;\n    if ((_463 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _494 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _496 = _494.xyz * 2.0;\n    highp vec4 _506 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _525 = vec4(_461.xyz * (min(_496, mix(max(_496, u_shadowColor), _496, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_506.xyz * _SpecColor.xyz))), _463);\n    highp vec4 _531 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _625 = length(varying_positionCamera_Fog);\n    highp float _712 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _712 = (u_fogInfos.z - _625) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _713 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _713 = 1.0 / pow(2.7182800769805908203125, _625 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _714 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _714 = 1.0 / pow(2.7182800769805908203125, ((_625 * _625) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _714 = 1.0;\n            }\n            _713 = _714;\n        }\n        _712 = _713;\n    }\n    highp float _671 = clamp(_712, 0.0, 1.0);\n    highp vec3 _680 = ((_525.xyz + (_EmissionColor.xyz * _531.x)).xyz * _671) + (u_fogColor * (1.0 - _671));\n    gl_FragData[0] = vec4(_680.x, _680.y, _680.z, _525.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _483 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _491 = (_483 * _Color) * _AlbedoIntensity;\n    highp float _493 = _491.w;\n    if ((_493 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _514 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _593 = (_514.xy - vec2(0.5)) * 2.0;\n    highp vec4 _531 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _533 = _531.xyz * 2.0;\n    highp vec4 _557 = vec4(_491.xyz * (min(_533, mix(max(_533, u_shadowColor), _533, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_593, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_593, _593)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _483.w))), _493);\n    highp vec4 _563 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _677 = length(varying_positionCamera_Fog);\n    highp float _765 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _765 = (u_fogInfos.z - _677) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _766 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _766 = 1.0 / pow(2.7182800769805908203125, _677 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _767 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _767 = 1.0 / pow(2.7182800769805908203125, ((_677 * _677) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _767 = 1.0;\n            }\n            _766 = _767;\n        }\n        _765 = _766;\n    }\n    highp float _723 = clamp(_765, 0.0, 1.0);\n    highp vec3 _732 = ((_557.xyz + (_EmissionColor.xyz * _563.x)).xyz * _723) + (u_fogColor * (1.0 - _723));\n    gl_FragData[0] = vec4(_732.x, _732.y, _732.z, _557.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _538 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _546 = (_538 * _Color) * _AlbedoIntensity;\n    highp vec3 _549 = normalize(varying_LightDir);\n    highp vec3 _555 = normalize(varying_WorldNormal);\n    highp vec4 _656 = vec4(varying_ShadowPosition, 1.0);\n    highp float _660 = -(u_view * _656).z;\n    bool _673 = true && (_660 < u_csmFarBounds.x);\n    highp float _923 = 0.0;\n    if (_673)\n    {\n        highp vec3 _688 = ((u_csmLightSpaceMatrices[0] * _656).xyz * 0.5) + vec3(0.5);\n        highp float _692 = _688.x;\n        highp float _696 = _688.y;\n        highp float _706 = (((_688.z + step(_692, 0.001000000047497451305389404296875)) + step(_696, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _692)) + step(0.999000012874603271484375, _696);\n        highp float _920 = 0.0;\n        for (int SPIRV_Cross_Dummy254 = 0; SPIRV_Cross_Dummy254 < 1; SPIRV_Cross_Dummy254++)\n        {\n            if (_706 > 1.0)\n            {\n                _920 = 1.0;\n                break;\n            }\n            highp float _757 = _706 - 0.001000000047497451305389404296875;\n            highp vec2 _763 = ((_688.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _774 = fract(_763 * vec2(2048.0));\n            highp float _829 = _774.y;\n            _920 = mix(mix(float(_757 < dot(texture2D(u_shadowMapTex, _763), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_757 < dot(texture2D(u_shadowMapTex, _763 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _829), mix(float(_757 < dot(texture2D(u_shadowMapTex, _763 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_757 < dot(texture2D(u_shadowMapTex, _763 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _829), _774.x);\n            break;\n        }\n        _923 = _920;\n    }\n    else\n    {\n        _923 = 1.0;\n    }\n    bool _1249 = _673 ? true : false;\n    bool _941 = (!_1249) && (_660 < u_csmFarBounds.y);\n    highp float _1032 = 0.0;\n    if (_941)\n    {\n        highp vec3 _952 = ((u_csmLightSpaceMatrices[1] * _656).xyz * 0.5) + vec3(0.5);\n        highp float _954 = _952.x;\n        highp float _957 = _952.y;\n        highp float _965 = (((_952.z + step(_954, 0.001000000047497451305389404296875)) + step(_957, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _954)) + step(0.999000012874603271484375, _957);\n        highp float _1029 = 0.0;\n        for (int SPIRV_Cross_Dummy330 = 0; SPIRV_Cross_Dummy330 < 1; SPIRV_Cross_Dummy330++)\n        {\n            if (_965 > 1.0)\n            {\n                _1029 = 1.0;\n                break;\n            }\n            highp float _983 = _965 - 0.001000000047497451305389404296875;\n            highp vec2 _987 = ((_952.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _994 = fract(_987 * vec2(2048.0));\n            highp float _1022 = _994.y;\n            _1029 = mix(mix(float(_983 < dot(texture2D(u_shadowMapTex, _987), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_983 < dot(texture2D(u_shadowMapTex, _987 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1022), mix(float(_983 < dot(texture2D(u_shadowMapTex, _987 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_983 < dot(texture2D(u_shadowMapTex, _987 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1022), _994.x);\n            break;\n        }\n        _1032 = _1029;\n    }\n    else\n    {\n        _1032 = _923;\n    }\n    bool _1250 = _941 ? true : _1249;\n    bool _1046 = (!_1250) && (_660 < u_csmFarBounds.z);\n    highp float _1137 = 0.0;\n    if (_1046)\n    {\n        highp vec3 _1057 = ((u_csmLightSpaceMatrices[2] * _656).xyz * 0.5) + vec3(0.5);\n        highp float _1059 = _1057.x;\n        highp float _1062 = _1057.y;\n        highp float _1070 = (((_1057.z + step(_1059, 0.001000000047497451305389404296875)) + step(_1062, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1059)) + step(0.999000012874603271484375, _1062);\n        highp float _1134 = 0.0;\n        for (int SPIRV_Cross_Dummy406 = 0; SPIRV_Cross_Dummy406 < 1; SPIRV_Cross_Dummy406++)\n        {\n            if (_1070 > 1.0)\n            {\n                _1134 = 1.0;\n                break;\n            }\n            highp float _1088 = _1070 - 0.001000000047497451305389404296875;\n            highp vec2 _1092 = ((_1057.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1099 = fract(_1092 * vec2(2048.0));\n            highp float _1127 = _1099.y;\n            _1134 = mix(mix(float(_1088 < dot(texture2D(u_shadowMapTex, _1092), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1088 < dot(texture2D(u_shadowMapTex, _1092 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1127), mix(float(_1088 < dot(texture2D(u_shadowMapTex, _1092 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1088 < dot(texture2D(u_shadowMapTex, _1092 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1127), _1099.x);\n            break;\n        }\n        _1137 = _1134;\n    }\n    else\n    {\n        _1137 = _1032;\n    }\n    highp float _1242 = 0.0;\n    if ((!(_1046 ? true : _1250)) && (_660 < u_csmFarBounds.w))\n    {\n        highp vec3 _1162 = ((u_csmLightSpaceMatrices[3] * _656).xyz * 0.5) + vec3(0.5);\n        highp float _1164 = _1162.x;\n        highp float _1167 = _1162.y;\n        highp float _1175 = (((_1162.z + step(_1164, 0.001000000047497451305389404296875)) + step(_1167, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1164)) + step(0.999000012874603271484375, _1167);\n        highp float _1239 = 0.0;\n        for (int SPIRV_Cross_Dummy476 = 0; SPIRV_Cross_Dummy476 < 1; SPIRV_Cross_Dummy476++)\n        {\n            if (_1175 > 1.0)\n            {\n                _1239 = 1.0;\n                break;\n            }\n            highp float _1193 = _1175 - 0.001000000047497451305389404296875;\n            highp vec2 _1197 = ((_1162.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1204 = fract(_1197 * vec2(2048.0));\n            highp float _1232 = _1204.y;\n            _1239 = mix(mix(float(_1193 < dot(texture2D(u_shadowMapTex, _1197), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1193 < dot(texture2D(u_shadowMapTex, _1197 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1232), mix(float(_1193 < dot(texture2D(u_shadowMapTex, _1197 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1193 < dot(texture2D(u_shadowMapTex, _1197 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1232), _1204.x);\n            break;\n        }\n        _1242 = _1239;\n    }\n    else\n    {\n        _1242 = _1137;\n    }\n    highp vec4 _594 = vec4(_546.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_549, _555))) * _1242)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _549), _555)), _Shininess * 128.0)) * (_SpecColor.xyz * _538.w))), _546.w);\n    highp vec3 _610 = _594.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_610.x, _610.y, _610.z, _594.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _581 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _589 = (_581 * _Color) * _AlbedoIntensity;\n    highp vec3 _592 = normalize(varying_LightDir);\n    highp vec4 _604 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _677 = (_604.xy - vec2(0.5)) * 2.0;\n    highp vec3 _688 = vec3(_677, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_677, _677))));\n    highp vec4 _731 = vec4(varying_ShadowPosition, 1.0);\n    highp float _735 = -(u_view * _731).z;\n    bool _748 = true && (_735 < u_csmFarBounds.x);\n    highp float _996 = 0.0;\n    if (_748)\n    {\n        highp vec3 _763 = ((u_csmLightSpaceMatrices[0] * _731).xyz * 0.5) + vec3(0.5);\n        highp float _767 = _763.x;\n        highp float _771 = _763.y;\n        highp float _781 = (((_763.z + step(_767, 0.001000000047497451305389404296875)) + step(_771, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _767)) + step(0.999000012874603271484375, _771);\n        highp float _993 = 0.0;\n        for (int SPIRV_Cross_Dummy262 = 0; SPIRV_Cross_Dummy262 < 1; SPIRV_Cross_Dummy262++)\n        {\n            if (_781 > 1.0)\n            {\n                _993 = 1.0;\n                break;\n            }\n            highp float _832 = _781 - 0.001000000047497451305389404296875;\n            highp vec2 _838 = ((_763.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _849 = fract(_838 * vec2(2048.0));\n            highp float _904 = _849.y;\n            _993 = mix(mix(float(_832 < dot(texture2D(u_shadowMapTex, _838), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_832 < dot(texture2D(u_shadowMapTex, _838 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _904), mix(float(_832 < dot(texture2D(u_shadowMapTex, _838 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_832 < dot(texture2D(u_shadowMapTex, _838 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _904), _849.x);\n            break;\n        }\n        _996 = _993;\n    }\n    else\n    {\n        _996 = 1.0;\n    }\n    bool _1323 = _748 ? true : false;\n    bool _1015 = (!_1323) && (_735 < u_csmFarBounds.y);\n    highp float _1106 = 0.0;\n    if (_1015)\n    {\n        highp vec3 _1026 = ((u_csmLightSpaceMatrices[1] * _731).xyz * 0.5) + vec3(0.5);\n        highp float _1028 = _1026.x;\n        highp float _1031 = _1026.y;\n        highp float _1039 = (((_1026.z + step(_1028, 0.001000000047497451305389404296875)) + step(_1031, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1028)) + step(0.999000012874603271484375, _1031);\n        highp float _1103 = 0.0;\n        for (int SPIRV_Cross_Dummy338 = 0; SPIRV_Cross_Dummy338 < 1; SPIRV_Cross_Dummy338++)\n        {\n            if (_1039 > 1.0)\n            {\n                _1103 = 1.0;\n                break;\n            }\n            highp float _1057 = _1039 - 0.001000000047497451305389404296875;\n            highp vec2 _1061 = ((_1026.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1068 = fract(_1061 * vec2(2048.0));\n            highp float _1096 = _1068.y;\n            _1103 = mix(mix(float(_1057 < dot(texture2D(u_shadowMapTex, _1061), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1057 < dot(texture2D(u_shadowMapTex, _1061 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1096), mix(float(_1057 < dot(texture2D(u_shadowMapTex, _1061 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1057 < dot(texture2D(u_shadowMapTex, _1061 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1096), _1068.x);\n            break;\n        }\n        _1106 = _1103;\n    }\n    else\n    {\n        _1106 = _996;\n    }\n    bool _1324 = _1015 ? true : _1323;\n    bool _1120 = (!_1324) && (_735 < u_csmFarBounds.z);\n    highp float _1211 = 0.0;\n    if (_1120)\n    {\n        highp vec3 _1131 = ((u_csmLightSpaceMatrices[2] * _731).xyz * 0.5) + vec3(0.5);\n        highp float _1133 = _1131.x;\n        highp float _1136 = _1131.y;\n        highp float _1144 = (((_1131.z + step(_1133, 0.001000000047497451305389404296875)) + step(_1136, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1133)) + step(0.999000012874603271484375, _1136);\n        highp float _1208 = 0.0;\n        for (int SPIRV_Cross_Dummy414 = 0; SPIRV_Cross_Dummy414 < 1; SPIRV_Cross_Dummy414++)\n        {\n            if (_1144 > 1.0)\n            {\n                _1208 = 1.0;\n                break;\n            }\n            highp float _1162 = _1144 - 0.001000000047497451305389404296875;\n            highp vec2 _1166 = ((_1131.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1173 = fract(_1166 * vec2(2048.0));\n            highp float _1201 = _1173.y;\n            _1208 = mix(mix(float(_1162 < dot(texture2D(u_shadowMapTex, _1166), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1162 < dot(texture2D(u_shadowMapTex, _1166 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1201), mix(float(_1162 < dot(texture2D(u_shadowMapTex, _1166 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1162 < dot(texture2D(u_shadowMapTex, _1166 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1201), _1173.x);\n            break;\n        }\n        _1211 = _1208;\n    }\n    else\n    {\n        _1211 = _1106;\n    }\n    highp float _1316 = 0.0;\n    if ((!(_1120 ? true : _1324)) && (_735 < u_csmFarBounds.w))\n    {\n        highp vec3 _1236 = ((u_csmLightSpaceMatrices[3] * _731).xyz * 0.5) + vec3(0.5);\n        highp float _1238 = _1236.x;\n        highp float _1241 = _1236.y;\n        highp float _1249 = (((_1236.z + step(_1238, 0.001000000047497451305389404296875)) + step(_1241, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1238)) + step(0.999000012874603271484375, _1241);\n        highp float _1313 = 0.0;\n        for (int SPIRV_Cross_Dummy484 = 0; SPIRV_Cross_Dummy484 < 1; SPIRV_Cross_Dummy484++)\n        {\n            if (_1249 > 1.0)\n            {\n                _1313 = 1.0;\n                break;\n            }\n            highp float _1267 = _1249 - 0.001000000047497451305389404296875;\n            highp vec2 _1271 = ((_1236.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1278 = fract(_1271 * vec2(2048.0));\n            highp float _1306 = _1278.y;\n            _1313 = mix(mix(float(_1267 < dot(texture2D(u_shadowMapTex, _1271), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1267 < dot(texture2D(u_shadowMapTex, _1271 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1306), mix(float(_1267 < dot(texture2D(u_shadowMapTex, _1271 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1267 < dot(texture2D(u_shadowMapTex, _1271 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1306), _1278.x);\n            break;\n        }\n        _1316 = _1313;\n    }\n    else\n    {\n        _1316 = _1211;\n    }\n    highp vec4 _649 = vec4(_589.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_592, _688))) * _1316)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _592), _688)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _589.w);\n    highp vec3 _665 = _649.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_665.x, _665.y, _665.z, _649.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _451 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _459 = (_451 * _Color) * _AlbedoIntensity;\n    highp float _461 = _459.w;\n    if ((_461 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _492 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _494 = _492.xyz * 2.0;\n    highp vec4 _504 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _523 = vec4(_459.xyz * (min(_494, mix(max(_494, u_shadowColor), _494, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_504.xyz * _SpecColor.xyz))), _461);\n    highp vec4 _529 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _623 = length(varying_positionCamera_Fog);\n    highp float _710 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _710 = (u_fogInfos.z - _623) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _711 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _711 = 1.0 / pow(2.7182800769805908203125, _623 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _712 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _712 = 1.0 / pow(2.7182800769805908203125, ((_623 * _623) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _712 = 1.0;\n            }\n            _711 = _712;\n        }\n        _710 = _711;\n    }\n    highp float _669 = clamp(_710, 0.0, 1.0);\n    highp vec3 _678 = ((_523.xyz + (_EmissionColor.xyz * _529.x)).xyz * _669) + (u_fogColor * (1.0 - _669));\n    gl_FragData[0] = vec4(_678.x, _678.y, _678.z, _523.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _376 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _384 = (_376 * _Color) * _AlbedoIntensity;\n    highp vec3 _387 = normalize(varying_LightDir);\n    highp vec3 _393 = normalize(varying_WorldNormal);\n    highp vec4 _429 = vec4(_384.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_387, _393))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _387), _393)), _Shininess * 128.0)) * (_SpecColor.xyz * _376.w))), _384.w);\n    highp vec4 _435 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _490 = length(varying_positionCamera_Fog);\n    highp float _573 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _573 = (u_fogInfos.z - _490) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _574 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _574 = 1.0 / pow(2.7182800769805908203125, _490 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _575 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _575 = 1.0 / pow(2.7182800769805908203125, ((_490 * _490) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _575 = 1.0;\n            }\n            _574 = _575;\n        }\n        _573 = _574;\n    }\n    highp float _536 = clamp(_573, 0.0, 1.0);\n    highp vec3 _545 = ((_429.xyz + (_EmissionColor.xyz * _435.x)).xyz * _536) + (u_fogColor * (1.0 - _536));\n    gl_FragData[0] = vec4(_545.x, _545.y, _545.z, _429.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _374 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _382 = (_374 * _Color) * _AlbedoIntensity;\n    highp vec3 _385 = normalize(varying_LightDir);\n    highp vec3 _391 = normalize(varying_WorldNormal);\n    highp vec4 _427 = vec4(_382.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_385, _391))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _385), _391)), _Shininess * 128.0)) * (_SpecColor.xyz * _374.w))), _382.w);\n    highp vec4 _433 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _488 = length(varying_positionCamera_Fog);\n    highp float _571 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _571 = (u_fogInfos.z - _488) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _572 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _572 = 1.0 / pow(2.7182800769805908203125, _488 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _573 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _573 = 1.0 / pow(2.7182800769805908203125, ((_488 * _488) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _573 = 1.0;\n            }\n            _572 = _573;\n        }\n        _571 = _572;\n    }\n    highp float _534 = clamp(_571, 0.0, 1.0);\n    highp vec3 _543 = ((_427.xyz + (_EmissionColor.xyz * _433.x)).xyz * _534) + (u_fogColor * (1.0 - _534));\n    gl_FragData[0] = vec4(_543.x, _543.y, _543.z, _427.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _418 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _426 = (_418 * _Color) * _AlbedoIntensity;\n    highp vec3 _429 = normalize(varying_LightDir);\n    highp vec4 _441 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _518 = (_441.xy - vec2(0.5)) * 2.0;\n    highp vec3 _529 = vec3(_518, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_518, _518))));\n    highp vec4 _464 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _483 = vec4(_426.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_429, _529))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _429), _529)), _Shininess * 128.0)) * (_464.xyz * _SpecColor.xyz))), _426.w);\n    highp vec4 _489 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _564 = length(varying_positionCamera_Fog);\n    highp float _645 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _645 = (u_fogInfos.z - _564) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _646 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _646 = 1.0 / pow(2.7182800769805908203125, _564 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _647 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _647 = 1.0 / pow(2.7182800769805908203125, ((_564 * _564) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _647 = 1.0;\n            }\n            _646 = _647;\n        }\n        _645 = _646;\n    }\n    highp float _610 = clamp(_645, 0.0, 1.0);\n    highp vec3 _619 = ((_483.xyz + (_EmissionColor.xyz * _489.x)).xyz * _610) + (u_fogColor * (1.0 - _610));\n    gl_FragData[0] = vec4(_619.x, _619.y, _619.z, _483.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _679 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _687 = (_679 * _Color) * _AlbedoIntensity;\n    highp float _689 = _687.w;\n    if ((_689 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _704 = normalize(varying_WorldNormal);\n    highp vec4 _801 = vec4(varying_ShadowPosition, 1.0);\n    highp float _805 = -(u_view * _801).z;\n    bool _818 = true && (_805 < u_csmFarBounds.x);\n    highp float _1185 = 0.0;\n    if (_818)\n    {\n        highp vec3 _833 = ((u_csmLightSpaceMatrices[0] * _801).xyz * 0.5) + vec3(0.5);\n        highp float _837 = _833.x;\n        highp float _841 = _833.y;\n        highp float _851 = (((_833.z + step(_837, 0.001000000047497451305389404296875)) + step(_841, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _837)) + step(0.999000012874603271484375, _841);\n        highp float _1182 = 0.0;\n        for (int SPIRV_Cross_Dummy269 = 0; SPIRV_Cross_Dummy269 < 1; SPIRV_Cross_Dummy269++)\n        {\n            if (_851 > 1.0)\n            {\n                _1182 = 1.0;\n                break;\n            }\n            highp float _902 = _851 - 0.001000000047497451305389404296875;\n            highp vec2 _908 = ((_833.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _919 = fract(_908 * vec2(2048.0));\n            highp float _974 = _919.y;\n            _1182 = mix(mix(float(_902 < dot(texture2D(u_shadowMapTex, _908), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_902 < dot(texture2D(u_shadowMapTex, _908 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _974), mix(float(_902 < dot(texture2D(u_shadowMapTex, _908 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_902 < dot(texture2D(u_shadowMapTex, _908 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _974), _919.x);\n            break;\n        }\n        _1185 = _1182;\n    }\n    else\n    {\n        _1185 = 1.0;\n    }\n    bool _1512 = _818 ? true : false;\n    bool _1203 = (!_1512) && (_805 < u_csmFarBounds.y);\n    highp float _1294 = 0.0;\n    if (_1203)\n    {\n        highp vec3 _1214 = ((u_csmLightSpaceMatrices[1] * _801).xyz * 0.5) + vec3(0.5);\n        highp float _1216 = _1214.x;\n        highp float _1219 = _1214.y;\n        highp float _1227 = (((_1214.z + step(_1216, 0.001000000047497451305389404296875)) + step(_1219, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1216)) + step(0.999000012874603271484375, _1219);\n        highp float _1291 = 0.0;\n        for (int SPIRV_Cross_Dummy345 = 0; SPIRV_Cross_Dummy345 < 1; SPIRV_Cross_Dummy345++)\n        {\n            if (_1227 > 1.0)\n            {\n                _1291 = 1.0;\n                break;\n            }\n            highp float _1245 = _1227 - 0.001000000047497451305389404296875;\n            highp vec2 _1249 = ((_1214.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1256 = fract(_1249 * vec2(2048.0));\n            highp float _1284 = _1256.y;\n            _1291 = mix(mix(float(_1245 < dot(texture2D(u_shadowMapTex, _1249), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1245 < dot(texture2D(u_shadowMapTex, _1249 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1284), mix(float(_1245 < dot(texture2D(u_shadowMapTex, _1249 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1245 < dot(texture2D(u_shadowMapTex, _1249 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1284), _1256.x);\n            break;\n        }\n        _1294 = _1291;\n    }\n    else\n    {\n        _1294 = _1185;\n    }\n    bool _1513 = _1203 ? true : _1512;\n    bool _1308 = (!_1513) && (_805 < u_csmFarBounds.z);\n    highp float _1399 = 0.0;\n    if (_1308)\n    {\n        highp vec3 _1319 = ((u_csmLightSpaceMatrices[2] * _801).xyz * 0.5) + vec3(0.5);\n        highp float _1321 = _1319.x;\n        highp float _1324 = _1319.y;\n        highp float _1332 = (((_1319.z + step(_1321, 0.001000000047497451305389404296875)) + step(_1324, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1321)) + step(0.999000012874603271484375, _1324);\n        highp float _1396 = 0.0;\n        for (int SPIRV_Cross_Dummy421 = 0; SPIRV_Cross_Dummy421 < 1; SPIRV_Cross_Dummy421++)\n        {\n            if (_1332 > 1.0)\n            {\n                _1396 = 1.0;\n                break;\n            }\n            highp float _1350 = _1332 - 0.001000000047497451305389404296875;\n            highp vec2 _1354 = ((_1319.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1361 = fract(_1354 * vec2(2048.0));\n            highp float _1389 = _1361.y;\n            _1396 = mix(mix(float(_1350 < dot(texture2D(u_shadowMapTex, _1354), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1350 < dot(texture2D(u_shadowMapTex, _1354 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1389), mix(float(_1350 < dot(texture2D(u_shadowMapTex, _1354 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1350 < dot(texture2D(u_shadowMapTex, _1354 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1389), _1361.x);\n            break;\n        }\n        _1399 = _1396;\n    }\n    else\n    {\n        _1399 = _1294;\n    }\n    highp float _1504 = 0.0;\n    if ((!(_1308 ? true : _1513)) && (_805 < u_csmFarBounds.w))\n    {\n        highp vec3 _1424 = ((u_csmLightSpaceMatrices[3] * _801).xyz * 0.5) + vec3(0.5);\n        highp float _1426 = _1424.x;\n        highp float _1429 = _1424.y;\n        highp float _1437 = (((_1424.z + step(_1426, 0.001000000047497451305389404296875)) + step(_1429, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1426)) + step(0.999000012874603271484375, _1429);\n        highp float _1501 = 0.0;\n        for (int SPIRV_Cross_Dummy491 = 0; SPIRV_Cross_Dummy491 < 1; SPIRV_Cross_Dummy491++)\n        {\n            if (_1437 > 1.0)\n            {\n                _1501 = 1.0;\n                break;\n            }\n            highp float _1455 = _1437 - 0.001000000047497451305389404296875;\n            highp vec2 _1459 = ((_1424.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1466 = fract(_1459 * vec2(2048.0));\n            highp float _1494 = _1466.y;\n            _1501 = mix(mix(float(_1455 < dot(texture2D(u_shadowMapTex, _1459), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1455 < dot(texture2D(u_shadowMapTex, _1459 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1494), mix(float(_1455 < dot(texture2D(u_shadowMapTex, _1459 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1455 < dot(texture2D(u_shadowMapTex, _1459 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1494), _1466.x);\n            break;\n        }\n        _1504 = _1501;\n    }\n    else\n    {\n        _1504 = _1399;\n    }\n    highp vec4 _723 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _725 = _723.xyz * 2.0;\n    highp vec4 _749 = vec4(_687.xyz * (min(_725, mix(max(_725 - (u_lightColor * (clamp(dot(_704, u_lightDir), 0.0, 1.0) * (1.0 - _1504))), u_shadowColor), _725, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _704)), _Shininess * 128.0)) * (_SpecColor.xyz * _679.w))), _689);\n    highp float _1060 = length(varying_positionCamera_Fog);\n    highp float _1175 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1175 = (u_fogInfos.z - _1060) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1176 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1176 = 1.0 / pow(2.7182800769805908203125, _1060 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1177 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1177 = 1.0 / pow(2.7182800769805908203125, ((_1060 * _1060) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1177 = 1.0;\n            }\n            _1176 = _1177;\n        }\n        _1175 = _1176;\n    }\n    highp float _1106 = clamp(_1175, 0.0, 1.0);\n    highp vec3 _1115 = (_749.xyz * _1106) + (u_fogColor * (1.0 - _1106));\n    gl_FragData[0] = vec4(_1115.x, _1115.y, _1115.z, _749.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _682 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _690 = (_682 * _Color) * _AlbedoIntensity;\n    highp float _692 = _690.w;\n    if ((_692 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _707 = normalize(varying_WorldNormal);\n    highp vec4 _809 = vec4(varying_ShadowPosition, 1.0);\n    highp float _813 = -(u_view * _809).z;\n    bool _826 = true && (_813 < u_csmFarBounds.x);\n    highp float _1192 = 0.0;\n    if (_826)\n    {\n        highp vec3 _841 = ((u_csmLightSpaceMatrices[0] * _809).xyz * 0.5) + vec3(0.5);\n        highp float _845 = _841.x;\n        highp float _849 = _841.y;\n        highp float _859 = (((_841.z + step(_845, 0.001000000047497451305389404296875)) + step(_849, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _845)) + step(0.999000012874603271484375, _849);\n        highp float _1189 = 0.0;\n        for (int SPIRV_Cross_Dummy272 = 0; SPIRV_Cross_Dummy272 < 1; SPIRV_Cross_Dummy272++)\n        {\n            if (_859 > 1.0)\n            {\n                _1189 = 1.0;\n                break;\n            }\n            highp float _910 = _859 - 0.001000000047497451305389404296875;\n            highp vec2 _916 = ((_841.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _927 = fract(_916 * vec2(2048.0));\n            highp float _982 = _927.y;\n            _1189 = mix(mix(float(_910 < dot(texture2D(u_shadowMapTex, _916), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_910 < dot(texture2D(u_shadowMapTex, _916 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _982), mix(float(_910 < dot(texture2D(u_shadowMapTex, _916 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_910 < dot(texture2D(u_shadowMapTex, _916 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _982), _927.x);\n            break;\n        }\n        _1192 = _1189;\n    }\n    else\n    {\n        _1192 = 1.0;\n    }\n    bool _1519 = _826 ? true : false;\n    bool _1210 = (!_1519) && (_813 < u_csmFarBounds.y);\n    highp float _1301 = 0.0;\n    if (_1210)\n    {\n        highp vec3 _1221 = ((u_csmLightSpaceMatrices[1] * _809).xyz * 0.5) + vec3(0.5);\n        highp float _1223 = _1221.x;\n        highp float _1226 = _1221.y;\n        highp float _1234 = (((_1221.z + step(_1223, 0.001000000047497451305389404296875)) + step(_1226, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1223)) + step(0.999000012874603271484375, _1226);\n        highp float _1298 = 0.0;\n        for (int SPIRV_Cross_Dummy348 = 0; SPIRV_Cross_Dummy348 < 1; SPIRV_Cross_Dummy348++)\n        {\n            if (_1234 > 1.0)\n            {\n                _1298 = 1.0;\n                break;\n            }\n            highp float _1252 = _1234 - 0.001000000047497451305389404296875;\n            highp vec2 _1256 = ((_1221.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1263 = fract(_1256 * vec2(2048.0));\n            highp float _1291 = _1263.y;\n            _1298 = mix(mix(float(_1252 < dot(texture2D(u_shadowMapTex, _1256), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1252 < dot(texture2D(u_shadowMapTex, _1256 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1291), mix(float(_1252 < dot(texture2D(u_shadowMapTex, _1256 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1252 < dot(texture2D(u_shadowMapTex, _1256 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1291), _1263.x);\n            break;\n        }\n        _1301 = _1298;\n    }\n    else\n    {\n        _1301 = _1192;\n    }\n    bool _1520 = _1210 ? true : _1519;\n    bool _1315 = (!_1520) && (_813 < u_csmFarBounds.z);\n    highp float _1406 = 0.0;\n    if (_1315)\n    {\n        highp vec3 _1326 = ((u_csmLightSpaceMatrices[2] * _809).xyz * 0.5) + vec3(0.5);\n        highp float _1328 = _1326.x;\n        highp float _1331 = _1326.y;\n        highp float _1339 = (((_1326.z + step(_1328, 0.001000000047497451305389404296875)) + step(_1331, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1328)) + step(0.999000012874603271484375, _1331);\n        highp float _1403 = 0.0;\n        for (int SPIRV_Cross_Dummy424 = 0; SPIRV_Cross_Dummy424 < 1; SPIRV_Cross_Dummy424++)\n        {\n            if (_1339 > 1.0)\n            {\n                _1403 = 1.0;\n                break;\n            }\n            highp float _1357 = _1339 - 0.001000000047497451305389404296875;\n            highp vec2 _1361 = ((_1326.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1368 = fract(_1361 * vec2(2048.0));\n            highp float _1396 = _1368.y;\n            _1403 = mix(mix(float(_1357 < dot(texture2D(u_shadowMapTex, _1361), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1357 < dot(texture2D(u_shadowMapTex, _1361 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1396), mix(float(_1357 < dot(texture2D(u_shadowMapTex, _1361 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1357 < dot(texture2D(u_shadowMapTex, _1361 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1396), _1368.x);\n            break;\n        }\n        _1406 = _1403;\n    }\n    else\n    {\n        _1406 = _1301;\n    }\n    highp float _1511 = 0.0;\n    if ((!(_1315 ? true : _1520)) && (_813 < u_csmFarBounds.w))\n    {\n        highp vec3 _1431 = ((u_csmLightSpaceMatrices[3] * _809).xyz * 0.5) + vec3(0.5);\n        highp float _1433 = _1431.x;\n        highp float _1436 = _1431.y;\n        highp float _1444 = (((_1431.z + step(_1433, 0.001000000047497451305389404296875)) + step(_1436, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1433)) + step(0.999000012874603271484375, _1436);\n        highp float _1508 = 0.0;\n        for (int SPIRV_Cross_Dummy494 = 0; SPIRV_Cross_Dummy494 < 1; SPIRV_Cross_Dummy494++)\n        {\n            if (_1444 > 1.0)\n            {\n                _1508 = 1.0;\n                break;\n            }\n            highp float _1462 = _1444 - 0.001000000047497451305389404296875;\n            highp vec2 _1466 = ((_1431.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1473 = fract(_1466 * vec2(2048.0));\n            highp float _1501 = _1473.y;\n            _1508 = mix(mix(float(_1462 < dot(texture2D(u_shadowMapTex, _1466), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1462 < dot(texture2D(u_shadowMapTex, _1466 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1501), mix(float(_1462 < dot(texture2D(u_shadowMapTex, _1466 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1462 < dot(texture2D(u_shadowMapTex, _1466 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1501), _1473.x);\n            break;\n        }\n        _1511 = _1508;\n    }\n    else\n    {\n        _1511 = _1406;\n    }\n    highp vec4 _726 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _728 = _726.xyz * 2.0;\n    highp vec4 _738 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _757 = vec4(_690.xyz * (min(_728, mix(max(_728 - (u_lightColor * (clamp(dot(_707, u_lightDir), 0.0, 1.0) * (1.0 - _1511))), u_shadowColor), _728, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _707)), _Shininess * 128.0)) * (_738.xyz * _SpecColor.xyz))), _692);\n    highp float _1068 = length(varying_positionCamera_Fog);\n    highp float _1182 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1182 = (u_fogInfos.z - _1068) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1183 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1183 = 1.0 / pow(2.7182800769805908203125, _1068 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1184 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1184 = 1.0 / pow(2.7182800769805908203125, ((_1068 * _1068) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1184 = 1.0;\n            }\n            _1183 = _1184;\n        }\n        _1182 = _1183;\n    }\n    highp float _1114 = clamp(_1182, 0.0, 1.0);\n    highp vec3 _1123 = (_757.xyz * _1114) + (u_fogColor * (1.0 - _1114));\n    gl_FragData[0] = vec4(_1123.x, _1123.y, _1123.z, _757.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _397 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _405 = (_397 * _Color) * _AlbedoIntensity;\n    highp float _407 = _405.w;\n    if ((_407 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec2 _500 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _447 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _471 = vec4(_405.xyz * (min(_447, mix(max(_447, u_shadowColor), _447, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_500, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_500, _500)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _397.w))), _407);\n    highp vec3 _487 = _471.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_487.x, _487.y, _487.z, _471.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _628 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _636 = (_628 * _Color) * _AlbedoIntensity;\n    highp vec3 _639 = normalize(varying_LightDir);\n    highp vec3 _645 = normalize(varying_WorldNormal);\n    highp vec4 _753 = vec4(varying_ShadowPosition, 1.0);\n    highp float _757 = -(u_view * _753).z;\n    bool _770 = true && (_757 < u_csmFarBounds.x);\n    highp float _1095 = 0.0;\n    if (_770)\n    {\n        highp vec3 _785 = ((u_csmLightSpaceMatrices[0] * _753).xyz * 0.5) + vec3(0.5);\n        highp float _789 = _785.x;\n        highp float _793 = _785.y;\n        highp float _803 = (((_785.z + step(_789, 0.001000000047497451305389404296875)) + step(_793, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _789)) + step(0.999000012874603271484375, _793);\n        highp float _1092 = 0.0;\n        for (int SPIRV_Cross_Dummy258 = 0; SPIRV_Cross_Dummy258 < 1; SPIRV_Cross_Dummy258++)\n        {\n            if (_803 > 1.0)\n            {\n                _1092 = 1.0;\n                break;\n            }\n            highp float _854 = _803 - 0.001000000047497451305389404296875;\n            highp vec2 _860 = ((_785.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _871 = fract(_860 * vec2(2048.0));\n            highp float _926 = _871.y;\n            _1092 = mix(mix(float(_854 < dot(texture2D(u_shadowMapTex, _860), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_854 < dot(texture2D(u_shadowMapTex, _860 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _926), mix(float(_854 < dot(texture2D(u_shadowMapTex, _860 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_854 < dot(texture2D(u_shadowMapTex, _860 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _926), _871.x);\n            break;\n        }\n        _1095 = _1092;\n    }\n    else\n    {\n        _1095 = 1.0;\n    }\n    bool _1422 = _770 ? true : false;\n    bool _1113 = (!_1422) && (_757 < u_csmFarBounds.y);\n    highp float _1204 = 0.0;\n    if (_1113)\n    {\n        highp vec3 _1124 = ((u_csmLightSpaceMatrices[1] * _753).xyz * 0.5) + vec3(0.5);\n        highp float _1126 = _1124.x;\n        highp float _1129 = _1124.y;\n        highp float _1137 = (((_1124.z + step(_1126, 0.001000000047497451305389404296875)) + step(_1129, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1126)) + step(0.999000012874603271484375, _1129);\n        highp float _1201 = 0.0;\n        for (int SPIRV_Cross_Dummy334 = 0; SPIRV_Cross_Dummy334 < 1; SPIRV_Cross_Dummy334++)\n        {\n            if (_1137 > 1.0)\n            {\n                _1201 = 1.0;\n                break;\n            }\n            highp float _1155 = _1137 - 0.001000000047497451305389404296875;\n            highp vec2 _1159 = ((_1124.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1166 = fract(_1159 * vec2(2048.0));\n            highp float _1194 = _1166.y;\n            _1201 = mix(mix(float(_1155 < dot(texture2D(u_shadowMapTex, _1159), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1155 < dot(texture2D(u_shadowMapTex, _1159 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1194), mix(float(_1155 < dot(texture2D(u_shadowMapTex, _1159 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1155 < dot(texture2D(u_shadowMapTex, _1159 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1194), _1166.x);\n            break;\n        }\n        _1204 = _1201;\n    }\n    else\n    {\n        _1204 = _1095;\n    }\n    bool _1423 = _1113 ? true : _1422;\n    bool _1218 = (!_1423) && (_757 < u_csmFarBounds.z);\n    highp float _1309 = 0.0;\n    if (_1218)\n    {\n        highp vec3 _1229 = ((u_csmLightSpaceMatrices[2] * _753).xyz * 0.5) + vec3(0.5);\n        highp float _1231 = _1229.x;\n        highp float _1234 = _1229.y;\n        highp float _1242 = (((_1229.z + step(_1231, 0.001000000047497451305389404296875)) + step(_1234, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1231)) + step(0.999000012874603271484375, _1234);\n        highp float _1306 = 0.0;\n        for (int SPIRV_Cross_Dummy410 = 0; SPIRV_Cross_Dummy410 < 1; SPIRV_Cross_Dummy410++)\n        {\n            if (_1242 > 1.0)\n            {\n                _1306 = 1.0;\n                break;\n            }\n            highp float _1260 = _1242 - 0.001000000047497451305389404296875;\n            highp vec2 _1264 = ((_1229.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1271 = fract(_1264 * vec2(2048.0));\n            highp float _1299 = _1271.y;\n            _1306 = mix(mix(float(_1260 < dot(texture2D(u_shadowMapTex, _1264), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1260 < dot(texture2D(u_shadowMapTex, _1264 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1299), mix(float(_1260 < dot(texture2D(u_shadowMapTex, _1264 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1260 < dot(texture2D(u_shadowMapTex, _1264 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1299), _1271.x);\n            break;\n        }\n        _1309 = _1306;\n    }\n    else\n    {\n        _1309 = _1204;\n    }\n    highp float _1414 = 0.0;\n    if ((!(_1218 ? true : _1423)) && (_757 < u_csmFarBounds.w))\n    {\n        highp vec3 _1334 = ((u_csmLightSpaceMatrices[3] * _753).xyz * 0.5) + vec3(0.5);\n        highp float _1336 = _1334.x;\n        highp float _1339 = _1334.y;\n        highp float _1347 = (((_1334.z + step(_1336, 0.001000000047497451305389404296875)) + step(_1339, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1336)) + step(0.999000012874603271484375, _1339);\n        highp float _1411 = 0.0;\n        for (int SPIRV_Cross_Dummy480 = 0; SPIRV_Cross_Dummy480 < 1; SPIRV_Cross_Dummy480++)\n        {\n            if (_1347 > 1.0)\n            {\n                _1411 = 1.0;\n                break;\n            }\n            highp float _1365 = _1347 - 0.001000000047497451305389404296875;\n            highp vec2 _1369 = ((_1334.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1376 = fract(_1369 * vec2(2048.0));\n            highp float _1404 = _1376.y;\n            _1411 = mix(mix(float(_1365 < dot(texture2D(u_shadowMapTex, _1369), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1365 < dot(texture2D(u_shadowMapTex, _1369 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1404), mix(float(_1365 < dot(texture2D(u_shadowMapTex, _1369 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1365 < dot(texture2D(u_shadowMapTex, _1369 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1404), _1376.x);\n            break;\n        }\n        _1414 = _1411;\n    }\n    else\n    {\n        _1414 = _1309;\n    }\n    highp vec4 _684 = vec4(_636.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_639, _645))) * _1414)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _639), _645)), _Shininess * 128.0)) * (_SpecColor.xyz * _628.w))), _636.w);\n    highp vec4 _690 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _974 = length(varying_positionCamera_Fog);\n    highp float _1085 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1085 = (u_fogInfos.z - _974) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1086 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1086 = 1.0 / pow(2.7182800769805908203125, _974 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1087 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1087 = 1.0 / pow(2.7182800769805908203125, ((_974 * _974) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1087 = 1.0;\n            }\n            _1086 = _1087;\n        }\n        _1085 = _1086;\n    }\n    highp float _1020 = clamp(_1085, 0.0, 1.0);\n    highp vec3 _1029 = ((_684.xyz + (_EmissionColor.xyz * _690.x)).xyz * _1020) + (u_fogColor * (1.0 - _1020));\n    gl_FragData[0] = vec4(_1029.x, _1029.y, _1029.z, _684.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _365 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _373 = (_365 * _Color) * _AlbedoIntensity;\n    highp float _375 = _373.w;\n    if ((_375 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _408 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _437 = vec4(_373.xyz * (min(_408, mix(max(_408, u_shadowColor), _408, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _375);\n    highp vec3 _453 = _437.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_453.x, _453.y, _453.z, _437.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _395 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _403 = (_395 * _Color) * _AlbedoIntensity;\n    highp float _405 = _403.w;\n    if ((_405 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec2 _498 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _445 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _469 = vec4(_403.xyz * (min(_445, mix(max(_445, u_shadowColor), _445, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_498, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_498, _498)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _395.w))), _405);\n    highp vec3 _485 = _469.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_485.x, _485.y, _485.z, _469.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _626 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _634 = (_626 * _Color) * _AlbedoIntensity;\n    highp vec3 _637 = normalize(varying_LightDir);\n    highp vec3 _643 = normalize(varying_WorldNormal);\n    highp vec4 _751 = vec4(varying_ShadowPosition, 1.0);\n    highp float _755 = -(u_view * _751).z;\n    bool _768 = true && (_755 < u_csmFarBounds.x);\n    highp float _1093 = 0.0;\n    if (_768)\n    {\n        highp vec3 _783 = ((u_csmLightSpaceMatrices[0] * _751).xyz * 0.5) + vec3(0.5);\n        highp float _787 = _783.x;\n        highp float _791 = _783.y;\n        highp float _801 = (((_783.z + step(_787, 0.001000000047497451305389404296875)) + step(_791, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _787)) + step(0.999000012874603271484375, _791);\n        highp float _1090 = 0.0;\n        for (int SPIRV_Cross_Dummy258 = 0; SPIRV_Cross_Dummy258 < 1; SPIRV_Cross_Dummy258++)\n        {\n            if (_801 > 1.0)\n            {\n                _1090 = 1.0;\n                break;\n            }\n            highp float _852 = _801 - 0.001000000047497451305389404296875;\n            highp vec2 _858 = ((_783.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _869 = fract(_858 * vec2(2048.0));\n            highp float _924 = _869.y;\n            _1090 = mix(mix(float(_852 < dot(texture2D(u_shadowMapTex, _858), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_852 < dot(texture2D(u_shadowMapTex, _858 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _924), mix(float(_852 < dot(texture2D(u_shadowMapTex, _858 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_852 < dot(texture2D(u_shadowMapTex, _858 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _924), _869.x);\n            break;\n        }\n        _1093 = _1090;\n    }\n    else\n    {\n        _1093 = 1.0;\n    }\n    bool _1420 = _768 ? true : false;\n    bool _1111 = (!_1420) && (_755 < u_csmFarBounds.y);\n    highp float _1202 = 0.0;\n    if (_1111)\n    {\n        highp vec3 _1122 = ((u_csmLightSpaceMatrices[1] * _751).xyz * 0.5) + vec3(0.5);\n        highp float _1124 = _1122.x;\n        highp float _1127 = _1122.y;\n        highp float _1135 = (((_1122.z + step(_1124, 0.001000000047497451305389404296875)) + step(_1127, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1124)) + step(0.999000012874603271484375, _1127);\n        highp float _1199 = 0.0;\n        for (int SPIRV_Cross_Dummy334 = 0; SPIRV_Cross_Dummy334 < 1; SPIRV_Cross_Dummy334++)\n        {\n            if (_1135 > 1.0)\n            {\n                _1199 = 1.0;\n                break;\n            }\n            highp float _1153 = _1135 - 0.001000000047497451305389404296875;\n            highp vec2 _1157 = ((_1122.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1164 = fract(_1157 * vec2(2048.0));\n            highp float _1192 = _1164.y;\n            _1199 = mix(mix(float(_1153 < dot(texture2D(u_shadowMapTex, _1157), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1153 < dot(texture2D(u_shadowMapTex, _1157 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1192), mix(float(_1153 < dot(texture2D(u_shadowMapTex, _1157 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1153 < dot(texture2D(u_shadowMapTex, _1157 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1192), _1164.x);\n            break;\n        }\n        _1202 = _1199;\n    }\n    else\n    {\n        _1202 = _1093;\n    }\n    bool _1421 = _1111 ? true : _1420;\n    bool _1216 = (!_1421) && (_755 < u_csmFarBounds.z);\n    highp float _1307 = 0.0;\n    if (_1216)\n    {\n        highp vec3 _1227 = ((u_csmLightSpaceMatrices[2] * _751).xyz * 0.5) + vec3(0.5);\n        highp float _1229 = _1227.x;\n        highp float _1232 = _1227.y;\n        highp float _1240 = (((_1227.z + step(_1229, 0.001000000047497451305389404296875)) + step(_1232, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1229)) + step(0.999000012874603271484375, _1232);\n        highp float _1304 = 0.0;\n        for (int SPIRV_Cross_Dummy410 = 0; SPIRV_Cross_Dummy410 < 1; SPIRV_Cross_Dummy410++)\n        {\n            if (_1240 > 1.0)\n            {\n                _1304 = 1.0;\n                break;\n            }\n            highp float _1258 = _1240 - 0.001000000047497451305389404296875;\n            highp vec2 _1262 = ((_1227.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1269 = fract(_1262 * vec2(2048.0));\n            highp float _1297 = _1269.y;\n            _1304 = mix(mix(float(_1258 < dot(texture2D(u_shadowMapTex, _1262), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1258 < dot(texture2D(u_shadowMapTex, _1262 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1297), mix(float(_1258 < dot(texture2D(u_shadowMapTex, _1262 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1258 < dot(texture2D(u_shadowMapTex, _1262 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1297), _1269.x);\n            break;\n        }\n        _1307 = _1304;\n    }\n    else\n    {\n        _1307 = _1202;\n    }\n    highp float _1412 = 0.0;\n    if ((!(_1216 ? true : _1421)) && (_755 < u_csmFarBounds.w))\n    {\n        highp vec3 _1332 = ((u_csmLightSpaceMatrices[3] * _751).xyz * 0.5) + vec3(0.5);\n        highp float _1334 = _1332.x;\n        highp float _1337 = _1332.y;\n        highp float _1345 = (((_1332.z + step(_1334, 0.001000000047497451305389404296875)) + step(_1337, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1334)) + step(0.999000012874603271484375, _1337);\n        highp float _1409 = 0.0;\n        for (int SPIRV_Cross_Dummy480 = 0; SPIRV_Cross_Dummy480 < 1; SPIRV_Cross_Dummy480++)\n        {\n            if (_1345 > 1.0)\n            {\n                _1409 = 1.0;\n                break;\n            }\n            highp float _1363 = _1345 - 0.001000000047497451305389404296875;\n            highp vec2 _1367 = ((_1332.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1374 = fract(_1367 * vec2(2048.0));\n            highp float _1402 = _1374.y;\n            _1409 = mix(mix(float(_1363 < dot(texture2D(u_shadowMapTex, _1367), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1363 < dot(texture2D(u_shadowMapTex, _1367 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1402), mix(float(_1363 < dot(texture2D(u_shadowMapTex, _1367 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1363 < dot(texture2D(u_shadowMapTex, _1367 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1402), _1374.x);\n            break;\n        }\n        _1412 = _1409;\n    }\n    else\n    {\n        _1412 = _1307;\n    }\n    highp vec4 _682 = vec4(_634.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_637, _643))) * _1412)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _637), _643)), _Shininess * 128.0)) * (_SpecColor.xyz * _626.w))), _634.w);\n    highp vec4 _688 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _972 = length(varying_positionCamera_Fog);\n    highp float _1083 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1083 = (u_fogInfos.z - _972) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1084 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1084 = 1.0 / pow(2.7182800769805908203125, _972 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1085 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1085 = 1.0 / pow(2.7182800769805908203125, ((_972 * _972) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1085 = 1.0;\n            }\n            _1084 = _1085;\n        }\n        _1083 = _1084;\n    }\n    highp float _1018 = clamp(_1083, 0.0, 1.0);\n    highp vec3 _1027 = ((_682.xyz + (_EmissionColor.xyz * _688.x)).xyz * _1018) + (u_fogColor * (1.0 - _1018));\n    gl_FragData[0] = vec4(_1027.x, _1027.y, _1027.z, _682.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _668 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _676 = (_668 * _Color) * _AlbedoIntensity;\n    highp vec3 _679 = normalize(varying_LightDir);\n    highp vec4 _691 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _771 = (_691.xy - vec2(0.5)) * 2.0;\n    highp vec3 _782 = vec3(_771, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_771, _771))));\n    highp vec4 _825 = vec4(varying_ShadowPosition, 1.0);\n    highp float _829 = -(u_view * _825).z;\n    bool _842 = true && (_829 < u_csmFarBounds.x);\n    highp float _1165 = 0.0;\n    if (_842)\n    {\n        highp vec3 _857 = ((u_csmLightSpaceMatrices[0] * _825).xyz * 0.5) + vec3(0.5);\n        highp float _861 = _857.x;\n        highp float _865 = _857.y;\n        highp float _875 = (((_857.z + step(_861, 0.001000000047497451305389404296875)) + step(_865, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _861)) + step(0.999000012874603271484375, _865);\n        highp float _1162 = 0.0;\n        for (int SPIRV_Cross_Dummy266 = 0; SPIRV_Cross_Dummy266 < 1; SPIRV_Cross_Dummy266++)\n        {\n            if (_875 > 1.0)\n            {\n                _1162 = 1.0;\n                break;\n            }\n            highp float _926 = _875 - 0.001000000047497451305389404296875;\n            highp vec2 _932 = ((_857.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _943 = fract(_932 * vec2(2048.0));\n            highp float _998 = _943.y;\n            _1162 = mix(mix(float(_926 < dot(texture2D(u_shadowMapTex, _932), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_926 < dot(texture2D(u_shadowMapTex, _932 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _998), mix(float(_926 < dot(texture2D(u_shadowMapTex, _932 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_926 < dot(texture2D(u_shadowMapTex, _932 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _998), _943.x);\n            break;\n        }\n        _1165 = _1162;\n    }\n    else\n    {\n        _1165 = 1.0;\n    }\n    bool _1493 = _842 ? true : false;\n    bool _1184 = (!_1493) && (_829 < u_csmFarBounds.y);\n    highp float _1275 = 0.0;\n    if (_1184)\n    {\n        highp vec3 _1195 = ((u_csmLightSpaceMatrices[1] * _825).xyz * 0.5) + vec3(0.5);\n        highp float _1197 = _1195.x;\n        highp float _1200 = _1195.y;\n        highp float _1208 = (((_1195.z + step(_1197, 0.001000000047497451305389404296875)) + step(_1200, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1197)) + step(0.999000012874603271484375, _1200);\n        highp float _1272 = 0.0;\n        for (int SPIRV_Cross_Dummy342 = 0; SPIRV_Cross_Dummy342 < 1; SPIRV_Cross_Dummy342++)\n        {\n            if (_1208 > 1.0)\n            {\n                _1272 = 1.0;\n                break;\n            }\n            highp float _1226 = _1208 - 0.001000000047497451305389404296875;\n            highp vec2 _1230 = ((_1195.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1237 = fract(_1230 * vec2(2048.0));\n            highp float _1265 = _1237.y;\n            _1272 = mix(mix(float(_1226 < dot(texture2D(u_shadowMapTex, _1230), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1226 < dot(texture2D(u_shadowMapTex, _1230 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1265), mix(float(_1226 < dot(texture2D(u_shadowMapTex, _1230 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1226 < dot(texture2D(u_shadowMapTex, _1230 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1265), _1237.x);\n            break;\n        }\n        _1275 = _1272;\n    }\n    else\n    {\n        _1275 = _1165;\n    }\n    bool _1494 = _1184 ? true : _1493;\n    bool _1289 = (!_1494) && (_829 < u_csmFarBounds.z);\n    highp float _1380 = 0.0;\n    if (_1289)\n    {\n        highp vec3 _1300 = ((u_csmLightSpaceMatrices[2] * _825).xyz * 0.5) + vec3(0.5);\n        highp float _1302 = _1300.x;\n        highp float _1305 = _1300.y;\n        highp float _1313 = (((_1300.z + step(_1302, 0.001000000047497451305389404296875)) + step(_1305, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1302)) + step(0.999000012874603271484375, _1305);\n        highp float _1377 = 0.0;\n        for (int SPIRV_Cross_Dummy418 = 0; SPIRV_Cross_Dummy418 < 1; SPIRV_Cross_Dummy418++)\n        {\n            if (_1313 > 1.0)\n            {\n                _1377 = 1.0;\n                break;\n            }\n            highp float _1331 = _1313 - 0.001000000047497451305389404296875;\n            highp vec2 _1335 = ((_1300.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1342 = fract(_1335 * vec2(2048.0));\n            highp float _1370 = _1342.y;\n            _1377 = mix(mix(float(_1331 < dot(texture2D(u_shadowMapTex, _1335), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1331 < dot(texture2D(u_shadowMapTex, _1335 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1370), mix(float(_1331 < dot(texture2D(u_shadowMapTex, _1335 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1331 < dot(texture2D(u_shadowMapTex, _1335 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1370), _1342.x);\n            break;\n        }\n        _1380 = _1377;\n    }\n    else\n    {\n        _1380 = _1275;\n    }\n    highp float _1485 = 0.0;\n    if ((!(_1289 ? true : _1494)) && (_829 < u_csmFarBounds.w))\n    {\n        highp vec3 _1405 = ((u_csmLightSpaceMatrices[3] * _825).xyz * 0.5) + vec3(0.5);\n        highp float _1407 = _1405.x;\n        highp float _1410 = _1405.y;\n        highp float _1418 = (((_1405.z + step(_1407, 0.001000000047497451305389404296875)) + step(_1410, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1407)) + step(0.999000012874603271484375, _1410);\n        highp float _1482 = 0.0;\n        for (int SPIRV_Cross_Dummy488 = 0; SPIRV_Cross_Dummy488 < 1; SPIRV_Cross_Dummy488++)\n        {\n            if (_1418 > 1.0)\n            {\n                _1482 = 1.0;\n                break;\n            }\n            highp float _1436 = _1418 - 0.001000000047497451305389404296875;\n            highp vec2 _1440 = ((_1405.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1447 = fract(_1440 * vec2(2048.0));\n            highp float _1475 = _1447.y;\n            _1482 = mix(mix(float(_1436 < dot(texture2D(u_shadowMapTex, _1440), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1436 < dot(texture2D(u_shadowMapTex, _1440 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1475), mix(float(_1436 < dot(texture2D(u_shadowMapTex, _1440 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1436 < dot(texture2D(u_shadowMapTex, _1440 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1475), _1447.x);\n            break;\n        }\n        _1485 = _1482;\n    }\n    else\n    {\n        _1485 = _1380;\n    }\n    highp vec4 _717 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _736 = vec4(_676.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_679, _782))) * _1485)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _679), _782)), _Shininess * 128.0)) * (_717.xyz * _SpecColor.xyz))), _676.w);\n    highp vec4 _742 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1046 = length(varying_positionCamera_Fog);\n    highp float _1155 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1155 = (u_fogInfos.z - _1046) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1156 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1156 = 1.0 / pow(2.7182800769805908203125, _1046 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1157 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1157 = 1.0 / pow(2.7182800769805908203125, ((_1046 * _1046) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1157 = 1.0;\n            }\n            _1156 = _1157;\n        }\n        _1155 = _1156;\n    }\n    highp float _1092 = clamp(_1155, 0.0, 1.0);\n    highp vec3 _1101 = ((_736.xyz + (_EmissionColor.xyz * _742.x)).xyz * _1092) + (u_fogColor * (1.0 - _1092));\n    gl_FragData[0] = vec4(_1101.x, _1101.y, _1101.z, _736.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _363 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _371 = (_363 * _Color) * _AlbedoIntensity;\n    highp float _373 = _371.w;\n    if ((_373 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _406 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _435 = vec4(_371.xyz * (min(_406, mix(max(_406, u_shadowColor), _406, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _373);\n    highp vec3 _451 = _435.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_451.x, _451.y, _451.z, _435.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _349 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _357 = (_349 * _Color) * _AlbedoIntensity;\n    highp vec3 _384 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _408 = vec4(_357.xyz * (min(_384, mix(max(_384, u_shadowColor), _384, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_SpecColor.xyz * _349.w))), _357.w);\n    highp vec3 _424 = _408.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_424.x, _424.y, _424.z, _408.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _347 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _355 = (_347 * _Color) * _AlbedoIntensity;\n    highp vec3 _382 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _406 = vec4(_355.xyz * (min(_382, mix(max(_382, u_shadowColor), _382, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_SpecColor.xyz * _347.w))), _355.w);\n    highp vec3 _422 = _406.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_422.x, _422.y, _422.z, _406.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _399 = (texture2D(_MainTex, varying_TexCoord) * _Color) * _AlbedoIntensity;\n    highp vec2 _490 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _433 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _462 = vec4(_399.xyz * (min(_433, mix(max(_433, u_shadowColor), _433, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_490, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_490, _490)))))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _399.w);\n    highp vec3 _478 = _462.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_478.x, _478.y, _478.z, _462.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _528 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _536 = (_528 * _Color) * _AlbedoIntensity;\n    highp float _538 = _536.w;\n    if ((_538 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _547 = normalize(varying_LightDir);\n    highp vec3 _553 = normalize(varying_WorldNormal);\n    highp vec4 _637 = vec4(varying_ShadowPosition, 1.0);\n    highp float _641 = -(u_view * _637).z;\n    bool _654 = true && (_641 < u_csmFarBounds.x);\n    highp float _904 = 0.0;\n    if (_654)\n    {\n        highp vec3 _669 = ((u_csmLightSpaceMatrices[0] * _637).xyz * 0.5) + vec3(0.5);\n        highp float _673 = _669.x;\n        highp float _677 = _669.y;\n        highp float _687 = (((_669.z + step(_673, 0.001000000047497451305389404296875)) + step(_677, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _673)) + step(0.999000012874603271484375, _677);\n        highp float _901 = 0.0;\n        for (int SPIRV_Cross_Dummy261 = 0; SPIRV_Cross_Dummy261 < 1; SPIRV_Cross_Dummy261++)\n        {\n            if (_687 > 1.0)\n            {\n                _901 = 1.0;\n                break;\n            }\n            highp float _738 = _687 - 0.001000000047497451305389404296875;\n            highp vec2 _744 = ((_669.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _755 = fract(_744 * vec2(2048.0));\n            highp float _810 = _755.y;\n            _901 = mix(mix(float(_738 < dot(texture2D(u_shadowMapTex, _744), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_738 < dot(texture2D(u_shadowMapTex, _744 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _810), mix(float(_738 < dot(texture2D(u_shadowMapTex, _744 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_738 < dot(texture2D(u_shadowMapTex, _744 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _810), _755.x);\n            break;\n        }\n        _904 = _901;\n    }\n    else\n    {\n        _904 = 1.0;\n    }\n    bool _1231 = _654 ? true : false;\n    bool _922 = (!_1231) && (_641 < u_csmFarBounds.y);\n    highp float _1013 = 0.0;\n    if (_922)\n    {\n        highp vec3 _933 = ((u_csmLightSpaceMatrices[1] * _637).xyz * 0.5) + vec3(0.5);\n        highp float _935 = _933.x;\n        highp float _938 = _933.y;\n        highp float _946 = (((_933.z + step(_935, 0.001000000047497451305389404296875)) + step(_938, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _935)) + step(0.999000012874603271484375, _938);\n        highp float _1010 = 0.0;\n        for (int SPIRV_Cross_Dummy337 = 0; SPIRV_Cross_Dummy337 < 1; SPIRV_Cross_Dummy337++)\n        {\n            if (_946 > 1.0)\n            {\n                _1010 = 1.0;\n                break;\n            }\n            highp float _964 = _946 - 0.001000000047497451305389404296875;\n            highp vec2 _968 = ((_933.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _975 = fract(_968 * vec2(2048.0));\n            highp float _1003 = _975.y;\n            _1010 = mix(mix(float(_964 < dot(texture2D(u_shadowMapTex, _968), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_964 < dot(texture2D(u_shadowMapTex, _968 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1003), mix(float(_964 < dot(texture2D(u_shadowMapTex, _968 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_964 < dot(texture2D(u_shadowMapTex, _968 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1003), _975.x);\n            break;\n        }\n        _1013 = _1010;\n    }\n    else\n    {\n        _1013 = _904;\n    }\n    bool _1232 = _922 ? true : _1231;\n    bool _1027 = (!_1232) && (_641 < u_csmFarBounds.z);\n    highp float _1118 = 0.0;\n    if (_1027)\n    {\n        highp vec3 _1038 = ((u_csmLightSpaceMatrices[2] * _637).xyz * 0.5) + vec3(0.5);\n        highp float _1040 = _1038.x;\n        highp float _1043 = _1038.y;\n        highp float _1051 = (((_1038.z + step(_1040, 0.001000000047497451305389404296875)) + step(_1043, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1040)) + step(0.999000012874603271484375, _1043);\n        highp float _1115 = 0.0;\n        for (int SPIRV_Cross_Dummy413 = 0; SPIRV_Cross_Dummy413 < 1; SPIRV_Cross_Dummy413++)\n        {\n            if (_1051 > 1.0)\n            {\n                _1115 = 1.0;\n                break;\n            }\n            highp float _1069 = _1051 - 0.001000000047497451305389404296875;\n            highp vec2 _1073 = ((_1038.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1080 = fract(_1073 * vec2(2048.0));\n            highp float _1108 = _1080.y;\n            _1115 = mix(mix(float(_1069 < dot(texture2D(u_shadowMapTex, _1073), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1069 < dot(texture2D(u_shadowMapTex, _1073 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1108), mix(float(_1069 < dot(texture2D(u_shadowMapTex, _1073 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1069 < dot(texture2D(u_shadowMapTex, _1073 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1108), _1080.x);\n            break;\n        }\n        _1118 = _1115;\n    }\n    else\n    {\n        _1118 = _1013;\n    }\n    highp float _1223 = 0.0;\n    if ((!(_1027 ? true : _1232)) && (_641 < u_csmFarBounds.w))\n    {\n        highp vec3 _1143 = ((u_csmLightSpaceMatrices[3] * _637).xyz * 0.5) + vec3(0.5);\n        highp float _1145 = _1143.x;\n        highp float _1148 = _1143.y;\n        highp float _1156 = (((_1143.z + step(_1145, 0.001000000047497451305389404296875)) + step(_1148, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1145)) + step(0.999000012874603271484375, _1148);\n        highp float _1220 = 0.0;\n        for (int SPIRV_Cross_Dummy483 = 0; SPIRV_Cross_Dummy483 < 1; SPIRV_Cross_Dummy483++)\n        {\n            if (_1156 > 1.0)\n            {\n                _1220 = 1.0;\n                break;\n            }\n            highp float _1174 = _1156 - 0.001000000047497451305389404296875;\n            highp vec2 _1178 = ((_1143.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1185 = fract(_1178 * vec2(2048.0));\n            highp float _1213 = _1185.y;\n            _1220 = mix(mix(float(_1174 < dot(texture2D(u_shadowMapTex, _1178), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1174 < dot(texture2D(u_shadowMapTex, _1178 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1213), mix(float(_1174 < dot(texture2D(u_shadowMapTex, _1178 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1174 < dot(texture2D(u_shadowMapTex, _1178 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1213), _1185.x);\n            break;\n        }\n        _1223 = _1220;\n    }\n    else\n    {\n        _1223 = _1118;\n    }\n    gl_FragData[0] = vec4(_536.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_547, _553))) * _1223)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _547), _553)), _Shininess * 128.0)) * (_SpecColor.xyz * _528.w))), _538);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _531 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _539 = (_531 * _Color) * _AlbedoIntensity;\n    highp float _541 = _539.w;\n    if ((_541 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _550 = normalize(varying_LightDir);\n    highp vec3 _556 = normalize(varying_WorldNormal);\n    highp vec4 _645 = vec4(varying_ShadowPosition, 1.0);\n    highp float _649 = -(u_view * _645).z;\n    bool _662 = true && (_649 < u_csmFarBounds.x);\n    highp float _911 = 0.0;\n    if (_662)\n    {\n        highp vec3 _677 = ((u_csmLightSpaceMatrices[0] * _645).xyz * 0.5) + vec3(0.5);\n        highp float _681 = _677.x;\n        highp float _685 = _677.y;\n        highp float _695 = (((_677.z + step(_681, 0.001000000047497451305389404296875)) + step(_685, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _681)) + step(0.999000012874603271484375, _685);\n        highp float _908 = 0.0;\n        for (int SPIRV_Cross_Dummy264 = 0; SPIRV_Cross_Dummy264 < 1; SPIRV_Cross_Dummy264++)\n        {\n            if (_695 > 1.0)\n            {\n                _908 = 1.0;\n                break;\n            }\n            highp float _746 = _695 - 0.001000000047497451305389404296875;\n            highp vec2 _752 = ((_677.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _763 = fract(_752 * vec2(2048.0));\n            highp float _818 = _763.y;\n            _908 = mix(mix(float(_746 < dot(texture2D(u_shadowMapTex, _752), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_746 < dot(texture2D(u_shadowMapTex, _752 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _818), mix(float(_746 < dot(texture2D(u_shadowMapTex, _752 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_746 < dot(texture2D(u_shadowMapTex, _752 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _818), _763.x);\n            break;\n        }\n        _911 = _908;\n    }\n    else\n    {\n        _911 = 1.0;\n    }\n    bool _1238 = _662 ? true : false;\n    bool _929 = (!_1238) && (_649 < u_csmFarBounds.y);\n    highp float _1020 = 0.0;\n    if (_929)\n    {\n        highp vec3 _940 = ((u_csmLightSpaceMatrices[1] * _645).xyz * 0.5) + vec3(0.5);\n        highp float _942 = _940.x;\n        highp float _945 = _940.y;\n        highp float _953 = (((_940.z + step(_942, 0.001000000047497451305389404296875)) + step(_945, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _942)) + step(0.999000012874603271484375, _945);\n        highp float _1017 = 0.0;\n        for (int SPIRV_Cross_Dummy340 = 0; SPIRV_Cross_Dummy340 < 1; SPIRV_Cross_Dummy340++)\n        {\n            if (_953 > 1.0)\n            {\n                _1017 = 1.0;\n                break;\n            }\n            highp float _971 = _953 - 0.001000000047497451305389404296875;\n            highp vec2 _975 = ((_940.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _982 = fract(_975 * vec2(2048.0));\n            highp float _1010 = _982.y;\n            _1017 = mix(mix(float(_971 < dot(texture2D(u_shadowMapTex, _975), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_971 < dot(texture2D(u_shadowMapTex, _975 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1010), mix(float(_971 < dot(texture2D(u_shadowMapTex, _975 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_971 < dot(texture2D(u_shadowMapTex, _975 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1010), _982.x);\n            break;\n        }\n        _1020 = _1017;\n    }\n    else\n    {\n        _1020 = _911;\n    }\n    bool _1239 = _929 ? true : _1238;\n    bool _1034 = (!_1239) && (_649 < u_csmFarBounds.z);\n    highp float _1125 = 0.0;\n    if (_1034)\n    {\n        highp vec3 _1045 = ((u_csmLightSpaceMatrices[2] * _645).xyz * 0.5) + vec3(0.5);\n        highp float _1047 = _1045.x;\n        highp float _1050 = _1045.y;\n        highp float _1058 = (((_1045.z + step(_1047, 0.001000000047497451305389404296875)) + step(_1050, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1047)) + step(0.999000012874603271484375, _1050);\n        highp float _1122 = 0.0;\n        for (int SPIRV_Cross_Dummy416 = 0; SPIRV_Cross_Dummy416 < 1; SPIRV_Cross_Dummy416++)\n        {\n            if (_1058 > 1.0)\n            {\n                _1122 = 1.0;\n                break;\n            }\n            highp float _1076 = _1058 - 0.001000000047497451305389404296875;\n            highp vec2 _1080 = ((_1045.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1087 = fract(_1080 * vec2(2048.0));\n            highp float _1115 = _1087.y;\n            _1122 = mix(mix(float(_1076 < dot(texture2D(u_shadowMapTex, _1080), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1076 < dot(texture2D(u_shadowMapTex, _1080 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1115), mix(float(_1076 < dot(texture2D(u_shadowMapTex, _1080 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1076 < dot(texture2D(u_shadowMapTex, _1080 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1115), _1087.x);\n            break;\n        }\n        _1125 = _1122;\n    }\n    else\n    {\n        _1125 = _1020;\n    }\n    highp float _1230 = 0.0;\n    if ((!(_1034 ? true : _1239)) && (_649 < u_csmFarBounds.w))\n    {\n        highp vec3 _1150 = ((u_csmLightSpaceMatrices[3] * _645).xyz * 0.5) + vec3(0.5);\n        highp float _1152 = _1150.x;\n        highp float _1155 = _1150.y;\n        highp float _1163 = (((_1150.z + step(_1152, 0.001000000047497451305389404296875)) + step(_1155, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1152)) + step(0.999000012874603271484375, _1155);\n        highp float _1227 = 0.0;\n        for (int SPIRV_Cross_Dummy486 = 0; SPIRV_Cross_Dummy486 < 1; SPIRV_Cross_Dummy486++)\n        {\n            if (_1163 > 1.0)\n            {\n                _1227 = 1.0;\n                break;\n            }\n            highp float _1181 = _1163 - 0.001000000047497451305389404296875;\n            highp vec2 _1185 = ((_1150.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1192 = fract(_1185 * vec2(2048.0));\n            highp float _1220 = _1192.y;\n            _1227 = mix(mix(float(_1181 < dot(texture2D(u_shadowMapTex, _1185), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1181 < dot(texture2D(u_shadowMapTex, _1185 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1220), mix(float(_1181 < dot(texture2D(u_shadowMapTex, _1185 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1181 < dot(texture2D(u_shadowMapTex, _1185 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1220), _1192.x);\n            break;\n        }\n        _1230 = _1227;\n    }\n    else\n    {\n        _1230 = _1125;\n    }\n    gl_FragData[0] = vec4(_539.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_550, _556))) * _1230)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _550), _556)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _541);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _422 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _430 = (_422 * _Color) * _AlbedoIntensity;\n    highp float _432 = _430.w;\n    if ((_432 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _441 = normalize(varying_LightDir);\n    highp vec4 _453 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _526 = (_453.xy - vec2(0.5)) * 2.0;\n    highp vec3 _537 = vec3(_526, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_526, _526))));\n    highp vec4 _490 = vec4(_430.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_441, _537))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _441), _537)), _Shininess * 128.0)) * (_SpecColor.xyz * _422.w))), _432);\n    highp vec4 _496 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _572 = length(varying_positionCamera_Fog);\n    highp float _655 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _655 = (u_fogInfos.z - _572) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _656 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _656 = 1.0 / pow(2.7182800769805908203125, _572 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _657 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _657 = 1.0 / pow(2.7182800769805908203125, ((_572 * _572) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _657 = 1.0;\n            }\n            _656 = _657;\n        }\n        _655 = _656;\n    }\n    highp float _618 = clamp(_655, 0.0, 1.0);\n    highp vec3 _627 = ((_490.xyz + (_EmissionColor.xyz * _496.x)).xyz * _618) + (u_fogColor * (1.0 - _618));\n    gl_FragData[0] = vec4(_627.x, _627.y, _627.z, _490.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _605 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _613 = (_605 * _Color) * _AlbedoIntensity;\n    highp vec3 _622 = normalize(varying_WorldNormal);\n    highp vec4 _729 = vec4(varying_ShadowPosition, 1.0);\n    highp float _733 = -(u_view * _729).z;\n    bool _746 = true && (_733 < u_csmFarBounds.x);\n    highp float _1038 = 0.0;\n    if (_746)\n    {\n        highp vec3 _761 = ((u_csmLightSpaceMatrices[0] * _729).xyz * 0.5) + vec3(0.5);\n        highp float _765 = _761.x;\n        highp float _769 = _761.y;\n        highp float _779 = (((_761.z + step(_765, 0.001000000047497451305389404296875)) + step(_769, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _765)) + step(0.999000012874603271484375, _769);\n        highp float _1035 = 0.0;\n        for (int SPIRV_Cross_Dummy258 = 0; SPIRV_Cross_Dummy258 < 1; SPIRV_Cross_Dummy258++)\n        {\n            if (_779 > 1.0)\n            {\n                _1035 = 1.0;\n                break;\n            }\n            highp float _830 = _779 - 0.001000000047497451305389404296875;\n            highp vec2 _836 = ((_761.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _847 = fract(_836 * vec2(2048.0));\n            highp float _902 = _847.y;\n            _1035 = mix(mix(float(_830 < dot(texture2D(u_shadowMapTex, _836), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_830 < dot(texture2D(u_shadowMapTex, _836 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _902), mix(float(_830 < dot(texture2D(u_shadowMapTex, _836 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_830 < dot(texture2D(u_shadowMapTex, _836 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _902), _847.x);\n            break;\n        }\n        _1038 = _1035;\n    }\n    else\n    {\n        _1038 = 1.0;\n    }\n    bool _1364 = _746 ? true : false;\n    bool _1056 = (!_1364) && (_733 < u_csmFarBounds.y);\n    highp float _1147 = 0.0;\n    if (_1056)\n    {\n        highp vec3 _1067 = ((u_csmLightSpaceMatrices[1] * _729).xyz * 0.5) + vec3(0.5);\n        highp float _1069 = _1067.x;\n        highp float _1072 = _1067.y;\n        highp float _1080 = (((_1067.z + step(_1069, 0.001000000047497451305389404296875)) + step(_1072, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1069)) + step(0.999000012874603271484375, _1072);\n        highp float _1144 = 0.0;\n        for (int SPIRV_Cross_Dummy334 = 0; SPIRV_Cross_Dummy334 < 1; SPIRV_Cross_Dummy334++)\n        {\n            if (_1080 > 1.0)\n            {\n                _1144 = 1.0;\n                break;\n            }\n            highp float _1098 = _1080 - 0.001000000047497451305389404296875;\n            highp vec2 _1102 = ((_1067.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1109 = fract(_1102 * vec2(2048.0));\n            highp float _1137 = _1109.y;\n            _1144 = mix(mix(float(_1098 < dot(texture2D(u_shadowMapTex, _1102), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1098 < dot(texture2D(u_shadowMapTex, _1102 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1137), mix(float(_1098 < dot(texture2D(u_shadowMapTex, _1102 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1098 < dot(texture2D(u_shadowMapTex, _1102 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1137), _1109.x);\n            break;\n        }\n        _1147 = _1144;\n    }\n    else\n    {\n        _1147 = _1038;\n    }\n    bool _1365 = _1056 ? true : _1364;\n    bool _1161 = (!_1365) && (_733 < u_csmFarBounds.z);\n    highp float _1252 = 0.0;\n    if (_1161)\n    {\n        highp vec3 _1172 = ((u_csmLightSpaceMatrices[2] * _729).xyz * 0.5) + vec3(0.5);\n        highp float _1174 = _1172.x;\n        highp float _1177 = _1172.y;\n        highp float _1185 = (((_1172.z + step(_1174, 0.001000000047497451305389404296875)) + step(_1177, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1174)) + step(0.999000012874603271484375, _1177);\n        highp float _1249 = 0.0;\n        for (int SPIRV_Cross_Dummy410 = 0; SPIRV_Cross_Dummy410 < 1; SPIRV_Cross_Dummy410++)\n        {\n            if (_1185 > 1.0)\n            {\n                _1249 = 1.0;\n                break;\n            }\n            highp float _1203 = _1185 - 0.001000000047497451305389404296875;\n            highp vec2 _1207 = ((_1172.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1214 = fract(_1207 * vec2(2048.0));\n            highp float _1242 = _1214.y;\n            _1249 = mix(mix(float(_1203 < dot(texture2D(u_shadowMapTex, _1207), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1203 < dot(texture2D(u_shadowMapTex, _1207 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1242), mix(float(_1203 < dot(texture2D(u_shadowMapTex, _1207 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1203 < dot(texture2D(u_shadowMapTex, _1207 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1242), _1214.x);\n            break;\n        }\n        _1252 = _1249;\n    }\n    else\n    {\n        _1252 = _1147;\n    }\n    highp float _1357 = 0.0;\n    if ((!(_1161 ? true : _1365)) && (_733 < u_csmFarBounds.w))\n    {\n        highp vec3 _1277 = ((u_csmLightSpaceMatrices[3] * _729).xyz * 0.5) + vec3(0.5);\n        highp float _1279 = _1277.x;\n        highp float _1282 = _1277.y;\n        highp float _1290 = (((_1277.z + step(_1279, 0.001000000047497451305389404296875)) + step(_1282, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1279)) + step(0.999000012874603271484375, _1282);\n        highp float _1354 = 0.0;\n        for (int SPIRV_Cross_Dummy480 = 0; SPIRV_Cross_Dummy480 < 1; SPIRV_Cross_Dummy480++)\n        {\n            if (_1290 > 1.0)\n            {\n                _1354 = 1.0;\n                break;\n            }\n            highp float _1308 = _1290 - 0.001000000047497451305389404296875;\n            highp vec2 _1312 = ((_1277.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1319 = fract(_1312 * vec2(2048.0));\n            highp float _1347 = _1319.y;\n            _1354 = mix(mix(float(_1308 < dot(texture2D(u_shadowMapTex, _1312), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1308 < dot(texture2D(u_shadowMapTex, _1312 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1347), mix(float(_1308 < dot(texture2D(u_shadowMapTex, _1312 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1308 < dot(texture2D(u_shadowMapTex, _1312 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1347), _1319.x);\n            break;\n        }\n        _1357 = _1354;\n    }\n    else\n    {\n        _1357 = _1252;\n    }\n    highp vec3 _643 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _667 = vec4(_613.xyz * (min(_643, mix(max(_643 - (u_lightColor * (clamp(dot(_622, u_lightDir), 0.0, 1.0) * (1.0 - _1357))), u_shadowColor), _643, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _622)), _Shininess * 128.0)) * (_SpecColor.xyz * _605.w))), _613.w);\n    highp vec3 _683 = _667.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_683.x, _683.y, _683.z, _667.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _390 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _398 = (_390 * _Color) * _AlbedoIntensity;\n    highp float _400 = _398.w;\n    if ((_400 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _409 = normalize(varying_LightDir);\n    highp vec3 _415 = normalize(varying_WorldNormal);\n    highp vec4 _437 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _456 = vec4(_398.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_409, _415))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _409), _415)), _Shininess * 128.0)) * (_437.xyz * _SpecColor.xyz))), _400);\n    highp vec4 _462 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _518 = length(varying_positionCamera_Fog);\n    highp float _601 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _601 = (u_fogInfos.z - _518) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _602 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _602 = 1.0 / pow(2.7182800769805908203125, _518 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _603 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _603 = 1.0 / pow(2.7182800769805908203125, ((_518 * _518) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _603 = 1.0;\n            }\n            _602 = _603;\n        }\n        _601 = _602;\n    }\n    highp float _564 = clamp(_601, 0.0, 1.0);\n    highp vec3 _573 = ((_456.xyz + (_EmissionColor.xyz * _462.x)).xyz * _564) + (u_fogColor * (1.0 - _564));\n    gl_FragData[0] = vec4(_573.x, _573.y, _573.z, _456.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _420 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _428 = (_420 * _Color) * _AlbedoIntensity;\n    highp float _430 = _428.w;\n    if ((_430 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _439 = normalize(varying_LightDir);\n    highp vec4 _451 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _524 = (_451.xy - vec2(0.5)) * 2.0;\n    highp vec3 _535 = vec3(_524, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_524, _524))));\n    highp vec4 _488 = vec4(_428.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_439, _535))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _439), _535)), _Shininess * 128.0)) * (_SpecColor.xyz * _420.w))), _430);\n    highp vec4 _494 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _570 = length(varying_positionCamera_Fog);\n    highp float _653 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _653 = (u_fogInfos.z - _570) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _654 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _654 = 1.0 / pow(2.7182800769805908203125, _570 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _655 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _655 = 1.0 / pow(2.7182800769805908203125, ((_570 * _570) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _655 = 1.0;\n            }\n            _654 = _655;\n        }\n        _653 = _654;\n    }\n    highp float _616 = clamp(_653, 0.0, 1.0);\n    highp vec3 _625 = ((_488.xyz + (_EmissionColor.xyz * _494.x)).xyz * _616) + (u_fogColor * (1.0 - _616));\n    gl_FragData[0] = vec4(_625.x, _625.y, _625.z, _488.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _603 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _611 = (_603 * _Color) * _AlbedoIntensity;\n    highp vec3 _620 = normalize(varying_WorldNormal);\n    highp vec4 _727 = vec4(varying_ShadowPosition, 1.0);\n    highp float _731 = -(u_view * _727).z;\n    bool _744 = true && (_731 < u_csmFarBounds.x);\n    highp float _1036 = 0.0;\n    if (_744)\n    {\n        highp vec3 _759 = ((u_csmLightSpaceMatrices[0] * _727).xyz * 0.5) + vec3(0.5);\n        highp float _763 = _759.x;\n        highp float _767 = _759.y;\n        highp float _777 = (((_759.z + step(_763, 0.001000000047497451305389404296875)) + step(_767, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _763)) + step(0.999000012874603271484375, _767);\n        highp float _1033 = 0.0;\n        for (int SPIRV_Cross_Dummy258 = 0; SPIRV_Cross_Dummy258 < 1; SPIRV_Cross_Dummy258++)\n        {\n            if (_777 > 1.0)\n            {\n                _1033 = 1.0;\n                break;\n            }\n            highp float _828 = _777 - 0.001000000047497451305389404296875;\n            highp vec2 _834 = ((_759.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _845 = fract(_834 * vec2(2048.0));\n            highp float _900 = _845.y;\n            _1033 = mix(mix(float(_828 < dot(texture2D(u_shadowMapTex, _834), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_828 < dot(texture2D(u_shadowMapTex, _834 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _900), mix(float(_828 < dot(texture2D(u_shadowMapTex, _834 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_828 < dot(texture2D(u_shadowMapTex, _834 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _900), _845.x);\n            break;\n        }\n        _1036 = _1033;\n    }\n    else\n    {\n        _1036 = 1.0;\n    }\n    bool _1362 = _744 ? true : false;\n    bool _1054 = (!_1362) && (_731 < u_csmFarBounds.y);\n    highp float _1145 = 0.0;\n    if (_1054)\n    {\n        highp vec3 _1065 = ((u_csmLightSpaceMatrices[1] * _727).xyz * 0.5) + vec3(0.5);\n        highp float _1067 = _1065.x;\n        highp float _1070 = _1065.y;\n        highp float _1078 = (((_1065.z + step(_1067, 0.001000000047497451305389404296875)) + step(_1070, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1067)) + step(0.999000012874603271484375, _1070);\n        highp float _1142 = 0.0;\n        for (int SPIRV_Cross_Dummy334 = 0; SPIRV_Cross_Dummy334 < 1; SPIRV_Cross_Dummy334++)\n        {\n            if (_1078 > 1.0)\n            {\n                _1142 = 1.0;\n                break;\n            }\n            highp float _1096 = _1078 - 0.001000000047497451305389404296875;\n            highp vec2 _1100 = ((_1065.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1107 = fract(_1100 * vec2(2048.0));\n            highp float _1135 = _1107.y;\n            _1142 = mix(mix(float(_1096 < dot(texture2D(u_shadowMapTex, _1100), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1096 < dot(texture2D(u_shadowMapTex, _1100 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1135), mix(float(_1096 < dot(texture2D(u_shadowMapTex, _1100 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1096 < dot(texture2D(u_shadowMapTex, _1100 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1135), _1107.x);\n            break;\n        }\n        _1145 = _1142;\n    }\n    else\n    {\n        _1145 = _1036;\n    }\n    bool _1363 = _1054 ? true : _1362;\n    bool _1159 = (!_1363) && (_731 < u_csmFarBounds.z);\n    highp float _1250 = 0.0;\n    if (_1159)\n    {\n        highp vec3 _1170 = ((u_csmLightSpaceMatrices[2] * _727).xyz * 0.5) + vec3(0.5);\n        highp float _1172 = _1170.x;\n        highp float _1175 = _1170.y;\n        highp float _1183 = (((_1170.z + step(_1172, 0.001000000047497451305389404296875)) + step(_1175, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1172)) + step(0.999000012874603271484375, _1175);\n        highp float _1247 = 0.0;\n        for (int SPIRV_Cross_Dummy410 = 0; SPIRV_Cross_Dummy410 < 1; SPIRV_Cross_Dummy410++)\n        {\n            if (_1183 > 1.0)\n            {\n                _1247 = 1.0;\n                break;\n            }\n            highp float _1201 = _1183 - 0.001000000047497451305389404296875;\n            highp vec2 _1205 = ((_1170.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1212 = fract(_1205 * vec2(2048.0));\n            highp float _1240 = _1212.y;\n            _1247 = mix(mix(float(_1201 < dot(texture2D(u_shadowMapTex, _1205), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1201 < dot(texture2D(u_shadowMapTex, _1205 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1240), mix(float(_1201 < dot(texture2D(u_shadowMapTex, _1205 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1201 < dot(texture2D(u_shadowMapTex, _1205 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1240), _1212.x);\n            break;\n        }\n        _1250 = _1247;\n    }\n    else\n    {\n        _1250 = _1145;\n    }\n    highp float _1355 = 0.0;\n    if ((!(_1159 ? true : _1363)) && (_731 < u_csmFarBounds.w))\n    {\n        highp vec3 _1275 = ((u_csmLightSpaceMatrices[3] * _727).xyz * 0.5) + vec3(0.5);\n        highp float _1277 = _1275.x;\n        highp float _1280 = _1275.y;\n        highp float _1288 = (((_1275.z + step(_1277, 0.001000000047497451305389404296875)) + step(_1280, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1277)) + step(0.999000012874603271484375, _1280);\n        highp float _1352 = 0.0;\n        for (int SPIRV_Cross_Dummy480 = 0; SPIRV_Cross_Dummy480 < 1; SPIRV_Cross_Dummy480++)\n        {\n            if (_1288 > 1.0)\n            {\n                _1352 = 1.0;\n                break;\n            }\n            highp float _1306 = _1288 - 0.001000000047497451305389404296875;\n            highp vec2 _1310 = ((_1275.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1317 = fract(_1310 * vec2(2048.0));\n            highp float _1345 = _1317.y;\n            _1352 = mix(mix(float(_1306 < dot(texture2D(u_shadowMapTex, _1310), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1306 < dot(texture2D(u_shadowMapTex, _1310 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1345), mix(float(_1306 < dot(texture2D(u_shadowMapTex, _1310 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1306 < dot(texture2D(u_shadowMapTex, _1310 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1345), _1317.x);\n            break;\n        }\n        _1355 = _1352;\n    }\n    else\n    {\n        _1355 = _1250;\n    }\n    highp vec3 _641 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _665 = vec4(_611.xyz * (min(_641, mix(max(_641 - (u_lightColor * (clamp(dot(_620, u_lightDir), 0.0, 1.0) * (1.0 - _1355))), u_shadowColor), _641, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _620)), _Shininess * 128.0)) * (_SpecColor.xyz * _603.w))), _611.w);\n    highp vec3 _681 = _665.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_681.x, _681.y, _681.z, _665.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _645 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _653 = (_645 * _Color) * _AlbedoIntensity;\n    highp vec4 _668 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _747 = (_668.xy - vec2(0.5)) * 2.0;\n    highp vec4 _801 = vec4(varying_ShadowPosition, 1.0);\n    highp float _805 = -(u_view * _801).z;\n    bool _818 = true && (_805 < u_csmFarBounds.x);\n    highp float _1109 = 0.0;\n    if (_818)\n    {\n        highp vec3 _833 = ((u_csmLightSpaceMatrices[0] * _801).xyz * 0.5) + vec3(0.5);\n        highp float _837 = _833.x;\n        highp float _841 = _833.y;\n        highp float _851 = (((_833.z + step(_837, 0.001000000047497451305389404296875)) + step(_841, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _837)) + step(0.999000012874603271484375, _841);\n        highp float _1106 = 0.0;\n        for (int SPIRV_Cross_Dummy267 = 0; SPIRV_Cross_Dummy267 < 1; SPIRV_Cross_Dummy267++)\n        {\n            if (_851 > 1.0)\n            {\n                _1106 = 1.0;\n                break;\n            }\n            highp float _902 = _851 - 0.001000000047497451305389404296875;\n            highp vec2 _908 = ((_833.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _919 = fract(_908 * vec2(2048.0));\n            highp float _974 = _919.y;\n            _1106 = mix(mix(float(_902 < dot(texture2D(u_shadowMapTex, _908), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_902 < dot(texture2D(u_shadowMapTex, _908 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _974), mix(float(_902 < dot(texture2D(u_shadowMapTex, _908 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_902 < dot(texture2D(u_shadowMapTex, _908 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _974), _919.x);\n            break;\n        }\n        _1109 = _1106;\n    }\n    else\n    {\n        _1109 = 1.0;\n    }\n    bool _1436 = _818 ? true : false;\n    bool _1128 = (!_1436) && (_805 < u_csmFarBounds.y);\n    highp float _1219 = 0.0;\n    if (_1128)\n    {\n        highp vec3 _1139 = ((u_csmLightSpaceMatrices[1] * _801).xyz * 0.5) + vec3(0.5);\n        highp float _1141 = _1139.x;\n        highp float _1144 = _1139.y;\n        highp float _1152 = (((_1139.z + step(_1141, 0.001000000047497451305389404296875)) + step(_1144, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1141)) + step(0.999000012874603271484375, _1144);\n        highp float _1216 = 0.0;\n        for (int SPIRV_Cross_Dummy343 = 0; SPIRV_Cross_Dummy343 < 1; SPIRV_Cross_Dummy343++)\n        {\n            if (_1152 > 1.0)\n            {\n                _1216 = 1.0;\n                break;\n            }\n            highp float _1170 = _1152 - 0.001000000047497451305389404296875;\n            highp vec2 _1174 = ((_1139.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1181 = fract(_1174 * vec2(2048.0));\n            highp float _1209 = _1181.y;\n            _1216 = mix(mix(float(_1170 < dot(texture2D(u_shadowMapTex, _1174), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1170 < dot(texture2D(u_shadowMapTex, _1174 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1209), mix(float(_1170 < dot(texture2D(u_shadowMapTex, _1174 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1170 < dot(texture2D(u_shadowMapTex, _1174 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1209), _1181.x);\n            break;\n        }\n        _1219 = _1216;\n    }\n    else\n    {\n        _1219 = _1109;\n    }\n    bool _1437 = _1128 ? true : _1436;\n    bool _1233 = (!_1437) && (_805 < u_csmFarBounds.z);\n    highp float _1324 = 0.0;\n    if (_1233)\n    {\n        highp vec3 _1244 = ((u_csmLightSpaceMatrices[2] * _801).xyz * 0.5) + vec3(0.5);\n        highp float _1246 = _1244.x;\n        highp float _1249 = _1244.y;\n        highp float _1257 = (((_1244.z + step(_1246, 0.001000000047497451305389404296875)) + step(_1249, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1246)) + step(0.999000012874603271484375, _1249);\n        highp float _1321 = 0.0;\n        for (int SPIRV_Cross_Dummy419 = 0; SPIRV_Cross_Dummy419 < 1; SPIRV_Cross_Dummy419++)\n        {\n            if (_1257 > 1.0)\n            {\n                _1321 = 1.0;\n                break;\n            }\n            highp float _1275 = _1257 - 0.001000000047497451305389404296875;\n            highp vec2 _1279 = ((_1244.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1286 = fract(_1279 * vec2(2048.0));\n            highp float _1314 = _1286.y;\n            _1321 = mix(mix(float(_1275 < dot(texture2D(u_shadowMapTex, _1279), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1275 < dot(texture2D(u_shadowMapTex, _1279 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1314), mix(float(_1275 < dot(texture2D(u_shadowMapTex, _1279 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1275 < dot(texture2D(u_shadowMapTex, _1279 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1314), _1286.x);\n            break;\n        }\n        _1324 = _1321;\n    }\n    else\n    {\n        _1324 = _1219;\n    }\n    highp float _1429 = 0.0;\n    if ((!(_1233 ? true : _1437)) && (_805 < u_csmFarBounds.w))\n    {\n        highp vec3 _1349 = ((u_csmLightSpaceMatrices[3] * _801).xyz * 0.5) + vec3(0.5);\n        highp float _1351 = _1349.x;\n        highp float _1354 = _1349.y;\n        highp float _1362 = (((_1349.z + step(_1351, 0.001000000047497451305389404296875)) + step(_1354, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1351)) + step(0.999000012874603271484375, _1354);\n        highp float _1426 = 0.0;\n        for (int SPIRV_Cross_Dummy489 = 0; SPIRV_Cross_Dummy489 < 1; SPIRV_Cross_Dummy489++)\n        {\n            if (_1362 > 1.0)\n            {\n                _1426 = 1.0;\n                break;\n            }\n            highp float _1380 = _1362 - 0.001000000047497451305389404296875;\n            highp vec2 _1384 = ((_1349.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1391 = fract(_1384 * vec2(2048.0));\n            highp float _1419 = _1391.y;\n            _1426 = mix(mix(float(_1380 < dot(texture2D(u_shadowMapTex, _1384), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1380 < dot(texture2D(u_shadowMapTex, _1384 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1419), mix(float(_1380 < dot(texture2D(u_shadowMapTex, _1384 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1380 < dot(texture2D(u_shadowMapTex, _1384 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1419), _1391.x);\n            break;\n        }\n        _1429 = _1426;\n    }\n    else\n    {\n        _1429 = _1324;\n    }\n    highp vec3 _690 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _719 = vec4(_653.xyz * (min(_690, mix(max(_690 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1429))), u_shadowColor), _690, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_747, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_747, _747)))))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _653.w);\n    highp vec3 _735 = _719.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_735.x, _735.y, _735.z, _719.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _388 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _396 = (_388 * _Color) * _AlbedoIntensity;\n    highp float _398 = _396.w;\n    if ((_398 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _407 = normalize(varying_LightDir);\n    highp vec3 _413 = normalize(varying_WorldNormal);\n    highp vec4 _435 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _454 = vec4(_396.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_407, _413))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _407), _413)), _Shininess * 128.0)) * (_435.xyz * _SpecColor.xyz))), _398);\n    highp vec4 _460 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _516 = length(varying_positionCamera_Fog);\n    highp float _599 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _599 = (u_fogInfos.z - _516) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _600 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _600 = 1.0 / pow(2.7182800769805908203125, _516 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _601 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _601 = 1.0 / pow(2.7182800769805908203125, ((_516 * _516) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _601 = 1.0;\n            }\n            _600 = _601;\n        }\n        _599 = _600;\n    }\n    highp float _562 = clamp(_599, 0.0, 1.0);\n    highp vec3 _571 = ((_454.xyz + (_EmissionColor.xyz * _460.x)).xyz * _562) + (u_fogColor * (1.0 - _562));\n    gl_FragData[0] = vec4(_571.x, _571.y, _571.z, _454.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _439 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _447 = (_439 * _Color) * _AlbedoIntensity;\n    highp vec4 _472 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _474 = _472.xyz * 2.0;\n    highp vec4 _498 = vec4(_447.xyz * (min(_474, mix(max(_474, u_shadowColor), _474, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_SpecColor.xyz * _439.w))), _447.w);\n    highp vec4 _504 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _597 = length(varying_positionCamera_Fog);\n    highp float _684 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _684 = (u_fogInfos.z - _597) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _685 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _685 = 1.0 / pow(2.7182800769805908203125, _597 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _686 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _686 = 1.0 / pow(2.7182800769805908203125, ((_597 * _597) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _686 = 1.0;\n            }\n            _685 = _686;\n        }\n        _684 = _685;\n    }\n    highp float _643 = clamp(_684, 0.0, 1.0);\n    highp vec3 _652 = ((_498.xyz + (_EmissionColor.xyz * _504.x)).xyz * _643) + (u_fogColor * (1.0 - _643));\n    gl_FragData[0] = vec4(_652.x, _652.y, _652.z, _498.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _437 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _445 = (_437 * _Color) * _AlbedoIntensity;\n    highp vec4 _470 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _472 = _470.xyz * 2.0;\n    highp vec4 _496 = vec4(_445.xyz * (min(_472, mix(max(_472, u_shadowColor), _472, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_SpecColor.xyz * _437.w))), _445.w);\n    highp vec4 _502 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _595 = length(varying_positionCamera_Fog);\n    highp float _682 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _682 = (u_fogInfos.z - _595) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _683 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _683 = 1.0 / pow(2.7182800769805908203125, _595 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _684 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _684 = 1.0 / pow(2.7182800769805908203125, ((_595 * _595) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _684 = 1.0;\n            }\n            _683 = _684;\n        }\n        _682 = _683;\n    }\n    highp float _641 = clamp(_682, 0.0, 1.0);\n    highp vec3 _650 = ((_496.xyz + (_EmissionColor.xyz * _502.x)).xyz * _641) + (u_fogColor * (1.0 - _641));\n    gl_FragData[0] = vec4(_650.x, _650.y, _650.z, _496.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _481 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _489 = (_481 * _Color) * _AlbedoIntensity;\n    highp vec4 _504 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _587 = (_504.xy - vec2(0.5)) * 2.0;\n    highp vec4 _521 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _523 = _521.xyz * 2.0;\n    highp vec4 _533 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _552 = vec4(_489.xyz * (min(_523, mix(max(_523, u_shadowColor), _523, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_587, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_587, _587)))))), _Shininess * 128.0)) * (_533.xyz * _SpecColor.xyz))), _489.w);\n    highp vec4 _558 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _671 = length(varying_positionCamera_Fog);\n    highp float _757 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _757 = (u_fogInfos.z - _671) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _758 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _758 = 1.0 / pow(2.7182800769805908203125, _671 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _759 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _759 = 1.0 / pow(2.7182800769805908203125, ((_671 * _671) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _759 = 1.0;\n            }\n            _758 = _759;\n        }\n        _757 = _758;\n    }\n    highp float _717 = clamp(_757, 0.0, 1.0);\n    highp vec3 _726 = ((_552.xyz + (_EmissionColor.xyz * _558.x)).xyz * _717) + (u_fogColor * (1.0 - _717));\n    gl_FragData[0] = vec4(_726.x, _726.y, _726.z, _552.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _615 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _623 = (_615 * _Color) * _AlbedoIntensity;\n    highp float _625 = _623.w;\n    if ((_625 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _634 = normalize(varying_LightDir);\n    highp vec3 _640 = normalize(varying_WorldNormal);\n    highp vec4 _731 = vec4(varying_ShadowPosition, 1.0);\n    highp float _735 = -(u_view * _731).z;\n    bool _748 = true && (_735 < u_csmFarBounds.x);\n    highp float _1073 = 0.0;\n    if (_748)\n    {\n        highp vec3 _763 = ((u_csmLightSpaceMatrices[0] * _731).xyz * 0.5) + vec3(0.5);\n        highp float _767 = _763.x;\n        highp float _771 = _763.y;\n        highp float _781 = (((_763.z + step(_767, 0.001000000047497451305389404296875)) + step(_771, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _767)) + step(0.999000012874603271484375, _771);\n        highp float _1070 = 0.0;\n        for (int SPIRV_Cross_Dummy265 = 0; SPIRV_Cross_Dummy265 < 1; SPIRV_Cross_Dummy265++)\n        {\n            if (_781 > 1.0)\n            {\n                _1070 = 1.0;\n                break;\n            }\n            highp float _832 = _781 - 0.001000000047497451305389404296875;\n            highp vec2 _838 = ((_763.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _849 = fract(_838 * vec2(2048.0));\n            highp float _904 = _849.y;\n            _1070 = mix(mix(float(_832 < dot(texture2D(u_shadowMapTex, _838), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_832 < dot(texture2D(u_shadowMapTex, _838 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _904), mix(float(_832 < dot(texture2D(u_shadowMapTex, _838 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_832 < dot(texture2D(u_shadowMapTex, _838 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _904), _849.x);\n            break;\n        }\n        _1073 = _1070;\n    }\n    else\n    {\n        _1073 = 1.0;\n    }\n    bool _1400 = _748 ? true : false;\n    bool _1091 = (!_1400) && (_735 < u_csmFarBounds.y);\n    highp float _1182 = 0.0;\n    if (_1091)\n    {\n        highp vec3 _1102 = ((u_csmLightSpaceMatrices[1] * _731).xyz * 0.5) + vec3(0.5);\n        highp float _1104 = _1102.x;\n        highp float _1107 = _1102.y;\n        highp float _1115 = (((_1102.z + step(_1104, 0.001000000047497451305389404296875)) + step(_1107, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1104)) + step(0.999000012874603271484375, _1107);\n        highp float _1179 = 0.0;\n        for (int SPIRV_Cross_Dummy341 = 0; SPIRV_Cross_Dummy341 < 1; SPIRV_Cross_Dummy341++)\n        {\n            if (_1115 > 1.0)\n            {\n                _1179 = 1.0;\n                break;\n            }\n            highp float _1133 = _1115 - 0.001000000047497451305389404296875;\n            highp vec2 _1137 = ((_1102.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1144 = fract(_1137 * vec2(2048.0));\n            highp float _1172 = _1144.y;\n            _1179 = mix(mix(float(_1133 < dot(texture2D(u_shadowMapTex, _1137), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1133 < dot(texture2D(u_shadowMapTex, _1137 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1172), mix(float(_1133 < dot(texture2D(u_shadowMapTex, _1137 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1133 < dot(texture2D(u_shadowMapTex, _1137 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1172), _1144.x);\n            break;\n        }\n        _1182 = _1179;\n    }\n    else\n    {\n        _1182 = _1073;\n    }\n    bool _1401 = _1091 ? true : _1400;\n    bool _1196 = (!_1401) && (_735 < u_csmFarBounds.z);\n    highp float _1287 = 0.0;\n    if (_1196)\n    {\n        highp vec3 _1207 = ((u_csmLightSpaceMatrices[2] * _731).xyz * 0.5) + vec3(0.5);\n        highp float _1209 = _1207.x;\n        highp float _1212 = _1207.y;\n        highp float _1220 = (((_1207.z + step(_1209, 0.001000000047497451305389404296875)) + step(_1212, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1209)) + step(0.999000012874603271484375, _1212);\n        highp float _1284 = 0.0;\n        for (int SPIRV_Cross_Dummy417 = 0; SPIRV_Cross_Dummy417 < 1; SPIRV_Cross_Dummy417++)\n        {\n            if (_1220 > 1.0)\n            {\n                _1284 = 1.0;\n                break;\n            }\n            highp float _1238 = _1220 - 0.001000000047497451305389404296875;\n            highp vec2 _1242 = ((_1207.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1249 = fract(_1242 * vec2(2048.0));\n            highp float _1277 = _1249.y;\n            _1284 = mix(mix(float(_1238 < dot(texture2D(u_shadowMapTex, _1242), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1238 < dot(texture2D(u_shadowMapTex, _1242 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1277), mix(float(_1238 < dot(texture2D(u_shadowMapTex, _1242 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1238 < dot(texture2D(u_shadowMapTex, _1242 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1277), _1249.x);\n            break;\n        }\n        _1287 = _1284;\n    }\n    else\n    {\n        _1287 = _1182;\n    }\n    highp float _1392 = 0.0;\n    if ((!(_1196 ? true : _1401)) && (_735 < u_csmFarBounds.w))\n    {\n        highp vec3 _1312 = ((u_csmLightSpaceMatrices[3] * _731).xyz * 0.5) + vec3(0.5);\n        highp float _1314 = _1312.x;\n        highp float _1317 = _1312.y;\n        highp float _1325 = (((_1312.z + step(_1314, 0.001000000047497451305389404296875)) + step(_1317, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1314)) + step(0.999000012874603271484375, _1317);\n        highp float _1389 = 0.0;\n        for (int SPIRV_Cross_Dummy487 = 0; SPIRV_Cross_Dummy487 < 1; SPIRV_Cross_Dummy487++)\n        {\n            if (_1325 > 1.0)\n            {\n                _1389 = 1.0;\n                break;\n            }\n            highp float _1343 = _1325 - 0.001000000047497451305389404296875;\n            highp vec2 _1347 = ((_1312.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1354 = fract(_1347 * vec2(2048.0));\n            highp float _1382 = _1354.y;\n            _1389 = mix(mix(float(_1343 < dot(texture2D(u_shadowMapTex, _1347), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1343 < dot(texture2D(u_shadowMapTex, _1347 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1382), mix(float(_1343 < dot(texture2D(u_shadowMapTex, _1347 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1343 < dot(texture2D(u_shadowMapTex, _1347 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1382), _1354.x);\n            break;\n        }\n        _1392 = _1389;\n    }\n    else\n    {\n        _1392 = _1287;\n    }\n    highp vec4 _679 = vec4(_623.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_634, _640))) * _1392)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _634), _640)), _Shininess * 128.0)) * (_SpecColor.xyz * _615.w))), _625);\n    highp float _952 = length(varying_positionCamera_Fog);\n    highp float _1063 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1063 = (u_fogInfos.z - _952) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1064 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1064 = 1.0 / pow(2.7182800769805908203125, _952 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1065 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1065 = 1.0 / pow(2.7182800769805908203125, ((_952 * _952) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1065 = 1.0;\n            }\n            _1064 = _1065;\n        }\n        _1063 = _1064;\n    }\n    highp float _998 = clamp(_1063, 0.0, 1.0);\n    highp vec3 _1007 = (_679.xyz * _998) + (u_fogColor * (1.0 - _998));\n    gl_FragData[0] = vec4(_1007.x, _1007.y, _1007.z, _679.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _618 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _626 = (_618 * _Color) * _AlbedoIntensity;\n    highp float _628 = _626.w;\n    if ((_628 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _637 = normalize(varying_LightDir);\n    highp vec3 _643 = normalize(varying_WorldNormal);\n    highp vec4 _739 = vec4(varying_ShadowPosition, 1.0);\n    highp float _743 = -(u_view * _739).z;\n    bool _756 = true && (_743 < u_csmFarBounds.x);\n    highp float _1080 = 0.0;\n    if (_756)\n    {\n        highp vec3 _771 = ((u_csmLightSpaceMatrices[0] * _739).xyz * 0.5) + vec3(0.5);\n        highp float _775 = _771.x;\n        highp float _779 = _771.y;\n        highp float _789 = (((_771.z + step(_775, 0.001000000047497451305389404296875)) + step(_779, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _775)) + step(0.999000012874603271484375, _779);\n        highp float _1077 = 0.0;\n        for (int SPIRV_Cross_Dummy268 = 0; SPIRV_Cross_Dummy268 < 1; SPIRV_Cross_Dummy268++)\n        {\n            if (_789 > 1.0)\n            {\n                _1077 = 1.0;\n                break;\n            }\n            highp float _840 = _789 - 0.001000000047497451305389404296875;\n            highp vec2 _846 = ((_771.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _857 = fract(_846 * vec2(2048.0));\n            highp float _912 = _857.y;\n            _1077 = mix(mix(float(_840 < dot(texture2D(u_shadowMapTex, _846), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_840 < dot(texture2D(u_shadowMapTex, _846 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _912), mix(float(_840 < dot(texture2D(u_shadowMapTex, _846 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_840 < dot(texture2D(u_shadowMapTex, _846 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _912), _857.x);\n            break;\n        }\n        _1080 = _1077;\n    }\n    else\n    {\n        _1080 = 1.0;\n    }\n    bool _1407 = _756 ? true : false;\n    bool _1098 = (!_1407) && (_743 < u_csmFarBounds.y);\n    highp float _1189 = 0.0;\n    if (_1098)\n    {\n        highp vec3 _1109 = ((u_csmLightSpaceMatrices[1] * _739).xyz * 0.5) + vec3(0.5);\n        highp float _1111 = _1109.x;\n        highp float _1114 = _1109.y;\n        highp float _1122 = (((_1109.z + step(_1111, 0.001000000047497451305389404296875)) + step(_1114, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1111)) + step(0.999000012874603271484375, _1114);\n        highp float _1186 = 0.0;\n        for (int SPIRV_Cross_Dummy344 = 0; SPIRV_Cross_Dummy344 < 1; SPIRV_Cross_Dummy344++)\n        {\n            if (_1122 > 1.0)\n            {\n                _1186 = 1.0;\n                break;\n            }\n            highp float _1140 = _1122 - 0.001000000047497451305389404296875;\n            highp vec2 _1144 = ((_1109.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1151 = fract(_1144 * vec2(2048.0));\n            highp float _1179 = _1151.y;\n            _1186 = mix(mix(float(_1140 < dot(texture2D(u_shadowMapTex, _1144), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1140 < dot(texture2D(u_shadowMapTex, _1144 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1179), mix(float(_1140 < dot(texture2D(u_shadowMapTex, _1144 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1140 < dot(texture2D(u_shadowMapTex, _1144 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1179), _1151.x);\n            break;\n        }\n        _1189 = _1186;\n    }\n    else\n    {\n        _1189 = _1080;\n    }\n    bool _1408 = _1098 ? true : _1407;\n    bool _1203 = (!_1408) && (_743 < u_csmFarBounds.z);\n    highp float _1294 = 0.0;\n    if (_1203)\n    {\n        highp vec3 _1214 = ((u_csmLightSpaceMatrices[2] * _739).xyz * 0.5) + vec3(0.5);\n        highp float _1216 = _1214.x;\n        highp float _1219 = _1214.y;\n        highp float _1227 = (((_1214.z + step(_1216, 0.001000000047497451305389404296875)) + step(_1219, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1216)) + step(0.999000012874603271484375, _1219);\n        highp float _1291 = 0.0;\n        for (int SPIRV_Cross_Dummy420 = 0; SPIRV_Cross_Dummy420 < 1; SPIRV_Cross_Dummy420++)\n        {\n            if (_1227 > 1.0)\n            {\n                _1291 = 1.0;\n                break;\n            }\n            highp float _1245 = _1227 - 0.001000000047497451305389404296875;\n            highp vec2 _1249 = ((_1214.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1256 = fract(_1249 * vec2(2048.0));\n            highp float _1284 = _1256.y;\n            _1291 = mix(mix(float(_1245 < dot(texture2D(u_shadowMapTex, _1249), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1245 < dot(texture2D(u_shadowMapTex, _1249 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1284), mix(float(_1245 < dot(texture2D(u_shadowMapTex, _1249 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1245 < dot(texture2D(u_shadowMapTex, _1249 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1284), _1256.x);\n            break;\n        }\n        _1294 = _1291;\n    }\n    else\n    {\n        _1294 = _1189;\n    }\n    highp float _1399 = 0.0;\n    if ((!(_1203 ? true : _1408)) && (_743 < u_csmFarBounds.w))\n    {\n        highp vec3 _1319 = ((u_csmLightSpaceMatrices[3] * _739).xyz * 0.5) + vec3(0.5);\n        highp float _1321 = _1319.x;\n        highp float _1324 = _1319.y;\n        highp float _1332 = (((_1319.z + step(_1321, 0.001000000047497451305389404296875)) + step(_1324, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1321)) + step(0.999000012874603271484375, _1324);\n        highp float _1396 = 0.0;\n        for (int SPIRV_Cross_Dummy490 = 0; SPIRV_Cross_Dummy490 < 1; SPIRV_Cross_Dummy490++)\n        {\n            if (_1332 > 1.0)\n            {\n                _1396 = 1.0;\n                break;\n            }\n            highp float _1350 = _1332 - 0.001000000047497451305389404296875;\n            highp vec2 _1354 = ((_1319.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1361 = fract(_1354 * vec2(2048.0));\n            highp float _1389 = _1361.y;\n            _1396 = mix(mix(float(_1350 < dot(texture2D(u_shadowMapTex, _1354), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1350 < dot(texture2D(u_shadowMapTex, _1354 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1389), mix(float(_1350 < dot(texture2D(u_shadowMapTex, _1354 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1350 < dot(texture2D(u_shadowMapTex, _1354 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1389), _1361.x);\n            break;\n        }\n        _1399 = _1396;\n    }\n    else\n    {\n        _1399 = _1294;\n    }\n    highp vec4 _668 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _687 = vec4(_626.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_637, _643))) * _1399)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _637), _643)), _Shininess * 128.0)) * (_668.xyz * _SpecColor.xyz))), _628);\n    highp float _960 = length(varying_positionCamera_Fog);\n    highp float _1070 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1070 = (u_fogInfos.z - _960) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1071 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1071 = 1.0 / pow(2.7182800769805908203125, _960 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1072 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1072 = 1.0 / pow(2.7182800769805908203125, ((_960 * _960) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1072 = 1.0;\n            }\n            _1071 = _1072;\n        }\n        _1070 = _1071;\n    }\n    highp float _1006 = clamp(_1070, 0.0, 1.0);\n    highp vec3 _1015 = (_687.xyz * _1006) + (u_fogColor * (1.0 - _1006));\n    gl_FragData[0] = vec4(_1015.x, _1015.y, _1015.z, _687.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\n\nvoid main()\n{\n    highp vec4 _334 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _342 = (_334 * _Color) * _AlbedoIntensity;\n    highp float _344 = _342.w;\n    if ((_344 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _353 = normalize(varying_LightDir);\n    highp vec2 _431 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _442 = vec3(_431, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_431, _431))));\n    highp vec4 _402 = vec4(_342.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_353, _442))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _353), _442)), _Shininess * 128.0)) * (_SpecColor.xyz * _334.w))), _344);\n    highp vec3 _418 = _402.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_418.x, _418.y, _418.z, _402.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _692 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _700 = (_692 * _Color) * _AlbedoIntensity;\n    highp vec3 _709 = normalize(varying_WorldNormal);\n    highp vec4 _823 = vec4(varying_ShadowPosition, 1.0);\n    highp float _827 = -(u_view * _823).z;\n    bool _840 = true && (_827 < u_csmFarBounds.x);\n    highp float _1207 = 0.0;\n    if (_840)\n    {\n        highp vec3 _855 = ((u_csmLightSpaceMatrices[0] * _823).xyz * 0.5) + vec3(0.5);\n        highp float _859 = _855.x;\n        highp float _863 = _855.y;\n        highp float _873 = (((_855.z + step(_859, 0.001000000047497451305389404296875)) + step(_863, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _859)) + step(0.999000012874603271484375, _863);\n        highp float _1204 = 0.0;\n        for (int SPIRV_Cross_Dummy262 = 0; SPIRV_Cross_Dummy262 < 1; SPIRV_Cross_Dummy262++)\n        {\n            if (_873 > 1.0)\n            {\n                _1204 = 1.0;\n                break;\n            }\n            highp float _924 = _873 - 0.001000000047497451305389404296875;\n            highp vec2 _930 = ((_855.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _941 = fract(_930 * vec2(2048.0));\n            highp float _996 = _941.y;\n            _1204 = mix(mix(float(_924 < dot(texture2D(u_shadowMapTex, _930), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_924 < dot(texture2D(u_shadowMapTex, _930 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _996), mix(float(_924 < dot(texture2D(u_shadowMapTex, _930 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_924 < dot(texture2D(u_shadowMapTex, _930 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _996), _941.x);\n            break;\n        }\n        _1207 = _1204;\n    }\n    else\n    {\n        _1207 = 1.0;\n    }\n    bool _1534 = _840 ? true : false;\n    bool _1225 = (!_1534) && (_827 < u_csmFarBounds.y);\n    highp float _1316 = 0.0;\n    if (_1225)\n    {\n        highp vec3 _1236 = ((u_csmLightSpaceMatrices[1] * _823).xyz * 0.5) + vec3(0.5);\n        highp float _1238 = _1236.x;\n        highp float _1241 = _1236.y;\n        highp float _1249 = (((_1236.z + step(_1238, 0.001000000047497451305389404296875)) + step(_1241, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1238)) + step(0.999000012874603271484375, _1241);\n        highp float _1313 = 0.0;\n        for (int SPIRV_Cross_Dummy338 = 0; SPIRV_Cross_Dummy338 < 1; SPIRV_Cross_Dummy338++)\n        {\n            if (_1249 > 1.0)\n            {\n                _1313 = 1.0;\n                break;\n            }\n            highp float _1267 = _1249 - 0.001000000047497451305389404296875;\n            highp vec2 _1271 = ((_1236.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1278 = fract(_1271 * vec2(2048.0));\n            highp float _1306 = _1278.y;\n            _1313 = mix(mix(float(_1267 < dot(texture2D(u_shadowMapTex, _1271), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1267 < dot(texture2D(u_shadowMapTex, _1271 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1306), mix(float(_1267 < dot(texture2D(u_shadowMapTex, _1271 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1267 < dot(texture2D(u_shadowMapTex, _1271 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1306), _1278.x);\n            break;\n        }\n        _1316 = _1313;\n    }\n    else\n    {\n        _1316 = _1207;\n    }\n    bool _1535 = _1225 ? true : _1534;\n    bool _1330 = (!_1535) && (_827 < u_csmFarBounds.z);\n    highp float _1421 = 0.0;\n    if (_1330)\n    {\n        highp vec3 _1341 = ((u_csmLightSpaceMatrices[2] * _823).xyz * 0.5) + vec3(0.5);\n        highp float _1343 = _1341.x;\n        highp float _1346 = _1341.y;\n        highp float _1354 = (((_1341.z + step(_1343, 0.001000000047497451305389404296875)) + step(_1346, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1343)) + step(0.999000012874603271484375, _1346);\n        highp float _1418 = 0.0;\n        for (int SPIRV_Cross_Dummy414 = 0; SPIRV_Cross_Dummy414 < 1; SPIRV_Cross_Dummy414++)\n        {\n            if (_1354 > 1.0)\n            {\n                _1418 = 1.0;\n                break;\n            }\n            highp float _1372 = _1354 - 0.001000000047497451305389404296875;\n            highp vec2 _1376 = ((_1341.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1383 = fract(_1376 * vec2(2048.0));\n            highp float _1411 = _1383.y;\n            _1418 = mix(mix(float(_1372 < dot(texture2D(u_shadowMapTex, _1376), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1372 < dot(texture2D(u_shadowMapTex, _1376 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1411), mix(float(_1372 < dot(texture2D(u_shadowMapTex, _1376 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1372 < dot(texture2D(u_shadowMapTex, _1376 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1411), _1383.x);\n            break;\n        }\n        _1421 = _1418;\n    }\n    else\n    {\n        _1421 = _1316;\n    }\n    highp float _1526 = 0.0;\n    if ((!(_1330 ? true : _1535)) && (_827 < u_csmFarBounds.w))\n    {\n        highp vec3 _1446 = ((u_csmLightSpaceMatrices[3] * _823).xyz * 0.5) + vec3(0.5);\n        highp float _1448 = _1446.x;\n        highp float _1451 = _1446.y;\n        highp float _1459 = (((_1446.z + step(_1448, 0.001000000047497451305389404296875)) + step(_1451, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1448)) + step(0.999000012874603271484375, _1451);\n        highp float _1523 = 0.0;\n        for (int SPIRV_Cross_Dummy484 = 0; SPIRV_Cross_Dummy484 < 1; SPIRV_Cross_Dummy484++)\n        {\n            if (_1459 > 1.0)\n            {\n                _1523 = 1.0;\n                break;\n            }\n            highp float _1477 = _1459 - 0.001000000047497451305389404296875;\n            highp vec2 _1481 = ((_1446.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1488 = fract(_1481 * vec2(2048.0));\n            highp float _1516 = _1488.y;\n            _1523 = mix(mix(float(_1477 < dot(texture2D(u_shadowMapTex, _1481), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1477 < dot(texture2D(u_shadowMapTex, _1481 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1516), mix(float(_1477 < dot(texture2D(u_shadowMapTex, _1481 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1477 < dot(texture2D(u_shadowMapTex, _1481 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1516), _1488.x);\n            break;\n        }\n        _1526 = _1523;\n    }\n    else\n    {\n        _1526 = _1421;\n    }\n    highp vec4 _728 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _730 = _728.xyz * 2.0;\n    highp vec4 _754 = vec4(_700.xyz * (min(_730, mix(max(_730 - (u_lightColor * (clamp(dot(_709, u_lightDir), 0.0, 1.0) * (1.0 - _1526))), u_shadowColor), _730, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _709)), _Shininess * 128.0)) * (_SpecColor.xyz * _692.w))), _700.w);\n    highp vec4 _760 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1082 = length(varying_positionCamera_Fog);\n    highp float _1197 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1197 = (u_fogInfos.z - _1082) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1198 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1198 = 1.0 / pow(2.7182800769805908203125, _1082 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1199 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1199 = 1.0 / pow(2.7182800769805908203125, ((_1082 * _1082) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1199 = 1.0;\n            }\n            _1198 = _1199;\n        }\n        _1197 = _1198;\n    }\n    highp float _1128 = clamp(_1197, 0.0, 1.0);\n    highp vec3 _1137 = ((_754.xyz + (_EmissionColor.xyz * _760.x)).xyz * _1128) + (u_fogColor * (1.0 - _1128));\n    gl_FragData[0] = vec4(_1137.x, _1137.y, _1137.z, _754.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\n\nvoid main()\n{\n    highp vec4 _301 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _309 = (_301 * _Color) * _AlbedoIntensity;\n    highp float _311 = _309.w;\n    if ((_311 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _320 = normalize(varying_LightDir);\n    highp vec3 _326 = normalize(varying_WorldNormal);\n    highp vec4 _367 = vec4(_309.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_320, _326))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _320), _326)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _311);\n    highp vec3 _383 = _367.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_383.x, _383.y, _383.z, _367.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\n\nvoid main()\n{\n    highp vec4 _332 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _340 = (_332 * _Color) * _AlbedoIntensity;\n    highp float _342 = _340.w;\n    if ((_342 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _351 = normalize(varying_LightDir);\n    highp vec2 _429 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _440 = vec3(_429, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_429, _429))));\n    highp vec4 _400 = vec4(_340.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_351, _440))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _351), _440)), _Shininess * 128.0)) * (_SpecColor.xyz * _332.w))), _342);\n    highp vec3 _416 = _400.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_416.x, _416.y, _416.z, _400.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _690 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _698 = (_690 * _Color) * _AlbedoIntensity;\n    highp vec3 _707 = normalize(varying_WorldNormal);\n    highp vec4 _821 = vec4(varying_ShadowPosition, 1.0);\n    highp float _825 = -(u_view * _821).z;\n    bool _838 = true && (_825 < u_csmFarBounds.x);\n    highp float _1205 = 0.0;\n    if (_838)\n    {\n        highp vec3 _853 = ((u_csmLightSpaceMatrices[0] * _821).xyz * 0.5) + vec3(0.5);\n        highp float _857 = _853.x;\n        highp float _861 = _853.y;\n        highp float _871 = (((_853.z + step(_857, 0.001000000047497451305389404296875)) + step(_861, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _857)) + step(0.999000012874603271484375, _861);\n        highp float _1202 = 0.0;\n        for (int SPIRV_Cross_Dummy262 = 0; SPIRV_Cross_Dummy262 < 1; SPIRV_Cross_Dummy262++)\n        {\n            if (_871 > 1.0)\n            {\n                _1202 = 1.0;\n                break;\n            }\n            highp float _922 = _871 - 0.001000000047497451305389404296875;\n            highp vec2 _928 = ((_853.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _939 = fract(_928 * vec2(2048.0));\n            highp float _994 = _939.y;\n            _1202 = mix(mix(float(_922 < dot(texture2D(u_shadowMapTex, _928), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_922 < dot(texture2D(u_shadowMapTex, _928 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _994), mix(float(_922 < dot(texture2D(u_shadowMapTex, _928 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_922 < dot(texture2D(u_shadowMapTex, _928 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _994), _939.x);\n            break;\n        }\n        _1205 = _1202;\n    }\n    else\n    {\n        _1205 = 1.0;\n    }\n    bool _1532 = _838 ? true : false;\n    bool _1223 = (!_1532) && (_825 < u_csmFarBounds.y);\n    highp float _1314 = 0.0;\n    if (_1223)\n    {\n        highp vec3 _1234 = ((u_csmLightSpaceMatrices[1] * _821).xyz * 0.5) + vec3(0.5);\n        highp float _1236 = _1234.x;\n        highp float _1239 = _1234.y;\n        highp float _1247 = (((_1234.z + step(_1236, 0.001000000047497451305389404296875)) + step(_1239, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1236)) + step(0.999000012874603271484375, _1239);\n        highp float _1311 = 0.0;\n        for (int SPIRV_Cross_Dummy338 = 0; SPIRV_Cross_Dummy338 < 1; SPIRV_Cross_Dummy338++)\n        {\n            if (_1247 > 1.0)\n            {\n                _1311 = 1.0;\n                break;\n            }\n            highp float _1265 = _1247 - 0.001000000047497451305389404296875;\n            highp vec2 _1269 = ((_1234.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1276 = fract(_1269 * vec2(2048.0));\n            highp float _1304 = _1276.y;\n            _1311 = mix(mix(float(_1265 < dot(texture2D(u_shadowMapTex, _1269), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1265 < dot(texture2D(u_shadowMapTex, _1269 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1304), mix(float(_1265 < dot(texture2D(u_shadowMapTex, _1269 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1265 < dot(texture2D(u_shadowMapTex, _1269 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1304), _1276.x);\n            break;\n        }\n        _1314 = _1311;\n    }\n    else\n    {\n        _1314 = _1205;\n    }\n    bool _1533 = _1223 ? true : _1532;\n    bool _1328 = (!_1533) && (_825 < u_csmFarBounds.z);\n    highp float _1419 = 0.0;\n    if (_1328)\n    {\n        highp vec3 _1339 = ((u_csmLightSpaceMatrices[2] * _821).xyz * 0.5) + vec3(0.5);\n        highp float _1341 = _1339.x;\n        highp float _1344 = _1339.y;\n        highp float _1352 = (((_1339.z + step(_1341, 0.001000000047497451305389404296875)) + step(_1344, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1341)) + step(0.999000012874603271484375, _1344);\n        highp float _1416 = 0.0;\n        for (int SPIRV_Cross_Dummy414 = 0; SPIRV_Cross_Dummy414 < 1; SPIRV_Cross_Dummy414++)\n        {\n            if (_1352 > 1.0)\n            {\n                _1416 = 1.0;\n                break;\n            }\n            highp float _1370 = _1352 - 0.001000000047497451305389404296875;\n            highp vec2 _1374 = ((_1339.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1381 = fract(_1374 * vec2(2048.0));\n            highp float _1409 = _1381.y;\n            _1416 = mix(mix(float(_1370 < dot(texture2D(u_shadowMapTex, _1374), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1370 < dot(texture2D(u_shadowMapTex, _1374 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1409), mix(float(_1370 < dot(texture2D(u_shadowMapTex, _1374 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1370 < dot(texture2D(u_shadowMapTex, _1374 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1409), _1381.x);\n            break;\n        }\n        _1419 = _1416;\n    }\n    else\n    {\n        _1419 = _1314;\n    }\n    highp float _1524 = 0.0;\n    if ((!(_1328 ? true : _1533)) && (_825 < u_csmFarBounds.w))\n    {\n        highp vec3 _1444 = ((u_csmLightSpaceMatrices[3] * _821).xyz * 0.5) + vec3(0.5);\n        highp float _1446 = _1444.x;\n        highp float _1449 = _1444.y;\n        highp float _1457 = (((_1444.z + step(_1446, 0.001000000047497451305389404296875)) + step(_1449, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1446)) + step(0.999000012874603271484375, _1449);\n        highp float _1521 = 0.0;\n        for (int SPIRV_Cross_Dummy484 = 0; SPIRV_Cross_Dummy484 < 1; SPIRV_Cross_Dummy484++)\n        {\n            if (_1457 > 1.0)\n            {\n                _1521 = 1.0;\n                break;\n            }\n            highp float _1475 = _1457 - 0.001000000047497451305389404296875;\n            highp vec2 _1479 = ((_1444.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1486 = fract(_1479 * vec2(2048.0));\n            highp float _1514 = _1486.y;\n            _1521 = mix(mix(float(_1475 < dot(texture2D(u_shadowMapTex, _1479), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1475 < dot(texture2D(u_shadowMapTex, _1479 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1514), mix(float(_1475 < dot(texture2D(u_shadowMapTex, _1479 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1475 < dot(texture2D(u_shadowMapTex, _1479 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1514), _1486.x);\n            break;\n        }\n        _1524 = _1521;\n    }\n    else\n    {\n        _1524 = _1419;\n    }\n    highp vec4 _726 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _728 = _726.xyz * 2.0;\n    highp vec4 _752 = vec4(_698.xyz * (min(_728, mix(max(_728 - (u_lightColor * (clamp(dot(_707, u_lightDir), 0.0, 1.0) * (1.0 - _1524))), u_shadowColor), _728, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _707)), _Shininess * 128.0)) * (_SpecColor.xyz * _690.w))), _698.w);\n    highp vec4 _758 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1080 = length(varying_positionCamera_Fog);\n    highp float _1195 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1195 = (u_fogInfos.z - _1080) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1196 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1196 = 1.0 / pow(2.7182800769805908203125, _1080 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1197 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1197 = 1.0 / pow(2.7182800769805908203125, ((_1080 * _1080) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1197 = 1.0;\n            }\n            _1196 = _1197;\n        }\n        _1195 = _1196;\n    }\n    highp float _1126 = clamp(_1195, 0.0, 1.0);\n    highp vec3 _1135 = ((_752.xyz + (_EmissionColor.xyz * _758.x)).xyz * _1126) + (u_fogColor * (1.0 - _1126));\n    gl_FragData[0] = vec4(_1135.x, _1135.y, _1135.z, _752.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _732 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _740 = (_732 * _Color) * _AlbedoIntensity;\n    highp vec4 _755 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _841 = (_755.xy - vec2(0.5)) * 2.0;\n    highp vec4 _895 = vec4(varying_ShadowPosition, 1.0);\n    highp float _899 = -(u_view * _895).z;\n    bool _912 = true && (_899 < u_csmFarBounds.x);\n    highp float _1278 = 0.0;\n    if (_912)\n    {\n        highp vec3 _927 = ((u_csmLightSpaceMatrices[0] * _895).xyz * 0.5) + vec3(0.5);\n        highp float _931 = _927.x;\n        highp float _935 = _927.y;\n        highp float _945 = (((_927.z + step(_931, 0.001000000047497451305389404296875)) + step(_935, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _931)) + step(0.999000012874603271484375, _935);\n        highp float _1275 = 0.0;\n        for (int SPIRV_Cross_Dummy271 = 0; SPIRV_Cross_Dummy271 < 1; SPIRV_Cross_Dummy271++)\n        {\n            if (_945 > 1.0)\n            {\n                _1275 = 1.0;\n                break;\n            }\n            highp float _996 = _945 - 0.001000000047497451305389404296875;\n            highp vec2 _1002 = ((_927.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _1013 = fract(_1002 * vec2(2048.0));\n            highp float _1068 = _1013.y;\n            _1275 = mix(mix(float(_996 < dot(texture2D(u_shadowMapTex, _1002), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_996 < dot(texture2D(u_shadowMapTex, _1002 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1068), mix(float(_996 < dot(texture2D(u_shadowMapTex, _1002 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_996 < dot(texture2D(u_shadowMapTex, _1002 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1068), _1013.x);\n            break;\n        }\n        _1278 = _1275;\n    }\n    else\n    {\n        _1278 = 1.0;\n    }\n    bool _1606 = _912 ? true : false;\n    bool _1297 = (!_1606) && (_899 < u_csmFarBounds.y);\n    highp float _1388 = 0.0;\n    if (_1297)\n    {\n        highp vec3 _1308 = ((u_csmLightSpaceMatrices[1] * _895).xyz * 0.5) + vec3(0.5);\n        highp float _1310 = _1308.x;\n        highp float _1313 = _1308.y;\n        highp float _1321 = (((_1308.z + step(_1310, 0.001000000047497451305389404296875)) + step(_1313, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1310)) + step(0.999000012874603271484375, _1313);\n        highp float _1385 = 0.0;\n        for (int SPIRV_Cross_Dummy347 = 0; SPIRV_Cross_Dummy347 < 1; SPIRV_Cross_Dummy347++)\n        {\n            if (_1321 > 1.0)\n            {\n                _1385 = 1.0;\n                break;\n            }\n            highp float _1339 = _1321 - 0.001000000047497451305389404296875;\n            highp vec2 _1343 = ((_1308.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1350 = fract(_1343 * vec2(2048.0));\n            highp float _1378 = _1350.y;\n            _1385 = mix(mix(float(_1339 < dot(texture2D(u_shadowMapTex, _1343), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1339 < dot(texture2D(u_shadowMapTex, _1343 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1378), mix(float(_1339 < dot(texture2D(u_shadowMapTex, _1343 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1339 < dot(texture2D(u_shadowMapTex, _1343 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1378), _1350.x);\n            break;\n        }\n        _1388 = _1385;\n    }\n    else\n    {\n        _1388 = _1278;\n    }\n    bool _1607 = _1297 ? true : _1606;\n    bool _1402 = (!_1607) && (_899 < u_csmFarBounds.z);\n    highp float _1493 = 0.0;\n    if (_1402)\n    {\n        highp vec3 _1413 = ((u_csmLightSpaceMatrices[2] * _895).xyz * 0.5) + vec3(0.5);\n        highp float _1415 = _1413.x;\n        highp float _1418 = _1413.y;\n        highp float _1426 = (((_1413.z + step(_1415, 0.001000000047497451305389404296875)) + step(_1418, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1415)) + step(0.999000012874603271484375, _1418);\n        highp float _1490 = 0.0;\n        for (int SPIRV_Cross_Dummy423 = 0; SPIRV_Cross_Dummy423 < 1; SPIRV_Cross_Dummy423++)\n        {\n            if (_1426 > 1.0)\n            {\n                _1490 = 1.0;\n                break;\n            }\n            highp float _1444 = _1426 - 0.001000000047497451305389404296875;\n            highp vec2 _1448 = ((_1413.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1455 = fract(_1448 * vec2(2048.0));\n            highp float _1483 = _1455.y;\n            _1490 = mix(mix(float(_1444 < dot(texture2D(u_shadowMapTex, _1448), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1444 < dot(texture2D(u_shadowMapTex, _1448 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1483), mix(float(_1444 < dot(texture2D(u_shadowMapTex, _1448 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1444 < dot(texture2D(u_shadowMapTex, _1448 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1483), _1455.x);\n            break;\n        }\n        _1493 = _1490;\n    }\n    else\n    {\n        _1493 = _1388;\n    }\n    highp float _1598 = 0.0;\n    if ((!(_1402 ? true : _1607)) && (_899 < u_csmFarBounds.w))\n    {\n        highp vec3 _1518 = ((u_csmLightSpaceMatrices[3] * _895).xyz * 0.5) + vec3(0.5);\n        highp float _1520 = _1518.x;\n        highp float _1523 = _1518.y;\n        highp float _1531 = (((_1518.z + step(_1520, 0.001000000047497451305389404296875)) + step(_1523, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1520)) + step(0.999000012874603271484375, _1523);\n        highp float _1595 = 0.0;\n        for (int SPIRV_Cross_Dummy493 = 0; SPIRV_Cross_Dummy493 < 1; SPIRV_Cross_Dummy493++)\n        {\n            if (_1531 > 1.0)\n            {\n                _1595 = 1.0;\n                break;\n            }\n            highp float _1549 = _1531 - 0.001000000047497451305389404296875;\n            highp vec2 _1553 = ((_1518.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1560 = fract(_1553 * vec2(2048.0));\n            highp float _1588 = _1560.y;\n            _1595 = mix(mix(float(_1549 < dot(texture2D(u_shadowMapTex, _1553), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1549 < dot(texture2D(u_shadowMapTex, _1553 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1588), mix(float(_1549 < dot(texture2D(u_shadowMapTex, _1553 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1549 < dot(texture2D(u_shadowMapTex, _1553 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1588), _1560.x);\n            break;\n        }\n        _1598 = _1595;\n    }\n    else\n    {\n        _1598 = _1493;\n    }\n    highp vec4 _775 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _777 = _775.xyz * 2.0;\n    highp vec4 _787 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _806 = vec4(_740.xyz * (min(_777, mix(max(_777 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1598))), u_shadowColor), _777, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_841, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_841, _841)))))), _Shininess * 128.0)) * (_787.xyz * _SpecColor.xyz))), _740.w);\n    highp vec4 _812 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1154 = length(varying_positionCamera_Fog);\n    highp float _1268 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1268 = (u_fogInfos.z - _1154) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1269 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1269 = 1.0 / pow(2.7182800769805908203125, _1154 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1270 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1270 = 1.0 / pow(2.7182800769805908203125, ((_1154 * _1154) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1270 = 1.0;\n            }\n            _1269 = _1270;\n        }\n        _1268 = _1269;\n    }\n    highp float _1200 = clamp(_1268, 0.0, 1.0);\n    highp vec3 _1209 = ((_806.xyz + (_EmissionColor.xyz * _812.x)).xyz * _1200) + (u_fogColor * (1.0 - _1200));\n    gl_FragData[0] = vec4(_1209.x, _1209.y, _1209.z, _806.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\n\nvoid main()\n{\n    highp vec4 _299 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _307 = (_299 * _Color) * _AlbedoIntensity;\n    highp float _309 = _307.w;\n    if ((_309 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _318 = normalize(varying_LightDir);\n    highp vec3 _324 = normalize(varying_WorldNormal);\n    highp vec4 _365 = vec4(_307.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_318, _324))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _318), _324)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _309);\n    highp vec3 _381 = _365.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_381.x, _381.y, _381.z, _365.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _627 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _635 = (_627 * _Color) * _AlbedoIntensity;\n    highp float _637 = _635.w;\n    if ((_637 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _658 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _715 = (_658.xy - vec2(0.5)) * 2.0;\n    highp vec4 _769 = vec4(varying_ShadowPosition, 1.0);\n    highp float _773 = -(u_view * _769).z;\n    bool _786 = true && (_773 < u_csmFarBounds.x);\n    highp float _1078 = 0.0;\n    if (_786)\n    {\n        highp vec3 _801 = ((u_csmLightSpaceMatrices[0] * _769).xyz * 0.5) + vec3(0.5);\n        highp float _805 = _801.x;\n        highp float _809 = _801.y;\n        highp float _819 = (((_801.z + step(_805, 0.001000000047497451305389404296875)) + step(_809, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _805)) + step(0.999000012874603271484375, _809);\n        highp float _1075 = 0.0;\n        for (int SPIRV_Cross_Dummy271 = 0; SPIRV_Cross_Dummy271 < 1; SPIRV_Cross_Dummy271++)\n        {\n            if (_819 > 1.0)\n            {\n                _1075 = 1.0;\n                break;\n            }\n            highp float _870 = _819 - 0.001000000047497451305389404296875;\n            highp vec2 _876 = ((_801.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _887 = fract(_876 * vec2(2048.0));\n            highp float _942 = _887.y;\n            _1075 = mix(mix(float(_870 < dot(texture2D(u_shadowMapTex, _876), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_870 < dot(texture2D(u_shadowMapTex, _876 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _942), mix(float(_870 < dot(texture2D(u_shadowMapTex, _876 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_870 < dot(texture2D(u_shadowMapTex, _876 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _942), _887.x);\n            break;\n        }\n        _1078 = _1075;\n    }\n    else\n    {\n        _1078 = 1.0;\n    }\n    bool _1406 = _786 ? true : false;\n    bool _1097 = (!_1406) && (_773 < u_csmFarBounds.y);\n    highp float _1188 = 0.0;\n    if (_1097)\n    {\n        highp vec3 _1108 = ((u_csmLightSpaceMatrices[1] * _769).xyz * 0.5) + vec3(0.5);\n        highp float _1110 = _1108.x;\n        highp float _1113 = _1108.y;\n        highp float _1121 = (((_1108.z + step(_1110, 0.001000000047497451305389404296875)) + step(_1113, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1110)) + step(0.999000012874603271484375, _1113);\n        highp float _1185 = 0.0;\n        for (int SPIRV_Cross_Dummy347 = 0; SPIRV_Cross_Dummy347 < 1; SPIRV_Cross_Dummy347++)\n        {\n            if (_1121 > 1.0)\n            {\n                _1185 = 1.0;\n                break;\n            }\n            highp float _1139 = _1121 - 0.001000000047497451305389404296875;\n            highp vec2 _1143 = ((_1108.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1150 = fract(_1143 * vec2(2048.0));\n            highp float _1178 = _1150.y;\n            _1185 = mix(mix(float(_1139 < dot(texture2D(u_shadowMapTex, _1143), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1139 < dot(texture2D(u_shadowMapTex, _1143 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1178), mix(float(_1139 < dot(texture2D(u_shadowMapTex, _1143 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1139 < dot(texture2D(u_shadowMapTex, _1143 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1178), _1150.x);\n            break;\n        }\n        _1188 = _1185;\n    }\n    else\n    {\n        _1188 = _1078;\n    }\n    bool _1407 = _1097 ? true : _1406;\n    bool _1202 = (!_1407) && (_773 < u_csmFarBounds.z);\n    highp float _1293 = 0.0;\n    if (_1202)\n    {\n        highp vec3 _1213 = ((u_csmLightSpaceMatrices[2] * _769).xyz * 0.5) + vec3(0.5);\n        highp float _1215 = _1213.x;\n        highp float _1218 = _1213.y;\n        highp float _1226 = (((_1213.z + step(_1215, 0.001000000047497451305389404296875)) + step(_1218, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1215)) + step(0.999000012874603271484375, _1218);\n        highp float _1290 = 0.0;\n        for (int SPIRV_Cross_Dummy423 = 0; SPIRV_Cross_Dummy423 < 1; SPIRV_Cross_Dummy423++)\n        {\n            if (_1226 > 1.0)\n            {\n                _1290 = 1.0;\n                break;\n            }\n            highp float _1244 = _1226 - 0.001000000047497451305389404296875;\n            highp vec2 _1248 = ((_1213.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1255 = fract(_1248 * vec2(2048.0));\n            highp float _1283 = _1255.y;\n            _1290 = mix(mix(float(_1244 < dot(texture2D(u_shadowMapTex, _1248), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1244 < dot(texture2D(u_shadowMapTex, _1248 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1283), mix(float(_1244 < dot(texture2D(u_shadowMapTex, _1248 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1244 < dot(texture2D(u_shadowMapTex, _1248 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1283), _1255.x);\n            break;\n        }\n        _1293 = _1290;\n    }\n    else\n    {\n        _1293 = _1188;\n    }\n    highp float _1398 = 0.0;\n    if ((!(_1202 ? true : _1407)) && (_773 < u_csmFarBounds.w))\n    {\n        highp vec3 _1318 = ((u_csmLightSpaceMatrices[3] * _769).xyz * 0.5) + vec3(0.5);\n        highp float _1320 = _1318.x;\n        highp float _1323 = _1318.y;\n        highp float _1331 = (((_1318.z + step(_1320, 0.001000000047497451305389404296875)) + step(_1323, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1320)) + step(0.999000012874603271484375, _1323);\n        highp float _1395 = 0.0;\n        for (int SPIRV_Cross_Dummy493 = 0; SPIRV_Cross_Dummy493 < 1; SPIRV_Cross_Dummy493++)\n        {\n            if (_1331 > 1.0)\n            {\n                _1395 = 1.0;\n                break;\n            }\n            highp float _1349 = _1331 - 0.001000000047497451305389404296875;\n            highp vec2 _1353 = ((_1318.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1360 = fract(_1353 * vec2(2048.0));\n            highp float _1388 = _1360.y;\n            _1395 = mix(mix(float(_1349 < dot(texture2D(u_shadowMapTex, _1353), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1349 < dot(texture2D(u_shadowMapTex, _1353 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1388), mix(float(_1349 < dot(texture2D(u_shadowMapTex, _1353 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1349 < dot(texture2D(u_shadowMapTex, _1353 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1388), _1360.x);\n            break;\n        }\n        _1398 = _1395;\n    }\n    else\n    {\n        _1398 = _1293;\n    }\n    highp vec3 _680 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_635.xyz * (min(_680, mix(max(_680 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1398))), u_shadowColor), _680, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_715, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_715, _715)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _627.w))), _637);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\n\nvoid main()\n{\n    highp vec4 _296 = (texture2D(_MainTex, varying_TexCoord) * _Color) * _AlbedoIntensity;\n    highp vec3 _299 = normalize(varying_LightDir);\n    highp vec3 _305 = normalize(varying_WorldNormal);\n    highp vec4 _346 = vec4(_296.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_299, _305))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _299), _305)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _296.w);\n    highp vec3 _362 = _346.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_362.x, _362.y, _362.z, _346.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _597 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _605 = (_597 * _Color) * _AlbedoIntensity;\n    highp float _607 = _605.w;\n    if ((_607 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _622 = normalize(varying_WorldNormal);\n    highp vec4 _717 = vec4(varying_ShadowPosition, 1.0);\n    highp float _721 = -(u_view * _717).z;\n    bool _734 = true && (_721 < u_csmFarBounds.x);\n    highp float _1025 = 0.0;\n    if (_734)\n    {\n        highp vec3 _749 = ((u_csmLightSpaceMatrices[0] * _717).xyz * 0.5) + vec3(0.5);\n        highp float _753 = _749.x;\n        highp float _757 = _749.y;\n        highp float _767 = (((_749.z + step(_753, 0.001000000047497451305389404296875)) + step(_757, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _753)) + step(0.999000012874603271484375, _757);\n        highp float _1022 = 0.0;\n        for (int SPIRV_Cross_Dummy268 = 0; SPIRV_Cross_Dummy268 < 1; SPIRV_Cross_Dummy268++)\n        {\n            if (_767 > 1.0)\n            {\n                _1022 = 1.0;\n                break;\n            }\n            highp float _818 = _767 - 0.001000000047497451305389404296875;\n            highp vec2 _824 = ((_749.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _835 = fract(_824 * vec2(2048.0));\n            highp float _890 = _835.y;\n            _1022 = mix(mix(float(_818 < dot(texture2D(u_shadowMapTex, _824), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_818 < dot(texture2D(u_shadowMapTex, _824 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _890), mix(float(_818 < dot(texture2D(u_shadowMapTex, _824 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_818 < dot(texture2D(u_shadowMapTex, _824 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _890), _835.x);\n            break;\n        }\n        _1025 = _1022;\n    }\n    else\n    {\n        _1025 = 1.0;\n    }\n    bool _1352 = _734 ? true : false;\n    bool _1043 = (!_1352) && (_721 < u_csmFarBounds.y);\n    highp float _1134 = 0.0;\n    if (_1043)\n    {\n        highp vec3 _1054 = ((u_csmLightSpaceMatrices[1] * _717).xyz * 0.5) + vec3(0.5);\n        highp float _1056 = _1054.x;\n        highp float _1059 = _1054.y;\n        highp float _1067 = (((_1054.z + step(_1056, 0.001000000047497451305389404296875)) + step(_1059, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1056)) + step(0.999000012874603271484375, _1059);\n        highp float _1131 = 0.0;\n        for (int SPIRV_Cross_Dummy344 = 0; SPIRV_Cross_Dummy344 < 1; SPIRV_Cross_Dummy344++)\n        {\n            if (_1067 > 1.0)\n            {\n                _1131 = 1.0;\n                break;\n            }\n            highp float _1085 = _1067 - 0.001000000047497451305389404296875;\n            highp vec2 _1089 = ((_1054.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1096 = fract(_1089 * vec2(2048.0));\n            highp float _1124 = _1096.y;\n            _1131 = mix(mix(float(_1085 < dot(texture2D(u_shadowMapTex, _1089), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1085 < dot(texture2D(u_shadowMapTex, _1089 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1124), mix(float(_1085 < dot(texture2D(u_shadowMapTex, _1089 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1085 < dot(texture2D(u_shadowMapTex, _1089 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1124), _1096.x);\n            break;\n        }\n        _1134 = _1131;\n    }\n    else\n    {\n        _1134 = _1025;\n    }\n    bool _1353 = _1043 ? true : _1352;\n    bool _1148 = (!_1353) && (_721 < u_csmFarBounds.z);\n    highp float _1239 = 0.0;\n    if (_1148)\n    {\n        highp vec3 _1159 = ((u_csmLightSpaceMatrices[2] * _717).xyz * 0.5) + vec3(0.5);\n        highp float _1161 = _1159.x;\n        highp float _1164 = _1159.y;\n        highp float _1172 = (((_1159.z + step(_1161, 0.001000000047497451305389404296875)) + step(_1164, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1161)) + step(0.999000012874603271484375, _1164);\n        highp float _1236 = 0.0;\n        for (int SPIRV_Cross_Dummy420 = 0; SPIRV_Cross_Dummy420 < 1; SPIRV_Cross_Dummy420++)\n        {\n            if (_1172 > 1.0)\n            {\n                _1236 = 1.0;\n                break;\n            }\n            highp float _1190 = _1172 - 0.001000000047497451305389404296875;\n            highp vec2 _1194 = ((_1159.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1201 = fract(_1194 * vec2(2048.0));\n            highp float _1229 = _1201.y;\n            _1236 = mix(mix(float(_1190 < dot(texture2D(u_shadowMapTex, _1194), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1190 < dot(texture2D(u_shadowMapTex, _1194 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1229), mix(float(_1190 < dot(texture2D(u_shadowMapTex, _1194 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1190 < dot(texture2D(u_shadowMapTex, _1194 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1229), _1201.x);\n            break;\n        }\n        _1239 = _1236;\n    }\n    else\n    {\n        _1239 = _1134;\n    }\n    highp float _1344 = 0.0;\n    if ((!(_1148 ? true : _1353)) && (_721 < u_csmFarBounds.w))\n    {\n        highp vec3 _1264 = ((u_csmLightSpaceMatrices[3] * _717).xyz * 0.5) + vec3(0.5);\n        highp float _1266 = _1264.x;\n        highp float _1269 = _1264.y;\n        highp float _1277 = (((_1264.z + step(_1266, 0.001000000047497451305389404296875)) + step(_1269, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1266)) + step(0.999000012874603271484375, _1269);\n        highp float _1341 = 0.0;\n        for (int SPIRV_Cross_Dummy490 = 0; SPIRV_Cross_Dummy490 < 1; SPIRV_Cross_Dummy490++)\n        {\n            if (_1277 > 1.0)\n            {\n                _1341 = 1.0;\n                break;\n            }\n            highp float _1295 = _1277 - 0.001000000047497451305389404296875;\n            highp vec2 _1299 = ((_1264.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1306 = fract(_1299 * vec2(2048.0));\n            highp float _1334 = _1306.y;\n            _1341 = mix(mix(float(_1295 < dot(texture2D(u_shadowMapTex, _1299), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1295 < dot(texture2D(u_shadowMapTex, _1299 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1334), mix(float(_1295 < dot(texture2D(u_shadowMapTex, _1299 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1295 < dot(texture2D(u_shadowMapTex, _1299 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1334), _1306.x);\n            break;\n        }\n        _1344 = _1341;\n    }\n    else\n    {\n        _1344 = _1239;\n    }\n    highp vec3 _643 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_605.xyz * (min(_643, mix(max(_643 - (u_lightColor * (clamp(dot(_622, u_lightDir), 0.0, 1.0) * (1.0 - _1344))), u_shadowColor), _643, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _622)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _607);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _545 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _553 = (_545 * _Color) * _AlbedoIntensity;\n    highp vec3 _556 = normalize(varying_LightDir);\n    highp vec3 _562 = normalize(varying_WorldNormal);\n    highp vec4 _668 = vec4(varying_ShadowPosition, 1.0);\n    highp float _672 = -(u_view * _668).z;\n    bool _685 = true && (_672 < u_csmFarBounds.x);\n    highp float _934 = 0.0;\n    if (_685)\n    {\n        highp vec3 _700 = ((u_csmLightSpaceMatrices[0] * _668).xyz * 0.5) + vec3(0.5);\n        highp float _704 = _700.x;\n        highp float _708 = _700.y;\n        highp float _718 = (((_700.z + step(_704, 0.001000000047497451305389404296875)) + step(_708, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _704)) + step(0.999000012874603271484375, _708);\n        highp float _931 = 0.0;\n        for (int SPIRV_Cross_Dummy257 = 0; SPIRV_Cross_Dummy257 < 1; SPIRV_Cross_Dummy257++)\n        {\n            if (_718 > 1.0)\n            {\n                _931 = 1.0;\n                break;\n            }\n            highp float _769 = _718 - 0.001000000047497451305389404296875;\n            highp vec2 _775 = ((_700.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _786 = fract(_775 * vec2(2048.0));\n            highp float _841 = _786.y;\n            _931 = mix(mix(float(_769 < dot(texture2D(u_shadowMapTex, _775), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_769 < dot(texture2D(u_shadowMapTex, _775 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _841), mix(float(_769 < dot(texture2D(u_shadowMapTex, _775 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_769 < dot(texture2D(u_shadowMapTex, _775 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _841), _786.x);\n            break;\n        }\n        _934 = _931;\n    }\n    else\n    {\n        _934 = 1.0;\n    }\n    bool _1260 = _685 ? true : false;\n    bool _952 = (!_1260) && (_672 < u_csmFarBounds.y);\n    highp float _1043 = 0.0;\n    if (_952)\n    {\n        highp vec3 _963 = ((u_csmLightSpaceMatrices[1] * _668).xyz * 0.5) + vec3(0.5);\n        highp float _965 = _963.x;\n        highp float _968 = _963.y;\n        highp float _976 = (((_963.z + step(_965, 0.001000000047497451305389404296875)) + step(_968, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _965)) + step(0.999000012874603271484375, _968);\n        highp float _1040 = 0.0;\n        for (int SPIRV_Cross_Dummy333 = 0; SPIRV_Cross_Dummy333 < 1; SPIRV_Cross_Dummy333++)\n        {\n            if (_976 > 1.0)\n            {\n                _1040 = 1.0;\n                break;\n            }\n            highp float _994 = _976 - 0.001000000047497451305389404296875;\n            highp vec2 _998 = ((_963.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1005 = fract(_998 * vec2(2048.0));\n            highp float _1033 = _1005.y;\n            _1040 = mix(mix(float(_994 < dot(texture2D(u_shadowMapTex, _998), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_994 < dot(texture2D(u_shadowMapTex, _998 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1033), mix(float(_994 < dot(texture2D(u_shadowMapTex, _998 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_994 < dot(texture2D(u_shadowMapTex, _998 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1033), _1005.x);\n            break;\n        }\n        _1043 = _1040;\n    }\n    else\n    {\n        _1043 = _934;\n    }\n    bool _1261 = _952 ? true : _1260;\n    bool _1057 = (!_1261) && (_672 < u_csmFarBounds.z);\n    highp float _1148 = 0.0;\n    if (_1057)\n    {\n        highp vec3 _1068 = ((u_csmLightSpaceMatrices[2] * _668).xyz * 0.5) + vec3(0.5);\n        highp float _1070 = _1068.x;\n        highp float _1073 = _1068.y;\n        highp float _1081 = (((_1068.z + step(_1070, 0.001000000047497451305389404296875)) + step(_1073, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1070)) + step(0.999000012874603271484375, _1073);\n        highp float _1145 = 0.0;\n        for (int SPIRV_Cross_Dummy409 = 0; SPIRV_Cross_Dummy409 < 1; SPIRV_Cross_Dummy409++)\n        {\n            if (_1081 > 1.0)\n            {\n                _1145 = 1.0;\n                break;\n            }\n            highp float _1099 = _1081 - 0.001000000047497451305389404296875;\n            highp vec2 _1103 = ((_1068.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1110 = fract(_1103 * vec2(2048.0));\n            highp float _1138 = _1110.y;\n            _1145 = mix(mix(float(_1099 < dot(texture2D(u_shadowMapTex, _1103), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1099 < dot(texture2D(u_shadowMapTex, _1103 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1138), mix(float(_1099 < dot(texture2D(u_shadowMapTex, _1103 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1099 < dot(texture2D(u_shadowMapTex, _1103 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1138), _1110.x);\n            break;\n        }\n        _1148 = _1145;\n    }\n    else\n    {\n        _1148 = _1043;\n    }\n    highp float _1253 = 0.0;\n    if ((!(_1057 ? true : _1261)) && (_672 < u_csmFarBounds.w))\n    {\n        highp vec3 _1173 = ((u_csmLightSpaceMatrices[3] * _668).xyz * 0.5) + vec3(0.5);\n        highp float _1175 = _1173.x;\n        highp float _1178 = _1173.y;\n        highp float _1186 = (((_1173.z + step(_1175, 0.001000000047497451305389404296875)) + step(_1178, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1175)) + step(0.999000012874603271484375, _1178);\n        highp float _1250 = 0.0;\n        for (int SPIRV_Cross_Dummy479 = 0; SPIRV_Cross_Dummy479 < 1; SPIRV_Cross_Dummy479++)\n        {\n            if (_1186 > 1.0)\n            {\n                _1250 = 1.0;\n                break;\n            }\n            highp float _1204 = _1186 - 0.001000000047497451305389404296875;\n            highp vec2 _1208 = ((_1173.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1215 = fract(_1208 * vec2(2048.0));\n            highp float _1243 = _1215.y;\n            _1250 = mix(mix(float(_1204 < dot(texture2D(u_shadowMapTex, _1208), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1204 < dot(texture2D(u_shadowMapTex, _1208 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1243), mix(float(_1204 < dot(texture2D(u_shadowMapTex, _1208 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1204 < dot(texture2D(u_shadowMapTex, _1208 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1243), _1215.x);\n            break;\n        }\n        _1253 = _1250;\n    }\n    else\n    {\n        _1253 = _1148;\n    }\n    highp vec4 _606 = vec4(_553.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_556, _562))) * _1253)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _556), _562)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _553.w);\n    highp vec3 _622 = _606.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_622.x, _622.y, _622.z, _606.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _446 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _454 = (_446 * _Color) * _AlbedoIntensity;\n    highp float _456 = _454.w;\n    if ((_456 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _487 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _489 = _487.xyz * 2.0;\n    highp vec4 _513 = vec4(_454.xyz * (min(_489, mix(max(_489, u_shadowColor), _489, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_SpecColor.xyz * _446.w))), _456);\n    highp vec4 _519 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _613 = length(varying_positionCamera_Fog);\n    highp float _701 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _701 = (u_fogInfos.z - _613) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _702 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _702 = 1.0 / pow(2.7182800769805908203125, _613 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _703 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _703 = 1.0 / pow(2.7182800769805908203125, ((_613 * _613) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _703 = 1.0;\n            }\n            _702 = _703;\n        }\n        _701 = _702;\n    }\n    highp float _659 = clamp(_701, 0.0, 1.0);\n    highp vec3 _668 = ((_513.xyz + (_EmissionColor.xyz * _519.x)).xyz * _659) + (u_fogColor * (1.0 - _659));\n    gl_FragData[0] = vec4(_668.x, _668.y, _668.z, _513.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _543 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _551 = (_543 * _Color) * _AlbedoIntensity;\n    highp vec3 _554 = normalize(varying_LightDir);\n    highp vec3 _560 = normalize(varying_WorldNormal);\n    highp vec4 _666 = vec4(varying_ShadowPosition, 1.0);\n    highp float _670 = -(u_view * _666).z;\n    bool _683 = true && (_670 < u_csmFarBounds.x);\n    highp float _932 = 0.0;\n    if (_683)\n    {\n        highp vec3 _698 = ((u_csmLightSpaceMatrices[0] * _666).xyz * 0.5) + vec3(0.5);\n        highp float _702 = _698.x;\n        highp float _706 = _698.y;\n        highp float _716 = (((_698.z + step(_702, 0.001000000047497451305389404296875)) + step(_706, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _702)) + step(0.999000012874603271484375, _706);\n        highp float _929 = 0.0;\n        for (int SPIRV_Cross_Dummy257 = 0; SPIRV_Cross_Dummy257 < 1; SPIRV_Cross_Dummy257++)\n        {\n            if (_716 > 1.0)\n            {\n                _929 = 1.0;\n                break;\n            }\n            highp float _767 = _716 - 0.001000000047497451305389404296875;\n            highp vec2 _773 = ((_698.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _784 = fract(_773 * vec2(2048.0));\n            highp float _839 = _784.y;\n            _929 = mix(mix(float(_767 < dot(texture2D(u_shadowMapTex, _773), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_767 < dot(texture2D(u_shadowMapTex, _773 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _839), mix(float(_767 < dot(texture2D(u_shadowMapTex, _773 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_767 < dot(texture2D(u_shadowMapTex, _773 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _839), _784.x);\n            break;\n        }\n        _932 = _929;\n    }\n    else\n    {\n        _932 = 1.0;\n    }\n    bool _1258 = _683 ? true : false;\n    bool _950 = (!_1258) && (_670 < u_csmFarBounds.y);\n    highp float _1041 = 0.0;\n    if (_950)\n    {\n        highp vec3 _961 = ((u_csmLightSpaceMatrices[1] * _666).xyz * 0.5) + vec3(0.5);\n        highp float _963 = _961.x;\n        highp float _966 = _961.y;\n        highp float _974 = (((_961.z + step(_963, 0.001000000047497451305389404296875)) + step(_966, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _963)) + step(0.999000012874603271484375, _966);\n        highp float _1038 = 0.0;\n        for (int SPIRV_Cross_Dummy333 = 0; SPIRV_Cross_Dummy333 < 1; SPIRV_Cross_Dummy333++)\n        {\n            if (_974 > 1.0)\n            {\n                _1038 = 1.0;\n                break;\n            }\n            highp float _992 = _974 - 0.001000000047497451305389404296875;\n            highp vec2 _996 = ((_961.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1003 = fract(_996 * vec2(2048.0));\n            highp float _1031 = _1003.y;\n            _1038 = mix(mix(float(_992 < dot(texture2D(u_shadowMapTex, _996), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_992 < dot(texture2D(u_shadowMapTex, _996 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1031), mix(float(_992 < dot(texture2D(u_shadowMapTex, _996 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_992 < dot(texture2D(u_shadowMapTex, _996 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1031), _1003.x);\n            break;\n        }\n        _1041 = _1038;\n    }\n    else\n    {\n        _1041 = _932;\n    }\n    bool _1259 = _950 ? true : _1258;\n    bool _1055 = (!_1259) && (_670 < u_csmFarBounds.z);\n    highp float _1146 = 0.0;\n    if (_1055)\n    {\n        highp vec3 _1066 = ((u_csmLightSpaceMatrices[2] * _666).xyz * 0.5) + vec3(0.5);\n        highp float _1068 = _1066.x;\n        highp float _1071 = _1066.y;\n        highp float _1079 = (((_1066.z + step(_1068, 0.001000000047497451305389404296875)) + step(_1071, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1068)) + step(0.999000012874603271484375, _1071);\n        highp float _1143 = 0.0;\n        for (int SPIRV_Cross_Dummy409 = 0; SPIRV_Cross_Dummy409 < 1; SPIRV_Cross_Dummy409++)\n        {\n            if (_1079 > 1.0)\n            {\n                _1143 = 1.0;\n                break;\n            }\n            highp float _1097 = _1079 - 0.001000000047497451305389404296875;\n            highp vec2 _1101 = ((_1066.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1108 = fract(_1101 * vec2(2048.0));\n            highp float _1136 = _1108.y;\n            _1143 = mix(mix(float(_1097 < dot(texture2D(u_shadowMapTex, _1101), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1097 < dot(texture2D(u_shadowMapTex, _1101 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1136), mix(float(_1097 < dot(texture2D(u_shadowMapTex, _1101 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1097 < dot(texture2D(u_shadowMapTex, _1101 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1136), _1108.x);\n            break;\n        }\n        _1146 = _1143;\n    }\n    else\n    {\n        _1146 = _1041;\n    }\n    highp float _1251 = 0.0;\n    if ((!(_1055 ? true : _1259)) && (_670 < u_csmFarBounds.w))\n    {\n        highp vec3 _1171 = ((u_csmLightSpaceMatrices[3] * _666).xyz * 0.5) + vec3(0.5);\n        highp float _1173 = _1171.x;\n        highp float _1176 = _1171.y;\n        highp float _1184 = (((_1171.z + step(_1173, 0.001000000047497451305389404296875)) + step(_1176, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1173)) + step(0.999000012874603271484375, _1176);\n        highp float _1248 = 0.0;\n        for (int SPIRV_Cross_Dummy479 = 0; SPIRV_Cross_Dummy479 < 1; SPIRV_Cross_Dummy479++)\n        {\n            if (_1184 > 1.0)\n            {\n                _1248 = 1.0;\n                break;\n            }\n            highp float _1202 = _1184 - 0.001000000047497451305389404296875;\n            highp vec2 _1206 = ((_1171.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1213 = fract(_1206 * vec2(2048.0));\n            highp float _1241 = _1213.y;\n            _1248 = mix(mix(float(_1202 < dot(texture2D(u_shadowMapTex, _1206), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1202 < dot(texture2D(u_shadowMapTex, _1206 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1241), mix(float(_1202 < dot(texture2D(u_shadowMapTex, _1206 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1202 < dot(texture2D(u_shadowMapTex, _1206 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1241), _1213.x);\n            break;\n        }\n        _1251 = _1248;\n    }\n    else\n    {\n        _1251 = _1146;\n    }\n    highp vec4 _604 = vec4(_551.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_554, _560))) * _1251)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _554), _560)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _551.w);\n    highp vec3 _620 = _604.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_620.x, _620.y, _620.z, _604.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _714 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _722 = (_714 * _Color) * _AlbedoIntensity;\n    highp float _724 = _722.w;\n    if ((_724 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _745 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _809 = (_745.xy - vec2(0.5)) * 2.0;\n    highp vec4 _863 = vec4(varying_ShadowPosition, 1.0);\n    highp float _867 = -(u_view * _863).z;\n    bool _880 = true && (_867 < u_csmFarBounds.x);\n    highp float _1247 = 0.0;\n    if (_880)\n    {\n        highp vec3 _895 = ((u_csmLightSpaceMatrices[0] * _863).xyz * 0.5) + vec3(0.5);\n        highp float _899 = _895.x;\n        highp float _903 = _895.y;\n        highp float _913 = (((_895.z + step(_899, 0.001000000047497451305389404296875)) + step(_903, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _899)) + step(0.999000012874603271484375, _903);\n        highp float _1244 = 0.0;\n        for (int SPIRV_Cross_Dummy275 = 0; SPIRV_Cross_Dummy275 < 1; SPIRV_Cross_Dummy275++)\n        {\n            if (_913 > 1.0)\n            {\n                _1244 = 1.0;\n                break;\n            }\n            highp float _964 = _913 - 0.001000000047497451305389404296875;\n            highp vec2 _970 = ((_895.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _981 = fract(_970 * vec2(2048.0));\n            highp float _1036 = _981.y;\n            _1244 = mix(mix(float(_964 < dot(texture2D(u_shadowMapTex, _970), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_964 < dot(texture2D(u_shadowMapTex, _970 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1036), mix(float(_964 < dot(texture2D(u_shadowMapTex, _970 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_964 < dot(texture2D(u_shadowMapTex, _970 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1036), _981.x);\n            break;\n        }\n        _1247 = _1244;\n    }\n    else\n    {\n        _1247 = 1.0;\n    }\n    bool _1575 = _880 ? true : false;\n    bool _1266 = (!_1575) && (_867 < u_csmFarBounds.y);\n    highp float _1357 = 0.0;\n    if (_1266)\n    {\n        highp vec3 _1277 = ((u_csmLightSpaceMatrices[1] * _863).xyz * 0.5) + vec3(0.5);\n        highp float _1279 = _1277.x;\n        highp float _1282 = _1277.y;\n        highp float _1290 = (((_1277.z + step(_1279, 0.001000000047497451305389404296875)) + step(_1282, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1279)) + step(0.999000012874603271484375, _1282);\n        highp float _1354 = 0.0;\n        for (int SPIRV_Cross_Dummy351 = 0; SPIRV_Cross_Dummy351 < 1; SPIRV_Cross_Dummy351++)\n        {\n            if (_1290 > 1.0)\n            {\n                _1354 = 1.0;\n                break;\n            }\n            highp float _1308 = _1290 - 0.001000000047497451305389404296875;\n            highp vec2 _1312 = ((_1277.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1319 = fract(_1312 * vec2(2048.0));\n            highp float _1347 = _1319.y;\n            _1354 = mix(mix(float(_1308 < dot(texture2D(u_shadowMapTex, _1312), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1308 < dot(texture2D(u_shadowMapTex, _1312 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1347), mix(float(_1308 < dot(texture2D(u_shadowMapTex, _1312 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1308 < dot(texture2D(u_shadowMapTex, _1312 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1347), _1319.x);\n            break;\n        }\n        _1357 = _1354;\n    }\n    else\n    {\n        _1357 = _1247;\n    }\n    bool _1576 = _1266 ? true : _1575;\n    bool _1371 = (!_1576) && (_867 < u_csmFarBounds.z);\n    highp float _1462 = 0.0;\n    if (_1371)\n    {\n        highp vec3 _1382 = ((u_csmLightSpaceMatrices[2] * _863).xyz * 0.5) + vec3(0.5);\n        highp float _1384 = _1382.x;\n        highp float _1387 = _1382.y;\n        highp float _1395 = (((_1382.z + step(_1384, 0.001000000047497451305389404296875)) + step(_1387, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1384)) + step(0.999000012874603271484375, _1387);\n        highp float _1459 = 0.0;\n        for (int SPIRV_Cross_Dummy427 = 0; SPIRV_Cross_Dummy427 < 1; SPIRV_Cross_Dummy427++)\n        {\n            if (_1395 > 1.0)\n            {\n                _1459 = 1.0;\n                break;\n            }\n            highp float _1413 = _1395 - 0.001000000047497451305389404296875;\n            highp vec2 _1417 = ((_1382.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1424 = fract(_1417 * vec2(2048.0));\n            highp float _1452 = _1424.y;\n            _1459 = mix(mix(float(_1413 < dot(texture2D(u_shadowMapTex, _1417), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1413 < dot(texture2D(u_shadowMapTex, _1417 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1452), mix(float(_1413 < dot(texture2D(u_shadowMapTex, _1417 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1413 < dot(texture2D(u_shadowMapTex, _1417 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1452), _1424.x);\n            break;\n        }\n        _1462 = _1459;\n    }\n    else\n    {\n        _1462 = _1357;\n    }\n    highp float _1567 = 0.0;\n    if ((!(_1371 ? true : _1576)) && (_867 < u_csmFarBounds.w))\n    {\n        highp vec3 _1487 = ((u_csmLightSpaceMatrices[3] * _863).xyz * 0.5) + vec3(0.5);\n        highp float _1489 = _1487.x;\n        highp float _1492 = _1487.y;\n        highp float _1500 = (((_1487.z + step(_1489, 0.001000000047497451305389404296875)) + step(_1492, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1489)) + step(0.999000012874603271484375, _1492);\n        highp float _1564 = 0.0;\n        for (int SPIRV_Cross_Dummy497 = 0; SPIRV_Cross_Dummy497 < 1; SPIRV_Cross_Dummy497++)\n        {\n            if (_1500 > 1.0)\n            {\n                _1564 = 1.0;\n                break;\n            }\n            highp float _1518 = _1500 - 0.001000000047497451305389404296875;\n            highp vec2 _1522 = ((_1487.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1529 = fract(_1522 * vec2(2048.0));\n            highp float _1557 = _1529.y;\n            _1564 = mix(mix(float(_1518 < dot(texture2D(u_shadowMapTex, _1522), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1518 < dot(texture2D(u_shadowMapTex, _1522 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1557), mix(float(_1518 < dot(texture2D(u_shadowMapTex, _1522 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1518 < dot(texture2D(u_shadowMapTex, _1522 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1557), _1529.x);\n            break;\n        }\n        _1567 = _1564;\n    }\n    else\n    {\n        _1567 = _1462;\n    }\n    highp vec4 _765 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _767 = _765.xyz * 2.0;\n    highp vec4 _791 = vec4(_722.xyz * (min(_767, mix(max(_767 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1567))), u_shadowColor), _767, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_809, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_809, _809)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _714.w))), _724);\n    highp float _1122 = length(varying_positionCamera_Fog);\n    highp float _1237 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1237 = (u_fogInfos.z - _1122) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1238 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1238 = 1.0 / pow(2.7182800769805908203125, _1122 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1239 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1239 = 1.0 / pow(2.7182800769805908203125, ((_1122 * _1122) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1239 = 1.0;\n            }\n            _1238 = _1239;\n        }\n        _1237 = _1238;\n    }\n    highp float _1168 = clamp(_1237, 0.0, 1.0);\n    highp vec3 _1177 = (_791.xyz * _1168) + (u_fogColor * (1.0 - _1168));\n    gl_FragData[0] = vec4(_1177.x, _1177.y, _1177.z, _791.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _379 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _387 = (_379 * _Color) * _AlbedoIntensity;\n    highp vec3 _390 = normalize(varying_LightDir);\n    highp vec3 _396 = normalize(varying_WorldNormal);\n    highp vec4 _418 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _437 = vec4(_387.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_390, _396))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _390), _396)), _Shininess * 128.0)) * (_418.xyz * _SpecColor.xyz))), _387.w);\n    highp vec4 _443 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _498 = length(varying_positionCamera_Fog);\n    highp float _580 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _580 = (u_fogInfos.z - _498) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _581 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _581 = 1.0 / pow(2.7182800769805908203125, _498 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _582 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _582 = 1.0 / pow(2.7182800769805908203125, ((_498 * _498) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _582 = 1.0;\n            }\n            _581 = _582;\n        }\n        _580 = _581;\n    }\n    highp float _544 = clamp(_580, 0.0, 1.0);\n    highp vec3 _553 = ((_437.xyz + (_EmissionColor.xyz * _443.x)).xyz * _544) + (u_fogColor * (1.0 - _544));\n    gl_FragData[0] = vec4(_553.x, _553.y, _553.z, _437.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _684 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _692 = (_684 * _Color) * _AlbedoIntensity;\n    highp float _694 = _692.w;\n    if ((_694 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _709 = normalize(varying_WorldNormal);\n    highp vec4 _811 = vec4(varying_ShadowPosition, 1.0);\n    highp float _815 = -(u_view * _811).z;\n    bool _828 = true && (_815 < u_csmFarBounds.x);\n    highp float _1194 = 0.0;\n    if (_828)\n    {\n        highp vec3 _843 = ((u_csmLightSpaceMatrices[0] * _811).xyz * 0.5) + vec3(0.5);\n        highp float _847 = _843.x;\n        highp float _851 = _843.y;\n        highp float _861 = (((_843.z + step(_847, 0.001000000047497451305389404296875)) + step(_851, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _847)) + step(0.999000012874603271484375, _851);\n        highp float _1191 = 0.0;\n        for (int SPIRV_Cross_Dummy272 = 0; SPIRV_Cross_Dummy272 < 1; SPIRV_Cross_Dummy272++)\n        {\n            if (_861 > 1.0)\n            {\n                _1191 = 1.0;\n                break;\n            }\n            highp float _912 = _861 - 0.001000000047497451305389404296875;\n            highp vec2 _918 = ((_843.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _929 = fract(_918 * vec2(2048.0));\n            highp float _984 = _929.y;\n            _1191 = mix(mix(float(_912 < dot(texture2D(u_shadowMapTex, _918), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_912 < dot(texture2D(u_shadowMapTex, _918 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _984), mix(float(_912 < dot(texture2D(u_shadowMapTex, _918 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_912 < dot(texture2D(u_shadowMapTex, _918 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _984), _929.x);\n            break;\n        }\n        _1194 = _1191;\n    }\n    else\n    {\n        _1194 = 1.0;\n    }\n    bool _1521 = _828 ? true : false;\n    bool _1212 = (!_1521) && (_815 < u_csmFarBounds.y);\n    highp float _1303 = 0.0;\n    if (_1212)\n    {\n        highp vec3 _1223 = ((u_csmLightSpaceMatrices[1] * _811).xyz * 0.5) + vec3(0.5);\n        highp float _1225 = _1223.x;\n        highp float _1228 = _1223.y;\n        highp float _1236 = (((_1223.z + step(_1225, 0.001000000047497451305389404296875)) + step(_1228, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1225)) + step(0.999000012874603271484375, _1228);\n        highp float _1300 = 0.0;\n        for (int SPIRV_Cross_Dummy348 = 0; SPIRV_Cross_Dummy348 < 1; SPIRV_Cross_Dummy348++)\n        {\n            if (_1236 > 1.0)\n            {\n                _1300 = 1.0;\n                break;\n            }\n            highp float _1254 = _1236 - 0.001000000047497451305389404296875;\n            highp vec2 _1258 = ((_1223.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1265 = fract(_1258 * vec2(2048.0));\n            highp float _1293 = _1265.y;\n            _1300 = mix(mix(float(_1254 < dot(texture2D(u_shadowMapTex, _1258), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1254 < dot(texture2D(u_shadowMapTex, _1258 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1293), mix(float(_1254 < dot(texture2D(u_shadowMapTex, _1258 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1254 < dot(texture2D(u_shadowMapTex, _1258 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1293), _1265.x);\n            break;\n        }\n        _1303 = _1300;\n    }\n    else\n    {\n        _1303 = _1194;\n    }\n    bool _1522 = _1212 ? true : _1521;\n    bool _1317 = (!_1522) && (_815 < u_csmFarBounds.z);\n    highp float _1408 = 0.0;\n    if (_1317)\n    {\n        highp vec3 _1328 = ((u_csmLightSpaceMatrices[2] * _811).xyz * 0.5) + vec3(0.5);\n        highp float _1330 = _1328.x;\n        highp float _1333 = _1328.y;\n        highp float _1341 = (((_1328.z + step(_1330, 0.001000000047497451305389404296875)) + step(_1333, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1330)) + step(0.999000012874603271484375, _1333);\n        highp float _1405 = 0.0;\n        for (int SPIRV_Cross_Dummy424 = 0; SPIRV_Cross_Dummy424 < 1; SPIRV_Cross_Dummy424++)\n        {\n            if (_1341 > 1.0)\n            {\n                _1405 = 1.0;\n                break;\n            }\n            highp float _1359 = _1341 - 0.001000000047497451305389404296875;\n            highp vec2 _1363 = ((_1328.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1370 = fract(_1363 * vec2(2048.0));\n            highp float _1398 = _1370.y;\n            _1405 = mix(mix(float(_1359 < dot(texture2D(u_shadowMapTex, _1363), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1359 < dot(texture2D(u_shadowMapTex, _1363 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1398), mix(float(_1359 < dot(texture2D(u_shadowMapTex, _1363 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1359 < dot(texture2D(u_shadowMapTex, _1363 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1398), _1370.x);\n            break;\n        }\n        _1408 = _1405;\n    }\n    else\n    {\n        _1408 = _1303;\n    }\n    highp float _1513 = 0.0;\n    if ((!(_1317 ? true : _1522)) && (_815 < u_csmFarBounds.w))\n    {\n        highp vec3 _1433 = ((u_csmLightSpaceMatrices[3] * _811).xyz * 0.5) + vec3(0.5);\n        highp float _1435 = _1433.x;\n        highp float _1438 = _1433.y;\n        highp float _1446 = (((_1433.z + step(_1435, 0.001000000047497451305389404296875)) + step(_1438, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1435)) + step(0.999000012874603271484375, _1438);\n        highp float _1510 = 0.0;\n        for (int SPIRV_Cross_Dummy494 = 0; SPIRV_Cross_Dummy494 < 1; SPIRV_Cross_Dummy494++)\n        {\n            if (_1446 > 1.0)\n            {\n                _1510 = 1.0;\n                break;\n            }\n            highp float _1464 = _1446 - 0.001000000047497451305389404296875;\n            highp vec2 _1468 = ((_1433.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1475 = fract(_1468 * vec2(2048.0));\n            highp float _1503 = _1475.y;\n            _1510 = mix(mix(float(_1464 < dot(texture2D(u_shadowMapTex, _1468), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1464 < dot(texture2D(u_shadowMapTex, _1468 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1503), mix(float(_1464 < dot(texture2D(u_shadowMapTex, _1468 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1464 < dot(texture2D(u_shadowMapTex, _1468 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1503), _1475.x);\n            break;\n        }\n        _1513 = _1510;\n    }\n    else\n    {\n        _1513 = _1408;\n    }\n    highp vec4 _728 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _730 = _728.xyz * 2.0;\n    highp vec4 _740 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _759 = vec4(_692.xyz * (min(_730, mix(max(_730 - (u_lightColor * (clamp(dot(_709, u_lightDir), 0.0, 1.0) * (1.0 - _1513))), u_shadowColor), _730, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _709)), _Shininess * 128.0)) * (_740.xyz * _SpecColor.xyz))), _694);\n    highp float _1070 = length(varying_positionCamera_Fog);\n    highp float _1184 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1184 = (u_fogInfos.z - _1070) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1185 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1185 = 1.0 / pow(2.7182800769805908203125, _1070 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1186 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1186 = 1.0 / pow(2.7182800769805908203125, ((_1070 * _1070) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1186 = 1.0;\n            }\n            _1185 = _1186;\n        }\n        _1184 = _1185;\n    }\n    highp float _1116 = clamp(_1184, 0.0, 1.0);\n    highp vec3 _1125 = (_759.xyz * _1116) + (u_fogColor * (1.0 - _1116));\n    gl_FragData[0] = vec4(_1125.x, _1125.y, _1125.z, _759.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _633 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _641 = (_633 * _Color) * _AlbedoIntensity;\n    highp vec3 _644 = normalize(varying_LightDir);\n    highp vec3 _650 = normalize(varying_WorldNormal);\n    highp vec4 _763 = vec4(varying_ShadowPosition, 1.0);\n    highp float _767 = -(u_view * _763).z;\n    bool _780 = true && (_767 < u_csmFarBounds.x);\n    highp float _1104 = 0.0;\n    if (_780)\n    {\n        highp vec3 _795 = ((u_csmLightSpaceMatrices[0] * _763).xyz * 0.5) + vec3(0.5);\n        highp float _799 = _795.x;\n        highp float _803 = _795.y;\n        highp float _813 = (((_795.z + step(_799, 0.001000000047497451305389404296875)) + step(_803, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _799)) + step(0.999000012874603271484375, _803);\n        highp float _1101 = 0.0;\n        for (int SPIRV_Cross_Dummy261 = 0; SPIRV_Cross_Dummy261 < 1; SPIRV_Cross_Dummy261++)\n        {\n            if (_813 > 1.0)\n            {\n                _1101 = 1.0;\n                break;\n            }\n            highp float _864 = _813 - 0.001000000047497451305389404296875;\n            highp vec2 _870 = ((_795.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _881 = fract(_870 * vec2(2048.0));\n            highp float _936 = _881.y;\n            _1101 = mix(mix(float(_864 < dot(texture2D(u_shadowMapTex, _870), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_864 < dot(texture2D(u_shadowMapTex, _870 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _936), mix(float(_864 < dot(texture2D(u_shadowMapTex, _870 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_864 < dot(texture2D(u_shadowMapTex, _870 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _936), _881.x);\n            break;\n        }\n        _1104 = _1101;\n    }\n    else\n    {\n        _1104 = 1.0;\n    }\n    bool _1431 = _780 ? true : false;\n    bool _1122 = (!_1431) && (_767 < u_csmFarBounds.y);\n    highp float _1213 = 0.0;\n    if (_1122)\n    {\n        highp vec3 _1133 = ((u_csmLightSpaceMatrices[1] * _763).xyz * 0.5) + vec3(0.5);\n        highp float _1135 = _1133.x;\n        highp float _1138 = _1133.y;\n        highp float _1146 = (((_1133.z + step(_1135, 0.001000000047497451305389404296875)) + step(_1138, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1135)) + step(0.999000012874603271484375, _1138);\n        highp float _1210 = 0.0;\n        for (int SPIRV_Cross_Dummy337 = 0; SPIRV_Cross_Dummy337 < 1; SPIRV_Cross_Dummy337++)\n        {\n            if (_1146 > 1.0)\n            {\n                _1210 = 1.0;\n                break;\n            }\n            highp float _1164 = _1146 - 0.001000000047497451305389404296875;\n            highp vec2 _1168 = ((_1133.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1175 = fract(_1168 * vec2(2048.0));\n            highp float _1203 = _1175.y;\n            _1210 = mix(mix(float(_1164 < dot(texture2D(u_shadowMapTex, _1168), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1164 < dot(texture2D(u_shadowMapTex, _1168 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1203), mix(float(_1164 < dot(texture2D(u_shadowMapTex, _1168 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1164 < dot(texture2D(u_shadowMapTex, _1168 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1203), _1175.x);\n            break;\n        }\n        _1213 = _1210;\n    }\n    else\n    {\n        _1213 = _1104;\n    }\n    bool _1432 = _1122 ? true : _1431;\n    bool _1227 = (!_1432) && (_767 < u_csmFarBounds.z);\n    highp float _1318 = 0.0;\n    if (_1227)\n    {\n        highp vec3 _1238 = ((u_csmLightSpaceMatrices[2] * _763).xyz * 0.5) + vec3(0.5);\n        highp float _1240 = _1238.x;\n        highp float _1243 = _1238.y;\n        highp float _1251 = (((_1238.z + step(_1240, 0.001000000047497451305389404296875)) + step(_1243, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1240)) + step(0.999000012874603271484375, _1243);\n        highp float _1315 = 0.0;\n        for (int SPIRV_Cross_Dummy413 = 0; SPIRV_Cross_Dummy413 < 1; SPIRV_Cross_Dummy413++)\n        {\n            if (_1251 > 1.0)\n            {\n                _1315 = 1.0;\n                break;\n            }\n            highp float _1269 = _1251 - 0.001000000047497451305389404296875;\n            highp vec2 _1273 = ((_1238.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1280 = fract(_1273 * vec2(2048.0));\n            highp float _1308 = _1280.y;\n            _1315 = mix(mix(float(_1269 < dot(texture2D(u_shadowMapTex, _1273), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1269 < dot(texture2D(u_shadowMapTex, _1273 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1308), mix(float(_1269 < dot(texture2D(u_shadowMapTex, _1273 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1269 < dot(texture2D(u_shadowMapTex, _1273 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1308), _1280.x);\n            break;\n        }\n        _1318 = _1315;\n    }\n    else\n    {\n        _1318 = _1213;\n    }\n    highp float _1423 = 0.0;\n    if ((!(_1227 ? true : _1432)) && (_767 < u_csmFarBounds.w))\n    {\n        highp vec3 _1343 = ((u_csmLightSpaceMatrices[3] * _763).xyz * 0.5) + vec3(0.5);\n        highp float _1345 = _1343.x;\n        highp float _1348 = _1343.y;\n        highp float _1356 = (((_1343.z + step(_1345, 0.001000000047497451305389404296875)) + step(_1348, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1345)) + step(0.999000012874603271484375, _1348);\n        highp float _1420 = 0.0;\n        for (int SPIRV_Cross_Dummy483 = 0; SPIRV_Cross_Dummy483 < 1; SPIRV_Cross_Dummy483++)\n        {\n            if (_1356 > 1.0)\n            {\n                _1420 = 1.0;\n                break;\n            }\n            highp float _1374 = _1356 - 0.001000000047497451305389404296875;\n            highp vec2 _1378 = ((_1343.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1385 = fract(_1378 * vec2(2048.0));\n            highp float _1413 = _1385.y;\n            _1420 = mix(mix(float(_1374 < dot(texture2D(u_shadowMapTex, _1378), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1374 < dot(texture2D(u_shadowMapTex, _1378 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1413), mix(float(_1374 < dot(texture2D(u_shadowMapTex, _1378 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1374 < dot(texture2D(u_shadowMapTex, _1378 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1413), _1385.x);\n            break;\n        }\n        _1423 = _1420;\n    }\n    else\n    {\n        _1423 = _1318;\n    }\n    highp vec4 _675 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _694 = vec4(_641.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_644, _650))) * _1423)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _644), _650)), _Shininess * 128.0)) * (_675.xyz * _SpecColor.xyz))), _641.w);\n    highp vec4 _700 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _984 = length(varying_positionCamera_Fog);\n    highp float _1094 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1094 = (u_fogInfos.z - _984) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1095 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1095 = 1.0 / pow(2.7182800769805908203125, _984 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1096 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1096 = 1.0 / pow(2.7182800769805908203125, ((_984 * _984) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1096 = 1.0;\n            }\n            _1095 = _1096;\n        }\n        _1094 = _1095;\n    }\n    highp float _1030 = clamp(_1094, 0.0, 1.0);\n    highp vec3 _1039 = ((_694.xyz + (_EmissionColor.xyz * _700.x)).xyz * _1030) + (u_fogColor * (1.0 - _1030));\n    gl_FragData[0] = vec4(_1039.x, _1039.y, _1039.z, _694.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _358 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _366 = (_358 * _Color) * _AlbedoIntensity;\n    highp float _368 = _366.w;\n    if ((_368 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _401 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _425 = vec4(_366.xyz * (min(_401, mix(max(_401, u_shadowColor), _401, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_SpecColor.xyz * _358.w))), _368);\n    highp vec3 _441 = _425.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_441.x, _441.y, _441.z, _425.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _631 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _639 = (_631 * _Color) * _AlbedoIntensity;\n    highp vec3 _642 = normalize(varying_LightDir);\n    highp vec3 _648 = normalize(varying_WorldNormal);\n    highp vec4 _761 = vec4(varying_ShadowPosition, 1.0);\n    highp float _765 = -(u_view * _761).z;\n    bool _778 = true && (_765 < u_csmFarBounds.x);\n    highp float _1102 = 0.0;\n    if (_778)\n    {\n        highp vec3 _793 = ((u_csmLightSpaceMatrices[0] * _761).xyz * 0.5) + vec3(0.5);\n        highp float _797 = _793.x;\n        highp float _801 = _793.y;\n        highp float _811 = (((_793.z + step(_797, 0.001000000047497451305389404296875)) + step(_801, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _797)) + step(0.999000012874603271484375, _801);\n        highp float _1099 = 0.0;\n        for (int SPIRV_Cross_Dummy261 = 0; SPIRV_Cross_Dummy261 < 1; SPIRV_Cross_Dummy261++)\n        {\n            if (_811 > 1.0)\n            {\n                _1099 = 1.0;\n                break;\n            }\n            highp float _862 = _811 - 0.001000000047497451305389404296875;\n            highp vec2 _868 = ((_793.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _879 = fract(_868 * vec2(2048.0));\n            highp float _934 = _879.y;\n            _1099 = mix(mix(float(_862 < dot(texture2D(u_shadowMapTex, _868), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_862 < dot(texture2D(u_shadowMapTex, _868 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _934), mix(float(_862 < dot(texture2D(u_shadowMapTex, _868 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_862 < dot(texture2D(u_shadowMapTex, _868 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _934), _879.x);\n            break;\n        }\n        _1102 = _1099;\n    }\n    else\n    {\n        _1102 = 1.0;\n    }\n    bool _1429 = _778 ? true : false;\n    bool _1120 = (!_1429) && (_765 < u_csmFarBounds.y);\n    highp float _1211 = 0.0;\n    if (_1120)\n    {\n        highp vec3 _1131 = ((u_csmLightSpaceMatrices[1] * _761).xyz * 0.5) + vec3(0.5);\n        highp float _1133 = _1131.x;\n        highp float _1136 = _1131.y;\n        highp float _1144 = (((_1131.z + step(_1133, 0.001000000047497451305389404296875)) + step(_1136, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1133)) + step(0.999000012874603271484375, _1136);\n        highp float _1208 = 0.0;\n        for (int SPIRV_Cross_Dummy337 = 0; SPIRV_Cross_Dummy337 < 1; SPIRV_Cross_Dummy337++)\n        {\n            if (_1144 > 1.0)\n            {\n                _1208 = 1.0;\n                break;\n            }\n            highp float _1162 = _1144 - 0.001000000047497451305389404296875;\n            highp vec2 _1166 = ((_1131.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1173 = fract(_1166 * vec2(2048.0));\n            highp float _1201 = _1173.y;\n            _1208 = mix(mix(float(_1162 < dot(texture2D(u_shadowMapTex, _1166), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1162 < dot(texture2D(u_shadowMapTex, _1166 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1201), mix(float(_1162 < dot(texture2D(u_shadowMapTex, _1166 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1162 < dot(texture2D(u_shadowMapTex, _1166 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1201), _1173.x);\n            break;\n        }\n        _1211 = _1208;\n    }\n    else\n    {\n        _1211 = _1102;\n    }\n    bool _1430 = _1120 ? true : _1429;\n    bool _1225 = (!_1430) && (_765 < u_csmFarBounds.z);\n    highp float _1316 = 0.0;\n    if (_1225)\n    {\n        highp vec3 _1236 = ((u_csmLightSpaceMatrices[2] * _761).xyz * 0.5) + vec3(0.5);\n        highp float _1238 = _1236.x;\n        highp float _1241 = _1236.y;\n        highp float _1249 = (((_1236.z + step(_1238, 0.001000000047497451305389404296875)) + step(_1241, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1238)) + step(0.999000012874603271484375, _1241);\n        highp float _1313 = 0.0;\n        for (int SPIRV_Cross_Dummy413 = 0; SPIRV_Cross_Dummy413 < 1; SPIRV_Cross_Dummy413++)\n        {\n            if (_1249 > 1.0)\n            {\n                _1313 = 1.0;\n                break;\n            }\n            highp float _1267 = _1249 - 0.001000000047497451305389404296875;\n            highp vec2 _1271 = ((_1236.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1278 = fract(_1271 * vec2(2048.0));\n            highp float _1306 = _1278.y;\n            _1313 = mix(mix(float(_1267 < dot(texture2D(u_shadowMapTex, _1271), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1267 < dot(texture2D(u_shadowMapTex, _1271 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1306), mix(float(_1267 < dot(texture2D(u_shadowMapTex, _1271 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1267 < dot(texture2D(u_shadowMapTex, _1271 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1306), _1278.x);\n            break;\n        }\n        _1316 = _1313;\n    }\n    else\n    {\n        _1316 = _1211;\n    }\n    highp float _1421 = 0.0;\n    if ((!(_1225 ? true : _1430)) && (_765 < u_csmFarBounds.w))\n    {\n        highp vec3 _1341 = ((u_csmLightSpaceMatrices[3] * _761).xyz * 0.5) + vec3(0.5);\n        highp float _1343 = _1341.x;\n        highp float _1346 = _1341.y;\n        highp float _1354 = (((_1341.z + step(_1343, 0.001000000047497451305389404296875)) + step(_1346, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1343)) + step(0.999000012874603271484375, _1346);\n        highp float _1418 = 0.0;\n        for (int SPIRV_Cross_Dummy483 = 0; SPIRV_Cross_Dummy483 < 1; SPIRV_Cross_Dummy483++)\n        {\n            if (_1354 > 1.0)\n            {\n                _1418 = 1.0;\n                break;\n            }\n            highp float _1372 = _1354 - 0.001000000047497451305389404296875;\n            highp vec2 _1376 = ((_1341.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1383 = fract(_1376 * vec2(2048.0));\n            highp float _1411 = _1383.y;\n            _1418 = mix(mix(float(_1372 < dot(texture2D(u_shadowMapTex, _1376), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1372 < dot(texture2D(u_shadowMapTex, _1376 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1411), mix(float(_1372 < dot(texture2D(u_shadowMapTex, _1376 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1372 < dot(texture2D(u_shadowMapTex, _1376 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1411), _1383.x);\n            break;\n        }\n        _1421 = _1418;\n    }\n    else\n    {\n        _1421 = _1316;\n    }\n    highp vec4 _673 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _692 = vec4(_639.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_642, _648))) * _1421)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _642), _648)), _Shininess * 128.0)) * (_673.xyz * _SpecColor.xyz))), _639.w);\n    highp vec4 _698 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _982 = length(varying_positionCamera_Fog);\n    highp float _1092 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1092 = (u_fogInfos.z - _982) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1093 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1093 = 1.0 / pow(2.7182800769805908203125, _982 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1094 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1094 = 1.0 / pow(2.7182800769805908203125, ((_982 * _982) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1094 = 1.0;\n            }\n            _1093 = _1094;\n        }\n        _1092 = _1093;\n    }\n    highp float _1028 = clamp(_1092, 0.0, 1.0);\n    highp vec3 _1037 = ((_692.xyz + (_EmissionColor.xyz * _698.x)).xyz * _1028) + (u_fogColor * (1.0 - _1028));\n    gl_FragData[0] = vec4(_1037.x, _1037.y, _1037.z, _692.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _564 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _572 = (_564 * _Color) * _AlbedoIntensity;\n    highp float _574 = _572.w;\n    if ((_574 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _583 = normalize(varying_LightDir);\n    highp vec4 _595 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _646 = (_595.xy - vec2(0.5)) * 2.0;\n    highp vec3 _657 = vec3(_646, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_646, _646))));\n    highp vec4 _700 = vec4(varying_ShadowPosition, 1.0);\n    highp float _704 = -(u_view * _700).z;\n    bool _717 = true && (_704 < u_csmFarBounds.x);\n    highp float _966 = 0.0;\n    if (_717)\n    {\n        highp vec3 _732 = ((u_csmLightSpaceMatrices[0] * _700).xyz * 0.5) + vec3(0.5);\n        highp float _736 = _732.x;\n        highp float _740 = _732.y;\n        highp float _750 = (((_732.z + step(_736, 0.001000000047497451305389404296875)) + step(_740, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _736)) + step(0.999000012874603271484375, _740);\n        highp float _963 = 0.0;\n        for (int SPIRV_Cross_Dummy266 = 0; SPIRV_Cross_Dummy266 < 1; SPIRV_Cross_Dummy266++)\n        {\n            if (_750 > 1.0)\n            {\n                _963 = 1.0;\n                break;\n            }\n            highp float _801 = _750 - 0.001000000047497451305389404296875;\n            highp vec2 _807 = ((_732.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _818 = fract(_807 * vec2(2048.0));\n            highp float _873 = _818.y;\n            _963 = mix(mix(float(_801 < dot(texture2D(u_shadowMapTex, _807), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_801 < dot(texture2D(u_shadowMapTex, _807 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _873), mix(float(_801 < dot(texture2D(u_shadowMapTex, _807 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_801 < dot(texture2D(u_shadowMapTex, _807 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _873), _818.x);\n            break;\n        }\n        _966 = _963;\n    }\n    else\n    {\n        _966 = 1.0;\n    }\n    bool _1294 = _717 ? true : false;\n    bool _985 = (!_1294) && (_704 < u_csmFarBounds.y);\n    highp float _1076 = 0.0;\n    if (_985)\n    {\n        highp vec3 _996 = ((u_csmLightSpaceMatrices[1] * _700).xyz * 0.5) + vec3(0.5);\n        highp float _998 = _996.x;\n        highp float _1001 = _996.y;\n        highp float _1009 = (((_996.z + step(_998, 0.001000000047497451305389404296875)) + step(_1001, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _998)) + step(0.999000012874603271484375, _1001);\n        highp float _1073 = 0.0;\n        for (int SPIRV_Cross_Dummy342 = 0; SPIRV_Cross_Dummy342 < 1; SPIRV_Cross_Dummy342++)\n        {\n            if (_1009 > 1.0)\n            {\n                _1073 = 1.0;\n                break;\n            }\n            highp float _1027 = _1009 - 0.001000000047497451305389404296875;\n            highp vec2 _1031 = ((_996.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1038 = fract(_1031 * vec2(2048.0));\n            highp float _1066 = _1038.y;\n            _1073 = mix(mix(float(_1027 < dot(texture2D(u_shadowMapTex, _1031), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1027 < dot(texture2D(u_shadowMapTex, _1031 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1066), mix(float(_1027 < dot(texture2D(u_shadowMapTex, _1031 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1027 < dot(texture2D(u_shadowMapTex, _1031 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1066), _1038.x);\n            break;\n        }\n        _1076 = _1073;\n    }\n    else\n    {\n        _1076 = _966;\n    }\n    bool _1295 = _985 ? true : _1294;\n    bool _1090 = (!_1295) && (_704 < u_csmFarBounds.z);\n    highp float _1181 = 0.0;\n    if (_1090)\n    {\n        highp vec3 _1101 = ((u_csmLightSpaceMatrices[2] * _700).xyz * 0.5) + vec3(0.5);\n        highp float _1103 = _1101.x;\n        highp float _1106 = _1101.y;\n        highp float _1114 = (((_1101.z + step(_1103, 0.001000000047497451305389404296875)) + step(_1106, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1103)) + step(0.999000012874603271484375, _1106);\n        highp float _1178 = 0.0;\n        for (int SPIRV_Cross_Dummy418 = 0; SPIRV_Cross_Dummy418 < 1; SPIRV_Cross_Dummy418++)\n        {\n            if (_1114 > 1.0)\n            {\n                _1178 = 1.0;\n                break;\n            }\n            highp float _1132 = _1114 - 0.001000000047497451305389404296875;\n            highp vec2 _1136 = ((_1101.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1143 = fract(_1136 * vec2(2048.0));\n            highp float _1171 = _1143.y;\n            _1178 = mix(mix(float(_1132 < dot(texture2D(u_shadowMapTex, _1136), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1132 < dot(texture2D(u_shadowMapTex, _1136 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1171), mix(float(_1132 < dot(texture2D(u_shadowMapTex, _1136 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1132 < dot(texture2D(u_shadowMapTex, _1136 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1171), _1143.x);\n            break;\n        }\n        _1181 = _1178;\n    }\n    else\n    {\n        _1181 = _1076;\n    }\n    highp float _1286 = 0.0;\n    if ((!(_1090 ? true : _1295)) && (_704 < u_csmFarBounds.w))\n    {\n        highp vec3 _1206 = ((u_csmLightSpaceMatrices[3] * _700).xyz * 0.5) + vec3(0.5);\n        highp float _1208 = _1206.x;\n        highp float _1211 = _1206.y;\n        highp float _1219 = (((_1206.z + step(_1208, 0.001000000047497451305389404296875)) + step(_1211, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1208)) + step(0.999000012874603271484375, _1211);\n        highp float _1283 = 0.0;\n        for (int SPIRV_Cross_Dummy488 = 0; SPIRV_Cross_Dummy488 < 1; SPIRV_Cross_Dummy488++)\n        {\n            if (_1219 > 1.0)\n            {\n                _1283 = 1.0;\n                break;\n            }\n            highp float _1237 = _1219 - 0.001000000047497451305389404296875;\n            highp vec2 _1241 = ((_1206.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1248 = fract(_1241 * vec2(2048.0));\n            highp float _1276 = _1248.y;\n            _1283 = mix(mix(float(_1237 < dot(texture2D(u_shadowMapTex, _1241), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1237 < dot(texture2D(u_shadowMapTex, _1241 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1276), mix(float(_1237 < dot(texture2D(u_shadowMapTex, _1241 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1237 < dot(texture2D(u_shadowMapTex, _1241 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1276), _1248.x);\n            break;\n        }\n        _1286 = _1283;\n    }\n    else\n    {\n        _1286 = _1181;\n    }\n    gl_FragData[0] = vec4(_572.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_583, _657))) * _1286)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _583), _657)), _Shininess * 128.0)) * (_SpecColor.xyz * _564.w))), _574);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _360 = (texture2D(_MainTex, varying_TexCoord) * _Color) * _AlbedoIntensity;\n    highp vec3 _387 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _416 = vec4(_360.xyz * (min(_387, mix(max(_387, u_shadowColor), _387, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _360.w);\n    highp vec3 _432 = _416.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_432.x, _432.y, _432.z, _416.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _533 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _541 = (_533 * _Color) * _AlbedoIntensity;\n    highp float _543 = _541.w;\n    if ((_543 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _552 = normalize(varying_LightDir);\n    highp vec3 _558 = normalize(varying_WorldNormal);\n    highp vec4 _647 = vec4(varying_ShadowPosition, 1.0);\n    highp float _651 = -(u_view * _647).z;\n    bool _664 = true && (_651 < u_csmFarBounds.x);\n    highp float _913 = 0.0;\n    if (_664)\n    {\n        highp vec3 _679 = ((u_csmLightSpaceMatrices[0] * _647).xyz * 0.5) + vec3(0.5);\n        highp float _683 = _679.x;\n        highp float _687 = _679.y;\n        highp float _697 = (((_679.z + step(_683, 0.001000000047497451305389404296875)) + step(_687, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _683)) + step(0.999000012874603271484375, _687);\n        highp float _910 = 0.0;\n        for (int SPIRV_Cross_Dummy264 = 0; SPIRV_Cross_Dummy264 < 1; SPIRV_Cross_Dummy264++)\n        {\n            if (_697 > 1.0)\n            {\n                _910 = 1.0;\n                break;\n            }\n            highp float _748 = _697 - 0.001000000047497451305389404296875;\n            highp vec2 _754 = ((_679.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _765 = fract(_754 * vec2(2048.0));\n            highp float _820 = _765.y;\n            _910 = mix(mix(float(_748 < dot(texture2D(u_shadowMapTex, _754), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_748 < dot(texture2D(u_shadowMapTex, _754 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _820), mix(float(_748 < dot(texture2D(u_shadowMapTex, _754 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_748 < dot(texture2D(u_shadowMapTex, _754 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _820), _765.x);\n            break;\n        }\n        _913 = _910;\n    }\n    else\n    {\n        _913 = 1.0;\n    }\n    bool _1240 = _664 ? true : false;\n    bool _931 = (!_1240) && (_651 < u_csmFarBounds.y);\n    highp float _1022 = 0.0;\n    if (_931)\n    {\n        highp vec3 _942 = ((u_csmLightSpaceMatrices[1] * _647).xyz * 0.5) + vec3(0.5);\n        highp float _944 = _942.x;\n        highp float _947 = _942.y;\n        highp float _955 = (((_942.z + step(_944, 0.001000000047497451305389404296875)) + step(_947, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _944)) + step(0.999000012874603271484375, _947);\n        highp float _1019 = 0.0;\n        for (int SPIRV_Cross_Dummy340 = 0; SPIRV_Cross_Dummy340 < 1; SPIRV_Cross_Dummy340++)\n        {\n            if (_955 > 1.0)\n            {\n                _1019 = 1.0;\n                break;\n            }\n            highp float _973 = _955 - 0.001000000047497451305389404296875;\n            highp vec2 _977 = ((_942.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _984 = fract(_977 * vec2(2048.0));\n            highp float _1012 = _984.y;\n            _1019 = mix(mix(float(_973 < dot(texture2D(u_shadowMapTex, _977), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_973 < dot(texture2D(u_shadowMapTex, _977 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1012), mix(float(_973 < dot(texture2D(u_shadowMapTex, _977 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_973 < dot(texture2D(u_shadowMapTex, _977 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1012), _984.x);\n            break;\n        }\n        _1022 = _1019;\n    }\n    else\n    {\n        _1022 = _913;\n    }\n    bool _1241 = _931 ? true : _1240;\n    bool _1036 = (!_1241) && (_651 < u_csmFarBounds.z);\n    highp float _1127 = 0.0;\n    if (_1036)\n    {\n        highp vec3 _1047 = ((u_csmLightSpaceMatrices[2] * _647).xyz * 0.5) + vec3(0.5);\n        highp float _1049 = _1047.x;\n        highp float _1052 = _1047.y;\n        highp float _1060 = (((_1047.z + step(_1049, 0.001000000047497451305389404296875)) + step(_1052, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1049)) + step(0.999000012874603271484375, _1052);\n        highp float _1124 = 0.0;\n        for (int SPIRV_Cross_Dummy416 = 0; SPIRV_Cross_Dummy416 < 1; SPIRV_Cross_Dummy416++)\n        {\n            if (_1060 > 1.0)\n            {\n                _1124 = 1.0;\n                break;\n            }\n            highp float _1078 = _1060 - 0.001000000047497451305389404296875;\n            highp vec2 _1082 = ((_1047.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1089 = fract(_1082 * vec2(2048.0));\n            highp float _1117 = _1089.y;\n            _1124 = mix(mix(float(_1078 < dot(texture2D(u_shadowMapTex, _1082), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1078 < dot(texture2D(u_shadowMapTex, _1082 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1117), mix(float(_1078 < dot(texture2D(u_shadowMapTex, _1082 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1078 < dot(texture2D(u_shadowMapTex, _1082 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1117), _1089.x);\n            break;\n        }\n        _1127 = _1124;\n    }\n    else\n    {\n        _1127 = _1022;\n    }\n    highp float _1232 = 0.0;\n    if ((!(_1036 ? true : _1241)) && (_651 < u_csmFarBounds.w))\n    {\n        highp vec3 _1152 = ((u_csmLightSpaceMatrices[3] * _647).xyz * 0.5) + vec3(0.5);\n        highp float _1154 = _1152.x;\n        highp float _1157 = _1152.y;\n        highp float _1165 = (((_1152.z + step(_1154, 0.001000000047497451305389404296875)) + step(_1157, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1154)) + step(0.999000012874603271484375, _1157);\n        highp float _1229 = 0.0;\n        for (int SPIRV_Cross_Dummy486 = 0; SPIRV_Cross_Dummy486 < 1; SPIRV_Cross_Dummy486++)\n        {\n            if (_1165 > 1.0)\n            {\n                _1229 = 1.0;\n                break;\n            }\n            highp float _1183 = _1165 - 0.001000000047497451305389404296875;\n            highp vec2 _1187 = ((_1152.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1194 = fract(_1187 * vec2(2048.0));\n            highp float _1222 = _1194.y;\n            _1229 = mix(mix(float(_1183 < dot(texture2D(u_shadowMapTex, _1187), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1183 < dot(texture2D(u_shadowMapTex, _1187 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1222), mix(float(_1183 < dot(texture2D(u_shadowMapTex, _1187 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1183 < dot(texture2D(u_shadowMapTex, _1187 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1222), _1194.x);\n            break;\n        }\n        _1232 = _1229;\n    }\n    else\n    {\n        _1232 = _1127;\n    }\n    gl_FragData[0] = vec4(_541.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_552, _558))) * _1232)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _552), _558)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _543);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _383 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _391 = (_383 * _Color) * _AlbedoIntensity;\n    highp float _393 = _391.w;\n    if ((_393 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _402 = normalize(varying_LightDir);\n    highp vec3 _408 = normalize(varying_WorldNormal);\n    highp vec4 _444 = vec4(_391.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_402, _408))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _402), _408)), _Shininess * 128.0)) * (_SpecColor.xyz * _383.w))), _393);\n    highp vec4 _450 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _506 = length(varying_positionCamera_Fog);\n    highp float _590 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _590 = (u_fogInfos.z - _506) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _591 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _591 = 1.0 / pow(2.7182800769805908203125, _506 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _592 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _592 = 1.0 / pow(2.7182800769805908203125, ((_506 * _506) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _592 = 1.0;\n            }\n            _591 = _592;\n        }\n        _590 = _591;\n    }\n    highp float _552 = clamp(_590, 0.0, 1.0);\n    highp vec3 _561 = ((_444.xyz + (_EmissionColor.xyz * _450.x)).xyz * _552) + (u_fogColor * (1.0 - _552));\n    gl_FragData[0] = vec4(_561.x, _561.y, _561.z, _444.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _610 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _618 = (_610 * _Color) * _AlbedoIntensity;\n    highp vec3 _627 = normalize(varying_WorldNormal);\n    highp vec4 _739 = vec4(varying_ShadowPosition, 1.0);\n    highp float _743 = -(u_view * _739).z;\n    bool _756 = true && (_743 < u_csmFarBounds.x);\n    highp float _1047 = 0.0;\n    if (_756)\n    {\n        highp vec3 _771 = ((u_csmLightSpaceMatrices[0] * _739).xyz * 0.5) + vec3(0.5);\n        highp float _775 = _771.x;\n        highp float _779 = _771.y;\n        highp float _789 = (((_771.z + step(_775, 0.001000000047497451305389404296875)) + step(_779, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _775)) + step(0.999000012874603271484375, _779);\n        highp float _1044 = 0.0;\n        for (int SPIRV_Cross_Dummy261 = 0; SPIRV_Cross_Dummy261 < 1; SPIRV_Cross_Dummy261++)\n        {\n            if (_789 > 1.0)\n            {\n                _1044 = 1.0;\n                break;\n            }\n            highp float _840 = _789 - 0.001000000047497451305389404296875;\n            highp vec2 _846 = ((_771.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _857 = fract(_846 * vec2(2048.0));\n            highp float _912 = _857.y;\n            _1044 = mix(mix(float(_840 < dot(texture2D(u_shadowMapTex, _846), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_840 < dot(texture2D(u_shadowMapTex, _846 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _912), mix(float(_840 < dot(texture2D(u_shadowMapTex, _846 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_840 < dot(texture2D(u_shadowMapTex, _846 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _912), _857.x);\n            break;\n        }\n        _1047 = _1044;\n    }\n    else\n    {\n        _1047 = 1.0;\n    }\n    bool _1373 = _756 ? true : false;\n    bool _1065 = (!_1373) && (_743 < u_csmFarBounds.y);\n    highp float _1156 = 0.0;\n    if (_1065)\n    {\n        highp vec3 _1076 = ((u_csmLightSpaceMatrices[1] * _739).xyz * 0.5) + vec3(0.5);\n        highp float _1078 = _1076.x;\n        highp float _1081 = _1076.y;\n        highp float _1089 = (((_1076.z + step(_1078, 0.001000000047497451305389404296875)) + step(_1081, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1078)) + step(0.999000012874603271484375, _1081);\n        highp float _1153 = 0.0;\n        for (int SPIRV_Cross_Dummy337 = 0; SPIRV_Cross_Dummy337 < 1; SPIRV_Cross_Dummy337++)\n        {\n            if (_1089 > 1.0)\n            {\n                _1153 = 1.0;\n                break;\n            }\n            highp float _1107 = _1089 - 0.001000000047497451305389404296875;\n            highp vec2 _1111 = ((_1076.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1118 = fract(_1111 * vec2(2048.0));\n            highp float _1146 = _1118.y;\n            _1153 = mix(mix(float(_1107 < dot(texture2D(u_shadowMapTex, _1111), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1107 < dot(texture2D(u_shadowMapTex, _1111 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1146), mix(float(_1107 < dot(texture2D(u_shadowMapTex, _1111 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1107 < dot(texture2D(u_shadowMapTex, _1111 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1146), _1118.x);\n            break;\n        }\n        _1156 = _1153;\n    }\n    else\n    {\n        _1156 = _1047;\n    }\n    bool _1374 = _1065 ? true : _1373;\n    bool _1170 = (!_1374) && (_743 < u_csmFarBounds.z);\n    highp float _1261 = 0.0;\n    if (_1170)\n    {\n        highp vec3 _1181 = ((u_csmLightSpaceMatrices[2] * _739).xyz * 0.5) + vec3(0.5);\n        highp float _1183 = _1181.x;\n        highp float _1186 = _1181.y;\n        highp float _1194 = (((_1181.z + step(_1183, 0.001000000047497451305389404296875)) + step(_1186, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1183)) + step(0.999000012874603271484375, _1186);\n        highp float _1258 = 0.0;\n        for (int SPIRV_Cross_Dummy413 = 0; SPIRV_Cross_Dummy413 < 1; SPIRV_Cross_Dummy413++)\n        {\n            if (_1194 > 1.0)\n            {\n                _1258 = 1.0;\n                break;\n            }\n            highp float _1212 = _1194 - 0.001000000047497451305389404296875;\n            highp vec2 _1216 = ((_1181.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1223 = fract(_1216 * vec2(2048.0));\n            highp float _1251 = _1223.y;\n            _1258 = mix(mix(float(_1212 < dot(texture2D(u_shadowMapTex, _1216), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1212 < dot(texture2D(u_shadowMapTex, _1216 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1251), mix(float(_1212 < dot(texture2D(u_shadowMapTex, _1216 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1212 < dot(texture2D(u_shadowMapTex, _1216 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1251), _1223.x);\n            break;\n        }\n        _1261 = _1258;\n    }\n    else\n    {\n        _1261 = _1156;\n    }\n    highp float _1366 = 0.0;\n    if ((!(_1170 ? true : _1374)) && (_743 < u_csmFarBounds.w))\n    {\n        highp vec3 _1286 = ((u_csmLightSpaceMatrices[3] * _739).xyz * 0.5) + vec3(0.5);\n        highp float _1288 = _1286.x;\n        highp float _1291 = _1286.y;\n        highp float _1299 = (((_1286.z + step(_1288, 0.001000000047497451305389404296875)) + step(_1291, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1288)) + step(0.999000012874603271484375, _1291);\n        highp float _1363 = 0.0;\n        for (int SPIRV_Cross_Dummy483 = 0; SPIRV_Cross_Dummy483 < 1; SPIRV_Cross_Dummy483++)\n        {\n            if (_1299 > 1.0)\n            {\n                _1363 = 1.0;\n                break;\n            }\n            highp float _1317 = _1299 - 0.001000000047497451305389404296875;\n            highp vec2 _1321 = ((_1286.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1328 = fract(_1321 * vec2(2048.0));\n            highp float _1356 = _1328.y;\n            _1363 = mix(mix(float(_1317 < dot(texture2D(u_shadowMapTex, _1321), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1317 < dot(texture2D(u_shadowMapTex, _1321 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1356), mix(float(_1317 < dot(texture2D(u_shadowMapTex, _1321 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1317 < dot(texture2D(u_shadowMapTex, _1321 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1356), _1328.x);\n            break;\n        }\n        _1366 = _1363;\n    }\n    else\n    {\n        _1366 = _1261;\n    }\n    highp vec3 _648 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _677 = vec4(_618.xyz * (min(_648, mix(max(_648 - (u_lightColor * (clamp(dot(_627, u_lightDir), 0.0, 1.0) * (1.0 - _1366))), u_shadowColor), _648, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _627)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _618.w);\n    highp vec3 _693 = _677.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_693.x, _693.y, _693.z, _677.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _608 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _616 = (_608 * _Color) * _AlbedoIntensity;\n    highp vec3 _625 = normalize(varying_WorldNormal);\n    highp vec4 _737 = vec4(varying_ShadowPosition, 1.0);\n    highp float _741 = -(u_view * _737).z;\n    bool _754 = true && (_741 < u_csmFarBounds.x);\n    highp float _1045 = 0.0;\n    if (_754)\n    {\n        highp vec3 _769 = ((u_csmLightSpaceMatrices[0] * _737).xyz * 0.5) + vec3(0.5);\n        highp float _773 = _769.x;\n        highp float _777 = _769.y;\n        highp float _787 = (((_769.z + step(_773, 0.001000000047497451305389404296875)) + step(_777, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _773)) + step(0.999000012874603271484375, _777);\n        highp float _1042 = 0.0;\n        for (int SPIRV_Cross_Dummy261 = 0; SPIRV_Cross_Dummy261 < 1; SPIRV_Cross_Dummy261++)\n        {\n            if (_787 > 1.0)\n            {\n                _1042 = 1.0;\n                break;\n            }\n            highp float _838 = _787 - 0.001000000047497451305389404296875;\n            highp vec2 _844 = ((_769.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _855 = fract(_844 * vec2(2048.0));\n            highp float _910 = _855.y;\n            _1042 = mix(mix(float(_838 < dot(texture2D(u_shadowMapTex, _844), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_838 < dot(texture2D(u_shadowMapTex, _844 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _910), mix(float(_838 < dot(texture2D(u_shadowMapTex, _844 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_838 < dot(texture2D(u_shadowMapTex, _844 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _910), _855.x);\n            break;\n        }\n        _1045 = _1042;\n    }\n    else\n    {\n        _1045 = 1.0;\n    }\n    bool _1371 = _754 ? true : false;\n    bool _1063 = (!_1371) && (_741 < u_csmFarBounds.y);\n    highp float _1154 = 0.0;\n    if (_1063)\n    {\n        highp vec3 _1074 = ((u_csmLightSpaceMatrices[1] * _737).xyz * 0.5) + vec3(0.5);\n        highp float _1076 = _1074.x;\n        highp float _1079 = _1074.y;\n        highp float _1087 = (((_1074.z + step(_1076, 0.001000000047497451305389404296875)) + step(_1079, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1076)) + step(0.999000012874603271484375, _1079);\n        highp float _1151 = 0.0;\n        for (int SPIRV_Cross_Dummy337 = 0; SPIRV_Cross_Dummy337 < 1; SPIRV_Cross_Dummy337++)\n        {\n            if (_1087 > 1.0)\n            {\n                _1151 = 1.0;\n                break;\n            }\n            highp float _1105 = _1087 - 0.001000000047497451305389404296875;\n            highp vec2 _1109 = ((_1074.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1116 = fract(_1109 * vec2(2048.0));\n            highp float _1144 = _1116.y;\n            _1151 = mix(mix(float(_1105 < dot(texture2D(u_shadowMapTex, _1109), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1105 < dot(texture2D(u_shadowMapTex, _1109 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1144), mix(float(_1105 < dot(texture2D(u_shadowMapTex, _1109 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1105 < dot(texture2D(u_shadowMapTex, _1109 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1144), _1116.x);\n            break;\n        }\n        _1154 = _1151;\n    }\n    else\n    {\n        _1154 = _1045;\n    }\n    bool _1372 = _1063 ? true : _1371;\n    bool _1168 = (!_1372) && (_741 < u_csmFarBounds.z);\n    highp float _1259 = 0.0;\n    if (_1168)\n    {\n        highp vec3 _1179 = ((u_csmLightSpaceMatrices[2] * _737).xyz * 0.5) + vec3(0.5);\n        highp float _1181 = _1179.x;\n        highp float _1184 = _1179.y;\n        highp float _1192 = (((_1179.z + step(_1181, 0.001000000047497451305389404296875)) + step(_1184, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1181)) + step(0.999000012874603271484375, _1184);\n        highp float _1256 = 0.0;\n        for (int SPIRV_Cross_Dummy413 = 0; SPIRV_Cross_Dummy413 < 1; SPIRV_Cross_Dummy413++)\n        {\n            if (_1192 > 1.0)\n            {\n                _1256 = 1.0;\n                break;\n            }\n            highp float _1210 = _1192 - 0.001000000047497451305389404296875;\n            highp vec2 _1214 = ((_1179.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1221 = fract(_1214 * vec2(2048.0));\n            highp float _1249 = _1221.y;\n            _1256 = mix(mix(float(_1210 < dot(texture2D(u_shadowMapTex, _1214), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1210 < dot(texture2D(u_shadowMapTex, _1214 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1249), mix(float(_1210 < dot(texture2D(u_shadowMapTex, _1214 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1210 < dot(texture2D(u_shadowMapTex, _1214 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1249), _1221.x);\n            break;\n        }\n        _1259 = _1256;\n    }\n    else\n    {\n        _1259 = _1154;\n    }\n    highp float _1364 = 0.0;\n    if ((!(_1168 ? true : _1372)) && (_741 < u_csmFarBounds.w))\n    {\n        highp vec3 _1284 = ((u_csmLightSpaceMatrices[3] * _737).xyz * 0.5) + vec3(0.5);\n        highp float _1286 = _1284.x;\n        highp float _1289 = _1284.y;\n        highp float _1297 = (((_1284.z + step(_1286, 0.001000000047497451305389404296875)) + step(_1289, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1286)) + step(0.999000012874603271484375, _1289);\n        highp float _1361 = 0.0;\n        for (int SPIRV_Cross_Dummy483 = 0; SPIRV_Cross_Dummy483 < 1; SPIRV_Cross_Dummy483++)\n        {\n            if (_1297 > 1.0)\n            {\n                _1361 = 1.0;\n                break;\n            }\n            highp float _1315 = _1297 - 0.001000000047497451305389404296875;\n            highp vec2 _1319 = ((_1284.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1326 = fract(_1319 * vec2(2048.0));\n            highp float _1354 = _1326.y;\n            _1361 = mix(mix(float(_1315 < dot(texture2D(u_shadowMapTex, _1319), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1315 < dot(texture2D(u_shadowMapTex, _1319 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1354), mix(float(_1315 < dot(texture2D(u_shadowMapTex, _1319 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1315 < dot(texture2D(u_shadowMapTex, _1319 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1354), _1326.x);\n            break;\n        }\n        _1364 = _1361;\n    }\n    else\n    {\n        _1364 = _1259;\n    }\n    highp vec3 _646 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _675 = vec4(_616.xyz * (min(_646, mix(max(_646 - (u_lightColor * (clamp(dot(_625, u_lightDir), 0.0, 1.0) * (1.0 - _1364))), u_shadowColor), _646, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _625)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _616.w);\n    highp vec3 _691 = _675.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_691.x, _691.y, _691.z, _675.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _620 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _628 = (_620 * _Color) * _AlbedoIntensity;\n    highp float _630 = _628.w;\n    if ((_630 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _639 = normalize(varying_LightDir);\n    highp vec3 _645 = normalize(varying_WorldNormal);\n    highp vec4 _741 = vec4(varying_ShadowPosition, 1.0);\n    highp float _745 = -(u_view * _741).z;\n    bool _758 = true && (_745 < u_csmFarBounds.x);\n    highp float _1082 = 0.0;\n    if (_758)\n    {\n        highp vec3 _773 = ((u_csmLightSpaceMatrices[0] * _741).xyz * 0.5) + vec3(0.5);\n        highp float _777 = _773.x;\n        highp float _781 = _773.y;\n        highp float _791 = (((_773.z + step(_777, 0.001000000047497451305389404296875)) + step(_781, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _777)) + step(0.999000012874603271484375, _781);\n        highp float _1079 = 0.0;\n        for (int SPIRV_Cross_Dummy268 = 0; SPIRV_Cross_Dummy268 < 1; SPIRV_Cross_Dummy268++)\n        {\n            if (_791 > 1.0)\n            {\n                _1079 = 1.0;\n                break;\n            }\n            highp float _842 = _791 - 0.001000000047497451305389404296875;\n            highp vec2 _848 = ((_773.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _859 = fract(_848 * vec2(2048.0));\n            highp float _914 = _859.y;\n            _1079 = mix(mix(float(_842 < dot(texture2D(u_shadowMapTex, _848), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_842 < dot(texture2D(u_shadowMapTex, _848 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _914), mix(float(_842 < dot(texture2D(u_shadowMapTex, _848 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_842 < dot(texture2D(u_shadowMapTex, _848 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _914), _859.x);\n            break;\n        }\n        _1082 = _1079;\n    }\n    else\n    {\n        _1082 = 1.0;\n    }\n    bool _1409 = _758 ? true : false;\n    bool _1100 = (!_1409) && (_745 < u_csmFarBounds.y);\n    highp float _1191 = 0.0;\n    if (_1100)\n    {\n        highp vec3 _1111 = ((u_csmLightSpaceMatrices[1] * _741).xyz * 0.5) + vec3(0.5);\n        highp float _1113 = _1111.x;\n        highp float _1116 = _1111.y;\n        highp float _1124 = (((_1111.z + step(_1113, 0.001000000047497451305389404296875)) + step(_1116, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1113)) + step(0.999000012874603271484375, _1116);\n        highp float _1188 = 0.0;\n        for (int SPIRV_Cross_Dummy344 = 0; SPIRV_Cross_Dummy344 < 1; SPIRV_Cross_Dummy344++)\n        {\n            if (_1124 > 1.0)\n            {\n                _1188 = 1.0;\n                break;\n            }\n            highp float _1142 = _1124 - 0.001000000047497451305389404296875;\n            highp vec2 _1146 = ((_1111.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1153 = fract(_1146 * vec2(2048.0));\n            highp float _1181 = _1153.y;\n            _1188 = mix(mix(float(_1142 < dot(texture2D(u_shadowMapTex, _1146), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1142 < dot(texture2D(u_shadowMapTex, _1146 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1181), mix(float(_1142 < dot(texture2D(u_shadowMapTex, _1146 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1142 < dot(texture2D(u_shadowMapTex, _1146 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1181), _1153.x);\n            break;\n        }\n        _1191 = _1188;\n    }\n    else\n    {\n        _1191 = _1082;\n    }\n    bool _1410 = _1100 ? true : _1409;\n    bool _1205 = (!_1410) && (_745 < u_csmFarBounds.z);\n    highp float _1296 = 0.0;\n    if (_1205)\n    {\n        highp vec3 _1216 = ((u_csmLightSpaceMatrices[2] * _741).xyz * 0.5) + vec3(0.5);\n        highp float _1218 = _1216.x;\n        highp float _1221 = _1216.y;\n        highp float _1229 = (((_1216.z + step(_1218, 0.001000000047497451305389404296875)) + step(_1221, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1218)) + step(0.999000012874603271484375, _1221);\n        highp float _1293 = 0.0;\n        for (int SPIRV_Cross_Dummy420 = 0; SPIRV_Cross_Dummy420 < 1; SPIRV_Cross_Dummy420++)\n        {\n            if (_1229 > 1.0)\n            {\n                _1293 = 1.0;\n                break;\n            }\n            highp float _1247 = _1229 - 0.001000000047497451305389404296875;\n            highp vec2 _1251 = ((_1216.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1258 = fract(_1251 * vec2(2048.0));\n            highp float _1286 = _1258.y;\n            _1293 = mix(mix(float(_1247 < dot(texture2D(u_shadowMapTex, _1251), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1247 < dot(texture2D(u_shadowMapTex, _1251 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1286), mix(float(_1247 < dot(texture2D(u_shadowMapTex, _1251 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1247 < dot(texture2D(u_shadowMapTex, _1251 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1286), _1258.x);\n            break;\n        }\n        _1296 = _1293;\n    }\n    else\n    {\n        _1296 = _1191;\n    }\n    highp float _1401 = 0.0;\n    if ((!(_1205 ? true : _1410)) && (_745 < u_csmFarBounds.w))\n    {\n        highp vec3 _1321 = ((u_csmLightSpaceMatrices[3] * _741).xyz * 0.5) + vec3(0.5);\n        highp float _1323 = _1321.x;\n        highp float _1326 = _1321.y;\n        highp float _1334 = (((_1321.z + step(_1323, 0.001000000047497451305389404296875)) + step(_1326, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1323)) + step(0.999000012874603271484375, _1326);\n        highp float _1398 = 0.0;\n        for (int SPIRV_Cross_Dummy490 = 0; SPIRV_Cross_Dummy490 < 1; SPIRV_Cross_Dummy490++)\n        {\n            if (_1334 > 1.0)\n            {\n                _1398 = 1.0;\n                break;\n            }\n            highp float _1352 = _1334 - 0.001000000047497451305389404296875;\n            highp vec2 _1356 = ((_1321.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1363 = fract(_1356 * vec2(2048.0));\n            highp float _1391 = _1363.y;\n            _1398 = mix(mix(float(_1352 < dot(texture2D(u_shadowMapTex, _1356), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1352 < dot(texture2D(u_shadowMapTex, _1356 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1391), mix(float(_1352 < dot(texture2D(u_shadowMapTex, _1356 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1352 < dot(texture2D(u_shadowMapTex, _1356 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1391), _1363.x);\n            break;\n        }\n        _1401 = _1398;\n    }\n    else\n    {\n        _1401 = _1296;\n    }\n    highp vec4 _670 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _689 = vec4(_628.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_639, _645))) * _1401)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _639), _645)), _Shininess * 128.0)) * (_670.xyz * _SpecColor.xyz))), _630);\n    highp float _962 = length(varying_positionCamera_Fog);\n    highp float _1072 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1072 = (u_fogInfos.z - _962) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1073 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1073 = 1.0 / pow(2.7182800769805908203125, _962 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1074 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1074 = 1.0 / pow(2.7182800769805908203125, ((_962 * _962) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1074 = 1.0;\n            }\n            _1073 = _1074;\n        }\n        _1072 = _1073;\n    }\n    highp float _1008 = clamp(_1072, 0.0, 1.0);\n    highp vec3 _1017 = (_689.xyz * _1008) + (u_fogColor * (1.0 - _1008));\n    gl_FragData[0] = vec4(_1017.x, _1017.y, _1017.z, _689.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _442 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _450 = (_442 * _Color) * _AlbedoIntensity;\n    highp vec4 _475 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _477 = _475.xyz * 2.0;\n    highp vec4 _487 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _506 = vec4(_450.xyz * (min(_477, mix(max(_477, u_shadowColor), _477, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_487.xyz * _SpecColor.xyz))), _450.w);\n    highp vec4 _512 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _605 = length(varying_positionCamera_Fog);\n    highp float _691 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _691 = (u_fogInfos.z - _605) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _692 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _692 = 1.0 / pow(2.7182800769805908203125, _605 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _693 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _693 = 1.0 / pow(2.7182800769805908203125, ((_605 * _605) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _693 = 1.0;\n            }\n            _692 = _693;\n        }\n        _691 = _692;\n    }\n    highp float _651 = clamp(_691, 0.0, 1.0);\n    highp vec3 _660 = ((_506.xyz + (_EmissionColor.xyz * _512.x)).xyz * _651) + (u_fogColor * (1.0 - _651));\n    gl_FragData[0] = vec4(_660.x, _660.y, _660.z, _506.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _650 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _658 = (_650 * _Color) * _AlbedoIntensity;\n    highp float _660 = _658.w;\n    if ((_660 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _669 = normalize(varying_LightDir);\n    highp vec4 _681 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _739 = (_681.xy - vec2(0.5)) * 2.0;\n    highp vec3 _750 = vec3(_739, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_739, _739))));\n    highp vec4 _793 = vec4(varying_ShadowPosition, 1.0);\n    highp float _797 = -(u_view * _793).z;\n    bool _810 = true && (_797 < u_csmFarBounds.x);\n    highp float _1134 = 0.0;\n    if (_810)\n    {\n        highp vec3 _825 = ((u_csmLightSpaceMatrices[0] * _793).xyz * 0.5) + vec3(0.5);\n        highp float _829 = _825.x;\n        highp float _833 = _825.y;\n        highp float _843 = (((_825.z + step(_829, 0.001000000047497451305389404296875)) + step(_833, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _829)) + step(0.999000012874603271484375, _833);\n        highp float _1131 = 0.0;\n        for (int SPIRV_Cross_Dummy270 = 0; SPIRV_Cross_Dummy270 < 1; SPIRV_Cross_Dummy270++)\n        {\n            if (_843 > 1.0)\n            {\n                _1131 = 1.0;\n                break;\n            }\n            highp float _894 = _843 - 0.001000000047497451305389404296875;\n            highp vec2 _900 = ((_825.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _911 = fract(_900 * vec2(2048.0));\n            highp float _966 = _911.y;\n            _1131 = mix(mix(float(_894 < dot(texture2D(u_shadowMapTex, _900), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_894 < dot(texture2D(u_shadowMapTex, _900 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _966), mix(float(_894 < dot(texture2D(u_shadowMapTex, _900 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_894 < dot(texture2D(u_shadowMapTex, _900 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _966), _911.x);\n            break;\n        }\n        _1134 = _1131;\n    }\n    else\n    {\n        _1134 = 1.0;\n    }\n    bool _1462 = _810 ? true : false;\n    bool _1153 = (!_1462) && (_797 < u_csmFarBounds.y);\n    highp float _1244 = 0.0;\n    if (_1153)\n    {\n        highp vec3 _1164 = ((u_csmLightSpaceMatrices[1] * _793).xyz * 0.5) + vec3(0.5);\n        highp float _1166 = _1164.x;\n        highp float _1169 = _1164.y;\n        highp float _1177 = (((_1164.z + step(_1166, 0.001000000047497451305389404296875)) + step(_1169, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1166)) + step(0.999000012874603271484375, _1169);\n        highp float _1241 = 0.0;\n        for (int SPIRV_Cross_Dummy346 = 0; SPIRV_Cross_Dummy346 < 1; SPIRV_Cross_Dummy346++)\n        {\n            if (_1177 > 1.0)\n            {\n                _1241 = 1.0;\n                break;\n            }\n            highp float _1195 = _1177 - 0.001000000047497451305389404296875;\n            highp vec2 _1199 = ((_1164.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1206 = fract(_1199 * vec2(2048.0));\n            highp float _1234 = _1206.y;\n            _1241 = mix(mix(float(_1195 < dot(texture2D(u_shadowMapTex, _1199), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1195 < dot(texture2D(u_shadowMapTex, _1199 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1234), mix(float(_1195 < dot(texture2D(u_shadowMapTex, _1199 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1195 < dot(texture2D(u_shadowMapTex, _1199 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1234), _1206.x);\n            break;\n        }\n        _1244 = _1241;\n    }\n    else\n    {\n        _1244 = _1134;\n    }\n    bool _1463 = _1153 ? true : _1462;\n    bool _1258 = (!_1463) && (_797 < u_csmFarBounds.z);\n    highp float _1349 = 0.0;\n    if (_1258)\n    {\n        highp vec3 _1269 = ((u_csmLightSpaceMatrices[2] * _793).xyz * 0.5) + vec3(0.5);\n        highp float _1271 = _1269.x;\n        highp float _1274 = _1269.y;\n        highp float _1282 = (((_1269.z + step(_1271, 0.001000000047497451305389404296875)) + step(_1274, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1271)) + step(0.999000012874603271484375, _1274);\n        highp float _1346 = 0.0;\n        for (int SPIRV_Cross_Dummy422 = 0; SPIRV_Cross_Dummy422 < 1; SPIRV_Cross_Dummy422++)\n        {\n            if (_1282 > 1.0)\n            {\n                _1346 = 1.0;\n                break;\n            }\n            highp float _1300 = _1282 - 0.001000000047497451305389404296875;\n            highp vec2 _1304 = ((_1269.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1311 = fract(_1304 * vec2(2048.0));\n            highp float _1339 = _1311.y;\n            _1346 = mix(mix(float(_1300 < dot(texture2D(u_shadowMapTex, _1304), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1300 < dot(texture2D(u_shadowMapTex, _1304 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1339), mix(float(_1300 < dot(texture2D(u_shadowMapTex, _1304 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1300 < dot(texture2D(u_shadowMapTex, _1304 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1339), _1311.x);\n            break;\n        }\n        _1349 = _1346;\n    }\n    else\n    {\n        _1349 = _1244;\n    }\n    highp float _1454 = 0.0;\n    if ((!(_1258 ? true : _1463)) && (_797 < u_csmFarBounds.w))\n    {\n        highp vec3 _1374 = ((u_csmLightSpaceMatrices[3] * _793).xyz * 0.5) + vec3(0.5);\n        highp float _1376 = _1374.x;\n        highp float _1379 = _1374.y;\n        highp float _1387 = (((_1374.z + step(_1376, 0.001000000047497451305389404296875)) + step(_1379, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1376)) + step(0.999000012874603271484375, _1379);\n        highp float _1451 = 0.0;\n        for (int SPIRV_Cross_Dummy492 = 0; SPIRV_Cross_Dummy492 < 1; SPIRV_Cross_Dummy492++)\n        {\n            if (_1387 > 1.0)\n            {\n                _1451 = 1.0;\n                break;\n            }\n            highp float _1405 = _1387 - 0.001000000047497451305389404296875;\n            highp vec2 _1409 = ((_1374.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1416 = fract(_1409 * vec2(2048.0));\n            highp float _1444 = _1416.y;\n            _1451 = mix(mix(float(_1405 < dot(texture2D(u_shadowMapTex, _1409), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1405 < dot(texture2D(u_shadowMapTex, _1409 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1444), mix(float(_1405 < dot(texture2D(u_shadowMapTex, _1409 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1405 < dot(texture2D(u_shadowMapTex, _1409 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1444), _1416.x);\n            break;\n        }\n        _1454 = _1451;\n    }\n    else\n    {\n        _1454 = _1349;\n    }\n    highp vec4 _721 = vec4(_658.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_669, _750))) * _1454)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _669), _750)), _Shininess * 128.0)) * (_SpecColor.xyz * _650.w))), _660);\n    highp float _1014 = length(varying_positionCamera_Fog);\n    highp float _1124 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1124 = (u_fogInfos.z - _1014) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1125 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1125 = 1.0 / pow(2.7182800769805908203125, _1014 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1126 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1126 = 1.0 / pow(2.7182800769805908203125, ((_1014 * _1014) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1126 = 1.0;\n            }\n            _1125 = _1126;\n        }\n        _1124 = _1125;\n    }\n    highp float _1060 = clamp(_1124, 0.0, 1.0);\n    highp vec3 _1069 = (_721.xyz * _1060) + (u_fogColor * (1.0 - _1060));\n    gl_FragData[0] = vec4(_1069.x, _1069.y, _1069.z, _721.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\n\nvoid main()\n{\n    highp vec4 _294 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _302 = (_294 * _Color) * _AlbedoIntensity;\n    highp float _304 = _302.w;\n    if ((_304 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _313 = normalize(varying_LightDir);\n    highp vec3 _319 = normalize(varying_WorldNormal);\n    highp vec4 _355 = vec4(_302.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_313, _319))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _313), _319)), _Shininess * 128.0)) * (_SpecColor.xyz * _294.w))), _304);\n    highp vec3 _371 = _355.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_371.x, _371.y, _371.z, _355.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _697 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _705 = (_697 * _Color) * _AlbedoIntensity;\n    highp vec3 _714 = normalize(varying_WorldNormal);\n    highp vec4 _833 = vec4(varying_ShadowPosition, 1.0);\n    highp float _837 = -(u_view * _833).z;\n    bool _850 = true && (_837 < u_csmFarBounds.x);\n    highp float _1216 = 0.0;\n    if (_850)\n    {\n        highp vec3 _865 = ((u_csmLightSpaceMatrices[0] * _833).xyz * 0.5) + vec3(0.5);\n        highp float _869 = _865.x;\n        highp float _873 = _865.y;\n        highp float _883 = (((_865.z + step(_869, 0.001000000047497451305389404296875)) + step(_873, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _869)) + step(0.999000012874603271484375, _873);\n        highp float _1213 = 0.0;\n        for (int SPIRV_Cross_Dummy265 = 0; SPIRV_Cross_Dummy265 < 1; SPIRV_Cross_Dummy265++)\n        {\n            if (_883 > 1.0)\n            {\n                _1213 = 1.0;\n                break;\n            }\n            highp float _934 = _883 - 0.001000000047497451305389404296875;\n            highp vec2 _940 = ((_865.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _951 = fract(_940 * vec2(2048.0));\n            highp float _1006 = _951.y;\n            _1213 = mix(mix(float(_934 < dot(texture2D(u_shadowMapTex, _940), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_934 < dot(texture2D(u_shadowMapTex, _940 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1006), mix(float(_934 < dot(texture2D(u_shadowMapTex, _940 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_934 < dot(texture2D(u_shadowMapTex, _940 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1006), _951.x);\n            break;\n        }\n        _1216 = _1213;\n    }\n    else\n    {\n        _1216 = 1.0;\n    }\n    bool _1543 = _850 ? true : false;\n    bool _1234 = (!_1543) && (_837 < u_csmFarBounds.y);\n    highp float _1325 = 0.0;\n    if (_1234)\n    {\n        highp vec3 _1245 = ((u_csmLightSpaceMatrices[1] * _833).xyz * 0.5) + vec3(0.5);\n        highp float _1247 = _1245.x;\n        highp float _1250 = _1245.y;\n        highp float _1258 = (((_1245.z + step(_1247, 0.001000000047497451305389404296875)) + step(_1250, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1247)) + step(0.999000012874603271484375, _1250);\n        highp float _1322 = 0.0;\n        for (int SPIRV_Cross_Dummy341 = 0; SPIRV_Cross_Dummy341 < 1; SPIRV_Cross_Dummy341++)\n        {\n            if (_1258 > 1.0)\n            {\n                _1322 = 1.0;\n                break;\n            }\n            highp float _1276 = _1258 - 0.001000000047497451305389404296875;\n            highp vec2 _1280 = ((_1245.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1287 = fract(_1280 * vec2(2048.0));\n            highp float _1315 = _1287.y;\n            _1322 = mix(mix(float(_1276 < dot(texture2D(u_shadowMapTex, _1280), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1276 < dot(texture2D(u_shadowMapTex, _1280 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1315), mix(float(_1276 < dot(texture2D(u_shadowMapTex, _1280 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1276 < dot(texture2D(u_shadowMapTex, _1280 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1315), _1287.x);\n            break;\n        }\n        _1325 = _1322;\n    }\n    else\n    {\n        _1325 = _1216;\n    }\n    bool _1544 = _1234 ? true : _1543;\n    bool _1339 = (!_1544) && (_837 < u_csmFarBounds.z);\n    highp float _1430 = 0.0;\n    if (_1339)\n    {\n        highp vec3 _1350 = ((u_csmLightSpaceMatrices[2] * _833).xyz * 0.5) + vec3(0.5);\n        highp float _1352 = _1350.x;\n        highp float _1355 = _1350.y;\n        highp float _1363 = (((_1350.z + step(_1352, 0.001000000047497451305389404296875)) + step(_1355, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1352)) + step(0.999000012874603271484375, _1355);\n        highp float _1427 = 0.0;\n        for (int SPIRV_Cross_Dummy417 = 0; SPIRV_Cross_Dummy417 < 1; SPIRV_Cross_Dummy417++)\n        {\n            if (_1363 > 1.0)\n            {\n                _1427 = 1.0;\n                break;\n            }\n            highp float _1381 = _1363 - 0.001000000047497451305389404296875;\n            highp vec2 _1385 = ((_1350.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1392 = fract(_1385 * vec2(2048.0));\n            highp float _1420 = _1392.y;\n            _1427 = mix(mix(float(_1381 < dot(texture2D(u_shadowMapTex, _1385), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1381 < dot(texture2D(u_shadowMapTex, _1385 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1420), mix(float(_1381 < dot(texture2D(u_shadowMapTex, _1385 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1381 < dot(texture2D(u_shadowMapTex, _1385 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1420), _1392.x);\n            break;\n        }\n        _1430 = _1427;\n    }\n    else\n    {\n        _1430 = _1325;\n    }\n    highp float _1535 = 0.0;\n    if ((!(_1339 ? true : _1544)) && (_837 < u_csmFarBounds.w))\n    {\n        highp vec3 _1455 = ((u_csmLightSpaceMatrices[3] * _833).xyz * 0.5) + vec3(0.5);\n        highp float _1457 = _1455.x;\n        highp float _1460 = _1455.y;\n        highp float _1468 = (((_1455.z + step(_1457, 0.001000000047497451305389404296875)) + step(_1460, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1457)) + step(0.999000012874603271484375, _1460);\n        highp float _1532 = 0.0;\n        for (int SPIRV_Cross_Dummy487 = 0; SPIRV_Cross_Dummy487 < 1; SPIRV_Cross_Dummy487++)\n        {\n            if (_1468 > 1.0)\n            {\n                _1532 = 1.0;\n                break;\n            }\n            highp float _1486 = _1468 - 0.001000000047497451305389404296875;\n            highp vec2 _1490 = ((_1455.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1497 = fract(_1490 * vec2(2048.0));\n            highp float _1525 = _1497.y;\n            _1532 = mix(mix(float(_1486 < dot(texture2D(u_shadowMapTex, _1490), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1486 < dot(texture2D(u_shadowMapTex, _1490 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1525), mix(float(_1486 < dot(texture2D(u_shadowMapTex, _1490 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1486 < dot(texture2D(u_shadowMapTex, _1490 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1525), _1497.x);\n            break;\n        }\n        _1535 = _1532;\n    }\n    else\n    {\n        _1535 = _1430;\n    }\n    highp vec4 _733 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _735 = _733.xyz * 2.0;\n    highp vec4 _745 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _764 = vec4(_705.xyz * (min(_735, mix(max(_735 - (u_lightColor * (clamp(dot(_714, u_lightDir), 0.0, 1.0) * (1.0 - _1535))), u_shadowColor), _735, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _714)), _Shininess * 128.0)) * (_745.xyz * _SpecColor.xyz))), _705.w);\n    highp vec4 _770 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1092 = length(varying_positionCamera_Fog);\n    highp float _1206 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1206 = (u_fogInfos.z - _1092) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1207 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1207 = 1.0 / pow(2.7182800769805908203125, _1092 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1208 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1208 = 1.0 / pow(2.7182800769805908203125, ((_1092 * _1092) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1208 = 1.0;\n            }\n            _1207 = _1208;\n        }\n        _1206 = _1207;\n    }\n    highp float _1138 = clamp(_1206, 0.0, 1.0);\n    highp vec3 _1147 = ((_764.xyz + (_EmissionColor.xyz * _770.x)).xyz * _1138) + (u_fogColor * (1.0 - _1138));\n    gl_FragData[0] = vec4(_1147.x, _1147.y, _1147.z, _764.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _695 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _703 = (_695 * _Color) * _AlbedoIntensity;\n    highp vec3 _712 = normalize(varying_WorldNormal);\n    highp vec4 _831 = vec4(varying_ShadowPosition, 1.0);\n    highp float _835 = -(u_view * _831).z;\n    bool _848 = true && (_835 < u_csmFarBounds.x);\n    highp float _1214 = 0.0;\n    if (_848)\n    {\n        highp vec3 _863 = ((u_csmLightSpaceMatrices[0] * _831).xyz * 0.5) + vec3(0.5);\n        highp float _867 = _863.x;\n        highp float _871 = _863.y;\n        highp float _881 = (((_863.z + step(_867, 0.001000000047497451305389404296875)) + step(_871, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _867)) + step(0.999000012874603271484375, _871);\n        highp float _1211 = 0.0;\n        for (int SPIRV_Cross_Dummy265 = 0; SPIRV_Cross_Dummy265 < 1; SPIRV_Cross_Dummy265++)\n        {\n            if (_881 > 1.0)\n            {\n                _1211 = 1.0;\n                break;\n            }\n            highp float _932 = _881 - 0.001000000047497451305389404296875;\n            highp vec2 _938 = ((_863.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _949 = fract(_938 * vec2(2048.0));\n            highp float _1004 = _949.y;\n            _1211 = mix(mix(float(_932 < dot(texture2D(u_shadowMapTex, _938), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_932 < dot(texture2D(u_shadowMapTex, _938 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1004), mix(float(_932 < dot(texture2D(u_shadowMapTex, _938 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_932 < dot(texture2D(u_shadowMapTex, _938 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1004), _949.x);\n            break;\n        }\n        _1214 = _1211;\n    }\n    else\n    {\n        _1214 = 1.0;\n    }\n    bool _1541 = _848 ? true : false;\n    bool _1232 = (!_1541) && (_835 < u_csmFarBounds.y);\n    highp float _1323 = 0.0;\n    if (_1232)\n    {\n        highp vec3 _1243 = ((u_csmLightSpaceMatrices[1] * _831).xyz * 0.5) + vec3(0.5);\n        highp float _1245 = _1243.x;\n        highp float _1248 = _1243.y;\n        highp float _1256 = (((_1243.z + step(_1245, 0.001000000047497451305389404296875)) + step(_1248, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1245)) + step(0.999000012874603271484375, _1248);\n        highp float _1320 = 0.0;\n        for (int SPIRV_Cross_Dummy341 = 0; SPIRV_Cross_Dummy341 < 1; SPIRV_Cross_Dummy341++)\n        {\n            if (_1256 > 1.0)\n            {\n                _1320 = 1.0;\n                break;\n            }\n            highp float _1274 = _1256 - 0.001000000047497451305389404296875;\n            highp vec2 _1278 = ((_1243.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1285 = fract(_1278 * vec2(2048.0));\n            highp float _1313 = _1285.y;\n            _1320 = mix(mix(float(_1274 < dot(texture2D(u_shadowMapTex, _1278), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1274 < dot(texture2D(u_shadowMapTex, _1278 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1313), mix(float(_1274 < dot(texture2D(u_shadowMapTex, _1278 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1274 < dot(texture2D(u_shadowMapTex, _1278 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1313), _1285.x);\n            break;\n        }\n        _1323 = _1320;\n    }\n    else\n    {\n        _1323 = _1214;\n    }\n    bool _1542 = _1232 ? true : _1541;\n    bool _1337 = (!_1542) && (_835 < u_csmFarBounds.z);\n    highp float _1428 = 0.0;\n    if (_1337)\n    {\n        highp vec3 _1348 = ((u_csmLightSpaceMatrices[2] * _831).xyz * 0.5) + vec3(0.5);\n        highp float _1350 = _1348.x;\n        highp float _1353 = _1348.y;\n        highp float _1361 = (((_1348.z + step(_1350, 0.001000000047497451305389404296875)) + step(_1353, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1350)) + step(0.999000012874603271484375, _1353);\n        highp float _1425 = 0.0;\n        for (int SPIRV_Cross_Dummy417 = 0; SPIRV_Cross_Dummy417 < 1; SPIRV_Cross_Dummy417++)\n        {\n            if (_1361 > 1.0)\n            {\n                _1425 = 1.0;\n                break;\n            }\n            highp float _1379 = _1361 - 0.001000000047497451305389404296875;\n            highp vec2 _1383 = ((_1348.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1390 = fract(_1383 * vec2(2048.0));\n            highp float _1418 = _1390.y;\n            _1425 = mix(mix(float(_1379 < dot(texture2D(u_shadowMapTex, _1383), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1379 < dot(texture2D(u_shadowMapTex, _1383 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1418), mix(float(_1379 < dot(texture2D(u_shadowMapTex, _1383 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1379 < dot(texture2D(u_shadowMapTex, _1383 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1418), _1390.x);\n            break;\n        }\n        _1428 = _1425;\n    }\n    else\n    {\n        _1428 = _1323;\n    }\n    highp float _1533 = 0.0;\n    if ((!(_1337 ? true : _1542)) && (_835 < u_csmFarBounds.w))\n    {\n        highp vec3 _1453 = ((u_csmLightSpaceMatrices[3] * _831).xyz * 0.5) + vec3(0.5);\n        highp float _1455 = _1453.x;\n        highp float _1458 = _1453.y;\n        highp float _1466 = (((_1453.z + step(_1455, 0.001000000047497451305389404296875)) + step(_1458, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1455)) + step(0.999000012874603271484375, _1458);\n        highp float _1530 = 0.0;\n        for (int SPIRV_Cross_Dummy487 = 0; SPIRV_Cross_Dummy487 < 1; SPIRV_Cross_Dummy487++)\n        {\n            if (_1466 > 1.0)\n            {\n                _1530 = 1.0;\n                break;\n            }\n            highp float _1484 = _1466 - 0.001000000047497451305389404296875;\n            highp vec2 _1488 = ((_1453.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1495 = fract(_1488 * vec2(2048.0));\n            highp float _1523 = _1495.y;\n            _1530 = mix(mix(float(_1484 < dot(texture2D(u_shadowMapTex, _1488), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1484 < dot(texture2D(u_shadowMapTex, _1488 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1523), mix(float(_1484 < dot(texture2D(u_shadowMapTex, _1488 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1484 < dot(texture2D(u_shadowMapTex, _1488 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1523), _1495.x);\n            break;\n        }\n        _1533 = _1530;\n    }\n    else\n    {\n        _1533 = _1428;\n    }\n    highp vec4 _731 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _733 = _731.xyz * 2.0;\n    highp vec4 _743 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _762 = vec4(_703.xyz * (min(_733, mix(max(_733 - (u_lightColor * (clamp(dot(_712, u_lightDir), 0.0, 1.0) * (1.0 - _1533))), u_shadowColor), _733, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _712)), _Shininess * 128.0)) * (_743.xyz * _SpecColor.xyz))), _703.w);\n    highp vec4 _768 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1090 = length(varying_positionCamera_Fog);\n    highp float _1204 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1204 = (u_fogInfos.z - _1090) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1205 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1205 = 1.0 / pow(2.7182800769805908203125, _1090 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1206 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1206 = 1.0 / pow(2.7182800769805908203125, ((_1090 * _1090) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1206 = 1.0;\n            }\n            _1205 = _1206;\n        }\n        _1204 = _1205;\n    }\n    highp float _1136 = clamp(_1204, 0.0, 1.0);\n    highp vec3 _1145 = ((_762.xyz + (_EmissionColor.xyz * _768.x)).xyz * _1136) + (u_fogColor * (1.0 - _1136));\n    gl_FragData[0] = vec4(_1145.x, _1145.y, _1145.z, _762.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\n\nvoid main()\n{\n    highp vec4 _273 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _281 = (_273 * _Color) * _AlbedoIntensity;\n    highp float _283 = _281.w;\n    if ((_283 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _292 = normalize(varying_LightDir);\n    highp vec3 _298 = normalize(varying_WorldNormal);\n    gl_FragData[0] = vec4(_281.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_292, _298))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _292), _298)), _Shininess * 128.0)) * (_SpecColor.xyz * _273.w))), _283);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _526 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _534 = (_526 * _Color) * _AlbedoIntensity;\n    highp float _536 = _534.w;\n    if ((_536 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _545 = normalize(varying_LightDir);\n    highp vec3 _551 = normalize(varying_WorldNormal);\n    highp vec4 _635 = vec4(varying_ShadowPosition, 1.0);\n    highp float _639 = -(u_view * _635).z;\n    bool _652 = true && (_639 < u_csmFarBounds.x);\n    highp float _902 = 0.0;\n    if (_652)\n    {\n        highp vec3 _667 = ((u_csmLightSpaceMatrices[0] * _635).xyz * 0.5) + vec3(0.5);\n        highp float _671 = _667.x;\n        highp float _675 = _667.y;\n        highp float _685 = (((_667.z + step(_671, 0.001000000047497451305389404296875)) + step(_675, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _671)) + step(0.999000012874603271484375, _675);\n        highp float _899 = 0.0;\n        for (int SPIRV_Cross_Dummy261 = 0; SPIRV_Cross_Dummy261 < 1; SPIRV_Cross_Dummy261++)\n        {\n            if (_685 > 1.0)\n            {\n                _899 = 1.0;\n                break;\n            }\n            highp float _736 = _685 - 0.001000000047497451305389404296875;\n            highp vec2 _742 = ((_667.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _753 = fract(_742 * vec2(2048.0));\n            highp float _808 = _753.y;\n            _899 = mix(mix(float(_736 < dot(texture2D(u_shadowMapTex, _742), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_736 < dot(texture2D(u_shadowMapTex, _742 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _808), mix(float(_736 < dot(texture2D(u_shadowMapTex, _742 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_736 < dot(texture2D(u_shadowMapTex, _742 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _808), _753.x);\n            break;\n        }\n        _902 = _899;\n    }\n    else\n    {\n        _902 = 1.0;\n    }\n    bool _1229 = _652 ? true : false;\n    bool _920 = (!_1229) && (_639 < u_csmFarBounds.y);\n    highp float _1011 = 0.0;\n    if (_920)\n    {\n        highp vec3 _931 = ((u_csmLightSpaceMatrices[1] * _635).xyz * 0.5) + vec3(0.5);\n        highp float _933 = _931.x;\n        highp float _936 = _931.y;\n        highp float _944 = (((_931.z + step(_933, 0.001000000047497451305389404296875)) + step(_936, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _933)) + step(0.999000012874603271484375, _936);\n        highp float _1008 = 0.0;\n        for (int SPIRV_Cross_Dummy337 = 0; SPIRV_Cross_Dummy337 < 1; SPIRV_Cross_Dummy337++)\n        {\n            if (_944 > 1.0)\n            {\n                _1008 = 1.0;\n                break;\n            }\n            highp float _962 = _944 - 0.001000000047497451305389404296875;\n            highp vec2 _966 = ((_931.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _973 = fract(_966 * vec2(2048.0));\n            highp float _1001 = _973.y;\n            _1008 = mix(mix(float(_962 < dot(texture2D(u_shadowMapTex, _966), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_962 < dot(texture2D(u_shadowMapTex, _966 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1001), mix(float(_962 < dot(texture2D(u_shadowMapTex, _966 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_962 < dot(texture2D(u_shadowMapTex, _966 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1001), _973.x);\n            break;\n        }\n        _1011 = _1008;\n    }\n    else\n    {\n        _1011 = _902;\n    }\n    bool _1230 = _920 ? true : _1229;\n    bool _1025 = (!_1230) && (_639 < u_csmFarBounds.z);\n    highp float _1116 = 0.0;\n    if (_1025)\n    {\n        highp vec3 _1036 = ((u_csmLightSpaceMatrices[2] * _635).xyz * 0.5) + vec3(0.5);\n        highp float _1038 = _1036.x;\n        highp float _1041 = _1036.y;\n        highp float _1049 = (((_1036.z + step(_1038, 0.001000000047497451305389404296875)) + step(_1041, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1038)) + step(0.999000012874603271484375, _1041);\n        highp float _1113 = 0.0;\n        for (int SPIRV_Cross_Dummy413 = 0; SPIRV_Cross_Dummy413 < 1; SPIRV_Cross_Dummy413++)\n        {\n            if (_1049 > 1.0)\n            {\n                _1113 = 1.0;\n                break;\n            }\n            highp float _1067 = _1049 - 0.001000000047497451305389404296875;\n            highp vec2 _1071 = ((_1036.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1078 = fract(_1071 * vec2(2048.0));\n            highp float _1106 = _1078.y;\n            _1113 = mix(mix(float(_1067 < dot(texture2D(u_shadowMapTex, _1071), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1067 < dot(texture2D(u_shadowMapTex, _1071 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1106), mix(float(_1067 < dot(texture2D(u_shadowMapTex, _1071 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1067 < dot(texture2D(u_shadowMapTex, _1071 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1106), _1078.x);\n            break;\n        }\n        _1116 = _1113;\n    }\n    else\n    {\n        _1116 = _1011;\n    }\n    highp float _1221 = 0.0;\n    if ((!(_1025 ? true : _1230)) && (_639 < u_csmFarBounds.w))\n    {\n        highp vec3 _1141 = ((u_csmLightSpaceMatrices[3] * _635).xyz * 0.5) + vec3(0.5);\n        highp float _1143 = _1141.x;\n        highp float _1146 = _1141.y;\n        highp float _1154 = (((_1141.z + step(_1143, 0.001000000047497451305389404296875)) + step(_1146, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1143)) + step(0.999000012874603271484375, _1146);\n        highp float _1218 = 0.0;\n        for (int SPIRV_Cross_Dummy483 = 0; SPIRV_Cross_Dummy483 < 1; SPIRV_Cross_Dummy483++)\n        {\n            if (_1154 > 1.0)\n            {\n                _1218 = 1.0;\n                break;\n            }\n            highp float _1172 = _1154 - 0.001000000047497451305389404296875;\n            highp vec2 _1176 = ((_1141.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1183 = fract(_1176 * vec2(2048.0));\n            highp float _1211 = _1183.y;\n            _1218 = mix(mix(float(_1172 < dot(texture2D(u_shadowMapTex, _1176), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1172 < dot(texture2D(u_shadowMapTex, _1176 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1211), mix(float(_1172 < dot(texture2D(u_shadowMapTex, _1176 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1172 < dot(texture2D(u_shadowMapTex, _1176 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1211), _1183.x);\n            break;\n        }\n        _1221 = _1218;\n    }\n    else\n    {\n        _1221 = _1116;\n    }\n    gl_FragData[0] = vec4(_534.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_545, _551))) * _1221)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _545), _551)), _Shininess * 128.0)) * (_SpecColor.xyz * _526.w))), _536);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _397 = (texture2D(_MainTex, varying_TexCoord) * _Color) * _AlbedoIntensity;\n    highp vec2 _488 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _431 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _460 = vec4(_397.xyz * (min(_431, mix(max(_431, u_shadowColor), _431, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_488, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_488, _488)))))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _397.w);\n    highp vec3 _476 = _460.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_476.x, _476.y, _476.z, _460.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _363 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _371 = (_363 * _Color) * _AlbedoIntensity;\n    highp float _373 = _371.w;\n    if ((_373 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _382 = normalize(varying_LightDir);\n    highp vec3 _388 = normalize(varying_WorldNormal);\n    highp vec4 _424 = vec4(_371.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_382, _388))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _382), _388)), _Shininess * 128.0)) * (_SpecColor.xyz * _363.w))), _373);\n    highp float _468 = length(varying_positionCamera_Fog);\n    highp float _551 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _551 = (u_fogInfos.z - _468) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _552 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _552 = 1.0 / pow(2.7182800769805908203125, _468 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _553 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _553 = 1.0 / pow(2.7182800769805908203125, ((_468 * _468) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _553 = 1.0;\n            }\n            _552 = _553;\n        }\n        _551 = _552;\n    }\n    highp float _514 = clamp(_551, 0.0, 1.0);\n    highp vec3 _523 = (_424.xyz * _514) + (u_fogColor * (1.0 - _514));\n    gl_FragData[0] = vec4(_523.x, _523.y, _523.z, _424.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _613 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _621 = (_613 * _Color) * _AlbedoIntensity;\n    highp float _623 = _621.w;\n    if ((_623 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _632 = normalize(varying_LightDir);\n    highp vec3 _638 = normalize(varying_WorldNormal);\n    highp vec4 _729 = vec4(varying_ShadowPosition, 1.0);\n    highp float _733 = -(u_view * _729).z;\n    bool _746 = true && (_733 < u_csmFarBounds.x);\n    highp float _1071 = 0.0;\n    if (_746)\n    {\n        highp vec3 _761 = ((u_csmLightSpaceMatrices[0] * _729).xyz * 0.5) + vec3(0.5);\n        highp float _765 = _761.x;\n        highp float _769 = _761.y;\n        highp float _779 = (((_761.z + step(_765, 0.001000000047497451305389404296875)) + step(_769, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _765)) + step(0.999000012874603271484375, _769);\n        highp float _1068 = 0.0;\n        for (int SPIRV_Cross_Dummy265 = 0; SPIRV_Cross_Dummy265 < 1; SPIRV_Cross_Dummy265++)\n        {\n            if (_779 > 1.0)\n            {\n                _1068 = 1.0;\n                break;\n            }\n            highp float _830 = _779 - 0.001000000047497451305389404296875;\n            highp vec2 _836 = ((_761.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _847 = fract(_836 * vec2(2048.0));\n            highp float _902 = _847.y;\n            _1068 = mix(mix(float(_830 < dot(texture2D(u_shadowMapTex, _836), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_830 < dot(texture2D(u_shadowMapTex, _836 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _902), mix(float(_830 < dot(texture2D(u_shadowMapTex, _836 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_830 < dot(texture2D(u_shadowMapTex, _836 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _902), _847.x);\n            break;\n        }\n        _1071 = _1068;\n    }\n    else\n    {\n        _1071 = 1.0;\n    }\n    bool _1398 = _746 ? true : false;\n    bool _1089 = (!_1398) && (_733 < u_csmFarBounds.y);\n    highp float _1180 = 0.0;\n    if (_1089)\n    {\n        highp vec3 _1100 = ((u_csmLightSpaceMatrices[1] * _729).xyz * 0.5) + vec3(0.5);\n        highp float _1102 = _1100.x;\n        highp float _1105 = _1100.y;\n        highp float _1113 = (((_1100.z + step(_1102, 0.001000000047497451305389404296875)) + step(_1105, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1102)) + step(0.999000012874603271484375, _1105);\n        highp float _1177 = 0.0;\n        for (int SPIRV_Cross_Dummy341 = 0; SPIRV_Cross_Dummy341 < 1; SPIRV_Cross_Dummy341++)\n        {\n            if (_1113 > 1.0)\n            {\n                _1177 = 1.0;\n                break;\n            }\n            highp float _1131 = _1113 - 0.001000000047497451305389404296875;\n            highp vec2 _1135 = ((_1100.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1142 = fract(_1135 * vec2(2048.0));\n            highp float _1170 = _1142.y;\n            _1177 = mix(mix(float(_1131 < dot(texture2D(u_shadowMapTex, _1135), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1131 < dot(texture2D(u_shadowMapTex, _1135 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1170), mix(float(_1131 < dot(texture2D(u_shadowMapTex, _1135 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1131 < dot(texture2D(u_shadowMapTex, _1135 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1170), _1142.x);\n            break;\n        }\n        _1180 = _1177;\n    }\n    else\n    {\n        _1180 = _1071;\n    }\n    bool _1399 = _1089 ? true : _1398;\n    bool _1194 = (!_1399) && (_733 < u_csmFarBounds.z);\n    highp float _1285 = 0.0;\n    if (_1194)\n    {\n        highp vec3 _1205 = ((u_csmLightSpaceMatrices[2] * _729).xyz * 0.5) + vec3(0.5);\n        highp float _1207 = _1205.x;\n        highp float _1210 = _1205.y;\n        highp float _1218 = (((_1205.z + step(_1207, 0.001000000047497451305389404296875)) + step(_1210, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1207)) + step(0.999000012874603271484375, _1210);\n        highp float _1282 = 0.0;\n        for (int SPIRV_Cross_Dummy417 = 0; SPIRV_Cross_Dummy417 < 1; SPIRV_Cross_Dummy417++)\n        {\n            if (_1218 > 1.0)\n            {\n                _1282 = 1.0;\n                break;\n            }\n            highp float _1236 = _1218 - 0.001000000047497451305389404296875;\n            highp vec2 _1240 = ((_1205.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1247 = fract(_1240 * vec2(2048.0));\n            highp float _1275 = _1247.y;\n            _1282 = mix(mix(float(_1236 < dot(texture2D(u_shadowMapTex, _1240), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1236 < dot(texture2D(u_shadowMapTex, _1240 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1275), mix(float(_1236 < dot(texture2D(u_shadowMapTex, _1240 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1236 < dot(texture2D(u_shadowMapTex, _1240 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1275), _1247.x);\n            break;\n        }\n        _1285 = _1282;\n    }\n    else\n    {\n        _1285 = _1180;\n    }\n    highp float _1390 = 0.0;\n    if ((!(_1194 ? true : _1399)) && (_733 < u_csmFarBounds.w))\n    {\n        highp vec3 _1310 = ((u_csmLightSpaceMatrices[3] * _729).xyz * 0.5) + vec3(0.5);\n        highp float _1312 = _1310.x;\n        highp float _1315 = _1310.y;\n        highp float _1323 = (((_1310.z + step(_1312, 0.001000000047497451305389404296875)) + step(_1315, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1312)) + step(0.999000012874603271484375, _1315);\n        highp float _1387 = 0.0;\n        for (int SPIRV_Cross_Dummy487 = 0; SPIRV_Cross_Dummy487 < 1; SPIRV_Cross_Dummy487++)\n        {\n            if (_1323 > 1.0)\n            {\n                _1387 = 1.0;\n                break;\n            }\n            highp float _1341 = _1323 - 0.001000000047497451305389404296875;\n            highp vec2 _1345 = ((_1310.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1352 = fract(_1345 * vec2(2048.0));\n            highp float _1380 = _1352.y;\n            _1387 = mix(mix(float(_1341 < dot(texture2D(u_shadowMapTex, _1345), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1341 < dot(texture2D(u_shadowMapTex, _1345 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1380), mix(float(_1341 < dot(texture2D(u_shadowMapTex, _1345 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1341 < dot(texture2D(u_shadowMapTex, _1345 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1380), _1352.x);\n            break;\n        }\n        _1390 = _1387;\n    }\n    else\n    {\n        _1390 = _1285;\n    }\n    highp vec4 _677 = vec4(_621.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_632, _638))) * _1390)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _632), _638)), _Shininess * 128.0)) * (_SpecColor.xyz * _613.w))), _623);\n    highp float _950 = length(varying_positionCamera_Fog);\n    highp float _1061 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1061 = (u_fogInfos.z - _950) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1062 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1062 = 1.0 / pow(2.7182800769805908203125, _950 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1063 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1063 = 1.0 / pow(2.7182800769805908203125, ((_950 * _950) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1063 = 1.0;\n            }\n            _1062 = _1063;\n        }\n        _1061 = _1062;\n    }\n    highp float _996 = clamp(_1061, 0.0, 1.0);\n    highp vec3 _1005 = (_677.xyz * _996) + (u_fogColor * (1.0 - _996));\n    gl_FragData[0] = vec4(_1005.x, _1005.y, _1005.z, _677.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _479 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _487 = (_479 * _Color) * _AlbedoIntensity;\n    highp vec4 _502 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _585 = (_502.xy - vec2(0.5)) * 2.0;\n    highp vec4 _519 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _521 = _519.xyz * 2.0;\n    highp vec4 _531 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _550 = vec4(_487.xyz * (min(_521, mix(max(_521, u_shadowColor), _521, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_585, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_585, _585)))))), _Shininess * 128.0)) * (_531.xyz * _SpecColor.xyz))), _487.w);\n    highp vec4 _556 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _669 = length(varying_positionCamera_Fog);\n    highp float _755 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _755 = (u_fogInfos.z - _669) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _756 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _756 = 1.0 / pow(2.7182800769805908203125, _669 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _757 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _757 = 1.0 / pow(2.7182800769805908203125, ((_669 * _669) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _757 = 1.0;\n            }\n            _756 = _757;\n        }\n        _755 = _756;\n    }\n    highp float _715 = clamp(_755, 0.0, 1.0);\n    highp vec3 _724 = ((_550.xyz + (_EmissionColor.xyz * _556.x)).xyz * _715) + (u_fogColor * (1.0 - _715));\n    gl_FragData[0] = vec4(_724.x, _724.y, _724.z, _550.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _337 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _345 = (_337 * _Color) * _AlbedoIntensity;\n    highp float _347 = _345.w;\n    if ((_347 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _380 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_345.xyz * (min(_380, mix(max(_380, u_shadowColor), _380, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_SpecColor.xyz * _337.w))), _347);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _590 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _598 = (_590 * _Color) * _AlbedoIntensity;\n    highp float _600 = _598.w;\n    if ((_600 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _615 = normalize(varying_WorldNormal);\n    highp vec4 _705 = vec4(varying_ShadowPosition, 1.0);\n    highp float _709 = -(u_view * _705).z;\n    bool _722 = true && (_709 < u_csmFarBounds.x);\n    highp float _1014 = 0.0;\n    if (_722)\n    {\n        highp vec3 _737 = ((u_csmLightSpaceMatrices[0] * _705).xyz * 0.5) + vec3(0.5);\n        highp float _741 = _737.x;\n        highp float _745 = _737.y;\n        highp float _755 = (((_737.z + step(_741, 0.001000000047497451305389404296875)) + step(_745, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _741)) + step(0.999000012874603271484375, _745);\n        highp float _1011 = 0.0;\n        for (int SPIRV_Cross_Dummy265 = 0; SPIRV_Cross_Dummy265 < 1; SPIRV_Cross_Dummy265++)\n        {\n            if (_755 > 1.0)\n            {\n                _1011 = 1.0;\n                break;\n            }\n            highp float _806 = _755 - 0.001000000047497451305389404296875;\n            highp vec2 _812 = ((_737.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _823 = fract(_812 * vec2(2048.0));\n            highp float _878 = _823.y;\n            _1011 = mix(mix(float(_806 < dot(texture2D(u_shadowMapTex, _812), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_806 < dot(texture2D(u_shadowMapTex, _812 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _878), mix(float(_806 < dot(texture2D(u_shadowMapTex, _812 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_806 < dot(texture2D(u_shadowMapTex, _812 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _878), _823.x);\n            break;\n        }\n        _1014 = _1011;\n    }\n    else\n    {\n        _1014 = 1.0;\n    }\n    bool _1341 = _722 ? true : false;\n    bool _1032 = (!_1341) && (_709 < u_csmFarBounds.y);\n    highp float _1123 = 0.0;\n    if (_1032)\n    {\n        highp vec3 _1043 = ((u_csmLightSpaceMatrices[1] * _705).xyz * 0.5) + vec3(0.5);\n        highp float _1045 = _1043.x;\n        highp float _1048 = _1043.y;\n        highp float _1056 = (((_1043.z + step(_1045, 0.001000000047497451305389404296875)) + step(_1048, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1045)) + step(0.999000012874603271484375, _1048);\n        highp float _1120 = 0.0;\n        for (int SPIRV_Cross_Dummy341 = 0; SPIRV_Cross_Dummy341 < 1; SPIRV_Cross_Dummy341++)\n        {\n            if (_1056 > 1.0)\n            {\n                _1120 = 1.0;\n                break;\n            }\n            highp float _1074 = _1056 - 0.001000000047497451305389404296875;\n            highp vec2 _1078 = ((_1043.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1085 = fract(_1078 * vec2(2048.0));\n            highp float _1113 = _1085.y;\n            _1120 = mix(mix(float(_1074 < dot(texture2D(u_shadowMapTex, _1078), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1074 < dot(texture2D(u_shadowMapTex, _1078 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1113), mix(float(_1074 < dot(texture2D(u_shadowMapTex, _1078 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1074 < dot(texture2D(u_shadowMapTex, _1078 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1113), _1085.x);\n            break;\n        }\n        _1123 = _1120;\n    }\n    else\n    {\n        _1123 = _1014;\n    }\n    bool _1342 = _1032 ? true : _1341;\n    bool _1137 = (!_1342) && (_709 < u_csmFarBounds.z);\n    highp float _1228 = 0.0;\n    if (_1137)\n    {\n        highp vec3 _1148 = ((u_csmLightSpaceMatrices[2] * _705).xyz * 0.5) + vec3(0.5);\n        highp float _1150 = _1148.x;\n        highp float _1153 = _1148.y;\n        highp float _1161 = (((_1148.z + step(_1150, 0.001000000047497451305389404296875)) + step(_1153, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1150)) + step(0.999000012874603271484375, _1153);\n        highp float _1225 = 0.0;\n        for (int SPIRV_Cross_Dummy417 = 0; SPIRV_Cross_Dummy417 < 1; SPIRV_Cross_Dummy417++)\n        {\n            if (_1161 > 1.0)\n            {\n                _1225 = 1.0;\n                break;\n            }\n            highp float _1179 = _1161 - 0.001000000047497451305389404296875;\n            highp vec2 _1183 = ((_1148.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1190 = fract(_1183 * vec2(2048.0));\n            highp float _1218 = _1190.y;\n            _1225 = mix(mix(float(_1179 < dot(texture2D(u_shadowMapTex, _1183), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1179 < dot(texture2D(u_shadowMapTex, _1183 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1218), mix(float(_1179 < dot(texture2D(u_shadowMapTex, _1183 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1179 < dot(texture2D(u_shadowMapTex, _1183 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1218), _1190.x);\n            break;\n        }\n        _1228 = _1225;\n    }\n    else\n    {\n        _1228 = _1123;\n    }\n    highp float _1333 = 0.0;\n    if ((!(_1137 ? true : _1342)) && (_709 < u_csmFarBounds.w))\n    {\n        highp vec3 _1253 = ((u_csmLightSpaceMatrices[3] * _705).xyz * 0.5) + vec3(0.5);\n        highp float _1255 = _1253.x;\n        highp float _1258 = _1253.y;\n        highp float _1266 = (((_1253.z + step(_1255, 0.001000000047497451305389404296875)) + step(_1258, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1255)) + step(0.999000012874603271484375, _1258);\n        highp float _1330 = 0.0;\n        for (int SPIRV_Cross_Dummy487 = 0; SPIRV_Cross_Dummy487 < 1; SPIRV_Cross_Dummy487++)\n        {\n            if (_1266 > 1.0)\n            {\n                _1330 = 1.0;\n                break;\n            }\n            highp float _1284 = _1266 - 0.001000000047497451305389404296875;\n            highp vec2 _1288 = ((_1253.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1295 = fract(_1288 * vec2(2048.0));\n            highp float _1323 = _1295.y;\n            _1330 = mix(mix(float(_1284 < dot(texture2D(u_shadowMapTex, _1288), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1284 < dot(texture2D(u_shadowMapTex, _1288 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1323), mix(float(_1284 < dot(texture2D(u_shadowMapTex, _1288 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1284 < dot(texture2D(u_shadowMapTex, _1288 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1323), _1295.x);\n            break;\n        }\n        _1333 = _1330;\n    }\n    else\n    {\n        _1333 = _1228;\n    }\n    highp vec3 _636 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_598.xyz * (min(_636, mix(max(_636 - (u_lightColor * (clamp(dot(_615, u_lightDir), 0.0, 1.0) * (1.0 - _1333))), u_shadowColor), _636, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _615)), _Shininess * 128.0)) * (_SpecColor.xyz * _590.w))), _600);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\n\nvoid main()\n{\n    highp vec4 _334 = (texture2D(_MainTex, varying_TexCoord) * _Color) * _AlbedoIntensity;\n    highp vec3 _337 = normalize(varying_LightDir);\n    highp vec2 _419 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _430 = vec3(_419, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_419, _419))));\n    highp vec4 _391 = vec4(_334.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_337, _430))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _337), _430)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _334.w);\n    highp vec3 _407 = _391.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_407.x, _407.y, _407.z, _391.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _426 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _434 = (_426 * _Color) * _AlbedoIntensity;\n    highp float _436 = _434.w;\n    if ((_436 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _467 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _469 = _467.xyz * 2.0;\n    highp vec4 _493 = vec4(_434.xyz * (min(_469, mix(max(_469, u_shadowColor), _469, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_SpecColor.xyz * _426.w))), _436);\n    highp float _575 = length(varying_positionCamera_Fog);\n    highp float _662 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _662 = (u_fogInfos.z - _575) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _663 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _663 = 1.0 / pow(2.7182800769805908203125, _575 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _664 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _664 = 1.0 / pow(2.7182800769805908203125, ((_575 * _575) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _664 = 1.0;\n            }\n            _663 = _664;\n        }\n        _662 = _663;\n    }\n    highp float _621 = clamp(_662, 0.0, 1.0);\n    highp vec3 _630 = (_493.xyz * _621) + (u_fogColor * (1.0 - _621));\n    gl_FragData[0] = vec4(_630.x, _630.y, _630.z, _493.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _677 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _685 = (_677 * _Color) * _AlbedoIntensity;\n    highp float _687 = _685.w;\n    if ((_687 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _702 = normalize(varying_WorldNormal);\n    highp vec4 _799 = vec4(varying_ShadowPosition, 1.0);\n    highp float _803 = -(u_view * _799).z;\n    bool _816 = true && (_803 < u_csmFarBounds.x);\n    highp float _1183 = 0.0;\n    if (_816)\n    {\n        highp vec3 _831 = ((u_csmLightSpaceMatrices[0] * _799).xyz * 0.5) + vec3(0.5);\n        highp float _835 = _831.x;\n        highp float _839 = _831.y;\n        highp float _849 = (((_831.z + step(_835, 0.001000000047497451305389404296875)) + step(_839, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _835)) + step(0.999000012874603271484375, _839);\n        highp float _1180 = 0.0;\n        for (int SPIRV_Cross_Dummy269 = 0; SPIRV_Cross_Dummy269 < 1; SPIRV_Cross_Dummy269++)\n        {\n            if (_849 > 1.0)\n            {\n                _1180 = 1.0;\n                break;\n            }\n            highp float _900 = _849 - 0.001000000047497451305389404296875;\n            highp vec2 _906 = ((_831.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _917 = fract(_906 * vec2(2048.0));\n            highp float _972 = _917.y;\n            _1180 = mix(mix(float(_900 < dot(texture2D(u_shadowMapTex, _906), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_900 < dot(texture2D(u_shadowMapTex, _906 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _972), mix(float(_900 < dot(texture2D(u_shadowMapTex, _906 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_900 < dot(texture2D(u_shadowMapTex, _906 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _972), _917.x);\n            break;\n        }\n        _1183 = _1180;\n    }\n    else\n    {\n        _1183 = 1.0;\n    }\n    bool _1510 = _816 ? true : false;\n    bool _1201 = (!_1510) && (_803 < u_csmFarBounds.y);\n    highp float _1292 = 0.0;\n    if (_1201)\n    {\n        highp vec3 _1212 = ((u_csmLightSpaceMatrices[1] * _799).xyz * 0.5) + vec3(0.5);\n        highp float _1214 = _1212.x;\n        highp float _1217 = _1212.y;\n        highp float _1225 = (((_1212.z + step(_1214, 0.001000000047497451305389404296875)) + step(_1217, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1214)) + step(0.999000012874603271484375, _1217);\n        highp float _1289 = 0.0;\n        for (int SPIRV_Cross_Dummy345 = 0; SPIRV_Cross_Dummy345 < 1; SPIRV_Cross_Dummy345++)\n        {\n            if (_1225 > 1.0)\n            {\n                _1289 = 1.0;\n                break;\n            }\n            highp float _1243 = _1225 - 0.001000000047497451305389404296875;\n            highp vec2 _1247 = ((_1212.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1254 = fract(_1247 * vec2(2048.0));\n            highp float _1282 = _1254.y;\n            _1289 = mix(mix(float(_1243 < dot(texture2D(u_shadowMapTex, _1247), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1243 < dot(texture2D(u_shadowMapTex, _1247 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1282), mix(float(_1243 < dot(texture2D(u_shadowMapTex, _1247 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1243 < dot(texture2D(u_shadowMapTex, _1247 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1282), _1254.x);\n            break;\n        }\n        _1292 = _1289;\n    }\n    else\n    {\n        _1292 = _1183;\n    }\n    bool _1511 = _1201 ? true : _1510;\n    bool _1306 = (!_1511) && (_803 < u_csmFarBounds.z);\n    highp float _1397 = 0.0;\n    if (_1306)\n    {\n        highp vec3 _1317 = ((u_csmLightSpaceMatrices[2] * _799).xyz * 0.5) + vec3(0.5);\n        highp float _1319 = _1317.x;\n        highp float _1322 = _1317.y;\n        highp float _1330 = (((_1317.z + step(_1319, 0.001000000047497451305389404296875)) + step(_1322, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1319)) + step(0.999000012874603271484375, _1322);\n        highp float _1394 = 0.0;\n        for (int SPIRV_Cross_Dummy421 = 0; SPIRV_Cross_Dummy421 < 1; SPIRV_Cross_Dummy421++)\n        {\n            if (_1330 > 1.0)\n            {\n                _1394 = 1.0;\n                break;\n            }\n            highp float _1348 = _1330 - 0.001000000047497451305389404296875;\n            highp vec2 _1352 = ((_1317.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1359 = fract(_1352 * vec2(2048.0));\n            highp float _1387 = _1359.y;\n            _1394 = mix(mix(float(_1348 < dot(texture2D(u_shadowMapTex, _1352), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1348 < dot(texture2D(u_shadowMapTex, _1352 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1387), mix(float(_1348 < dot(texture2D(u_shadowMapTex, _1352 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1348 < dot(texture2D(u_shadowMapTex, _1352 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1387), _1359.x);\n            break;\n        }\n        _1397 = _1394;\n    }\n    else\n    {\n        _1397 = _1292;\n    }\n    highp float _1502 = 0.0;\n    if ((!(_1306 ? true : _1511)) && (_803 < u_csmFarBounds.w))\n    {\n        highp vec3 _1422 = ((u_csmLightSpaceMatrices[3] * _799).xyz * 0.5) + vec3(0.5);\n        highp float _1424 = _1422.x;\n        highp float _1427 = _1422.y;\n        highp float _1435 = (((_1422.z + step(_1424, 0.001000000047497451305389404296875)) + step(_1427, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1424)) + step(0.999000012874603271484375, _1427);\n        highp float _1499 = 0.0;\n        for (int SPIRV_Cross_Dummy491 = 0; SPIRV_Cross_Dummy491 < 1; SPIRV_Cross_Dummy491++)\n        {\n            if (_1435 > 1.0)\n            {\n                _1499 = 1.0;\n                break;\n            }\n            highp float _1453 = _1435 - 0.001000000047497451305389404296875;\n            highp vec2 _1457 = ((_1422.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1464 = fract(_1457 * vec2(2048.0));\n            highp float _1492 = _1464.y;\n            _1499 = mix(mix(float(_1453 < dot(texture2D(u_shadowMapTex, _1457), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1453 < dot(texture2D(u_shadowMapTex, _1457 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1492), mix(float(_1453 < dot(texture2D(u_shadowMapTex, _1457 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1453 < dot(texture2D(u_shadowMapTex, _1457 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1492), _1464.x);\n            break;\n        }\n        _1502 = _1499;\n    }\n    else\n    {\n        _1502 = _1397;\n    }\n    highp vec4 _721 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _723 = _721.xyz * 2.0;\n    highp vec4 _747 = vec4(_685.xyz * (min(_723, mix(max(_723 - (u_lightColor * (clamp(dot(_702, u_lightDir), 0.0, 1.0) * (1.0 - _1502))), u_shadowColor), _723, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _702)), _Shininess * 128.0)) * (_SpecColor.xyz * _677.w))), _687);\n    highp float _1058 = length(varying_positionCamera_Fog);\n    highp float _1173 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1173 = (u_fogInfos.z - _1058) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1174 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1174 = 1.0 / pow(2.7182800769805908203125, _1058 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1175 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1175 = 1.0 / pow(2.7182800769805908203125, ((_1058 * _1058) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1175 = 1.0;\n            }\n            _1174 = _1175;\n        }\n        _1173 = _1174;\n    }\n    highp float _1104 = clamp(_1173, 0.0, 1.0);\n    highp vec3 _1113 = (_747.xyz * _1104) + (u_fogColor * (1.0 - _1104));\n    gl_FragData[0] = vec4(_1113.x, _1113.y, _1113.z, _747.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _416 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _424 = (_416 * _Color) * _AlbedoIntensity;\n    highp vec3 _427 = normalize(varying_LightDir);\n    highp vec4 _439 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _516 = (_439.xy - vec2(0.5)) * 2.0;\n    highp vec3 _527 = vec3(_516, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_516, _516))));\n    highp vec4 _462 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _481 = vec4(_424.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_427, _527))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _427), _527)), _Shininess * 128.0)) * (_462.xyz * _SpecColor.xyz))), _424.w);\n    highp vec4 _487 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _562 = length(varying_positionCamera_Fog);\n    highp float _643 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _643 = (u_fogInfos.z - _562) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _644 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _644 = 1.0 / pow(2.7182800769805908203125, _562 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _645 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _645 = 1.0 / pow(2.7182800769805908203125, ((_562 * _562) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _645 = 1.0;\n            }\n            _644 = _645;\n        }\n        _643 = _644;\n    }\n    highp float _608 = clamp(_643, 0.0, 1.0);\n    highp vec3 _617 = ((_481.xyz + (_EmissionColor.xyz * _487.x)).xyz * _608) + (u_fogColor * (1.0 - _608));\n    gl_FragData[0] = vec4(_617.x, _617.y, _617.z, _481.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\n\nvoid main()\n{\n    highp vec4 _276 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _284 = (_276 * _Color) * _AlbedoIntensity;\n    highp float _286 = _284.w;\n    if ((_286 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _295 = normalize(varying_LightDir);\n    highp vec3 _301 = normalize(varying_WorldNormal);\n    gl_FragData[0] = vec4(_284.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_295, _301))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _295), _301)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _286);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _710 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _718 = (_710 * _Color) * _AlbedoIntensity;\n    highp vec4 _733 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _801 = (_733.xy - vec2(0.5)) * 2.0;\n    highp vec4 _855 = vec4(varying_ShadowPosition, 1.0);\n    highp float _859 = -(u_view * _855).z;\n    bool _872 = true && (_859 < u_csmFarBounds.x);\n    highp float _1237 = 0.0;\n    if (_872)\n    {\n        highp vec3 _887 = ((u_csmLightSpaceMatrices[0] * _855).xyz * 0.5) + vec3(0.5);\n        highp float _891 = _887.x;\n        highp float _895 = _887.y;\n        highp float _905 = (((_887.z + step(_891, 0.001000000047497451305389404296875)) + step(_895, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _891)) + step(0.999000012874603271484375, _895);\n        highp float _1234 = 0.0;\n        for (int SPIRV_Cross_Dummy268 = 0; SPIRV_Cross_Dummy268 < 1; SPIRV_Cross_Dummy268++)\n        {\n            if (_905 > 1.0)\n            {\n                _1234 = 1.0;\n                break;\n            }\n            highp float _956 = _905 - 0.001000000047497451305389404296875;\n            highp vec2 _962 = ((_887.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _973 = fract(_962 * vec2(2048.0));\n            highp float _1028 = _973.y;\n            _1234 = mix(mix(float(_956 < dot(texture2D(u_shadowMapTex, _962), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_956 < dot(texture2D(u_shadowMapTex, _962 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1028), mix(float(_956 < dot(texture2D(u_shadowMapTex, _962 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_956 < dot(texture2D(u_shadowMapTex, _962 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1028), _973.x);\n            break;\n        }\n        _1237 = _1234;\n    }\n    else\n    {\n        _1237 = 1.0;\n    }\n    bool _1565 = _872 ? true : false;\n    bool _1256 = (!_1565) && (_859 < u_csmFarBounds.y);\n    highp float _1347 = 0.0;\n    if (_1256)\n    {\n        highp vec3 _1267 = ((u_csmLightSpaceMatrices[1] * _855).xyz * 0.5) + vec3(0.5);\n        highp float _1269 = _1267.x;\n        highp float _1272 = _1267.y;\n        highp float _1280 = (((_1267.z + step(_1269, 0.001000000047497451305389404296875)) + step(_1272, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1269)) + step(0.999000012874603271484375, _1272);\n        highp float _1344 = 0.0;\n        for (int SPIRV_Cross_Dummy344 = 0; SPIRV_Cross_Dummy344 < 1; SPIRV_Cross_Dummy344++)\n        {\n            if (_1280 > 1.0)\n            {\n                _1344 = 1.0;\n                break;\n            }\n            highp float _1298 = _1280 - 0.001000000047497451305389404296875;\n            highp vec2 _1302 = ((_1267.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1309 = fract(_1302 * vec2(2048.0));\n            highp float _1337 = _1309.y;\n            _1344 = mix(mix(float(_1298 < dot(texture2D(u_shadowMapTex, _1302), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1298 < dot(texture2D(u_shadowMapTex, _1302 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1337), mix(float(_1298 < dot(texture2D(u_shadowMapTex, _1302 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1298 < dot(texture2D(u_shadowMapTex, _1302 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1337), _1309.x);\n            break;\n        }\n        _1347 = _1344;\n    }\n    else\n    {\n        _1347 = _1237;\n    }\n    bool _1566 = _1256 ? true : _1565;\n    bool _1361 = (!_1566) && (_859 < u_csmFarBounds.z);\n    highp float _1452 = 0.0;\n    if (_1361)\n    {\n        highp vec3 _1372 = ((u_csmLightSpaceMatrices[2] * _855).xyz * 0.5) + vec3(0.5);\n        highp float _1374 = _1372.x;\n        highp float _1377 = _1372.y;\n        highp float _1385 = (((_1372.z + step(_1374, 0.001000000047497451305389404296875)) + step(_1377, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1374)) + step(0.999000012874603271484375, _1377);\n        highp float _1449 = 0.0;\n        for (int SPIRV_Cross_Dummy420 = 0; SPIRV_Cross_Dummy420 < 1; SPIRV_Cross_Dummy420++)\n        {\n            if (_1385 > 1.0)\n            {\n                _1449 = 1.0;\n                break;\n            }\n            highp float _1403 = _1385 - 0.001000000047497451305389404296875;\n            highp vec2 _1407 = ((_1372.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1414 = fract(_1407 * vec2(2048.0));\n            highp float _1442 = _1414.y;\n            _1449 = mix(mix(float(_1403 < dot(texture2D(u_shadowMapTex, _1407), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1403 < dot(texture2D(u_shadowMapTex, _1407 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1442), mix(float(_1403 < dot(texture2D(u_shadowMapTex, _1407 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1403 < dot(texture2D(u_shadowMapTex, _1407 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1442), _1414.x);\n            break;\n        }\n        _1452 = _1449;\n    }\n    else\n    {\n        _1452 = _1347;\n    }\n    highp float _1557 = 0.0;\n    if ((!(_1361 ? true : _1566)) && (_859 < u_csmFarBounds.w))\n    {\n        highp vec3 _1477 = ((u_csmLightSpaceMatrices[3] * _855).xyz * 0.5) + vec3(0.5);\n        highp float _1479 = _1477.x;\n        highp float _1482 = _1477.y;\n        highp float _1490 = (((_1477.z + step(_1479, 0.001000000047497451305389404296875)) + step(_1482, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1479)) + step(0.999000012874603271484375, _1482);\n        highp float _1554 = 0.0;\n        for (int SPIRV_Cross_Dummy490 = 0; SPIRV_Cross_Dummy490 < 1; SPIRV_Cross_Dummy490++)\n        {\n            if (_1490 > 1.0)\n            {\n                _1554 = 1.0;\n                break;\n            }\n            highp float _1508 = _1490 - 0.001000000047497451305389404296875;\n            highp vec2 _1512 = ((_1477.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1519 = fract(_1512 * vec2(2048.0));\n            highp float _1547 = _1519.y;\n            _1554 = mix(mix(float(_1508 < dot(texture2D(u_shadowMapTex, _1512), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1508 < dot(texture2D(u_shadowMapTex, _1512 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1547), mix(float(_1508 < dot(texture2D(u_shadowMapTex, _1512 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1508 < dot(texture2D(u_shadowMapTex, _1512 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1547), _1519.x);\n            break;\n        }\n        _1557 = _1554;\n    }\n    else\n    {\n        _1557 = _1452;\n    }\n    highp vec4 _753 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _755 = _753.xyz * 2.0;\n    highp vec4 _765 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _784 = vec4(_718.xyz * (min(_755, mix(max(_755 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1557))), u_shadowColor), _755, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_801, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_801, _801)))))), _Shininess * 128.0)) * (_765.xyz * _SpecColor.xyz))), _718.w);\n    highp float _1114 = length(varying_positionCamera_Fog);\n    highp float _1227 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1227 = (u_fogInfos.z - _1114) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1228 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1228 = 1.0 / pow(2.7182800769805908203125, _1114 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1229 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1229 = 1.0 / pow(2.7182800769805908203125, ((_1114 * _1114) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1229 = 1.0;\n            }\n            _1228 = _1229;\n        }\n        _1227 = _1228;\n    }\n    highp float _1160 = clamp(_1227, 0.0, 1.0);\n    highp vec3 _1169 = (_784.xyz * _1160) + (u_fogColor * (1.0 - _1160));\n    gl_FragData[0] = vec4(_1169.x, _1169.y, _1169.z, _784.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _366 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _374 = (_366 * _Color) * _AlbedoIntensity;\n    highp float _376 = _374.w;\n    if ((_376 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _385 = normalize(varying_LightDir);\n    highp vec3 _391 = normalize(varying_WorldNormal);\n    highp vec4 _413 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _432 = vec4(_374.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_385, _391))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _385), _391)), _Shininess * 128.0)) * (_413.xyz * _SpecColor.xyz))), _376);\n    highp float _476 = length(varying_positionCamera_Fog);\n    highp float _558 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _558 = (u_fogInfos.z - _476) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _559 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _559 = 1.0 / pow(2.7182800769805908203125, _476 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _560 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _560 = 1.0 / pow(2.7182800769805908203125, ((_476 * _476) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _560 = 1.0;\n            }\n            _559 = _560;\n        }\n        _558 = _559;\n    }\n    highp float _522 = clamp(_558, 0.0, 1.0);\n    highp vec3 _531 = (_432.xyz * _522) + (u_fogColor * (1.0 - _522));\n    gl_FragData[0] = vec4(_531.x, _531.y, _531.z, _432.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _623 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _631 = (_623 * _Color) * _AlbedoIntensity;\n    highp vec4 _646 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _707 = (_646.xy - vec2(0.5)) * 2.0;\n    highp vec4 _761 = vec4(varying_ShadowPosition, 1.0);\n    highp float _765 = -(u_view * _761).z;\n    bool _778 = true && (_765 < u_csmFarBounds.x);\n    highp float _1068 = 0.0;\n    if (_778)\n    {\n        highp vec3 _793 = ((u_csmLightSpaceMatrices[0] * _761).xyz * 0.5) + vec3(0.5);\n        highp float _797 = _793.x;\n        highp float _801 = _793.y;\n        highp float _811 = (((_793.z + step(_797, 0.001000000047497451305389404296875)) + step(_801, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _797)) + step(0.999000012874603271484375, _801);\n        highp float _1065 = 0.0;\n        for (int SPIRV_Cross_Dummy264 = 0; SPIRV_Cross_Dummy264 < 1; SPIRV_Cross_Dummy264++)\n        {\n            if (_811 > 1.0)\n            {\n                _1065 = 1.0;\n                break;\n            }\n            highp float _862 = _811 - 0.001000000047497451305389404296875;\n            highp vec2 _868 = ((_793.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _879 = fract(_868 * vec2(2048.0));\n            highp float _934 = _879.y;\n            _1065 = mix(mix(float(_862 < dot(texture2D(u_shadowMapTex, _868), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_862 < dot(texture2D(u_shadowMapTex, _868 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _934), mix(float(_862 < dot(texture2D(u_shadowMapTex, _868 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_862 < dot(texture2D(u_shadowMapTex, _868 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _934), _879.x);\n            break;\n        }\n        _1068 = _1065;\n    }\n    else\n    {\n        _1068 = 1.0;\n    }\n    bool _1396 = _778 ? true : false;\n    bool _1087 = (!_1396) && (_765 < u_csmFarBounds.y);\n    highp float _1178 = 0.0;\n    if (_1087)\n    {\n        highp vec3 _1098 = ((u_csmLightSpaceMatrices[1] * _761).xyz * 0.5) + vec3(0.5);\n        highp float _1100 = _1098.x;\n        highp float _1103 = _1098.y;\n        highp float _1111 = (((_1098.z + step(_1100, 0.001000000047497451305389404296875)) + step(_1103, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1100)) + step(0.999000012874603271484375, _1103);\n        highp float _1175 = 0.0;\n        for (int SPIRV_Cross_Dummy340 = 0; SPIRV_Cross_Dummy340 < 1; SPIRV_Cross_Dummy340++)\n        {\n            if (_1111 > 1.0)\n            {\n                _1175 = 1.0;\n                break;\n            }\n            highp float _1129 = _1111 - 0.001000000047497451305389404296875;\n            highp vec2 _1133 = ((_1098.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1140 = fract(_1133 * vec2(2048.0));\n            highp float _1168 = _1140.y;\n            _1175 = mix(mix(float(_1129 < dot(texture2D(u_shadowMapTex, _1133), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1129 < dot(texture2D(u_shadowMapTex, _1133 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1168), mix(float(_1129 < dot(texture2D(u_shadowMapTex, _1133 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1129 < dot(texture2D(u_shadowMapTex, _1133 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1168), _1140.x);\n            break;\n        }\n        _1178 = _1175;\n    }\n    else\n    {\n        _1178 = _1068;\n    }\n    bool _1397 = _1087 ? true : _1396;\n    bool _1192 = (!_1397) && (_765 < u_csmFarBounds.z);\n    highp float _1283 = 0.0;\n    if (_1192)\n    {\n        highp vec3 _1203 = ((u_csmLightSpaceMatrices[2] * _761).xyz * 0.5) + vec3(0.5);\n        highp float _1205 = _1203.x;\n        highp float _1208 = _1203.y;\n        highp float _1216 = (((_1203.z + step(_1205, 0.001000000047497451305389404296875)) + step(_1208, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1205)) + step(0.999000012874603271484375, _1208);\n        highp float _1280 = 0.0;\n        for (int SPIRV_Cross_Dummy416 = 0; SPIRV_Cross_Dummy416 < 1; SPIRV_Cross_Dummy416++)\n        {\n            if (_1216 > 1.0)\n            {\n                _1280 = 1.0;\n                break;\n            }\n            highp float _1234 = _1216 - 0.001000000047497451305389404296875;\n            highp vec2 _1238 = ((_1203.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1245 = fract(_1238 * vec2(2048.0));\n            highp float _1273 = _1245.y;\n            _1280 = mix(mix(float(_1234 < dot(texture2D(u_shadowMapTex, _1238), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1234 < dot(texture2D(u_shadowMapTex, _1238 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1273), mix(float(_1234 < dot(texture2D(u_shadowMapTex, _1238 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1234 < dot(texture2D(u_shadowMapTex, _1238 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1273), _1245.x);\n            break;\n        }\n        _1283 = _1280;\n    }\n    else\n    {\n        _1283 = _1178;\n    }\n    highp float _1388 = 0.0;\n    if ((!(_1192 ? true : _1397)) && (_765 < u_csmFarBounds.w))\n    {\n        highp vec3 _1308 = ((u_csmLightSpaceMatrices[3] * _761).xyz * 0.5) + vec3(0.5);\n        highp float _1310 = _1308.x;\n        highp float _1313 = _1308.y;\n        highp float _1321 = (((_1308.z + step(_1310, 0.001000000047497451305389404296875)) + step(_1313, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1310)) + step(0.999000012874603271484375, _1313);\n        highp float _1385 = 0.0;\n        for (int SPIRV_Cross_Dummy486 = 0; SPIRV_Cross_Dummy486 < 1; SPIRV_Cross_Dummy486++)\n        {\n            if (_1321 > 1.0)\n            {\n                _1385 = 1.0;\n                break;\n            }\n            highp float _1339 = _1321 - 0.001000000047497451305389404296875;\n            highp vec2 _1343 = ((_1308.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1350 = fract(_1343 * vec2(2048.0));\n            highp float _1378 = _1350.y;\n            _1385 = mix(mix(float(_1339 < dot(texture2D(u_shadowMapTex, _1343), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1339 < dot(texture2D(u_shadowMapTex, _1343 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1378), mix(float(_1339 < dot(texture2D(u_shadowMapTex, _1343 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1339 < dot(texture2D(u_shadowMapTex, _1343 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1378), _1350.x);\n            break;\n        }\n        _1388 = _1385;\n    }\n    else\n    {\n        _1388 = _1283;\n    }\n    highp vec3 _668 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_631.xyz * (min(_668, mix(max(_668 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1388))), u_shadowColor), _668, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_707, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_707, _707)))))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _631.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _340 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _348 = (_340 * _Color) * _AlbedoIntensity;\n    highp float _350 = _348.w;\n    if ((_350 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _383 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_348.xyz * (min(_383, mix(max(_383, u_shadowColor), _383, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _350);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _646 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _654 = (_646 * _Color) * _AlbedoIntensity;\n    highp vec3 _657 = normalize(varying_LightDir);\n    highp vec4 _669 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _731 = (_669.xy - vec2(0.5)) * 2.0;\n    highp vec3 _742 = vec3(_731, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_731, _731))));\n    highp vec4 _785 = vec4(varying_ShadowPosition, 1.0);\n    highp float _789 = -(u_view * _785).z;\n    bool _802 = true && (_789 < u_csmFarBounds.x);\n    highp float _1124 = 0.0;\n    if (_802)\n    {\n        highp vec3 _817 = ((u_csmLightSpaceMatrices[0] * _785).xyz * 0.5) + vec3(0.5);\n        highp float _821 = _817.x;\n        highp float _825 = _817.y;\n        highp float _835 = (((_817.z + step(_821, 0.001000000047497451305389404296875)) + step(_825, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _821)) + step(0.999000012874603271484375, _825);\n        highp float _1121 = 0.0;\n        for (int SPIRV_Cross_Dummy263 = 0; SPIRV_Cross_Dummy263 < 1; SPIRV_Cross_Dummy263++)\n        {\n            if (_835 > 1.0)\n            {\n                _1121 = 1.0;\n                break;\n            }\n            highp float _886 = _835 - 0.001000000047497451305389404296875;\n            highp vec2 _892 = ((_817.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _903 = fract(_892 * vec2(2048.0));\n            highp float _958 = _903.y;\n            _1121 = mix(mix(float(_886 < dot(texture2D(u_shadowMapTex, _892), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_886 < dot(texture2D(u_shadowMapTex, _892 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _958), mix(float(_886 < dot(texture2D(u_shadowMapTex, _892 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_886 < dot(texture2D(u_shadowMapTex, _892 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _958), _903.x);\n            break;\n        }\n        _1124 = _1121;\n    }\n    else\n    {\n        _1124 = 1.0;\n    }\n    bool _1452 = _802 ? true : false;\n    bool _1143 = (!_1452) && (_789 < u_csmFarBounds.y);\n    highp float _1234 = 0.0;\n    if (_1143)\n    {\n        highp vec3 _1154 = ((u_csmLightSpaceMatrices[1] * _785).xyz * 0.5) + vec3(0.5);\n        highp float _1156 = _1154.x;\n        highp float _1159 = _1154.y;\n        highp float _1167 = (((_1154.z + step(_1156, 0.001000000047497451305389404296875)) + step(_1159, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1156)) + step(0.999000012874603271484375, _1159);\n        highp float _1231 = 0.0;\n        for (int SPIRV_Cross_Dummy339 = 0; SPIRV_Cross_Dummy339 < 1; SPIRV_Cross_Dummy339++)\n        {\n            if (_1167 > 1.0)\n            {\n                _1231 = 1.0;\n                break;\n            }\n            highp float _1185 = _1167 - 0.001000000047497451305389404296875;\n            highp vec2 _1189 = ((_1154.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1196 = fract(_1189 * vec2(2048.0));\n            highp float _1224 = _1196.y;\n            _1231 = mix(mix(float(_1185 < dot(texture2D(u_shadowMapTex, _1189), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1185 < dot(texture2D(u_shadowMapTex, _1189 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1224), mix(float(_1185 < dot(texture2D(u_shadowMapTex, _1189 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1185 < dot(texture2D(u_shadowMapTex, _1189 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1224), _1196.x);\n            break;\n        }\n        _1234 = _1231;\n    }\n    else\n    {\n        _1234 = _1124;\n    }\n    bool _1453 = _1143 ? true : _1452;\n    bool _1248 = (!_1453) && (_789 < u_csmFarBounds.z);\n    highp float _1339 = 0.0;\n    if (_1248)\n    {\n        highp vec3 _1259 = ((u_csmLightSpaceMatrices[2] * _785).xyz * 0.5) + vec3(0.5);\n        highp float _1261 = _1259.x;\n        highp float _1264 = _1259.y;\n        highp float _1272 = (((_1259.z + step(_1261, 0.001000000047497451305389404296875)) + step(_1264, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1261)) + step(0.999000012874603271484375, _1264);\n        highp float _1336 = 0.0;\n        for (int SPIRV_Cross_Dummy415 = 0; SPIRV_Cross_Dummy415 < 1; SPIRV_Cross_Dummy415++)\n        {\n            if (_1272 > 1.0)\n            {\n                _1336 = 1.0;\n                break;\n            }\n            highp float _1290 = _1272 - 0.001000000047497451305389404296875;\n            highp vec2 _1294 = ((_1259.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1301 = fract(_1294 * vec2(2048.0));\n            highp float _1329 = _1301.y;\n            _1336 = mix(mix(float(_1290 < dot(texture2D(u_shadowMapTex, _1294), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1290 < dot(texture2D(u_shadowMapTex, _1294 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1329), mix(float(_1290 < dot(texture2D(u_shadowMapTex, _1294 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1290 < dot(texture2D(u_shadowMapTex, _1294 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1329), _1301.x);\n            break;\n        }\n        _1339 = _1336;\n    }\n    else\n    {\n        _1339 = _1234;\n    }\n    highp float _1444 = 0.0;\n    if ((!(_1248 ? true : _1453)) && (_789 < u_csmFarBounds.w))\n    {\n        highp vec3 _1364 = ((u_csmLightSpaceMatrices[3] * _785).xyz * 0.5) + vec3(0.5);\n        highp float _1366 = _1364.x;\n        highp float _1369 = _1364.y;\n        highp float _1377 = (((_1364.z + step(_1366, 0.001000000047497451305389404296875)) + step(_1369, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1366)) + step(0.999000012874603271484375, _1369);\n        highp float _1441 = 0.0;\n        for (int SPIRV_Cross_Dummy485 = 0; SPIRV_Cross_Dummy485 < 1; SPIRV_Cross_Dummy485++)\n        {\n            if (_1377 > 1.0)\n            {\n                _1441 = 1.0;\n                break;\n            }\n            highp float _1395 = _1377 - 0.001000000047497451305389404296875;\n            highp vec2 _1399 = ((_1364.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1406 = fract(_1399 * vec2(2048.0));\n            highp float _1434 = _1406.y;\n            _1441 = mix(mix(float(_1395 < dot(texture2D(u_shadowMapTex, _1399), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1395 < dot(texture2D(u_shadowMapTex, _1399 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1434), mix(float(_1395 < dot(texture2D(u_shadowMapTex, _1399 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1395 < dot(texture2D(u_shadowMapTex, _1399 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1434), _1406.x);\n            break;\n        }\n        _1444 = _1441;\n    }\n    else\n    {\n        _1444 = _1339;\n    }\n    highp vec4 _695 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _714 = vec4(_654.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_657, _742))) * _1444)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _657), _742)), _Shininess * 128.0)) * (_695.xyz * _SpecColor.xyz))), _654.w);\n    highp float _1006 = length(varying_positionCamera_Fog);\n    highp float _1114 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1114 = (u_fogInfos.z - _1006) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1115 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1115 = 1.0 / pow(2.7182800769805908203125, _1006 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1116 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1116 = 1.0 / pow(2.7182800769805908203125, ((_1006 * _1006) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1116 = 1.0;\n            }\n            _1115 = _1116;\n        }\n        _1114 = _1115;\n    }\n    highp float _1052 = clamp(_1114, 0.0, 1.0);\n    highp vec3 _1061 = (_714.xyz * _1052) + (u_fogColor * (1.0 - _1052));\n    gl_FragData[0] = vec4(_1061.x, _1061.y, _1061.z, _714.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _429 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _437 = (_429 * _Color) * _AlbedoIntensity;\n    highp float _439 = _437.w;\n    if ((_439 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _470 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _472 = _470.xyz * 2.0;\n    highp vec4 _482 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _501 = vec4(_437.xyz * (min(_472, mix(max(_472, u_shadowColor), _472, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_482.xyz * _SpecColor.xyz))), _439);\n    highp float _583 = length(varying_positionCamera_Fog);\n    highp float _669 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _669 = (u_fogInfos.z - _583) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _670 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _670 = 1.0 / pow(2.7182800769805908203125, _583 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _671 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _671 = 1.0 / pow(2.7182800769805908203125, ((_583 * _583) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _671 = 1.0;\n            }\n            _670 = _671;\n        }\n        _669 = _670;\n    }\n    highp float _629 = clamp(_669, 0.0, 1.0);\n    highp vec3 _638 = (_501.xyz * _629) + (u_fogColor * (1.0 - _629));\n    gl_FragData[0] = vec4(_638.x, _638.y, _638.z, _501.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _559 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _567 = (_559 * _Color) * _AlbedoIntensity;\n    highp vec3 _570 = normalize(varying_LightDir);\n    highp vec4 _582 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _637 = (_582.xy - vec2(0.5)) * 2.0;\n    highp vec3 _648 = vec3(_637, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_637, _637))));\n    highp vec4 _691 = vec4(varying_ShadowPosition, 1.0);\n    highp float _695 = -(u_view * _691).z;\n    bool _708 = true && (_695 < u_csmFarBounds.x);\n    highp float _955 = 0.0;\n    if (_708)\n    {\n        highp vec3 _723 = ((u_csmLightSpaceMatrices[0] * _691).xyz * 0.5) + vec3(0.5);\n        highp float _727 = _723.x;\n        highp float _731 = _723.y;\n        highp float _741 = (((_723.z + step(_727, 0.001000000047497451305389404296875)) + step(_731, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _727)) + step(0.999000012874603271484375, _731);\n        highp float _952 = 0.0;\n        for (int SPIRV_Cross_Dummy259 = 0; SPIRV_Cross_Dummy259 < 1; SPIRV_Cross_Dummy259++)\n        {\n            if (_741 > 1.0)\n            {\n                _952 = 1.0;\n                break;\n            }\n            highp float _792 = _741 - 0.001000000047497451305389404296875;\n            highp vec2 _798 = ((_723.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _809 = fract(_798 * vec2(2048.0));\n            highp float _864 = _809.y;\n            _952 = mix(mix(float(_792 < dot(texture2D(u_shadowMapTex, _798), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_792 < dot(texture2D(u_shadowMapTex, _798 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _864), mix(float(_792 < dot(texture2D(u_shadowMapTex, _798 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_792 < dot(texture2D(u_shadowMapTex, _798 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _864), _809.x);\n            break;\n        }\n        _955 = _952;\n    }\n    else\n    {\n        _955 = 1.0;\n    }\n    bool _1283 = _708 ? true : false;\n    bool _974 = (!_1283) && (_695 < u_csmFarBounds.y);\n    highp float _1065 = 0.0;\n    if (_974)\n    {\n        highp vec3 _985 = ((u_csmLightSpaceMatrices[1] * _691).xyz * 0.5) + vec3(0.5);\n        highp float _987 = _985.x;\n        highp float _990 = _985.y;\n        highp float _998 = (((_985.z + step(_987, 0.001000000047497451305389404296875)) + step(_990, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _987)) + step(0.999000012874603271484375, _990);\n        highp float _1062 = 0.0;\n        for (int SPIRV_Cross_Dummy335 = 0; SPIRV_Cross_Dummy335 < 1; SPIRV_Cross_Dummy335++)\n        {\n            if (_998 > 1.0)\n            {\n                _1062 = 1.0;\n                break;\n            }\n            highp float _1016 = _998 - 0.001000000047497451305389404296875;\n            highp vec2 _1020 = ((_985.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1027 = fract(_1020 * vec2(2048.0));\n            highp float _1055 = _1027.y;\n            _1062 = mix(mix(float(_1016 < dot(texture2D(u_shadowMapTex, _1020), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1016 < dot(texture2D(u_shadowMapTex, _1020 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1055), mix(float(_1016 < dot(texture2D(u_shadowMapTex, _1020 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1016 < dot(texture2D(u_shadowMapTex, _1020 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1055), _1027.x);\n            break;\n        }\n        _1065 = _1062;\n    }\n    else\n    {\n        _1065 = _955;\n    }\n    bool _1284 = _974 ? true : _1283;\n    bool _1079 = (!_1284) && (_695 < u_csmFarBounds.z);\n    highp float _1170 = 0.0;\n    if (_1079)\n    {\n        highp vec3 _1090 = ((u_csmLightSpaceMatrices[2] * _691).xyz * 0.5) + vec3(0.5);\n        highp float _1092 = _1090.x;\n        highp float _1095 = _1090.y;\n        highp float _1103 = (((_1090.z + step(_1092, 0.001000000047497451305389404296875)) + step(_1095, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1092)) + step(0.999000012874603271484375, _1095);\n        highp float _1167 = 0.0;\n        for (int SPIRV_Cross_Dummy411 = 0; SPIRV_Cross_Dummy411 < 1; SPIRV_Cross_Dummy411++)\n        {\n            if (_1103 > 1.0)\n            {\n                _1167 = 1.0;\n                break;\n            }\n            highp float _1121 = _1103 - 0.001000000047497451305389404296875;\n            highp vec2 _1125 = ((_1090.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1132 = fract(_1125 * vec2(2048.0));\n            highp float _1160 = _1132.y;\n            _1167 = mix(mix(float(_1121 < dot(texture2D(u_shadowMapTex, _1125), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1121 < dot(texture2D(u_shadowMapTex, _1125 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1160), mix(float(_1121 < dot(texture2D(u_shadowMapTex, _1125 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1121 < dot(texture2D(u_shadowMapTex, _1125 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1160), _1132.x);\n            break;\n        }\n        _1170 = _1167;\n    }\n    else\n    {\n        _1170 = _1065;\n    }\n    highp float _1275 = 0.0;\n    if ((!(_1079 ? true : _1284)) && (_695 < u_csmFarBounds.w))\n    {\n        highp vec3 _1195 = ((u_csmLightSpaceMatrices[3] * _691).xyz * 0.5) + vec3(0.5);\n        highp float _1197 = _1195.x;\n        highp float _1200 = _1195.y;\n        highp float _1208 = (((_1195.z + step(_1197, 0.001000000047497451305389404296875)) + step(_1200, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1197)) + step(0.999000012874603271484375, _1200);\n        highp float _1272 = 0.0;\n        for (int SPIRV_Cross_Dummy481 = 0; SPIRV_Cross_Dummy481 < 1; SPIRV_Cross_Dummy481++)\n        {\n            if (_1208 > 1.0)\n            {\n                _1272 = 1.0;\n                break;\n            }\n            highp float _1226 = _1208 - 0.001000000047497451305389404296875;\n            highp vec2 _1230 = ((_1195.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1237 = fract(_1230 * vec2(2048.0));\n            highp float _1265 = _1237.y;\n            _1272 = mix(mix(float(_1226 < dot(texture2D(u_shadowMapTex, _1230), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1226 < dot(texture2D(u_shadowMapTex, _1230 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1265), mix(float(_1226 < dot(texture2D(u_shadowMapTex, _1230 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1226 < dot(texture2D(u_shadowMapTex, _1230 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1265), _1237.x);\n            break;\n        }\n        _1275 = _1272;\n    }\n    else\n    {\n        _1275 = _1170;\n    }\n    gl_FragData[0] = vec4(_567.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_570, _648))) * _1275)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _570), _648)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _567.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\n\nvoid main()\n{\n    highp vec4 _296 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _304 = (_296 * _Color) * _AlbedoIntensity;\n    highp float _306 = _304.w;\n    if ((_306 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _315 = normalize(varying_LightDir);\n    highp vec3 _321 = normalize(varying_WorldNormal);\n    highp vec4 _357 = vec4(_304.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_315, _321))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _315), _321)), _Shininess * 128.0)) * (_SpecColor.xyz * _296.w))), _306);\n    highp vec3 _373 = _357.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_373.x, _373.y, _373.z, _357.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _476 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _484 = (_476 * _Color) * _AlbedoIntensity;\n    highp vec4 _499 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _577 = (_499.xy - vec2(0.5)) * 2.0;\n    highp vec4 _516 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _518 = _516.xyz * 2.0;\n    highp vec4 _542 = vec4(_484.xyz * (min(_518, mix(max(_518, u_shadowColor), _518, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_577, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_577, _577)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _476.w))), _484.w);\n    highp vec4 _548 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _661 = length(varying_positionCamera_Fog);\n    highp float _748 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _748 = (u_fogInfos.z - _661) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _749 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _749 = 1.0 / pow(2.7182800769805908203125, _661 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _750 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _750 = 1.0 / pow(2.7182800769805908203125, ((_661 * _661) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _750 = 1.0;\n            }\n            _749 = _750;\n        }\n        _748 = _749;\n    }\n    highp float _707 = clamp(_748, 0.0, 1.0);\n    highp vec3 _716 = ((_542.xyz + (_EmissionColor.xyz * _548.x)).xyz * _707) + (u_fogColor * (1.0 - _707));\n    gl_FragData[0] = vec4(_716.x, _716.y, _716.z, _542.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _385 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _393 = (_385 * _Color) * _AlbedoIntensity;\n    highp float _395 = _393.w;\n    if ((_395 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _404 = normalize(varying_LightDir);\n    highp vec3 _410 = normalize(varying_WorldNormal);\n    highp vec4 _446 = vec4(_393.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_404, _410))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _404), _410)), _Shininess * 128.0)) * (_SpecColor.xyz * _385.w))), _395);\n    highp vec4 _452 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _508 = length(varying_positionCamera_Fog);\n    highp float _592 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _592 = (u_fogInfos.z - _508) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _593 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _593 = 1.0 / pow(2.7182800769805908203125, _508 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _594 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _594 = 1.0 / pow(2.7182800769805908203125, ((_508 * _508) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _594 = 1.0;\n            }\n            _593 = _594;\n        }\n        _592 = _593;\n    }\n    highp float _554 = clamp(_592, 0.0, 1.0);\n    highp vec3 _563 = ((_446.xyz + (_EmissionColor.xyz * _452.x)).xyz * _554) + (u_fogColor * (1.0 - _554));\n    gl_FragData[0] = vec4(_563.x, _563.y, _563.z, _446.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _386 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _394 = (_386 * _Color) * _AlbedoIntensity;\n    highp vec2 _480 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _428 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _452 = vec4(_394.xyz * (min(_428, mix(max(_428, u_shadowColor), _428, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_480, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_480, _480)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _386.w))), _394.w);\n    highp vec3 _468 = _452.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_468.x, _468.y, _468.z, _452.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _360 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _368 = (_360 * _Color) * _AlbedoIntensity;\n    highp float _370 = _368.w;\n    if ((_370 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _403 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _427 = vec4(_368.xyz * (min(_403, mix(max(_403, u_shadowColor), _403, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_SpecColor.xyz * _360.w))), _370);\n    highp vec3 _443 = _427.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_443.x, _443.y, _443.z, _427.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _413 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _421 = (_413 * _Color) * _AlbedoIntensity;\n    highp vec3 _424 = normalize(varying_LightDir);\n    highp vec4 _436 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _508 = (_436.xy - vec2(0.5)) * 2.0;\n    highp vec3 _519 = vec3(_508, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_508, _508))));\n    highp vec4 _473 = vec4(_421.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_424, _519))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _424), _519)), _Shininess * 128.0)) * (_SpecColor.xyz * _413.w))), _421.w);\n    highp vec4 _479 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _554 = length(varying_positionCamera_Fog);\n    highp float _636 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _636 = (u_fogInfos.z - _554) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _637 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _637 = 1.0 / pow(2.7182800769805908203125, _554 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _638 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _638 = 1.0 / pow(2.7182800769805908203125, ((_554 * _554) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _638 = 1.0;\n            }\n            _637 = _638;\n        }\n        _636 = _637;\n    }\n    highp float _600 = clamp(_636, 0.0, 1.0);\n    highp vec3 _609 = ((_473.xyz + (_EmissionColor.xyz * _479.x)).xyz * _600) + (u_fogColor * (1.0 - _600));\n    gl_FragData[0] = vec4(_609.x, _609.y, _609.z, _473.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _448 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _456 = (_448 * _Color) * _AlbedoIntensity;\n    highp float _458 = _456.w;\n    if ((_458 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _489 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _491 = _489.xyz * 2.0;\n    highp vec4 _515 = vec4(_456.xyz * (min(_491, mix(max(_491, u_shadowColor), _491, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), normalize(varying_WorldNormal))), _Shininess * 128.0)) * (_SpecColor.xyz * _448.w))), _458);\n    highp vec4 _521 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _615 = length(varying_positionCamera_Fog);\n    highp float _703 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _703 = (u_fogInfos.z - _615) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _704 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _704 = 1.0 / pow(2.7182800769805908203125, _615 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _705 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _705 = 1.0 / pow(2.7182800769805908203125, ((_615 * _615) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _705 = 1.0;\n            }\n            _704 = _705;\n        }\n        _703 = _704;\n    }\n    highp float _661 = clamp(_703, 0.0, 1.0);\n    highp vec3 _670 = ((_515.xyz + (_EmissionColor.xyz * _521.x)).xyz * _661) + (u_fogColor * (1.0 - _661));\n    gl_FragData[0] = vec4(_670.x, _670.y, _670.z, _515.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\n\nvoid main()\n{\n    highp vec4 _323 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _331 = (_323 * _Color) * _AlbedoIntensity;\n    highp vec3 _334 = normalize(varying_LightDir);\n    highp vec2 _411 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _422 = vec3(_411, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_411, _411))));\n    highp vec4 _383 = vec4(_331.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_334, _422))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _334), _422)), _Shininess * 128.0)) * (_SpecColor.xyz * _323.w))), _331.w);\n    highp vec3 _399 = _383.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_399.x, _399.y, _399.z, _383.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _553 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _561 = (_553 * _Color) * _AlbedoIntensity;\n    highp float _563 = _561.w;\n    if ((_563 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _572 = normalize(varying_LightDir);\n    highp vec3 _578 = normalize(varying_WorldNormal);\n    highp vec4 _685 = vec4(varying_ShadowPosition, 1.0);\n    highp float _689 = -(u_view * _685).z;\n    bool _702 = true && (_689 < u_csmFarBounds.x);\n    highp float _952 = 0.0;\n    if (_702)\n    {\n        highp vec3 _717 = ((u_csmLightSpaceMatrices[0] * _685).xyz * 0.5) + vec3(0.5);\n        highp float _721 = _717.x;\n        highp float _725 = _717.y;\n        highp float _735 = (((_717.z + step(_721, 0.001000000047497451305389404296875)) + step(_725, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _721)) + step(0.999000012874603271484375, _725);\n        highp float _949 = 0.0;\n        for (int SPIRV_Cross_Dummy267 = 0; SPIRV_Cross_Dummy267 < 1; SPIRV_Cross_Dummy267++)\n        {\n            if (_735 > 1.0)\n            {\n                _949 = 1.0;\n                break;\n            }\n            highp float _786 = _735 - 0.001000000047497451305389404296875;\n            highp vec2 _792 = ((_717.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _803 = fract(_792 * vec2(2048.0));\n            highp float _858 = _803.y;\n            _949 = mix(mix(float(_786 < dot(texture2D(u_shadowMapTex, _792), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_786 < dot(texture2D(u_shadowMapTex, _792 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _858), mix(float(_786 < dot(texture2D(u_shadowMapTex, _792 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_786 < dot(texture2D(u_shadowMapTex, _792 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _858), _803.x);\n            break;\n        }\n        _952 = _949;\n    }\n    else\n    {\n        _952 = 1.0;\n    }\n    bool _1278 = _702 ? true : false;\n    bool _970 = (!_1278) && (_689 < u_csmFarBounds.y);\n    highp float _1061 = 0.0;\n    if (_970)\n    {\n        highp vec3 _981 = ((u_csmLightSpaceMatrices[1] * _685).xyz * 0.5) + vec3(0.5);\n        highp float _983 = _981.x;\n        highp float _986 = _981.y;\n        highp float _994 = (((_981.z + step(_983, 0.001000000047497451305389404296875)) + step(_986, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _983)) + step(0.999000012874603271484375, _986);\n        highp float _1058 = 0.0;\n        for (int SPIRV_Cross_Dummy343 = 0; SPIRV_Cross_Dummy343 < 1; SPIRV_Cross_Dummy343++)\n        {\n            if (_994 > 1.0)\n            {\n                _1058 = 1.0;\n                break;\n            }\n            highp float _1012 = _994 - 0.001000000047497451305389404296875;\n            highp vec2 _1016 = ((_981.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1023 = fract(_1016 * vec2(2048.0));\n            highp float _1051 = _1023.y;\n            _1058 = mix(mix(float(_1012 < dot(texture2D(u_shadowMapTex, _1016), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1012 < dot(texture2D(u_shadowMapTex, _1016 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1051), mix(float(_1012 < dot(texture2D(u_shadowMapTex, _1016 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1012 < dot(texture2D(u_shadowMapTex, _1016 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1051), _1023.x);\n            break;\n        }\n        _1061 = _1058;\n    }\n    else\n    {\n        _1061 = _952;\n    }\n    bool _1279 = _970 ? true : _1278;\n    bool _1075 = (!_1279) && (_689 < u_csmFarBounds.z);\n    highp float _1166 = 0.0;\n    if (_1075)\n    {\n        highp vec3 _1086 = ((u_csmLightSpaceMatrices[2] * _685).xyz * 0.5) + vec3(0.5);\n        highp float _1088 = _1086.x;\n        highp float _1091 = _1086.y;\n        highp float _1099 = (((_1086.z + step(_1088, 0.001000000047497451305389404296875)) + step(_1091, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1088)) + step(0.999000012874603271484375, _1091);\n        highp float _1163 = 0.0;\n        for (int SPIRV_Cross_Dummy419 = 0; SPIRV_Cross_Dummy419 < 1; SPIRV_Cross_Dummy419++)\n        {\n            if (_1099 > 1.0)\n            {\n                _1163 = 1.0;\n                break;\n            }\n            highp float _1117 = _1099 - 0.001000000047497451305389404296875;\n            highp vec2 _1121 = ((_1086.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1128 = fract(_1121 * vec2(2048.0));\n            highp float _1156 = _1128.y;\n            _1163 = mix(mix(float(_1117 < dot(texture2D(u_shadowMapTex, _1121), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1117 < dot(texture2D(u_shadowMapTex, _1121 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1156), mix(float(_1117 < dot(texture2D(u_shadowMapTex, _1121 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1117 < dot(texture2D(u_shadowMapTex, _1121 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1156), _1128.x);\n            break;\n        }\n        _1166 = _1163;\n    }\n    else\n    {\n        _1166 = _1061;\n    }\n    highp float _1271 = 0.0;\n    if ((!(_1075 ? true : _1279)) && (_689 < u_csmFarBounds.w))\n    {\n        highp vec3 _1191 = ((u_csmLightSpaceMatrices[3] * _685).xyz * 0.5) + vec3(0.5);\n        highp float _1193 = _1191.x;\n        highp float _1196 = _1191.y;\n        highp float _1204 = (((_1191.z + step(_1193, 0.001000000047497451305389404296875)) + step(_1196, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1193)) + step(0.999000012874603271484375, _1196);\n        highp float _1268 = 0.0;\n        for (int SPIRV_Cross_Dummy489 = 0; SPIRV_Cross_Dummy489 < 1; SPIRV_Cross_Dummy489++)\n        {\n            if (_1204 > 1.0)\n            {\n                _1268 = 1.0;\n                break;\n            }\n            highp float _1222 = _1204 - 0.001000000047497451305389404296875;\n            highp vec2 _1226 = ((_1191.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1233 = fract(_1226 * vec2(2048.0));\n            highp float _1261 = _1233.y;\n            _1268 = mix(mix(float(_1222 < dot(texture2D(u_shadowMapTex, _1226), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1222 < dot(texture2D(u_shadowMapTex, _1226 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1261), mix(float(_1222 < dot(texture2D(u_shadowMapTex, _1226 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1222 < dot(texture2D(u_shadowMapTex, _1226 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1261), _1233.x);\n            break;\n        }\n        _1271 = _1268;\n    }\n    else\n    {\n        _1271 = _1166;\n    }\n    highp vec4 _622 = vec4(_561.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_572, _578))) * _1271)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _572), _578)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _563);\n    highp vec3 _638 = _622.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_638.x, _638.y, _638.z, _622.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _374 = (texture2D(_MainTex, varying_TexCoord) * _Color) * _AlbedoIntensity;\n    highp vec2 _447 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _408 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_374.xyz * (min(_408, mix(max(_408, u_shadowColor), _408, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_447, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_447, _447)))))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _374.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _640 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _648 = (_640 * _Color) * _AlbedoIntensity;\n    highp float _650 = _648.w;\n    if ((_650 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _659 = normalize(varying_LightDir);\n    highp vec3 _665 = normalize(varying_WorldNormal);\n    highp vec4 _779 = vec4(varying_ShadowPosition, 1.0);\n    highp float _783 = -(u_view * _779).z;\n    bool _796 = true && (_783 < u_csmFarBounds.x);\n    highp float _1121 = 0.0;\n    if (_796)\n    {\n        highp vec3 _811 = ((u_csmLightSpaceMatrices[0] * _779).xyz * 0.5) + vec3(0.5);\n        highp float _815 = _811.x;\n        highp float _819 = _811.y;\n        highp float _829 = (((_811.z + step(_815, 0.001000000047497451305389404296875)) + step(_819, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _815)) + step(0.999000012874603271484375, _819);\n        highp float _1118 = 0.0;\n        for (int SPIRV_Cross_Dummy271 = 0; SPIRV_Cross_Dummy271 < 1; SPIRV_Cross_Dummy271++)\n        {\n            if (_829 > 1.0)\n            {\n                _1118 = 1.0;\n                break;\n            }\n            highp float _880 = _829 - 0.001000000047497451305389404296875;\n            highp vec2 _886 = ((_811.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _897 = fract(_886 * vec2(2048.0));\n            highp float _952 = _897.y;\n            _1118 = mix(mix(float(_880 < dot(texture2D(u_shadowMapTex, _886), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_880 < dot(texture2D(u_shadowMapTex, _886 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _952), mix(float(_880 < dot(texture2D(u_shadowMapTex, _886 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_880 < dot(texture2D(u_shadowMapTex, _886 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _952), _897.x);\n            break;\n        }\n        _1121 = _1118;\n    }\n    else\n    {\n        _1121 = 1.0;\n    }\n    bool _1448 = _796 ? true : false;\n    bool _1139 = (!_1448) && (_783 < u_csmFarBounds.y);\n    highp float _1230 = 0.0;\n    if (_1139)\n    {\n        highp vec3 _1150 = ((u_csmLightSpaceMatrices[1] * _779).xyz * 0.5) + vec3(0.5);\n        highp float _1152 = _1150.x;\n        highp float _1155 = _1150.y;\n        highp float _1163 = (((_1150.z + step(_1152, 0.001000000047497451305389404296875)) + step(_1155, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1152)) + step(0.999000012874603271484375, _1155);\n        highp float _1227 = 0.0;\n        for (int SPIRV_Cross_Dummy347 = 0; SPIRV_Cross_Dummy347 < 1; SPIRV_Cross_Dummy347++)\n        {\n            if (_1163 > 1.0)\n            {\n                _1227 = 1.0;\n                break;\n            }\n            highp float _1181 = _1163 - 0.001000000047497451305389404296875;\n            highp vec2 _1185 = ((_1150.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1192 = fract(_1185 * vec2(2048.0));\n            highp float _1220 = _1192.y;\n            _1227 = mix(mix(float(_1181 < dot(texture2D(u_shadowMapTex, _1185), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1181 < dot(texture2D(u_shadowMapTex, _1185 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1220), mix(float(_1181 < dot(texture2D(u_shadowMapTex, _1185 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1181 < dot(texture2D(u_shadowMapTex, _1185 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1220), _1192.x);\n            break;\n        }\n        _1230 = _1227;\n    }\n    else\n    {\n        _1230 = _1121;\n    }\n    bool _1449 = _1139 ? true : _1448;\n    bool _1244 = (!_1449) && (_783 < u_csmFarBounds.z);\n    highp float _1335 = 0.0;\n    if (_1244)\n    {\n        highp vec3 _1255 = ((u_csmLightSpaceMatrices[2] * _779).xyz * 0.5) + vec3(0.5);\n        highp float _1257 = _1255.x;\n        highp float _1260 = _1255.y;\n        highp float _1268 = (((_1255.z + step(_1257, 0.001000000047497451305389404296875)) + step(_1260, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1257)) + step(0.999000012874603271484375, _1260);\n        highp float _1332 = 0.0;\n        for (int SPIRV_Cross_Dummy423 = 0; SPIRV_Cross_Dummy423 < 1; SPIRV_Cross_Dummy423++)\n        {\n            if (_1268 > 1.0)\n            {\n                _1332 = 1.0;\n                break;\n            }\n            highp float _1286 = _1268 - 0.001000000047497451305389404296875;\n            highp vec2 _1290 = ((_1255.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1297 = fract(_1290 * vec2(2048.0));\n            highp float _1325 = _1297.y;\n            _1332 = mix(mix(float(_1286 < dot(texture2D(u_shadowMapTex, _1290), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1286 < dot(texture2D(u_shadowMapTex, _1290 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1325), mix(float(_1286 < dot(texture2D(u_shadowMapTex, _1290 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1286 < dot(texture2D(u_shadowMapTex, _1290 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1325), _1297.x);\n            break;\n        }\n        _1335 = _1332;\n    }\n    else\n    {\n        _1335 = _1230;\n    }\n    highp float _1440 = 0.0;\n    if ((!(_1244 ? true : _1449)) && (_783 < u_csmFarBounds.w))\n    {\n        highp vec3 _1360 = ((u_csmLightSpaceMatrices[3] * _779).xyz * 0.5) + vec3(0.5);\n        highp float _1362 = _1360.x;\n        highp float _1365 = _1360.y;\n        highp float _1373 = (((_1360.z + step(_1362, 0.001000000047497451305389404296875)) + step(_1365, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1362)) + step(0.999000012874603271484375, _1365);\n        highp float _1437 = 0.0;\n        for (int SPIRV_Cross_Dummy493 = 0; SPIRV_Cross_Dummy493 < 1; SPIRV_Cross_Dummy493++)\n        {\n            if (_1373 > 1.0)\n            {\n                _1437 = 1.0;\n                break;\n            }\n            highp float _1391 = _1373 - 0.001000000047497451305389404296875;\n            highp vec2 _1395 = ((_1360.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1402 = fract(_1395 * vec2(2048.0));\n            highp float _1430 = _1402.y;\n            _1437 = mix(mix(float(_1391 < dot(texture2D(u_shadowMapTex, _1395), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1391 < dot(texture2D(u_shadowMapTex, _1395 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1430), mix(float(_1391 < dot(texture2D(u_shadowMapTex, _1395 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1391 < dot(texture2D(u_shadowMapTex, _1395 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1430), _1402.x);\n            break;\n        }\n        _1440 = _1437;\n    }\n    else\n    {\n        _1440 = _1335;\n    }\n    highp vec4 _690 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _709 = vec4(_648.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_659, _665))) * _1440)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _659), _665)), _Shininess * 128.0)) * (_690.xyz * _SpecColor.xyz))), _650);\n    highp vec4 _715 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1000 = length(varying_positionCamera_Fog);\n    highp float _1111 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1111 = (u_fogInfos.z - _1000) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1112 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1112 = 1.0 / pow(2.7182800769805908203125, _1000 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1113 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1113 = 1.0 / pow(2.7182800769805908203125, ((_1000 * _1000) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1113 = 1.0;\n            }\n            _1112 = _1113;\n        }\n        _1111 = _1112;\n    }\n    highp float _1046 = clamp(_1111, 0.0, 1.0);\n    highp vec3 _1055 = ((_709.xyz + (_EmissionColor.xyz * _715.x)).xyz * _1046) + (u_fogColor * (1.0 - _1046));\n    gl_FragData[0] = vec4(_1055.x, _1055.y, _1055.z, _709.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _457 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _465 = (_457 * _Color) * _AlbedoIntensity;\n    highp vec4 _480 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _545 = (_480.xy - vec2(0.5)) * 2.0;\n    highp vec4 _497 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _499 = _497.xyz * 2.0;\n    highp vec4 _509 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _528 = vec4(_465.xyz * (min(_499, mix(max(_499, u_shadowColor), _499, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_545, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_545, _545)))))), _Shininess * 128.0)) * (_509.xyz * _SpecColor.xyz))), _465.w);\n    highp float _629 = length(varying_positionCamera_Fog);\n    highp float _714 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _714 = (u_fogInfos.z - _629) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _715 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _715 = 1.0 / pow(2.7182800769805908203125, _629 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _716 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _716 = 1.0 / pow(2.7182800769805908203125, ((_629 * _629) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _716 = 1.0;\n            }\n            _715 = _716;\n        }\n        _714 = _715;\n    }\n    highp float _675 = clamp(_714, 0.0, 1.0);\n    highp vec3 _684 = (_528.xyz * _675) + (u_fogColor * (1.0 - _675));\n    gl_FragData[0] = vec4(_684.x, _684.y, _684.z, _528.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _617 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _625 = (_617 * _Color) * _AlbedoIntensity;\n    highp float _627 = _625.w;\n    if ((_627 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _642 = normalize(varying_WorldNormal);\n    highp vec4 _755 = vec4(varying_ShadowPosition, 1.0);\n    highp float _759 = -(u_view * _755).z;\n    bool _772 = true && (_759 < u_csmFarBounds.x);\n    highp float _1064 = 0.0;\n    if (_772)\n    {\n        highp vec3 _787 = ((u_csmLightSpaceMatrices[0] * _755).xyz * 0.5) + vec3(0.5);\n        highp float _791 = _787.x;\n        highp float _795 = _787.y;\n        highp float _805 = (((_787.z + step(_791, 0.001000000047497451305389404296875)) + step(_795, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _791)) + step(0.999000012874603271484375, _795);\n        highp float _1061 = 0.0;\n        for (int SPIRV_Cross_Dummy271 = 0; SPIRV_Cross_Dummy271 < 1; SPIRV_Cross_Dummy271++)\n        {\n            if (_805 > 1.0)\n            {\n                _1061 = 1.0;\n                break;\n            }\n            highp float _856 = _805 - 0.001000000047497451305389404296875;\n            highp vec2 _862 = ((_787.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _873 = fract(_862 * vec2(2048.0));\n            highp float _928 = _873.y;\n            _1061 = mix(mix(float(_856 < dot(texture2D(u_shadowMapTex, _862), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_856 < dot(texture2D(u_shadowMapTex, _862 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _928), mix(float(_856 < dot(texture2D(u_shadowMapTex, _862 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_856 < dot(texture2D(u_shadowMapTex, _862 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _928), _873.x);\n            break;\n        }\n        _1064 = _1061;\n    }\n    else\n    {\n        _1064 = 1.0;\n    }\n    bool _1390 = _772 ? true : false;\n    bool _1082 = (!_1390) && (_759 < u_csmFarBounds.y);\n    highp float _1173 = 0.0;\n    if (_1082)\n    {\n        highp vec3 _1093 = ((u_csmLightSpaceMatrices[1] * _755).xyz * 0.5) + vec3(0.5);\n        highp float _1095 = _1093.x;\n        highp float _1098 = _1093.y;\n        highp float _1106 = (((_1093.z + step(_1095, 0.001000000047497451305389404296875)) + step(_1098, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1095)) + step(0.999000012874603271484375, _1098);\n        highp float _1170 = 0.0;\n        for (int SPIRV_Cross_Dummy347 = 0; SPIRV_Cross_Dummy347 < 1; SPIRV_Cross_Dummy347++)\n        {\n            if (_1106 > 1.0)\n            {\n                _1170 = 1.0;\n                break;\n            }\n            highp float _1124 = _1106 - 0.001000000047497451305389404296875;\n            highp vec2 _1128 = ((_1093.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1135 = fract(_1128 * vec2(2048.0));\n            highp float _1163 = _1135.y;\n            _1170 = mix(mix(float(_1124 < dot(texture2D(u_shadowMapTex, _1128), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1124 < dot(texture2D(u_shadowMapTex, _1128 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1163), mix(float(_1124 < dot(texture2D(u_shadowMapTex, _1128 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1124 < dot(texture2D(u_shadowMapTex, _1128 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1163), _1135.x);\n            break;\n        }\n        _1173 = _1170;\n    }\n    else\n    {\n        _1173 = _1064;\n    }\n    bool _1391 = _1082 ? true : _1390;\n    bool _1187 = (!_1391) && (_759 < u_csmFarBounds.z);\n    highp float _1278 = 0.0;\n    if (_1187)\n    {\n        highp vec3 _1198 = ((u_csmLightSpaceMatrices[2] * _755).xyz * 0.5) + vec3(0.5);\n        highp float _1200 = _1198.x;\n        highp float _1203 = _1198.y;\n        highp float _1211 = (((_1198.z + step(_1200, 0.001000000047497451305389404296875)) + step(_1203, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1200)) + step(0.999000012874603271484375, _1203);\n        highp float _1275 = 0.0;\n        for (int SPIRV_Cross_Dummy423 = 0; SPIRV_Cross_Dummy423 < 1; SPIRV_Cross_Dummy423++)\n        {\n            if (_1211 > 1.0)\n            {\n                _1275 = 1.0;\n                break;\n            }\n            highp float _1229 = _1211 - 0.001000000047497451305389404296875;\n            highp vec2 _1233 = ((_1198.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1240 = fract(_1233 * vec2(2048.0));\n            highp float _1268 = _1240.y;\n            _1275 = mix(mix(float(_1229 < dot(texture2D(u_shadowMapTex, _1233), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1229 < dot(texture2D(u_shadowMapTex, _1233 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1268), mix(float(_1229 < dot(texture2D(u_shadowMapTex, _1233 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1229 < dot(texture2D(u_shadowMapTex, _1233 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1268), _1240.x);\n            break;\n        }\n        _1278 = _1275;\n    }\n    else\n    {\n        _1278 = _1173;\n    }\n    highp float _1383 = 0.0;\n    if ((!(_1187 ? true : _1391)) && (_759 < u_csmFarBounds.w))\n    {\n        highp vec3 _1303 = ((u_csmLightSpaceMatrices[3] * _755).xyz * 0.5) + vec3(0.5);\n        highp float _1305 = _1303.x;\n        highp float _1308 = _1303.y;\n        highp float _1316 = (((_1303.z + step(_1305, 0.001000000047497451305389404296875)) + step(_1308, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1305)) + step(0.999000012874603271484375, _1308);\n        highp float _1380 = 0.0;\n        for (int SPIRV_Cross_Dummy493 = 0; SPIRV_Cross_Dummy493 < 1; SPIRV_Cross_Dummy493++)\n        {\n            if (_1316 > 1.0)\n            {\n                _1380 = 1.0;\n                break;\n            }\n            highp float _1334 = _1316 - 0.001000000047497451305389404296875;\n            highp vec2 _1338 = ((_1303.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1345 = fract(_1338 * vec2(2048.0));\n            highp float _1373 = _1345.y;\n            _1380 = mix(mix(float(_1334 < dot(texture2D(u_shadowMapTex, _1338), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1334 < dot(texture2D(u_shadowMapTex, _1338 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1373), mix(float(_1334 < dot(texture2D(u_shadowMapTex, _1338 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1334 < dot(texture2D(u_shadowMapTex, _1338 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1373), _1345.x);\n            break;\n        }\n        _1383 = _1380;\n    }\n    else\n    {\n        _1383 = _1278;\n    }\n    highp vec3 _663 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _692 = vec4(_625.xyz * (min(_663, mix(max(_663 - (u_lightColor * (clamp(dot(_642, u_lightDir), 0.0, 1.0) * (1.0 - _1383))), u_shadowColor), _663, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _642)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _627);\n    highp vec3 _708 = _692.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_708.x, _708.y, _708.z, _692.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\n\nvoid main()\n{\n    highp vec4 _311 = (texture2D(_MainTex, varying_TexCoord) * _Color) * _AlbedoIntensity;\n    highp vec3 _314 = normalize(varying_LightDir);\n    highp vec2 _378 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _389 = vec3(_378, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_378, _378))));\n    gl_FragData[0] = vec4(_311.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_314, _389))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _314), _389)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _311.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _704 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _712 = (_704 * _Color) * _AlbedoIntensity;\n    highp float _714 = _712.w;\n    if ((_714 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _729 = normalize(varying_WorldNormal);\n    highp vec4 _849 = vec4(varying_ShadowPosition, 1.0);\n    highp float _853 = -(u_view * _849).z;\n    bool _866 = true && (_853 < u_csmFarBounds.x);\n    highp float _1233 = 0.0;\n    if (_866)\n    {\n        highp vec3 _881 = ((u_csmLightSpaceMatrices[0] * _849).xyz * 0.5) + vec3(0.5);\n        highp float _885 = _881.x;\n        highp float _889 = _881.y;\n        highp float _899 = (((_881.z + step(_885, 0.001000000047497451305389404296875)) + step(_889, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _885)) + step(0.999000012874603271484375, _889);\n        highp float _1230 = 0.0;\n        for (int SPIRV_Cross_Dummy275 = 0; SPIRV_Cross_Dummy275 < 1; SPIRV_Cross_Dummy275++)\n        {\n            if (_899 > 1.0)\n            {\n                _1230 = 1.0;\n                break;\n            }\n            highp float _950 = _899 - 0.001000000047497451305389404296875;\n            highp vec2 _956 = ((_881.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _967 = fract(_956 * vec2(2048.0));\n            highp float _1022 = _967.y;\n            _1230 = mix(mix(float(_950 < dot(texture2D(u_shadowMapTex, _956), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_950 < dot(texture2D(u_shadowMapTex, _956 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1022), mix(float(_950 < dot(texture2D(u_shadowMapTex, _956 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_950 < dot(texture2D(u_shadowMapTex, _956 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1022), _967.x);\n            break;\n        }\n        _1233 = _1230;\n    }\n    else\n    {\n        _1233 = 1.0;\n    }\n    bool _1560 = _866 ? true : false;\n    bool _1251 = (!_1560) && (_853 < u_csmFarBounds.y);\n    highp float _1342 = 0.0;\n    if (_1251)\n    {\n        highp vec3 _1262 = ((u_csmLightSpaceMatrices[1] * _849).xyz * 0.5) + vec3(0.5);\n        highp float _1264 = _1262.x;\n        highp float _1267 = _1262.y;\n        highp float _1275 = (((_1262.z + step(_1264, 0.001000000047497451305389404296875)) + step(_1267, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1264)) + step(0.999000012874603271484375, _1267);\n        highp float _1339 = 0.0;\n        for (int SPIRV_Cross_Dummy351 = 0; SPIRV_Cross_Dummy351 < 1; SPIRV_Cross_Dummy351++)\n        {\n            if (_1275 > 1.0)\n            {\n                _1339 = 1.0;\n                break;\n            }\n            highp float _1293 = _1275 - 0.001000000047497451305389404296875;\n            highp vec2 _1297 = ((_1262.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1304 = fract(_1297 * vec2(2048.0));\n            highp float _1332 = _1304.y;\n            _1339 = mix(mix(float(_1293 < dot(texture2D(u_shadowMapTex, _1297), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1293 < dot(texture2D(u_shadowMapTex, _1297 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1332), mix(float(_1293 < dot(texture2D(u_shadowMapTex, _1297 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1293 < dot(texture2D(u_shadowMapTex, _1297 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1332), _1304.x);\n            break;\n        }\n        _1342 = _1339;\n    }\n    else\n    {\n        _1342 = _1233;\n    }\n    bool _1561 = _1251 ? true : _1560;\n    bool _1356 = (!_1561) && (_853 < u_csmFarBounds.z);\n    highp float _1447 = 0.0;\n    if (_1356)\n    {\n        highp vec3 _1367 = ((u_csmLightSpaceMatrices[2] * _849).xyz * 0.5) + vec3(0.5);\n        highp float _1369 = _1367.x;\n        highp float _1372 = _1367.y;\n        highp float _1380 = (((_1367.z + step(_1369, 0.001000000047497451305389404296875)) + step(_1372, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1369)) + step(0.999000012874603271484375, _1372);\n        highp float _1444 = 0.0;\n        for (int SPIRV_Cross_Dummy427 = 0; SPIRV_Cross_Dummy427 < 1; SPIRV_Cross_Dummy427++)\n        {\n            if (_1380 > 1.0)\n            {\n                _1444 = 1.0;\n                break;\n            }\n            highp float _1398 = _1380 - 0.001000000047497451305389404296875;\n            highp vec2 _1402 = ((_1367.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1409 = fract(_1402 * vec2(2048.0));\n            highp float _1437 = _1409.y;\n            _1444 = mix(mix(float(_1398 < dot(texture2D(u_shadowMapTex, _1402), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1398 < dot(texture2D(u_shadowMapTex, _1402 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1437), mix(float(_1398 < dot(texture2D(u_shadowMapTex, _1402 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1398 < dot(texture2D(u_shadowMapTex, _1402 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1437), _1409.x);\n            break;\n        }\n        _1447 = _1444;\n    }\n    else\n    {\n        _1447 = _1342;\n    }\n    highp float _1552 = 0.0;\n    if ((!(_1356 ? true : _1561)) && (_853 < u_csmFarBounds.w))\n    {\n        highp vec3 _1472 = ((u_csmLightSpaceMatrices[3] * _849).xyz * 0.5) + vec3(0.5);\n        highp float _1474 = _1472.x;\n        highp float _1477 = _1472.y;\n        highp float _1485 = (((_1472.z + step(_1474, 0.001000000047497451305389404296875)) + step(_1477, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1474)) + step(0.999000012874603271484375, _1477);\n        highp float _1549 = 0.0;\n        for (int SPIRV_Cross_Dummy497 = 0; SPIRV_Cross_Dummy497 < 1; SPIRV_Cross_Dummy497++)\n        {\n            if (_1485 > 1.0)\n            {\n                _1549 = 1.0;\n                break;\n            }\n            highp float _1503 = _1485 - 0.001000000047497451305389404296875;\n            highp vec2 _1507 = ((_1472.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1514 = fract(_1507 * vec2(2048.0));\n            highp float _1542 = _1514.y;\n            _1549 = mix(mix(float(_1503 < dot(texture2D(u_shadowMapTex, _1507), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1503 < dot(texture2D(u_shadowMapTex, _1507 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1542), mix(float(_1503 < dot(texture2D(u_shadowMapTex, _1507 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1503 < dot(texture2D(u_shadowMapTex, _1507 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1542), _1514.x);\n            break;\n        }\n        _1552 = _1549;\n    }\n    else\n    {\n        _1552 = _1447;\n    }\n    highp vec4 _748 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _750 = _748.xyz * 2.0;\n    highp vec4 _760 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _779 = vec4(_712.xyz * (min(_750, mix(max(_750 - (u_lightColor * (clamp(dot(_729, u_lightDir), 0.0, 1.0) * (1.0 - _1552))), u_shadowColor), _750, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), _729)), _Shininess * 128.0)) * (_760.xyz * _SpecColor.xyz))), _714);\n    highp vec4 _785 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1108 = length(varying_positionCamera_Fog);\n    highp float _1223 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1223 = (u_fogInfos.z - _1108) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1224 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1224 = 1.0 / pow(2.7182800769805908203125, _1108 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1225 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1225 = 1.0 / pow(2.7182800769805908203125, ((_1108 * _1108) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1225 = 1.0;\n            }\n            _1224 = _1225;\n        }\n        _1223 = _1224;\n    }\n    highp float _1154 = clamp(_1223, 0.0, 1.0);\n    highp vec3 _1163 = ((_779.xyz + (_EmissionColor.xyz * _785.x)).xyz * _1154) + (u_fogColor * (1.0 - _1154));\n    gl_FragData[0] = vec4(_1163.x, _1163.y, _1163.z, _779.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _394 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _402 = (_394 * _Color) * _AlbedoIntensity;\n    highp vec3 _405 = normalize(varying_LightDir);\n    highp vec4 _417 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _476 = (_417.xy - vec2(0.5)) * 2.0;\n    highp vec3 _487 = vec3(_476, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_476, _476))));\n    highp vec4 _440 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _459 = vec4(_402.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_405, _487))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _405), _487)), _Shininess * 128.0)) * (_440.xyz * _SpecColor.xyz))), _402.w);\n    highp float _522 = length(varying_positionCamera_Fog);\n    highp float _602 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _602 = (u_fogInfos.z - _522) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _603 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _603 = 1.0 / pow(2.7182800769805908203125, _522 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _604 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _604 = 1.0 / pow(2.7182800769805908203125, ((_522 * _522) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _604 = 1.0;\n            }\n            _603 = _604;\n        }\n        _602 = _603;\n    }\n    highp float _568 = clamp(_602, 0.0, 1.0);\n    highp vec3 _577 = (_459.xyz * _568) + (u_fogColor * (1.0 - _568));\n    gl_FragData[0] = vec4(_577.x, _577.y, _577.z, _459.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\n\nvoid main()\n{\n    highp vec4 _298 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _306 = (_298 * _Color) * _AlbedoIntensity;\n    highp vec3 _309 = normalize(varying_LightDir);\n    highp vec2 _368 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _379 = vec3(_368, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_368, _368))));\n    gl_FragData[0] = vec4(_306.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_309, _379))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _309), _379)), _Shininess * 128.0)) * (_SpecColor.xyz * _298.w))), _306.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    vec4 _506 = u_world * a_position;\n    vec3 _403 = _506.xyz;\n    mat3 _526 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _529 = normalize(_526 * a_normal);\n    vec3 _543 = normalize(_526 * a_tangent.xyz);\n    mat3 _438 = mat3(_543, cross(_543, _529) * a_tangent.w, _529);\n    gl_Position = u_projection * (u_view * _506);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _438 * u_lightDir;\n    varying_ViewDir = _438 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _403);\n    varying_WorldNormal = _529;\n    varying_ShadowPosition = _403;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _552 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _560 = (_552 * _Color) * _AlbedoIntensity;\n    highp vec3 _563 = normalize(varying_LightDir);\n    highp vec4 _575 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _625 = (_575.xy - vec2(0.5)) * 2.0;\n    highp vec3 _636 = vec3(_625, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_625, _625))));\n    highp vec4 _679 = vec4(varying_ShadowPosition, 1.0);\n    highp float _683 = -(u_view * _679).z;\n    bool _696 = true && (_683 < u_csmFarBounds.x);\n    highp float _944 = 0.0;\n    if (_696)\n    {\n        highp vec3 _711 = ((u_csmLightSpaceMatrices[0] * _679).xyz * 0.5) + vec3(0.5);\n        highp float _715 = _711.x;\n        highp float _719 = _711.y;\n        highp float _729 = (((_711.z + step(_715, 0.001000000047497451305389404296875)) + step(_719, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _715)) + step(0.999000012874603271484375, _719);\n        highp float _941 = 0.0;\n        for (int SPIRV_Cross_Dummy256 = 0; SPIRV_Cross_Dummy256 < 1; SPIRV_Cross_Dummy256++)\n        {\n            if (_729 > 1.0)\n            {\n                _941 = 1.0;\n                break;\n            }\n            highp float _780 = _729 - 0.001000000047497451305389404296875;\n            highp vec2 _786 = ((_711.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _797 = fract(_786 * vec2(2048.0));\n            highp float _852 = _797.y;\n            _941 = mix(mix(float(_780 < dot(texture2D(u_shadowMapTex, _786), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_780 < dot(texture2D(u_shadowMapTex, _786 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _852), mix(float(_780 < dot(texture2D(u_shadowMapTex, _786 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_780 < dot(texture2D(u_shadowMapTex, _786 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _852), _797.x);\n            break;\n        }\n        _944 = _941;\n    }\n    else\n    {\n        _944 = 1.0;\n    }\n    bool _1272 = _696 ? true : false;\n    bool _963 = (!_1272) && (_683 < u_csmFarBounds.y);\n    highp float _1054 = 0.0;\n    if (_963)\n    {\n        highp vec3 _974 = ((u_csmLightSpaceMatrices[1] * _679).xyz * 0.5) + vec3(0.5);\n        highp float _976 = _974.x;\n        highp float _979 = _974.y;\n        highp float _987 = (((_974.z + step(_976, 0.001000000047497451305389404296875)) + step(_979, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _976)) + step(0.999000012874603271484375, _979);\n        highp float _1051 = 0.0;\n        for (int SPIRV_Cross_Dummy332 = 0; SPIRV_Cross_Dummy332 < 1; SPIRV_Cross_Dummy332++)\n        {\n            if (_987 > 1.0)\n            {\n                _1051 = 1.0;\n                break;\n            }\n            highp float _1005 = _987 - 0.001000000047497451305389404296875;\n            highp vec2 _1009 = ((_974.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1016 = fract(_1009 * vec2(2048.0));\n            highp float _1044 = _1016.y;\n            _1051 = mix(mix(float(_1005 < dot(texture2D(u_shadowMapTex, _1009), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1005 < dot(texture2D(u_shadowMapTex, _1009 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1044), mix(float(_1005 < dot(texture2D(u_shadowMapTex, _1009 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1005 < dot(texture2D(u_shadowMapTex, _1009 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1044), _1016.x);\n            break;\n        }\n        _1054 = _1051;\n    }\n    else\n    {\n        _1054 = _944;\n    }\n    bool _1273 = _963 ? true : _1272;\n    bool _1068 = (!_1273) && (_683 < u_csmFarBounds.z);\n    highp float _1159 = 0.0;\n    if (_1068)\n    {\n        highp vec3 _1079 = ((u_csmLightSpaceMatrices[2] * _679).xyz * 0.5) + vec3(0.5);\n        highp float _1081 = _1079.x;\n        highp float _1084 = _1079.y;\n        highp float _1092 = (((_1079.z + step(_1081, 0.001000000047497451305389404296875)) + step(_1084, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1081)) + step(0.999000012874603271484375, _1084);\n        highp float _1156 = 0.0;\n        for (int SPIRV_Cross_Dummy408 = 0; SPIRV_Cross_Dummy408 < 1; SPIRV_Cross_Dummy408++)\n        {\n            if (_1092 > 1.0)\n            {\n                _1156 = 1.0;\n                break;\n            }\n            highp float _1110 = _1092 - 0.001000000047497451305389404296875;\n            highp vec2 _1114 = ((_1079.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1121 = fract(_1114 * vec2(2048.0));\n            highp float _1149 = _1121.y;\n            _1156 = mix(mix(float(_1110 < dot(texture2D(u_shadowMapTex, _1114), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1110 < dot(texture2D(u_shadowMapTex, _1114 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1149), mix(float(_1110 < dot(texture2D(u_shadowMapTex, _1114 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1110 < dot(texture2D(u_shadowMapTex, _1114 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1149), _1121.x);\n            break;\n        }\n        _1159 = _1156;\n    }\n    else\n    {\n        _1159 = _1054;\n    }\n    highp float _1264 = 0.0;\n    if ((!(_1068 ? true : _1273)) && (_683 < u_csmFarBounds.w))\n    {\n        highp vec3 _1184 = ((u_csmLightSpaceMatrices[3] * _679).xyz * 0.5) + vec3(0.5);\n        highp float _1186 = _1184.x;\n        highp float _1189 = _1184.y;\n        highp float _1197 = (((_1184.z + step(_1186, 0.001000000047497451305389404296875)) + step(_1189, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1186)) + step(0.999000012874603271484375, _1189);\n        highp float _1261 = 0.0;\n        for (int SPIRV_Cross_Dummy478 = 0; SPIRV_Cross_Dummy478 < 1; SPIRV_Cross_Dummy478++)\n        {\n            if (_1197 > 1.0)\n            {\n                _1261 = 1.0;\n                break;\n            }\n            highp float _1215 = _1197 - 0.001000000047497451305389404296875;\n            highp vec2 _1219 = ((_1184.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1226 = fract(_1219 * vec2(2048.0));\n            highp float _1254 = _1226.y;\n            _1261 = mix(mix(float(_1215 < dot(texture2D(u_shadowMapTex, _1219), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1215 < dot(texture2D(u_shadowMapTex, _1219 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1254), mix(float(_1215 < dot(texture2D(u_shadowMapTex, _1219 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1215 < dot(texture2D(u_shadowMapTex, _1219 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1254), _1226.x);\n            break;\n        }\n        _1264 = _1261;\n    }\n    else\n    {\n        _1264 = _1159;\n    }\n    gl_FragData[0] = vec4(_560.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_563, _636))) * _1264)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _563), _636)), _Shininess * 128.0)) * (_SpecColor.xyz * _552.w))), _560.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _389 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _397 = (_389 * _Color) * _AlbedoIntensity;\n    highp vec3 _400 = normalize(varying_LightDir);\n    highp vec4 _412 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _466 = (_412.xy - vec2(0.5)) * 2.0;\n    highp vec3 _477 = vec3(_466, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_466, _466))));\n    highp vec4 _449 = vec4(_397.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_400, _477))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _400), _477)), _Shininess * 128.0)) * (_SpecColor.xyz * _389.w))), _397.w);\n    highp float _512 = length(varying_positionCamera_Fog);\n    highp float _593 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _593 = (u_fogInfos.z - _512) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _594 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _594 = 1.0 / pow(2.7182800769805908203125, _512 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _595 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _595 = 1.0 / pow(2.7182800769805908203125, ((_512 * _512) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _595 = 1.0;\n            }\n            _594 = _595;\n        }\n        _593 = _594;\n    }\n    highp float _558 = clamp(_593, 0.0, 1.0);\n    highp vec3 _567 = (_449.xyz * _558) + (u_fogColor * (1.0 - _558));\n    gl_FragData[0] = vec4(_567.x, _567.y, _567.z, _449.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    vec4 _531 = u_world * a_position;\n    vec3 _417 = _531.xyz;\n    mat3 _551 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _554 = normalize(_551 * a_normal);\n    vec3 _568 = normalize(_551 * a_tangent.xyz);\n    mat3 _452 = mat3(_568, cross(_568, _554) * a_tangent.w, _554);\n    gl_Position = u_projection * (u_view * _531);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _452 * u_lightDir;\n    varying_ViewDir = _452 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _417);\n    varying_WorldNormal = _554;\n    varying_positionCamera_Fog = (u_view * vec4(_531.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _417;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _639 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _647 = (_639 * _Color) * _AlbedoIntensity;\n    highp vec3 _650 = normalize(varying_LightDir);\n    highp vec4 _662 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _719 = (_662.xy - vec2(0.5)) * 2.0;\n    highp vec3 _730 = vec3(_719, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_719, _719))));\n    highp vec4 _773 = vec4(varying_ShadowPosition, 1.0);\n    highp float _777 = -(u_view * _773).z;\n    bool _790 = true && (_777 < u_csmFarBounds.x);\n    highp float _1113 = 0.0;\n    if (_790)\n    {\n        highp vec3 _805 = ((u_csmLightSpaceMatrices[0] * _773).xyz * 0.5) + vec3(0.5);\n        highp float _809 = _805.x;\n        highp float _813 = _805.y;\n        highp float _823 = (((_805.z + step(_809, 0.001000000047497451305389404296875)) + step(_813, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _809)) + step(0.999000012874603271484375, _813);\n        highp float _1110 = 0.0;\n        for (int SPIRV_Cross_Dummy260 = 0; SPIRV_Cross_Dummy260 < 1; SPIRV_Cross_Dummy260++)\n        {\n            if (_823 > 1.0)\n            {\n                _1110 = 1.0;\n                break;\n            }\n            highp float _874 = _823 - 0.001000000047497451305389404296875;\n            highp vec2 _880 = ((_805.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _891 = fract(_880 * vec2(2048.0));\n            highp float _946 = _891.y;\n            _1110 = mix(mix(float(_874 < dot(texture2D(u_shadowMapTex, _880), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_874 < dot(texture2D(u_shadowMapTex, _880 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _946), mix(float(_874 < dot(texture2D(u_shadowMapTex, _880 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_874 < dot(texture2D(u_shadowMapTex, _880 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _946), _891.x);\n            break;\n        }\n        _1113 = _1110;\n    }\n    else\n    {\n        _1113 = 1.0;\n    }\n    bool _1441 = _790 ? true : false;\n    bool _1132 = (!_1441) && (_777 < u_csmFarBounds.y);\n    highp float _1223 = 0.0;\n    if (_1132)\n    {\n        highp vec3 _1143 = ((u_csmLightSpaceMatrices[1] * _773).xyz * 0.5) + vec3(0.5);\n        highp float _1145 = _1143.x;\n        highp float _1148 = _1143.y;\n        highp float _1156 = (((_1143.z + step(_1145, 0.001000000047497451305389404296875)) + step(_1148, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1145)) + step(0.999000012874603271484375, _1148);\n        highp float _1220 = 0.0;\n        for (int SPIRV_Cross_Dummy336 = 0; SPIRV_Cross_Dummy336 < 1; SPIRV_Cross_Dummy336++)\n        {\n            if (_1156 > 1.0)\n            {\n                _1220 = 1.0;\n                break;\n            }\n            highp float _1174 = _1156 - 0.001000000047497451305389404296875;\n            highp vec2 _1178 = ((_1143.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1185 = fract(_1178 * vec2(2048.0));\n            highp float _1213 = _1185.y;\n            _1220 = mix(mix(float(_1174 < dot(texture2D(u_shadowMapTex, _1178), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1174 < dot(texture2D(u_shadowMapTex, _1178 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1213), mix(float(_1174 < dot(texture2D(u_shadowMapTex, _1178 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1174 < dot(texture2D(u_shadowMapTex, _1178 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1213), _1185.x);\n            break;\n        }\n        _1223 = _1220;\n    }\n    else\n    {\n        _1223 = _1113;\n    }\n    bool _1442 = _1132 ? true : _1441;\n    bool _1237 = (!_1442) && (_777 < u_csmFarBounds.z);\n    highp float _1328 = 0.0;\n    if (_1237)\n    {\n        highp vec3 _1248 = ((u_csmLightSpaceMatrices[2] * _773).xyz * 0.5) + vec3(0.5);\n        highp float _1250 = _1248.x;\n        highp float _1253 = _1248.y;\n        highp float _1261 = (((_1248.z + step(_1250, 0.001000000047497451305389404296875)) + step(_1253, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1250)) + step(0.999000012874603271484375, _1253);\n        highp float _1325 = 0.0;\n        for (int SPIRV_Cross_Dummy412 = 0; SPIRV_Cross_Dummy412 < 1; SPIRV_Cross_Dummy412++)\n        {\n            if (_1261 > 1.0)\n            {\n                _1325 = 1.0;\n                break;\n            }\n            highp float _1279 = _1261 - 0.001000000047497451305389404296875;\n            highp vec2 _1283 = ((_1248.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1290 = fract(_1283 * vec2(2048.0));\n            highp float _1318 = _1290.y;\n            _1325 = mix(mix(float(_1279 < dot(texture2D(u_shadowMapTex, _1283), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1279 < dot(texture2D(u_shadowMapTex, _1283 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1318), mix(float(_1279 < dot(texture2D(u_shadowMapTex, _1283 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1279 < dot(texture2D(u_shadowMapTex, _1283 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1318), _1290.x);\n            break;\n        }\n        _1328 = _1325;\n    }\n    else\n    {\n        _1328 = _1223;\n    }\n    highp float _1433 = 0.0;\n    if ((!(_1237 ? true : _1442)) && (_777 < u_csmFarBounds.w))\n    {\n        highp vec3 _1353 = ((u_csmLightSpaceMatrices[3] * _773).xyz * 0.5) + vec3(0.5);\n        highp float _1355 = _1353.x;\n        highp float _1358 = _1353.y;\n        highp float _1366 = (((_1353.z + step(_1355, 0.001000000047497451305389404296875)) + step(_1358, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1355)) + step(0.999000012874603271484375, _1358);\n        highp float _1430 = 0.0;\n        for (int SPIRV_Cross_Dummy482 = 0; SPIRV_Cross_Dummy482 < 1; SPIRV_Cross_Dummy482++)\n        {\n            if (_1366 > 1.0)\n            {\n                _1430 = 1.0;\n                break;\n            }\n            highp float _1384 = _1366 - 0.001000000047497451305389404296875;\n            highp vec2 _1388 = ((_1353.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1395 = fract(_1388 * vec2(2048.0));\n            highp float _1423 = _1395.y;\n            _1430 = mix(mix(float(_1384 < dot(texture2D(u_shadowMapTex, _1388), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1384 < dot(texture2D(u_shadowMapTex, _1388 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1423), mix(float(_1384 < dot(texture2D(u_shadowMapTex, _1388 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1384 < dot(texture2D(u_shadowMapTex, _1388 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1423), _1395.x);\n            break;\n        }\n        _1433 = _1430;\n    }\n    else\n    {\n        _1433 = _1328;\n    }\n    highp vec4 _702 = vec4(_647.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_650, _730))) * _1433)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _650), _730)), _Shininess * 128.0)) * (_SpecColor.xyz * _639.w))), _647.w);\n    highp float _994 = length(varying_positionCamera_Fog);\n    highp float _1103 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1103 = (u_fogInfos.z - _994) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1104 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1104 = 1.0 / pow(2.7182800769805908203125, _994 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1105 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1105 = 1.0 / pow(2.7182800769805908203125, ((_994 * _994) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1105 = 1.0;\n            }\n            _1104 = _1105;\n        }\n        _1103 = _1104;\n    }\n    highp float _1040 = clamp(_1103, 0.0, 1.0);\n    highp vec3 _1049 = (_702.xyz * _1040) + (u_fogColor * (1.0 - _1040));\n    gl_FragData[0] = vec4(_1049.x, _1049.y, _1049.z, _702.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _361 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _369 = (_361 * _Color) * _AlbedoIntensity;\n    highp vec2 _437 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _403 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_369.xyz * (min(_403, mix(max(_403, u_shadowColor), _403, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_437, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_437, _437)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _361.w))), _369.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    vec4 _545 = u_world * a_position;\n    vec3 _424 = _545.xyz;\n    mat3 _565 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _568 = normalize(_565 * a_normal);\n    vec3 _582 = normalize(_565 * a_tangent.xyz);\n    mat3 _459 = mat3(_582, cross(_582, _568) * a_tangent.w, _568);\n    gl_Position = u_projection * (u_view * _545);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _459 * u_lightDir;\n    varying_ViewDir = _459 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _424);\n    varying_WorldNormal = _568;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_ShadowPosition = _424;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _616 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _624 = (_616 * _Color) * _AlbedoIntensity;\n    highp vec4 _639 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _695 = (_639.xy - vec2(0.5)) * 2.0;\n    highp vec4 _749 = vec4(varying_ShadowPosition, 1.0);\n    highp float _753 = -(u_view * _749).z;\n    bool _766 = true && (_753 < u_csmFarBounds.x);\n    highp float _1057 = 0.0;\n    if (_766)\n    {\n        highp vec3 _781 = ((u_csmLightSpaceMatrices[0] * _749).xyz * 0.5) + vec3(0.5);\n        highp float _785 = _781.x;\n        highp float _789 = _781.y;\n        highp float _799 = (((_781.z + step(_785, 0.001000000047497451305389404296875)) + step(_789, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _785)) + step(0.999000012874603271484375, _789);\n        highp float _1054 = 0.0;\n        for (int SPIRV_Cross_Dummy261 = 0; SPIRV_Cross_Dummy261 < 1; SPIRV_Cross_Dummy261++)\n        {\n            if (_799 > 1.0)\n            {\n                _1054 = 1.0;\n                break;\n            }\n            highp float _850 = _799 - 0.001000000047497451305389404296875;\n            highp vec2 _856 = ((_781.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _867 = fract(_856 * vec2(2048.0));\n            highp float _922 = _867.y;\n            _1054 = mix(mix(float(_850 < dot(texture2D(u_shadowMapTex, _856), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_850 < dot(texture2D(u_shadowMapTex, _856 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _922), mix(float(_850 < dot(texture2D(u_shadowMapTex, _856 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_850 < dot(texture2D(u_shadowMapTex, _856 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _922), _867.x);\n            break;\n        }\n        _1057 = _1054;\n    }\n    else\n    {\n        _1057 = 1.0;\n    }\n    bool _1385 = _766 ? true : false;\n    bool _1076 = (!_1385) && (_753 < u_csmFarBounds.y);\n    highp float _1167 = 0.0;\n    if (_1076)\n    {\n        highp vec3 _1087 = ((u_csmLightSpaceMatrices[1] * _749).xyz * 0.5) + vec3(0.5);\n        highp float _1089 = _1087.x;\n        highp float _1092 = _1087.y;\n        highp float _1100 = (((_1087.z + step(_1089, 0.001000000047497451305389404296875)) + step(_1092, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1089)) + step(0.999000012874603271484375, _1092);\n        highp float _1164 = 0.0;\n        for (int SPIRV_Cross_Dummy337 = 0; SPIRV_Cross_Dummy337 < 1; SPIRV_Cross_Dummy337++)\n        {\n            if (_1100 > 1.0)\n            {\n                _1164 = 1.0;\n                break;\n            }\n            highp float _1118 = _1100 - 0.001000000047497451305389404296875;\n            highp vec2 _1122 = ((_1087.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1129 = fract(_1122 * vec2(2048.0));\n            highp float _1157 = _1129.y;\n            _1164 = mix(mix(float(_1118 < dot(texture2D(u_shadowMapTex, _1122), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1118 < dot(texture2D(u_shadowMapTex, _1122 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1157), mix(float(_1118 < dot(texture2D(u_shadowMapTex, _1122 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1118 < dot(texture2D(u_shadowMapTex, _1122 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1157), _1129.x);\n            break;\n        }\n        _1167 = _1164;\n    }\n    else\n    {\n        _1167 = _1057;\n    }\n    bool _1386 = _1076 ? true : _1385;\n    bool _1181 = (!_1386) && (_753 < u_csmFarBounds.z);\n    highp float _1272 = 0.0;\n    if (_1181)\n    {\n        highp vec3 _1192 = ((u_csmLightSpaceMatrices[2] * _749).xyz * 0.5) + vec3(0.5);\n        highp float _1194 = _1192.x;\n        highp float _1197 = _1192.y;\n        highp float _1205 = (((_1192.z + step(_1194, 0.001000000047497451305389404296875)) + step(_1197, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1194)) + step(0.999000012874603271484375, _1197);\n        highp float _1269 = 0.0;\n        for (int SPIRV_Cross_Dummy413 = 0; SPIRV_Cross_Dummy413 < 1; SPIRV_Cross_Dummy413++)\n        {\n            if (_1205 > 1.0)\n            {\n                _1269 = 1.0;\n                break;\n            }\n            highp float _1223 = _1205 - 0.001000000047497451305389404296875;\n            highp vec2 _1227 = ((_1192.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1234 = fract(_1227 * vec2(2048.0));\n            highp float _1262 = _1234.y;\n            _1269 = mix(mix(float(_1223 < dot(texture2D(u_shadowMapTex, _1227), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1223 < dot(texture2D(u_shadowMapTex, _1227 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1262), mix(float(_1223 < dot(texture2D(u_shadowMapTex, _1227 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1223 < dot(texture2D(u_shadowMapTex, _1227 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1262), _1234.x);\n            break;\n        }\n        _1272 = _1269;\n    }\n    else\n    {\n        _1272 = _1167;\n    }\n    highp float _1377 = 0.0;\n    if ((!(_1181 ? true : _1386)) && (_753 < u_csmFarBounds.w))\n    {\n        highp vec3 _1297 = ((u_csmLightSpaceMatrices[3] * _749).xyz * 0.5) + vec3(0.5);\n        highp float _1299 = _1297.x;\n        highp float _1302 = _1297.y;\n        highp float _1310 = (((_1297.z + step(_1299, 0.001000000047497451305389404296875)) + step(_1302, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1299)) + step(0.999000012874603271484375, _1302);\n        highp float _1374 = 0.0;\n        for (int SPIRV_Cross_Dummy483 = 0; SPIRV_Cross_Dummy483 < 1; SPIRV_Cross_Dummy483++)\n        {\n            if (_1310 > 1.0)\n            {\n                _1374 = 1.0;\n                break;\n            }\n            highp float _1328 = _1310 - 0.001000000047497451305389404296875;\n            highp vec2 _1332 = ((_1297.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1339 = fract(_1332 * vec2(2048.0));\n            highp float _1367 = _1339.y;\n            _1374 = mix(mix(float(_1328 < dot(texture2D(u_shadowMapTex, _1332), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1328 < dot(texture2D(u_shadowMapTex, _1332 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1367), mix(float(_1328 < dot(texture2D(u_shadowMapTex, _1332 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1328 < dot(texture2D(u_shadowMapTex, _1332 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1367), _1339.x);\n            break;\n        }\n        _1377 = _1374;\n    }\n    else\n    {\n        _1377 = _1272;\n    }\n    highp vec3 _661 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_624.xyz * (min(_661, mix(max(_661 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1377))), u_shadowColor), _661, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_695, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_695, _695)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _616.w))), _624.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _452 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _460 = (_452 * _Color) * _AlbedoIntensity;\n    highp vec4 _475 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _535 = (_475.xy - vec2(0.5)) * 2.0;\n    highp vec4 _492 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _494 = _492.xyz * 2.0;\n    highp vec4 _518 = vec4(_460.xyz * (min(_494, mix(max(_494, u_shadowColor), _494, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_535, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_535, _535)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _452.w))), _460.w);\n    highp float _619 = length(varying_positionCamera_Fog);\n    highp float _705 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _705 = (u_fogInfos.z - _619) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _706 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _706 = 1.0 / pow(2.7182800769805908203125, _619 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _707 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _707 = 1.0 / pow(2.7182800769805908203125, ((_619 * _619) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _707 = 1.0;\n            }\n            _706 = _707;\n        }\n        _705 = _706;\n    }\n    highp float _665 = clamp(_705, 0.0, 1.0);\n    highp vec3 _674 = (_518.xyz * _665) + (u_fogColor * (1.0 - _665));\n    gl_FragData[0] = vec4(_674.x, _674.y, _674.z, _518.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    vec4 _570 = u_world * a_position;\n    vec3 _438 = _570.xyz;\n    mat3 _590 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _593 = normalize(_590 * a_normal);\n    vec3 _607 = normalize(_590 * a_tangent.xyz);\n    mat3 _473 = mat3(_607, cross(_607, _593) * a_tangent.w, _593);\n    gl_Position = u_projection * (u_view * _570);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _473 * u_lightDir;\n    varying_ViewDir = _473 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _438);\n    varying_WorldNormal = _593;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_570.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _438;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _703 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _711 = (_703 * _Color) * _AlbedoIntensity;\n    highp vec4 _726 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _789 = (_726.xy - vec2(0.5)) * 2.0;\n    highp vec4 _843 = vec4(varying_ShadowPosition, 1.0);\n    highp float _847 = -(u_view * _843).z;\n    bool _860 = true && (_847 < u_csmFarBounds.x);\n    highp float _1226 = 0.0;\n    if (_860)\n    {\n        highp vec3 _875 = ((u_csmLightSpaceMatrices[0] * _843).xyz * 0.5) + vec3(0.5);\n        highp float _879 = _875.x;\n        highp float _883 = _875.y;\n        highp float _893 = (((_875.z + step(_879, 0.001000000047497451305389404296875)) + step(_883, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _879)) + step(0.999000012874603271484375, _883);\n        highp float _1223 = 0.0;\n        for (int SPIRV_Cross_Dummy265 = 0; SPIRV_Cross_Dummy265 < 1; SPIRV_Cross_Dummy265++)\n        {\n            if (_893 > 1.0)\n            {\n                _1223 = 1.0;\n                break;\n            }\n            highp float _944 = _893 - 0.001000000047497451305389404296875;\n            highp vec2 _950 = ((_875.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _961 = fract(_950 * vec2(2048.0));\n            highp float _1016 = _961.y;\n            _1223 = mix(mix(float(_944 < dot(texture2D(u_shadowMapTex, _950), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_944 < dot(texture2D(u_shadowMapTex, _950 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1016), mix(float(_944 < dot(texture2D(u_shadowMapTex, _950 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_944 < dot(texture2D(u_shadowMapTex, _950 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1016), _961.x);\n            break;\n        }\n        _1226 = _1223;\n    }\n    else\n    {\n        _1226 = 1.0;\n    }\n    bool _1554 = _860 ? true : false;\n    bool _1245 = (!_1554) && (_847 < u_csmFarBounds.y);\n    highp float _1336 = 0.0;\n    if (_1245)\n    {\n        highp vec3 _1256 = ((u_csmLightSpaceMatrices[1] * _843).xyz * 0.5) + vec3(0.5);\n        highp float _1258 = _1256.x;\n        highp float _1261 = _1256.y;\n        highp float _1269 = (((_1256.z + step(_1258, 0.001000000047497451305389404296875)) + step(_1261, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1258)) + step(0.999000012874603271484375, _1261);\n        highp float _1333 = 0.0;\n        for (int SPIRV_Cross_Dummy341 = 0; SPIRV_Cross_Dummy341 < 1; SPIRV_Cross_Dummy341++)\n        {\n            if (_1269 > 1.0)\n            {\n                _1333 = 1.0;\n                break;\n            }\n            highp float _1287 = _1269 - 0.001000000047497451305389404296875;\n            highp vec2 _1291 = ((_1256.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1298 = fract(_1291 * vec2(2048.0));\n            highp float _1326 = _1298.y;\n            _1333 = mix(mix(float(_1287 < dot(texture2D(u_shadowMapTex, _1291), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1287 < dot(texture2D(u_shadowMapTex, _1291 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1326), mix(float(_1287 < dot(texture2D(u_shadowMapTex, _1291 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1287 < dot(texture2D(u_shadowMapTex, _1291 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1326), _1298.x);\n            break;\n        }\n        _1336 = _1333;\n    }\n    else\n    {\n        _1336 = _1226;\n    }\n    bool _1555 = _1245 ? true : _1554;\n    bool _1350 = (!_1555) && (_847 < u_csmFarBounds.z);\n    highp float _1441 = 0.0;\n    if (_1350)\n    {\n        highp vec3 _1361 = ((u_csmLightSpaceMatrices[2] * _843).xyz * 0.5) + vec3(0.5);\n        highp float _1363 = _1361.x;\n        highp float _1366 = _1361.y;\n        highp float _1374 = (((_1361.z + step(_1363, 0.001000000047497451305389404296875)) + step(_1366, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1363)) + step(0.999000012874603271484375, _1366);\n        highp float _1438 = 0.0;\n        for (int SPIRV_Cross_Dummy417 = 0; SPIRV_Cross_Dummy417 < 1; SPIRV_Cross_Dummy417++)\n        {\n            if (_1374 > 1.0)\n            {\n                _1438 = 1.0;\n                break;\n            }\n            highp float _1392 = _1374 - 0.001000000047497451305389404296875;\n            highp vec2 _1396 = ((_1361.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1403 = fract(_1396 * vec2(2048.0));\n            highp float _1431 = _1403.y;\n            _1438 = mix(mix(float(_1392 < dot(texture2D(u_shadowMapTex, _1396), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1392 < dot(texture2D(u_shadowMapTex, _1396 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1431), mix(float(_1392 < dot(texture2D(u_shadowMapTex, _1396 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1392 < dot(texture2D(u_shadowMapTex, _1396 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1431), _1403.x);\n            break;\n        }\n        _1441 = _1438;\n    }\n    else\n    {\n        _1441 = _1336;\n    }\n    highp float _1546 = 0.0;\n    if ((!(_1350 ? true : _1555)) && (_847 < u_csmFarBounds.w))\n    {\n        highp vec3 _1466 = ((u_csmLightSpaceMatrices[3] * _843).xyz * 0.5) + vec3(0.5);\n        highp float _1468 = _1466.x;\n        highp float _1471 = _1466.y;\n        highp float _1479 = (((_1466.z + step(_1468, 0.001000000047497451305389404296875)) + step(_1471, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1468)) + step(0.999000012874603271484375, _1471);\n        highp float _1543 = 0.0;\n        for (int SPIRV_Cross_Dummy487 = 0; SPIRV_Cross_Dummy487 < 1; SPIRV_Cross_Dummy487++)\n        {\n            if (_1479 > 1.0)\n            {\n                _1543 = 1.0;\n                break;\n            }\n            highp float _1497 = _1479 - 0.001000000047497451305389404296875;\n            highp vec2 _1501 = ((_1466.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1508 = fract(_1501 * vec2(2048.0));\n            highp float _1536 = _1508.y;\n            _1543 = mix(mix(float(_1497 < dot(texture2D(u_shadowMapTex, _1501), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1497 < dot(texture2D(u_shadowMapTex, _1501 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1536), mix(float(_1497 < dot(texture2D(u_shadowMapTex, _1501 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1497 < dot(texture2D(u_shadowMapTex, _1501 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1536), _1508.x);\n            break;\n        }\n        _1546 = _1543;\n    }\n    else\n    {\n        _1546 = _1441;\n    }\n    highp vec4 _746 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _748 = _746.xyz * 2.0;\n    highp vec4 _772 = vec4(_711.xyz * (min(_748, mix(max(_748 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1546))), u_shadowColor), _748, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_789, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_789, _789)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _703.w))), _711.w);\n    highp float _1102 = length(varying_positionCamera_Fog);\n    highp float _1216 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1216 = (u_fogInfos.z - _1102) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1217 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1217 = 1.0 / pow(2.7182800769805908203125, _1102 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1218 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1218 = 1.0 / pow(2.7182800769805908203125, ((_1102 * _1102) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1218 = 1.0;\n            }\n            _1217 = _1218;\n        }\n        _1216 = _1217;\n    }\n    highp float _1148 = clamp(_1216, 0.0, 1.0);\n    highp vec3 _1157 = (_772.xyz * _1148) + (u_fogColor * (1.0 - _1148));\n    gl_FragData[0] = vec4(_1157.x, _1157.y, _1157.z, _772.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    vec4 _510 = u_world * a_position;\n    vec3 _405 = _510.xyz;\n    mat3 _530 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _533 = normalize(_530 * a_normal);\n    vec3 _547 = normalize(_530 * a_tangent.xyz);\n    mat3 _440 = mat3(_547, cross(_547, _533) * a_tangent.w, _533);\n    gl_Position = u_projection * (u_view * _510);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _440 * u_lightDir;\n    varying_ViewDir = _440 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _405);\n    varying_WorldNormal = _533;\n    varying_ShadowPosition = _405;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    vec4 _535 = u_world * a_position;\n    vec3 _419 = _535.xyz;\n    mat3 _555 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _558 = normalize(_555 * a_normal);\n    vec3 _572 = normalize(_555 * a_tangent.xyz);\n    mat3 _454 = mat3(_572, cross(_572, _558) * a_tangent.w, _558);\n    gl_Position = u_projection * (u_view * _535);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _454 * u_lightDir;\n    varying_ViewDir = _454 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _419);\n    varying_WorldNormal = _558;\n    varying_positionCamera_Fog = (u_view * vec4(_535.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _419;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    vec4 _549 = u_world * a_position;\n    vec3 _426 = _549.xyz;\n    mat3 _569 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _572 = normalize(_569 * a_normal);\n    vec3 _586 = normalize(_569 * a_tangent.xyz);\n    mat3 _461 = mat3(_586, cross(_586, _572) * a_tangent.w, _572);\n    gl_Position = u_projection * (u_view * _549);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _461 * u_lightDir;\n    varying_ViewDir = _461 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _426);\n    varying_WorldNormal = _572;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_ShadowPosition = _426;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _EmissionColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec2 a_lightMapCoord;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec2 varying_LightMapCoord;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    vec4 _574 = u_world * a_position;\n    vec3 _440 = _574.xyz;\n    mat3 _594 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _597 = normalize(_594 * a_normal);\n    vec3 _611 = normalize(_594 * a_tangent.xyz);\n    mat3 _475 = mat3(_611, cross(_611, _597) * a_tangent.w, _597);\n    gl_Position = u_projection * (u_view * _574);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_LightDir = _475 * u_lightDir;\n    varying_ViewDir = _475 * normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _440);\n    varying_WorldNormal = _597;\n    varying_LightMapCoord = (vec2(a_lightMapCoord.x, a_lightMapCoord.y - 1.0) * u_lightMapScaleOffset.xy) + vec2(u_lightMapScaleOffset.z, 1.0 - u_lightMapScaleOffset.w);\n    varying_positionCamera_Fog = (u_view * vec4(_574.xyz, 1.0)).xyz;\n    varying_ShadowPosition = _440;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _557 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _565 = (_557 * _Color) * _AlbedoIntensity;\n    highp vec3 _568 = normalize(varying_LightDir);\n    highp vec4 _580 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _635 = (_580.xy - vec2(0.5)) * 2.0;\n    highp vec3 _646 = vec3(_635, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_635, _635))));\n    highp vec4 _689 = vec4(varying_ShadowPosition, 1.0);\n    highp float _693 = -(u_view * _689).z;\n    bool _706 = true && (_693 < u_csmFarBounds.x);\n    highp float _953 = 0.0;\n    if (_706)\n    {\n        highp vec3 _721 = ((u_csmLightSpaceMatrices[0] * _689).xyz * 0.5) + vec3(0.5);\n        highp float _725 = _721.x;\n        highp float _729 = _721.y;\n        highp float _739 = (((_721.z + step(_725, 0.001000000047497451305389404296875)) + step(_729, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _725)) + step(0.999000012874603271484375, _729);\n        highp float _950 = 0.0;\n        for (int SPIRV_Cross_Dummy259 = 0; SPIRV_Cross_Dummy259 < 1; SPIRV_Cross_Dummy259++)\n        {\n            if (_739 > 1.0)\n            {\n                _950 = 1.0;\n                break;\n            }\n            highp float _790 = _739 - 0.001000000047497451305389404296875;\n            highp vec2 _796 = ((_721.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _807 = fract(_796 * vec2(2048.0));\n            highp float _862 = _807.y;\n            _950 = mix(mix(float(_790 < dot(texture2D(u_shadowMapTex, _796), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_790 < dot(texture2D(u_shadowMapTex, _796 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _862), mix(float(_790 < dot(texture2D(u_shadowMapTex, _796 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_790 < dot(texture2D(u_shadowMapTex, _796 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _862), _807.x);\n            break;\n        }\n        _953 = _950;\n    }\n    else\n    {\n        _953 = 1.0;\n    }\n    bool _1281 = _706 ? true : false;\n    bool _972 = (!_1281) && (_693 < u_csmFarBounds.y);\n    highp float _1063 = 0.0;\n    if (_972)\n    {\n        highp vec3 _983 = ((u_csmLightSpaceMatrices[1] * _689).xyz * 0.5) + vec3(0.5);\n        highp float _985 = _983.x;\n        highp float _988 = _983.y;\n        highp float _996 = (((_983.z + step(_985, 0.001000000047497451305389404296875)) + step(_988, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _985)) + step(0.999000012874603271484375, _988);\n        highp float _1060 = 0.0;\n        for (int SPIRV_Cross_Dummy335 = 0; SPIRV_Cross_Dummy335 < 1; SPIRV_Cross_Dummy335++)\n        {\n            if (_996 > 1.0)\n            {\n                _1060 = 1.0;\n                break;\n            }\n            highp float _1014 = _996 - 0.001000000047497451305389404296875;\n            highp vec2 _1018 = ((_983.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1025 = fract(_1018 * vec2(2048.0));\n            highp float _1053 = _1025.y;\n            _1060 = mix(mix(float(_1014 < dot(texture2D(u_shadowMapTex, _1018), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1014 < dot(texture2D(u_shadowMapTex, _1018 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1053), mix(float(_1014 < dot(texture2D(u_shadowMapTex, _1018 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1014 < dot(texture2D(u_shadowMapTex, _1018 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1053), _1025.x);\n            break;\n        }\n        _1063 = _1060;\n    }\n    else\n    {\n        _1063 = _953;\n    }\n    bool _1282 = _972 ? true : _1281;\n    bool _1077 = (!_1282) && (_693 < u_csmFarBounds.z);\n    highp float _1168 = 0.0;\n    if (_1077)\n    {\n        highp vec3 _1088 = ((u_csmLightSpaceMatrices[2] * _689).xyz * 0.5) + vec3(0.5);\n        highp float _1090 = _1088.x;\n        highp float _1093 = _1088.y;\n        highp float _1101 = (((_1088.z + step(_1090, 0.001000000047497451305389404296875)) + step(_1093, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1090)) + step(0.999000012874603271484375, _1093);\n        highp float _1165 = 0.0;\n        for (int SPIRV_Cross_Dummy411 = 0; SPIRV_Cross_Dummy411 < 1; SPIRV_Cross_Dummy411++)\n        {\n            if (_1101 > 1.0)\n            {\n                _1165 = 1.0;\n                break;\n            }\n            highp float _1119 = _1101 - 0.001000000047497451305389404296875;\n            highp vec2 _1123 = ((_1088.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1130 = fract(_1123 * vec2(2048.0));\n            highp float _1158 = _1130.y;\n            _1165 = mix(mix(float(_1119 < dot(texture2D(u_shadowMapTex, _1123), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1119 < dot(texture2D(u_shadowMapTex, _1123 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1158), mix(float(_1119 < dot(texture2D(u_shadowMapTex, _1123 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1119 < dot(texture2D(u_shadowMapTex, _1123 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1158), _1130.x);\n            break;\n        }\n        _1168 = _1165;\n    }\n    else\n    {\n        _1168 = _1063;\n    }\n    highp float _1273 = 0.0;\n    if ((!(_1077 ? true : _1282)) && (_693 < u_csmFarBounds.w))\n    {\n        highp vec3 _1193 = ((u_csmLightSpaceMatrices[3] * _689).xyz * 0.5) + vec3(0.5);\n        highp float _1195 = _1193.x;\n        highp float _1198 = _1193.y;\n        highp float _1206 = (((_1193.z + step(_1195, 0.001000000047497451305389404296875)) + step(_1198, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1195)) + step(0.999000012874603271484375, _1198);\n        highp float _1270 = 0.0;\n        for (int SPIRV_Cross_Dummy481 = 0; SPIRV_Cross_Dummy481 < 1; SPIRV_Cross_Dummy481++)\n        {\n            if (_1206 > 1.0)\n            {\n                _1270 = 1.0;\n                break;\n            }\n            highp float _1224 = _1206 - 0.001000000047497451305389404296875;\n            highp vec2 _1228 = ((_1193.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1235 = fract(_1228 * vec2(2048.0));\n            highp float _1263 = _1235.y;\n            _1270 = mix(mix(float(_1224 < dot(texture2D(u_shadowMapTex, _1228), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1224 < dot(texture2D(u_shadowMapTex, _1228 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1263), mix(float(_1224 < dot(texture2D(u_shadowMapTex, _1228 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1224 < dot(texture2D(u_shadowMapTex, _1228 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1263), _1235.x);\n            break;\n        }\n        _1273 = _1270;\n    }\n    else\n    {\n        _1273 = _1168;\n    }\n    gl_FragData[0] = vec4(_565.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_568, _646))) * _1273)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _568), _646)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _565.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _644 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _652 = (_644 * _Color) * _AlbedoIntensity;\n    highp vec3 _655 = normalize(varying_LightDir);\n    highp vec4 _667 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _729 = (_667.xy - vec2(0.5)) * 2.0;\n    highp vec3 _740 = vec3(_729, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_729, _729))));\n    highp vec4 _783 = vec4(varying_ShadowPosition, 1.0);\n    highp float _787 = -(u_view * _783).z;\n    bool _800 = true && (_787 < u_csmFarBounds.x);\n    highp float _1122 = 0.0;\n    if (_800)\n    {\n        highp vec3 _815 = ((u_csmLightSpaceMatrices[0] * _783).xyz * 0.5) + vec3(0.5);\n        highp float _819 = _815.x;\n        highp float _823 = _815.y;\n        highp float _833 = (((_815.z + step(_819, 0.001000000047497451305389404296875)) + step(_823, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _819)) + step(0.999000012874603271484375, _823);\n        highp float _1119 = 0.0;\n        for (int SPIRV_Cross_Dummy263 = 0; SPIRV_Cross_Dummy263 < 1; SPIRV_Cross_Dummy263++)\n        {\n            if (_833 > 1.0)\n            {\n                _1119 = 1.0;\n                break;\n            }\n            highp float _884 = _833 - 0.001000000047497451305389404296875;\n            highp vec2 _890 = ((_815.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _901 = fract(_890 * vec2(2048.0));\n            highp float _956 = _901.y;\n            _1119 = mix(mix(float(_884 < dot(texture2D(u_shadowMapTex, _890), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_884 < dot(texture2D(u_shadowMapTex, _890 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _956), mix(float(_884 < dot(texture2D(u_shadowMapTex, _890 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_884 < dot(texture2D(u_shadowMapTex, _890 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _956), _901.x);\n            break;\n        }\n        _1122 = _1119;\n    }\n    else\n    {\n        _1122 = 1.0;\n    }\n    bool _1450 = _800 ? true : false;\n    bool _1141 = (!_1450) && (_787 < u_csmFarBounds.y);\n    highp float _1232 = 0.0;\n    if (_1141)\n    {\n        highp vec3 _1152 = ((u_csmLightSpaceMatrices[1] * _783).xyz * 0.5) + vec3(0.5);\n        highp float _1154 = _1152.x;\n        highp float _1157 = _1152.y;\n        highp float _1165 = (((_1152.z + step(_1154, 0.001000000047497451305389404296875)) + step(_1157, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1154)) + step(0.999000012874603271484375, _1157);\n        highp float _1229 = 0.0;\n        for (int SPIRV_Cross_Dummy339 = 0; SPIRV_Cross_Dummy339 < 1; SPIRV_Cross_Dummy339++)\n        {\n            if (_1165 > 1.0)\n            {\n                _1229 = 1.0;\n                break;\n            }\n            highp float _1183 = _1165 - 0.001000000047497451305389404296875;\n            highp vec2 _1187 = ((_1152.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1194 = fract(_1187 * vec2(2048.0));\n            highp float _1222 = _1194.y;\n            _1229 = mix(mix(float(_1183 < dot(texture2D(u_shadowMapTex, _1187), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1183 < dot(texture2D(u_shadowMapTex, _1187 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1222), mix(float(_1183 < dot(texture2D(u_shadowMapTex, _1187 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1183 < dot(texture2D(u_shadowMapTex, _1187 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1222), _1194.x);\n            break;\n        }\n        _1232 = _1229;\n    }\n    else\n    {\n        _1232 = _1122;\n    }\n    bool _1451 = _1141 ? true : _1450;\n    bool _1246 = (!_1451) && (_787 < u_csmFarBounds.z);\n    highp float _1337 = 0.0;\n    if (_1246)\n    {\n        highp vec3 _1257 = ((u_csmLightSpaceMatrices[2] * _783).xyz * 0.5) + vec3(0.5);\n        highp float _1259 = _1257.x;\n        highp float _1262 = _1257.y;\n        highp float _1270 = (((_1257.z + step(_1259, 0.001000000047497451305389404296875)) + step(_1262, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1259)) + step(0.999000012874603271484375, _1262);\n        highp float _1334 = 0.0;\n        for (int SPIRV_Cross_Dummy415 = 0; SPIRV_Cross_Dummy415 < 1; SPIRV_Cross_Dummy415++)\n        {\n            if (_1270 > 1.0)\n            {\n                _1334 = 1.0;\n                break;\n            }\n            highp float _1288 = _1270 - 0.001000000047497451305389404296875;\n            highp vec2 _1292 = ((_1257.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1299 = fract(_1292 * vec2(2048.0));\n            highp float _1327 = _1299.y;\n            _1334 = mix(mix(float(_1288 < dot(texture2D(u_shadowMapTex, _1292), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1288 < dot(texture2D(u_shadowMapTex, _1292 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1327), mix(float(_1288 < dot(texture2D(u_shadowMapTex, _1292 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1288 < dot(texture2D(u_shadowMapTex, _1292 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1327), _1299.x);\n            break;\n        }\n        _1337 = _1334;\n    }\n    else\n    {\n        _1337 = _1232;\n    }\n    highp float _1442 = 0.0;\n    if ((!(_1246 ? true : _1451)) && (_787 < u_csmFarBounds.w))\n    {\n        highp vec3 _1362 = ((u_csmLightSpaceMatrices[3] * _783).xyz * 0.5) + vec3(0.5);\n        highp float _1364 = _1362.x;\n        highp float _1367 = _1362.y;\n        highp float _1375 = (((_1362.z + step(_1364, 0.001000000047497451305389404296875)) + step(_1367, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1364)) + step(0.999000012874603271484375, _1367);\n        highp float _1439 = 0.0;\n        for (int SPIRV_Cross_Dummy485 = 0; SPIRV_Cross_Dummy485 < 1; SPIRV_Cross_Dummy485++)\n        {\n            if (_1375 > 1.0)\n            {\n                _1439 = 1.0;\n                break;\n            }\n            highp float _1393 = _1375 - 0.001000000047497451305389404296875;\n            highp vec2 _1397 = ((_1362.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1404 = fract(_1397 * vec2(2048.0));\n            highp float _1432 = _1404.y;\n            _1439 = mix(mix(float(_1393 < dot(texture2D(u_shadowMapTex, _1397), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1393 < dot(texture2D(u_shadowMapTex, _1397 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1432), mix(float(_1393 < dot(texture2D(u_shadowMapTex, _1397 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1393 < dot(texture2D(u_shadowMapTex, _1397 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1432), _1404.x);\n            break;\n        }\n        _1442 = _1439;\n    }\n    else\n    {\n        _1442 = _1337;\n    }\n    highp vec4 _693 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _712 = vec4(_652.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_655, _740))) * _1442)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _655), _740)), _Shininess * 128.0)) * (_693.xyz * _SpecColor.xyz))), _652.w);\n    highp float _1004 = length(varying_positionCamera_Fog);\n    highp float _1112 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1112 = (u_fogInfos.z - _1004) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1113 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1113 = 1.0 / pow(2.7182800769805908203125, _1004 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1114 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1114 = 1.0 / pow(2.7182800769805908203125, ((_1004 * _1004) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1114 = 1.0;\n            }\n            _1113 = _1114;\n        }\n        _1112 = _1113;\n    }\n    highp float _1050 = clamp(_1112, 0.0, 1.0);\n    highp vec3 _1059 = (_712.xyz * _1050) + (u_fogColor * (1.0 - _1050));\n    gl_FragData[0] = vec4(_1059.x, _1059.y, _1059.z, _712.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _621 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _629 = (_621 * _Color) * _AlbedoIntensity;\n    highp vec4 _644 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _705 = (_644.xy - vec2(0.5)) * 2.0;\n    highp vec4 _759 = vec4(varying_ShadowPosition, 1.0);\n    highp float _763 = -(u_view * _759).z;\n    bool _776 = true && (_763 < u_csmFarBounds.x);\n    highp float _1066 = 0.0;\n    if (_776)\n    {\n        highp vec3 _791 = ((u_csmLightSpaceMatrices[0] * _759).xyz * 0.5) + vec3(0.5);\n        highp float _795 = _791.x;\n        highp float _799 = _791.y;\n        highp float _809 = (((_791.z + step(_795, 0.001000000047497451305389404296875)) + step(_799, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _795)) + step(0.999000012874603271484375, _799);\n        highp float _1063 = 0.0;\n        for (int SPIRV_Cross_Dummy264 = 0; SPIRV_Cross_Dummy264 < 1; SPIRV_Cross_Dummy264++)\n        {\n            if (_809 > 1.0)\n            {\n                _1063 = 1.0;\n                break;\n            }\n            highp float _860 = _809 - 0.001000000047497451305389404296875;\n            highp vec2 _866 = ((_791.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _877 = fract(_866 * vec2(2048.0));\n            highp float _932 = _877.y;\n            _1063 = mix(mix(float(_860 < dot(texture2D(u_shadowMapTex, _866), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_860 < dot(texture2D(u_shadowMapTex, _866 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _932), mix(float(_860 < dot(texture2D(u_shadowMapTex, _866 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_860 < dot(texture2D(u_shadowMapTex, _866 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _932), _877.x);\n            break;\n        }\n        _1066 = _1063;\n    }\n    else\n    {\n        _1066 = 1.0;\n    }\n    bool _1394 = _776 ? true : false;\n    bool _1085 = (!_1394) && (_763 < u_csmFarBounds.y);\n    highp float _1176 = 0.0;\n    if (_1085)\n    {\n        highp vec3 _1096 = ((u_csmLightSpaceMatrices[1] * _759).xyz * 0.5) + vec3(0.5);\n        highp float _1098 = _1096.x;\n        highp float _1101 = _1096.y;\n        highp float _1109 = (((_1096.z + step(_1098, 0.001000000047497451305389404296875)) + step(_1101, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1098)) + step(0.999000012874603271484375, _1101);\n        highp float _1173 = 0.0;\n        for (int SPIRV_Cross_Dummy340 = 0; SPIRV_Cross_Dummy340 < 1; SPIRV_Cross_Dummy340++)\n        {\n            if (_1109 > 1.0)\n            {\n                _1173 = 1.0;\n                break;\n            }\n            highp float _1127 = _1109 - 0.001000000047497451305389404296875;\n            highp vec2 _1131 = ((_1096.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1138 = fract(_1131 * vec2(2048.0));\n            highp float _1166 = _1138.y;\n            _1173 = mix(mix(float(_1127 < dot(texture2D(u_shadowMapTex, _1131), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1127 < dot(texture2D(u_shadowMapTex, _1131 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1166), mix(float(_1127 < dot(texture2D(u_shadowMapTex, _1131 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1127 < dot(texture2D(u_shadowMapTex, _1131 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1166), _1138.x);\n            break;\n        }\n        _1176 = _1173;\n    }\n    else\n    {\n        _1176 = _1066;\n    }\n    bool _1395 = _1085 ? true : _1394;\n    bool _1190 = (!_1395) && (_763 < u_csmFarBounds.z);\n    highp float _1281 = 0.0;\n    if (_1190)\n    {\n        highp vec3 _1201 = ((u_csmLightSpaceMatrices[2] * _759).xyz * 0.5) + vec3(0.5);\n        highp float _1203 = _1201.x;\n        highp float _1206 = _1201.y;\n        highp float _1214 = (((_1201.z + step(_1203, 0.001000000047497451305389404296875)) + step(_1206, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1203)) + step(0.999000012874603271484375, _1206);\n        highp float _1278 = 0.0;\n        for (int SPIRV_Cross_Dummy416 = 0; SPIRV_Cross_Dummy416 < 1; SPIRV_Cross_Dummy416++)\n        {\n            if (_1214 > 1.0)\n            {\n                _1278 = 1.0;\n                break;\n            }\n            highp float _1232 = _1214 - 0.001000000047497451305389404296875;\n            highp vec2 _1236 = ((_1201.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1243 = fract(_1236 * vec2(2048.0));\n            highp float _1271 = _1243.y;\n            _1278 = mix(mix(float(_1232 < dot(texture2D(u_shadowMapTex, _1236), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1232 < dot(texture2D(u_shadowMapTex, _1236 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1271), mix(float(_1232 < dot(texture2D(u_shadowMapTex, _1236 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1232 < dot(texture2D(u_shadowMapTex, _1236 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1271), _1243.x);\n            break;\n        }\n        _1281 = _1278;\n    }\n    else\n    {\n        _1281 = _1176;\n    }\n    highp float _1386 = 0.0;\n    if ((!(_1190 ? true : _1395)) && (_763 < u_csmFarBounds.w))\n    {\n        highp vec3 _1306 = ((u_csmLightSpaceMatrices[3] * _759).xyz * 0.5) + vec3(0.5);\n        highp float _1308 = _1306.x;\n        highp float _1311 = _1306.y;\n        highp float _1319 = (((_1306.z + step(_1308, 0.001000000047497451305389404296875)) + step(_1311, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1308)) + step(0.999000012874603271484375, _1311);\n        highp float _1383 = 0.0;\n        for (int SPIRV_Cross_Dummy486 = 0; SPIRV_Cross_Dummy486 < 1; SPIRV_Cross_Dummy486++)\n        {\n            if (_1319 > 1.0)\n            {\n                _1383 = 1.0;\n                break;\n            }\n            highp float _1337 = _1319 - 0.001000000047497451305389404296875;\n            highp vec2 _1341 = ((_1306.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1348 = fract(_1341 * vec2(2048.0));\n            highp float _1376 = _1348.y;\n            _1383 = mix(mix(float(_1337 < dot(texture2D(u_shadowMapTex, _1341), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1337 < dot(texture2D(u_shadowMapTex, _1341 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1376), mix(float(_1337 < dot(texture2D(u_shadowMapTex, _1341 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1337 < dot(texture2D(u_shadowMapTex, _1341 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1376), _1348.x);\n            break;\n        }\n        _1386 = _1383;\n    }\n    else\n    {\n        _1386 = _1281;\n    }\n    highp vec3 _666 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_629.xyz * (min(_666, mix(max(_666 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1386))), u_shadowColor), _666, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_705, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_705, _705)))))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _629.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _708 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _716 = (_708 * _Color) * _AlbedoIntensity;\n    highp vec4 _731 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _799 = (_731.xy - vec2(0.5)) * 2.0;\n    highp vec4 _853 = vec4(varying_ShadowPosition, 1.0);\n    highp float _857 = -(u_view * _853).z;\n    bool _870 = true && (_857 < u_csmFarBounds.x);\n    highp float _1235 = 0.0;\n    if (_870)\n    {\n        highp vec3 _885 = ((u_csmLightSpaceMatrices[0] * _853).xyz * 0.5) + vec3(0.5);\n        highp float _889 = _885.x;\n        highp float _893 = _885.y;\n        highp float _903 = (((_885.z + step(_889, 0.001000000047497451305389404296875)) + step(_893, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _889)) + step(0.999000012874603271484375, _893);\n        highp float _1232 = 0.0;\n        for (int SPIRV_Cross_Dummy268 = 0; SPIRV_Cross_Dummy268 < 1; SPIRV_Cross_Dummy268++)\n        {\n            if (_903 > 1.0)\n            {\n                _1232 = 1.0;\n                break;\n            }\n            highp float _954 = _903 - 0.001000000047497451305389404296875;\n            highp vec2 _960 = ((_885.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _971 = fract(_960 * vec2(2048.0));\n            highp float _1026 = _971.y;\n            _1232 = mix(mix(float(_954 < dot(texture2D(u_shadowMapTex, _960), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_954 < dot(texture2D(u_shadowMapTex, _960 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1026), mix(float(_954 < dot(texture2D(u_shadowMapTex, _960 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_954 < dot(texture2D(u_shadowMapTex, _960 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1026), _971.x);\n            break;\n        }\n        _1235 = _1232;\n    }\n    else\n    {\n        _1235 = 1.0;\n    }\n    bool _1563 = _870 ? true : false;\n    bool _1254 = (!_1563) && (_857 < u_csmFarBounds.y);\n    highp float _1345 = 0.0;\n    if (_1254)\n    {\n        highp vec3 _1265 = ((u_csmLightSpaceMatrices[1] * _853).xyz * 0.5) + vec3(0.5);\n        highp float _1267 = _1265.x;\n        highp float _1270 = _1265.y;\n        highp float _1278 = (((_1265.z + step(_1267, 0.001000000047497451305389404296875)) + step(_1270, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1267)) + step(0.999000012874603271484375, _1270);\n        highp float _1342 = 0.0;\n        for (int SPIRV_Cross_Dummy344 = 0; SPIRV_Cross_Dummy344 < 1; SPIRV_Cross_Dummy344++)\n        {\n            if (_1278 > 1.0)\n            {\n                _1342 = 1.0;\n                break;\n            }\n            highp float _1296 = _1278 - 0.001000000047497451305389404296875;\n            highp vec2 _1300 = ((_1265.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1307 = fract(_1300 * vec2(2048.0));\n            highp float _1335 = _1307.y;\n            _1342 = mix(mix(float(_1296 < dot(texture2D(u_shadowMapTex, _1300), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1296 < dot(texture2D(u_shadowMapTex, _1300 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1335), mix(float(_1296 < dot(texture2D(u_shadowMapTex, _1300 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1296 < dot(texture2D(u_shadowMapTex, _1300 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1335), _1307.x);\n            break;\n        }\n        _1345 = _1342;\n    }\n    else\n    {\n        _1345 = _1235;\n    }\n    bool _1564 = _1254 ? true : _1563;\n    bool _1359 = (!_1564) && (_857 < u_csmFarBounds.z);\n    highp float _1450 = 0.0;\n    if (_1359)\n    {\n        highp vec3 _1370 = ((u_csmLightSpaceMatrices[2] * _853).xyz * 0.5) + vec3(0.5);\n        highp float _1372 = _1370.x;\n        highp float _1375 = _1370.y;\n        highp float _1383 = (((_1370.z + step(_1372, 0.001000000047497451305389404296875)) + step(_1375, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1372)) + step(0.999000012874603271484375, _1375);\n        highp float _1447 = 0.0;\n        for (int SPIRV_Cross_Dummy420 = 0; SPIRV_Cross_Dummy420 < 1; SPIRV_Cross_Dummy420++)\n        {\n            if (_1383 > 1.0)\n            {\n                _1447 = 1.0;\n                break;\n            }\n            highp float _1401 = _1383 - 0.001000000047497451305389404296875;\n            highp vec2 _1405 = ((_1370.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1412 = fract(_1405 * vec2(2048.0));\n            highp float _1440 = _1412.y;\n            _1447 = mix(mix(float(_1401 < dot(texture2D(u_shadowMapTex, _1405), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1401 < dot(texture2D(u_shadowMapTex, _1405 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1440), mix(float(_1401 < dot(texture2D(u_shadowMapTex, _1405 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1401 < dot(texture2D(u_shadowMapTex, _1405 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1440), _1412.x);\n            break;\n        }\n        _1450 = _1447;\n    }\n    else\n    {\n        _1450 = _1345;\n    }\n    highp float _1555 = 0.0;\n    if ((!(_1359 ? true : _1564)) && (_857 < u_csmFarBounds.w))\n    {\n        highp vec3 _1475 = ((u_csmLightSpaceMatrices[3] * _853).xyz * 0.5) + vec3(0.5);\n        highp float _1477 = _1475.x;\n        highp float _1480 = _1475.y;\n        highp float _1488 = (((_1475.z + step(_1477, 0.001000000047497451305389404296875)) + step(_1480, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1477)) + step(0.999000012874603271484375, _1480);\n        highp float _1552 = 0.0;\n        for (int SPIRV_Cross_Dummy490 = 0; SPIRV_Cross_Dummy490 < 1; SPIRV_Cross_Dummy490++)\n        {\n            if (_1488 > 1.0)\n            {\n                _1552 = 1.0;\n                break;\n            }\n            highp float _1506 = _1488 - 0.001000000047497451305389404296875;\n            highp vec2 _1510 = ((_1475.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1517 = fract(_1510 * vec2(2048.0));\n            highp float _1545 = _1517.y;\n            _1552 = mix(mix(float(_1506 < dot(texture2D(u_shadowMapTex, _1510), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1506 < dot(texture2D(u_shadowMapTex, _1510 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1545), mix(float(_1506 < dot(texture2D(u_shadowMapTex, _1510 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1506 < dot(texture2D(u_shadowMapTex, _1510 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1545), _1517.x);\n            break;\n        }\n        _1555 = _1552;\n    }\n    else\n    {\n        _1555 = _1450;\n    }\n    highp vec4 _751 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _753 = _751.xyz * 2.0;\n    highp vec4 _763 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _782 = vec4(_716.xyz * (min(_753, mix(max(_753 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1555))), u_shadowColor), _753, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_799, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_799, _799)))))), _Shininess * 128.0)) * (_763.xyz * _SpecColor.xyz))), _716.w);\n    highp float _1112 = length(varying_positionCamera_Fog);\n    highp float _1225 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1225 = (u_fogInfos.z - _1112) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1226 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1226 = 1.0 / pow(2.7182800769805908203125, _1112 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1227 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1227 = 1.0 / pow(2.7182800769805908203125, ((_1112 * _1112) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1227 = 1.0;\n            }\n            _1226 = _1227;\n        }\n        _1225 = _1226;\n    }\n    highp float _1158 = clamp(_1225, 0.0, 1.0);\n    highp vec3 _1167 = (_782.xyz * _1158) + (u_fogColor * (1.0 - _1158));\n    gl_FragData[0] = vec4(_1167.x, _1167.y, _1167.z, _782.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\n\nvoid main()\n{\n    highp vec4 _321 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _329 = (_321 * _Color) * _AlbedoIntensity;\n    highp vec3 _332 = normalize(varying_LightDir);\n    highp vec2 _409 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _420 = vec3(_409, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_409, _409))));\n    highp vec4 _381 = vec4(_329.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_332, _420))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _332), _420)), _Shininess * 128.0)) * (_SpecColor.xyz * _321.w))), _329.w);\n    highp vec3 _397 = _381.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_397.x, _397.y, _397.z, _381.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _630 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _638 = (_630 * _Color) * _AlbedoIntensity;\n    highp float _640 = _638.w;\n    if ((_640 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _661 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _723 = (_661.xy - vec2(0.5)) * 2.0;\n    highp vec4 _777 = vec4(varying_ShadowPosition, 1.0);\n    highp float _781 = -(u_view * _777).z;\n    bool _794 = true && (_781 < u_csmFarBounds.x);\n    highp float _1085 = 0.0;\n    if (_794)\n    {\n        highp vec3 _809 = ((u_csmLightSpaceMatrices[0] * _777).xyz * 0.5) + vec3(0.5);\n        highp float _813 = _809.x;\n        highp float _817 = _809.y;\n        highp float _827 = (((_809.z + step(_813, 0.001000000047497451305389404296875)) + step(_817, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _813)) + step(0.999000012874603271484375, _817);\n        highp float _1082 = 0.0;\n        for (int SPIRV_Cross_Dummy274 = 0; SPIRV_Cross_Dummy274 < 1; SPIRV_Cross_Dummy274++)\n        {\n            if (_827 > 1.0)\n            {\n                _1082 = 1.0;\n                break;\n            }\n            highp float _878 = _827 - 0.001000000047497451305389404296875;\n            highp vec2 _884 = ((_809.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _895 = fract(_884 * vec2(2048.0));\n            highp float _950 = _895.y;\n            _1082 = mix(mix(float(_878 < dot(texture2D(u_shadowMapTex, _884), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_878 < dot(texture2D(u_shadowMapTex, _884 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _950), mix(float(_878 < dot(texture2D(u_shadowMapTex, _884 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_878 < dot(texture2D(u_shadowMapTex, _884 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _950), _895.x);\n            break;\n        }\n        _1085 = _1082;\n    }\n    else\n    {\n        _1085 = 1.0;\n    }\n    bool _1413 = _794 ? true : false;\n    bool _1104 = (!_1413) && (_781 < u_csmFarBounds.y);\n    highp float _1195 = 0.0;\n    if (_1104)\n    {\n        highp vec3 _1115 = ((u_csmLightSpaceMatrices[1] * _777).xyz * 0.5) + vec3(0.5);\n        highp float _1117 = _1115.x;\n        highp float _1120 = _1115.y;\n        highp float _1128 = (((_1115.z + step(_1117, 0.001000000047497451305389404296875)) + step(_1120, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1117)) + step(0.999000012874603271484375, _1120);\n        highp float _1192 = 0.0;\n        for (int SPIRV_Cross_Dummy350 = 0; SPIRV_Cross_Dummy350 < 1; SPIRV_Cross_Dummy350++)\n        {\n            if (_1128 > 1.0)\n            {\n                _1192 = 1.0;\n                break;\n            }\n            highp float _1146 = _1128 - 0.001000000047497451305389404296875;\n            highp vec2 _1150 = ((_1115.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1157 = fract(_1150 * vec2(2048.0));\n            highp float _1185 = _1157.y;\n            _1192 = mix(mix(float(_1146 < dot(texture2D(u_shadowMapTex, _1150), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1146 < dot(texture2D(u_shadowMapTex, _1150 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1185), mix(float(_1146 < dot(texture2D(u_shadowMapTex, _1150 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1146 < dot(texture2D(u_shadowMapTex, _1150 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1185), _1157.x);\n            break;\n        }\n        _1195 = _1192;\n    }\n    else\n    {\n        _1195 = _1085;\n    }\n    bool _1414 = _1104 ? true : _1413;\n    bool _1209 = (!_1414) && (_781 < u_csmFarBounds.z);\n    highp float _1300 = 0.0;\n    if (_1209)\n    {\n        highp vec3 _1220 = ((u_csmLightSpaceMatrices[2] * _777).xyz * 0.5) + vec3(0.5);\n        highp float _1222 = _1220.x;\n        highp float _1225 = _1220.y;\n        highp float _1233 = (((_1220.z + step(_1222, 0.001000000047497451305389404296875)) + step(_1225, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1222)) + step(0.999000012874603271484375, _1225);\n        highp float _1297 = 0.0;\n        for (int SPIRV_Cross_Dummy426 = 0; SPIRV_Cross_Dummy426 < 1; SPIRV_Cross_Dummy426++)\n        {\n            if (_1233 > 1.0)\n            {\n                _1297 = 1.0;\n                break;\n            }\n            highp float _1251 = _1233 - 0.001000000047497451305389404296875;\n            highp vec2 _1255 = ((_1220.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1262 = fract(_1255 * vec2(2048.0));\n            highp float _1290 = _1262.y;\n            _1297 = mix(mix(float(_1251 < dot(texture2D(u_shadowMapTex, _1255), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1251 < dot(texture2D(u_shadowMapTex, _1255 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1290), mix(float(_1251 < dot(texture2D(u_shadowMapTex, _1255 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1251 < dot(texture2D(u_shadowMapTex, _1255 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1290), _1262.x);\n            break;\n        }\n        _1300 = _1297;\n    }\n    else\n    {\n        _1300 = _1195;\n    }\n    highp float _1405 = 0.0;\n    if ((!(_1209 ? true : _1414)) && (_781 < u_csmFarBounds.w))\n    {\n        highp vec3 _1325 = ((u_csmLightSpaceMatrices[3] * _777).xyz * 0.5) + vec3(0.5);\n        highp float _1327 = _1325.x;\n        highp float _1330 = _1325.y;\n        highp float _1338 = (((_1325.z + step(_1327, 0.001000000047497451305389404296875)) + step(_1330, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1327)) + step(0.999000012874603271484375, _1330);\n        highp float _1402 = 0.0;\n        for (int SPIRV_Cross_Dummy496 = 0; SPIRV_Cross_Dummy496 < 1; SPIRV_Cross_Dummy496++)\n        {\n            if (_1338 > 1.0)\n            {\n                _1402 = 1.0;\n                break;\n            }\n            highp float _1356 = _1338 - 0.001000000047497451305389404296875;\n            highp vec2 _1360 = ((_1325.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1367 = fract(_1360 * vec2(2048.0));\n            highp float _1395 = _1367.y;\n            _1402 = mix(mix(float(_1356 < dot(texture2D(u_shadowMapTex, _1360), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1356 < dot(texture2D(u_shadowMapTex, _1360 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1395), mix(float(_1356 < dot(texture2D(u_shadowMapTex, _1360 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1356 < dot(texture2D(u_shadowMapTex, _1360 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1395), _1367.x);\n            break;\n        }\n        _1405 = _1402;\n    }\n    else\n    {\n        _1405 = _1300;\n    }\n    highp vec3 _683 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_638.xyz * (min(_683, mix(max(_683 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1405))), u_shadowColor), _683, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_723, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_723, _723)))))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _640);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _574 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _582 = (_574 * _Color) * _AlbedoIntensity;\n    highp vec3 _585 = normalize(varying_LightDir);\n    highp vec4 _597 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _665 = (_597.xy - vec2(0.5)) * 2.0;\n    highp vec3 _676 = vec3(_665, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_665, _665))));\n    highp vec4 _719 = vec4(varying_ShadowPosition, 1.0);\n    highp float _723 = -(u_view * _719).z;\n    bool _736 = true && (_723 < u_csmFarBounds.x);\n    highp float _985 = 0.0;\n    if (_736)\n    {\n        highp vec3 _751 = ((u_csmLightSpaceMatrices[0] * _719).xyz * 0.5) + vec3(0.5);\n        highp float _755 = _751.x;\n        highp float _759 = _751.y;\n        highp float _769 = (((_751.z + step(_755, 0.001000000047497451305389404296875)) + step(_759, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _755)) + step(0.999000012874603271484375, _759);\n        highp float _982 = 0.0;\n        for (int SPIRV_Cross_Dummy259 = 0; SPIRV_Cross_Dummy259 < 1; SPIRV_Cross_Dummy259++)\n        {\n            if (_769 > 1.0)\n            {\n                _982 = 1.0;\n                break;\n            }\n            highp float _820 = _769 - 0.001000000047497451305389404296875;\n            highp vec2 _826 = ((_751.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _837 = fract(_826 * vec2(2048.0));\n            highp float _892 = _837.y;\n            _982 = mix(mix(float(_820 < dot(texture2D(u_shadowMapTex, _826), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_820 < dot(texture2D(u_shadowMapTex, _826 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _892), mix(float(_820 < dot(texture2D(u_shadowMapTex, _826 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_820 < dot(texture2D(u_shadowMapTex, _826 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _892), _837.x);\n            break;\n        }\n        _985 = _982;\n    }\n    else\n    {\n        _985 = 1.0;\n    }\n    bool _1312 = _736 ? true : false;\n    bool _1004 = (!_1312) && (_723 < u_csmFarBounds.y);\n    highp float _1095 = 0.0;\n    if (_1004)\n    {\n        highp vec3 _1015 = ((u_csmLightSpaceMatrices[1] * _719).xyz * 0.5) + vec3(0.5);\n        highp float _1017 = _1015.x;\n        highp float _1020 = _1015.y;\n        highp float _1028 = (((_1015.z + step(_1017, 0.001000000047497451305389404296875)) + step(_1020, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1017)) + step(0.999000012874603271484375, _1020);\n        highp float _1092 = 0.0;\n        for (int SPIRV_Cross_Dummy335 = 0; SPIRV_Cross_Dummy335 < 1; SPIRV_Cross_Dummy335++)\n        {\n            if (_1028 > 1.0)\n            {\n                _1092 = 1.0;\n                break;\n            }\n            highp float _1046 = _1028 - 0.001000000047497451305389404296875;\n            highp vec2 _1050 = ((_1015.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1057 = fract(_1050 * vec2(2048.0));\n            highp float _1085 = _1057.y;\n            _1092 = mix(mix(float(_1046 < dot(texture2D(u_shadowMapTex, _1050), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1046 < dot(texture2D(u_shadowMapTex, _1050 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1085), mix(float(_1046 < dot(texture2D(u_shadowMapTex, _1050 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1046 < dot(texture2D(u_shadowMapTex, _1050 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1085), _1057.x);\n            break;\n        }\n        _1095 = _1092;\n    }\n    else\n    {\n        _1095 = _985;\n    }\n    bool _1313 = _1004 ? true : _1312;\n    bool _1109 = (!_1313) && (_723 < u_csmFarBounds.z);\n    highp float _1200 = 0.0;\n    if (_1109)\n    {\n        highp vec3 _1120 = ((u_csmLightSpaceMatrices[2] * _719).xyz * 0.5) + vec3(0.5);\n        highp float _1122 = _1120.x;\n        highp float _1125 = _1120.y;\n        highp float _1133 = (((_1120.z + step(_1122, 0.001000000047497451305389404296875)) + step(_1125, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1122)) + step(0.999000012874603271484375, _1125);\n        highp float _1197 = 0.0;\n        for (int SPIRV_Cross_Dummy411 = 0; SPIRV_Cross_Dummy411 < 1; SPIRV_Cross_Dummy411++)\n        {\n            if (_1133 > 1.0)\n            {\n                _1197 = 1.0;\n                break;\n            }\n            highp float _1151 = _1133 - 0.001000000047497451305389404296875;\n            highp vec2 _1155 = ((_1120.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1162 = fract(_1155 * vec2(2048.0));\n            highp float _1190 = _1162.y;\n            _1197 = mix(mix(float(_1151 < dot(texture2D(u_shadowMapTex, _1155), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1151 < dot(texture2D(u_shadowMapTex, _1155 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1190), mix(float(_1151 < dot(texture2D(u_shadowMapTex, _1155 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1151 < dot(texture2D(u_shadowMapTex, _1155 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1190), _1162.x);\n            break;\n        }\n        _1200 = _1197;\n    }\n    else\n    {\n        _1200 = _1095;\n    }\n    highp float _1305 = 0.0;\n    if ((!(_1109 ? true : _1313)) && (_723 < u_csmFarBounds.w))\n    {\n        highp vec3 _1225 = ((u_csmLightSpaceMatrices[3] * _719).xyz * 0.5) + vec3(0.5);\n        highp float _1227 = _1225.x;\n        highp float _1230 = _1225.y;\n        highp float _1238 = (((_1225.z + step(_1227, 0.001000000047497451305389404296875)) + step(_1230, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1227)) + step(0.999000012874603271484375, _1230);\n        highp float _1302 = 0.0;\n        for (int SPIRV_Cross_Dummy481 = 0; SPIRV_Cross_Dummy481 < 1; SPIRV_Cross_Dummy481++)\n        {\n            if (_1238 > 1.0)\n            {\n                _1302 = 1.0;\n                break;\n            }\n            highp float _1256 = _1238 - 0.001000000047497451305389404296875;\n            highp vec2 _1260 = ((_1225.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1267 = fract(_1260 * vec2(2048.0));\n            highp float _1295 = _1267.y;\n            _1302 = mix(mix(float(_1256 < dot(texture2D(u_shadowMapTex, _1260), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1256 < dot(texture2D(u_shadowMapTex, _1260 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1295), mix(float(_1256 < dot(texture2D(u_shadowMapTex, _1260 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1256 < dot(texture2D(u_shadowMapTex, _1260 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1295), _1267.x);\n            break;\n        }\n        _1305 = _1302;\n    }\n    else\n    {\n        _1305 = _1200;\n    }\n    highp vec4 _637 = vec4(_582.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_585, _676))) * _1305)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _585), _676)), _Shininess * 128.0)) * (_SpecColor.xyz * _574.w))), _582.w);\n    highp vec3 _653 = _637.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_653.x, _653.y, _653.z, _637.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _411 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _419 = (_411 * _Color) * _AlbedoIntensity;\n    highp vec3 _422 = normalize(varying_LightDir);\n    highp vec4 _434 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _506 = (_434.xy - vec2(0.5)) * 2.0;\n    highp vec3 _517 = vec3(_506, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_506, _506))));\n    highp vec4 _471 = vec4(_419.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_422, _517))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _422), _517)), _Shininess * 128.0)) * (_SpecColor.xyz * _411.w))), _419.w);\n    highp vec4 _477 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _552 = length(varying_positionCamera_Fog);\n    highp float _634 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _634 = (u_fogInfos.z - _552) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _635 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _635 = 1.0 / pow(2.7182800769805908203125, _552 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _636 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _636 = 1.0 / pow(2.7182800769805908203125, ((_552 * _552) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _636 = 1.0;\n            }\n            _635 = _636;\n        }\n        _634 = _635;\n    }\n    highp float _598 = clamp(_634, 0.0, 1.0);\n    highp vec3 _607 = ((_471.xyz + (_EmissionColor.xyz * _477.x)).xyz * _598) + (u_fogColor * (1.0 - _598));\n    gl_FragData[0] = vec4(_607.x, _607.y, _607.z, _471.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _717 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _725 = (_717 * _Color) * _AlbedoIntensity;\n    highp float _727 = _725.w;\n    if ((_727 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _748 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _817 = (_748.xy - vec2(0.5)) * 2.0;\n    highp vec4 _871 = vec4(varying_ShadowPosition, 1.0);\n    highp float _875 = -(u_view * _871).z;\n    bool _888 = true && (_875 < u_csmFarBounds.x);\n    highp float _1254 = 0.0;\n    if (_888)\n    {\n        highp vec3 _903 = ((u_csmLightSpaceMatrices[0] * _871).xyz * 0.5) + vec3(0.5);\n        highp float _907 = _903.x;\n        highp float _911 = _903.y;\n        highp float _921 = (((_903.z + step(_907, 0.001000000047497451305389404296875)) + step(_911, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _907)) + step(0.999000012874603271484375, _911);\n        highp float _1251 = 0.0;\n        for (int SPIRV_Cross_Dummy278 = 0; SPIRV_Cross_Dummy278 < 1; SPIRV_Cross_Dummy278++)\n        {\n            if (_921 > 1.0)\n            {\n                _1251 = 1.0;\n                break;\n            }\n            highp float _972 = _921 - 0.001000000047497451305389404296875;\n            highp vec2 _978 = ((_903.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _989 = fract(_978 * vec2(2048.0));\n            highp float _1044 = _989.y;\n            _1251 = mix(mix(float(_972 < dot(texture2D(u_shadowMapTex, _978), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_972 < dot(texture2D(u_shadowMapTex, _978 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1044), mix(float(_972 < dot(texture2D(u_shadowMapTex, _978 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_972 < dot(texture2D(u_shadowMapTex, _978 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1044), _989.x);\n            break;\n        }\n        _1254 = _1251;\n    }\n    else\n    {\n        _1254 = 1.0;\n    }\n    bool _1582 = _888 ? true : false;\n    bool _1273 = (!_1582) && (_875 < u_csmFarBounds.y);\n    highp float _1364 = 0.0;\n    if (_1273)\n    {\n        highp vec3 _1284 = ((u_csmLightSpaceMatrices[1] * _871).xyz * 0.5) + vec3(0.5);\n        highp float _1286 = _1284.x;\n        highp float _1289 = _1284.y;\n        highp float _1297 = (((_1284.z + step(_1286, 0.001000000047497451305389404296875)) + step(_1289, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1286)) + step(0.999000012874603271484375, _1289);\n        highp float _1361 = 0.0;\n        for (int SPIRV_Cross_Dummy354 = 0; SPIRV_Cross_Dummy354 < 1; SPIRV_Cross_Dummy354++)\n        {\n            if (_1297 > 1.0)\n            {\n                _1361 = 1.0;\n                break;\n            }\n            highp float _1315 = _1297 - 0.001000000047497451305389404296875;\n            highp vec2 _1319 = ((_1284.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1326 = fract(_1319 * vec2(2048.0));\n            highp float _1354 = _1326.y;\n            _1361 = mix(mix(float(_1315 < dot(texture2D(u_shadowMapTex, _1319), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1315 < dot(texture2D(u_shadowMapTex, _1319 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1354), mix(float(_1315 < dot(texture2D(u_shadowMapTex, _1319 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1315 < dot(texture2D(u_shadowMapTex, _1319 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1354), _1326.x);\n            break;\n        }\n        _1364 = _1361;\n    }\n    else\n    {\n        _1364 = _1254;\n    }\n    bool _1583 = _1273 ? true : _1582;\n    bool _1378 = (!_1583) && (_875 < u_csmFarBounds.z);\n    highp float _1469 = 0.0;\n    if (_1378)\n    {\n        highp vec3 _1389 = ((u_csmLightSpaceMatrices[2] * _871).xyz * 0.5) + vec3(0.5);\n        highp float _1391 = _1389.x;\n        highp float _1394 = _1389.y;\n        highp float _1402 = (((_1389.z + step(_1391, 0.001000000047497451305389404296875)) + step(_1394, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1391)) + step(0.999000012874603271484375, _1394);\n        highp float _1466 = 0.0;\n        for (int SPIRV_Cross_Dummy430 = 0; SPIRV_Cross_Dummy430 < 1; SPIRV_Cross_Dummy430++)\n        {\n            if (_1402 > 1.0)\n            {\n                _1466 = 1.0;\n                break;\n            }\n            highp float _1420 = _1402 - 0.001000000047497451305389404296875;\n            highp vec2 _1424 = ((_1389.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1431 = fract(_1424 * vec2(2048.0));\n            highp float _1459 = _1431.y;\n            _1466 = mix(mix(float(_1420 < dot(texture2D(u_shadowMapTex, _1424), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1420 < dot(texture2D(u_shadowMapTex, _1424 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1459), mix(float(_1420 < dot(texture2D(u_shadowMapTex, _1424 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1420 < dot(texture2D(u_shadowMapTex, _1424 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1459), _1431.x);\n            break;\n        }\n        _1469 = _1466;\n    }\n    else\n    {\n        _1469 = _1364;\n    }\n    highp float _1574 = 0.0;\n    if ((!(_1378 ? true : _1583)) && (_875 < u_csmFarBounds.w))\n    {\n        highp vec3 _1494 = ((u_csmLightSpaceMatrices[3] * _871).xyz * 0.5) + vec3(0.5);\n        highp float _1496 = _1494.x;\n        highp float _1499 = _1494.y;\n        highp float _1507 = (((_1494.z + step(_1496, 0.001000000047497451305389404296875)) + step(_1499, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1496)) + step(0.999000012874603271484375, _1499);\n        highp float _1571 = 0.0;\n        for (int SPIRV_Cross_Dummy500 = 0; SPIRV_Cross_Dummy500 < 1; SPIRV_Cross_Dummy500++)\n        {\n            if (_1507 > 1.0)\n            {\n                _1571 = 1.0;\n                break;\n            }\n            highp float _1525 = _1507 - 0.001000000047497451305389404296875;\n            highp vec2 _1529 = ((_1494.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1536 = fract(_1529 * vec2(2048.0));\n            highp float _1564 = _1536.y;\n            _1571 = mix(mix(float(_1525 < dot(texture2D(u_shadowMapTex, _1529), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1525 < dot(texture2D(u_shadowMapTex, _1529 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1564), mix(float(_1525 < dot(texture2D(u_shadowMapTex, _1529 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1525 < dot(texture2D(u_shadowMapTex, _1529 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1564), _1536.x);\n            break;\n        }\n        _1574 = _1571;\n    }\n    else\n    {\n        _1574 = _1469;\n    }\n    highp vec4 _768 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _770 = _768.xyz * 2.0;\n    highp vec4 _780 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _799 = vec4(_725.xyz * (min(_770, mix(max(_770 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1574))), u_shadowColor), _770, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_817, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_817, _817)))))), _Shininess * 128.0)) * (_780.xyz * _SpecColor.xyz))), _727);\n    highp float _1130 = length(varying_positionCamera_Fog);\n    highp float _1244 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1244 = (u_fogInfos.z - _1130) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1245 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1245 = 1.0 / pow(2.7182800769805908203125, _1130 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1246 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1246 = 1.0 / pow(2.7182800769805908203125, ((_1130 * _1130) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1246 = 1.0;\n            }\n            _1245 = _1246;\n        }\n        _1244 = _1245;\n    }\n    highp float _1176 = clamp(_1244, 0.0, 1.0);\n    highp vec3 _1185 = (_799.xyz * _1176) + (u_fogColor * (1.0 - _1176));\n    gl_FragData[0] = vec4(_1185.x, _1185.y, _1185.z, _799.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _661 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _669 = (_661 * _Color) * _AlbedoIntensity;\n    highp vec3 _672 = normalize(varying_LightDir);\n    highp vec4 _684 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _759 = (_684.xy - vec2(0.5)) * 2.0;\n    highp vec3 _770 = vec3(_759, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_759, _759))));\n    highp vec4 _813 = vec4(varying_ShadowPosition, 1.0);\n    highp float _817 = -(u_view * _813).z;\n    bool _830 = true && (_817 < u_csmFarBounds.x);\n    highp float _1154 = 0.0;\n    if (_830)\n    {\n        highp vec3 _845 = ((u_csmLightSpaceMatrices[0] * _813).xyz * 0.5) + vec3(0.5);\n        highp float _849 = _845.x;\n        highp float _853 = _845.y;\n        highp float _863 = (((_845.z + step(_849, 0.001000000047497451305389404296875)) + step(_853, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _849)) + step(0.999000012874603271484375, _853);\n        highp float _1151 = 0.0;\n        for (int SPIRV_Cross_Dummy263 = 0; SPIRV_Cross_Dummy263 < 1; SPIRV_Cross_Dummy263++)\n        {\n            if (_863 > 1.0)\n            {\n                _1151 = 1.0;\n                break;\n            }\n            highp float _914 = _863 - 0.001000000047497451305389404296875;\n            highp vec2 _920 = ((_845.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _931 = fract(_920 * vec2(2048.0));\n            highp float _986 = _931.y;\n            _1151 = mix(mix(float(_914 < dot(texture2D(u_shadowMapTex, _920), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_914 < dot(texture2D(u_shadowMapTex, _920 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _986), mix(float(_914 < dot(texture2D(u_shadowMapTex, _920 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_914 < dot(texture2D(u_shadowMapTex, _920 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _986), _931.x);\n            break;\n        }\n        _1154 = _1151;\n    }\n    else\n    {\n        _1154 = 1.0;\n    }\n    bool _1482 = _830 ? true : false;\n    bool _1173 = (!_1482) && (_817 < u_csmFarBounds.y);\n    highp float _1264 = 0.0;\n    if (_1173)\n    {\n        highp vec3 _1184 = ((u_csmLightSpaceMatrices[1] * _813).xyz * 0.5) + vec3(0.5);\n        highp float _1186 = _1184.x;\n        highp float _1189 = _1184.y;\n        highp float _1197 = (((_1184.z + step(_1186, 0.001000000047497451305389404296875)) + step(_1189, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1186)) + step(0.999000012874603271484375, _1189);\n        highp float _1261 = 0.0;\n        for (int SPIRV_Cross_Dummy339 = 0; SPIRV_Cross_Dummy339 < 1; SPIRV_Cross_Dummy339++)\n        {\n            if (_1197 > 1.0)\n            {\n                _1261 = 1.0;\n                break;\n            }\n            highp float _1215 = _1197 - 0.001000000047497451305389404296875;\n            highp vec2 _1219 = ((_1184.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1226 = fract(_1219 * vec2(2048.0));\n            highp float _1254 = _1226.y;\n            _1261 = mix(mix(float(_1215 < dot(texture2D(u_shadowMapTex, _1219), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1215 < dot(texture2D(u_shadowMapTex, _1219 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1254), mix(float(_1215 < dot(texture2D(u_shadowMapTex, _1219 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1215 < dot(texture2D(u_shadowMapTex, _1219 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1254), _1226.x);\n            break;\n        }\n        _1264 = _1261;\n    }\n    else\n    {\n        _1264 = _1154;\n    }\n    bool _1483 = _1173 ? true : _1482;\n    bool _1278 = (!_1483) && (_817 < u_csmFarBounds.z);\n    highp float _1369 = 0.0;\n    if (_1278)\n    {\n        highp vec3 _1289 = ((u_csmLightSpaceMatrices[2] * _813).xyz * 0.5) + vec3(0.5);\n        highp float _1291 = _1289.x;\n        highp float _1294 = _1289.y;\n        highp float _1302 = (((_1289.z + step(_1291, 0.001000000047497451305389404296875)) + step(_1294, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1291)) + step(0.999000012874603271484375, _1294);\n        highp float _1366 = 0.0;\n        for (int SPIRV_Cross_Dummy415 = 0; SPIRV_Cross_Dummy415 < 1; SPIRV_Cross_Dummy415++)\n        {\n            if (_1302 > 1.0)\n            {\n                _1366 = 1.0;\n                break;\n            }\n            highp float _1320 = _1302 - 0.001000000047497451305389404296875;\n            highp vec2 _1324 = ((_1289.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1331 = fract(_1324 * vec2(2048.0));\n            highp float _1359 = _1331.y;\n            _1366 = mix(mix(float(_1320 < dot(texture2D(u_shadowMapTex, _1324), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1320 < dot(texture2D(u_shadowMapTex, _1324 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1359), mix(float(_1320 < dot(texture2D(u_shadowMapTex, _1324 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1320 < dot(texture2D(u_shadowMapTex, _1324 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1359), _1331.x);\n            break;\n        }\n        _1369 = _1366;\n    }\n    else\n    {\n        _1369 = _1264;\n    }\n    highp float _1474 = 0.0;\n    if ((!(_1278 ? true : _1483)) && (_817 < u_csmFarBounds.w))\n    {\n        highp vec3 _1394 = ((u_csmLightSpaceMatrices[3] * _813).xyz * 0.5) + vec3(0.5);\n        highp float _1396 = _1394.x;\n        highp float _1399 = _1394.y;\n        highp float _1407 = (((_1394.z + step(_1396, 0.001000000047497451305389404296875)) + step(_1399, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1396)) + step(0.999000012874603271484375, _1399);\n        highp float _1471 = 0.0;\n        for (int SPIRV_Cross_Dummy485 = 0; SPIRV_Cross_Dummy485 < 1; SPIRV_Cross_Dummy485++)\n        {\n            if (_1407 > 1.0)\n            {\n                _1471 = 1.0;\n                break;\n            }\n            highp float _1425 = _1407 - 0.001000000047497451305389404296875;\n            highp vec2 _1429 = ((_1394.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1436 = fract(_1429 * vec2(2048.0));\n            highp float _1464 = _1436.y;\n            _1471 = mix(mix(float(_1425 < dot(texture2D(u_shadowMapTex, _1429), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1425 < dot(texture2D(u_shadowMapTex, _1429 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1464), mix(float(_1425 < dot(texture2D(u_shadowMapTex, _1429 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1425 < dot(texture2D(u_shadowMapTex, _1429 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1464), _1436.x);\n            break;\n        }\n        _1474 = _1471;\n    }\n    else\n    {\n        _1474 = _1369;\n    }\n    highp vec4 _724 = vec4(_669.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_672, _770))) * _1474)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _672), _770)), _Shininess * 128.0)) * (_SpecColor.xyz * _661.w))), _669.w);\n    highp vec4 _730 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1034 = length(varying_positionCamera_Fog);\n    highp float _1144 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1144 = (u_fogInfos.z - _1034) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1145 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1145 = 1.0 / pow(2.7182800769805908203125, _1034 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1146 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1146 = 1.0 / pow(2.7182800769805908203125, ((_1034 * _1034) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1146 = 1.0;\n            }\n            _1145 = _1146;\n        }\n        _1144 = _1145;\n    }\n    highp float _1080 = clamp(_1144, 0.0, 1.0);\n    highp vec3 _1089 = ((_724.xyz + (_EmissionColor.xyz * _730.x)).xyz * _1080) + (u_fogColor * (1.0 - _1080));\n    gl_FragData[0] = vec4(_1089.x, _1089.y, _1089.z, _724.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _384 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _392 = (_384 * _Color) * _AlbedoIntensity;\n    highp vec2 _478 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _426 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _450 = vec4(_392.xyz * (min(_426, mix(max(_426, u_shadowColor), _426, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_478, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_478, _478)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _384.w))), _392.w);\n    highp vec3 _466 = _450.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_466.x, _466.y, _466.z, _450.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _567 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _575 = (_567 * _Color) * _AlbedoIntensity;\n    highp float _577 = _575.w;\n    if ((_577 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _586 = normalize(varying_LightDir);\n    highp vec4 _598 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _654 = (_598.xy - vec2(0.5)) * 2.0;\n    highp vec3 _665 = vec3(_654, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_654, _654))));\n    highp vec4 _708 = vec4(varying_ShadowPosition, 1.0);\n    highp float _712 = -(u_view * _708).z;\n    bool _725 = true && (_712 < u_csmFarBounds.x);\n    highp float _973 = 0.0;\n    if (_725)\n    {\n        highp vec3 _740 = ((u_csmLightSpaceMatrices[0] * _708).xyz * 0.5) + vec3(0.5);\n        highp float _744 = _740.x;\n        highp float _748 = _740.y;\n        highp float _758 = (((_740.z + step(_744, 0.001000000047497451305389404296875)) + step(_748, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _744)) + step(0.999000012874603271484375, _748);\n        highp float _970 = 0.0;\n        for (int SPIRV_Cross_Dummy269 = 0; SPIRV_Cross_Dummy269 < 1; SPIRV_Cross_Dummy269++)\n        {\n            if (_758 > 1.0)\n            {\n                _970 = 1.0;\n                break;\n            }\n            highp float _809 = _758 - 0.001000000047497451305389404296875;\n            highp vec2 _815 = ((_740.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _826 = fract(_815 * vec2(2048.0));\n            highp float _881 = _826.y;\n            _970 = mix(mix(float(_809 < dot(texture2D(u_shadowMapTex, _815), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_809 < dot(texture2D(u_shadowMapTex, _815 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _881), mix(float(_809 < dot(texture2D(u_shadowMapTex, _815 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_809 < dot(texture2D(u_shadowMapTex, _815 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _881), _826.x);\n            break;\n        }\n        _973 = _970;\n    }\n    else\n    {\n        _973 = 1.0;\n    }\n    bool _1301 = _725 ? true : false;\n    bool _992 = (!_1301) && (_712 < u_csmFarBounds.y);\n    highp float _1083 = 0.0;\n    if (_992)\n    {\n        highp vec3 _1003 = ((u_csmLightSpaceMatrices[1] * _708).xyz * 0.5) + vec3(0.5);\n        highp float _1005 = _1003.x;\n        highp float _1008 = _1003.y;\n        highp float _1016 = (((_1003.z + step(_1005, 0.001000000047497451305389404296875)) + step(_1008, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1005)) + step(0.999000012874603271484375, _1008);\n        highp float _1080 = 0.0;\n        for (int SPIRV_Cross_Dummy345 = 0; SPIRV_Cross_Dummy345 < 1; SPIRV_Cross_Dummy345++)\n        {\n            if (_1016 > 1.0)\n            {\n                _1080 = 1.0;\n                break;\n            }\n            highp float _1034 = _1016 - 0.001000000047497451305389404296875;\n            highp vec2 _1038 = ((_1003.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1045 = fract(_1038 * vec2(2048.0));\n            highp float _1073 = _1045.y;\n            _1080 = mix(mix(float(_1034 < dot(texture2D(u_shadowMapTex, _1038), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1034 < dot(texture2D(u_shadowMapTex, _1038 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1073), mix(float(_1034 < dot(texture2D(u_shadowMapTex, _1038 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1034 < dot(texture2D(u_shadowMapTex, _1038 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1073), _1045.x);\n            break;\n        }\n        _1083 = _1080;\n    }\n    else\n    {\n        _1083 = _973;\n    }\n    bool _1302 = _992 ? true : _1301;\n    bool _1097 = (!_1302) && (_712 < u_csmFarBounds.z);\n    highp float _1188 = 0.0;\n    if (_1097)\n    {\n        highp vec3 _1108 = ((u_csmLightSpaceMatrices[2] * _708).xyz * 0.5) + vec3(0.5);\n        highp float _1110 = _1108.x;\n        highp float _1113 = _1108.y;\n        highp float _1121 = (((_1108.z + step(_1110, 0.001000000047497451305389404296875)) + step(_1113, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1110)) + step(0.999000012874603271484375, _1113);\n        highp float _1185 = 0.0;\n        for (int SPIRV_Cross_Dummy421 = 0; SPIRV_Cross_Dummy421 < 1; SPIRV_Cross_Dummy421++)\n        {\n            if (_1121 > 1.0)\n            {\n                _1185 = 1.0;\n                break;\n            }\n            highp float _1139 = _1121 - 0.001000000047497451305389404296875;\n            highp vec2 _1143 = ((_1108.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1150 = fract(_1143 * vec2(2048.0));\n            highp float _1178 = _1150.y;\n            _1185 = mix(mix(float(_1139 < dot(texture2D(u_shadowMapTex, _1143), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1139 < dot(texture2D(u_shadowMapTex, _1143 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1178), mix(float(_1139 < dot(texture2D(u_shadowMapTex, _1143 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1139 < dot(texture2D(u_shadowMapTex, _1143 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1178), _1150.x);\n            break;\n        }\n        _1188 = _1185;\n    }\n    else\n    {\n        _1188 = _1083;\n    }\n    highp float _1293 = 0.0;\n    if ((!(_1097 ? true : _1302)) && (_712 < u_csmFarBounds.w))\n    {\n        highp vec3 _1213 = ((u_csmLightSpaceMatrices[3] * _708).xyz * 0.5) + vec3(0.5);\n        highp float _1215 = _1213.x;\n        highp float _1218 = _1213.y;\n        highp float _1226 = (((_1213.z + step(_1215, 0.001000000047497451305389404296875)) + step(_1218, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1215)) + step(0.999000012874603271484375, _1218);\n        highp float _1290 = 0.0;\n        for (int SPIRV_Cross_Dummy491 = 0; SPIRV_Cross_Dummy491 < 1; SPIRV_Cross_Dummy491++)\n        {\n            if (_1226 > 1.0)\n            {\n                _1290 = 1.0;\n                break;\n            }\n            highp float _1244 = _1226 - 0.001000000047497451305389404296875;\n            highp vec2 _1248 = ((_1213.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1255 = fract(_1248 * vec2(2048.0));\n            highp float _1283 = _1255.y;\n            _1290 = mix(mix(float(_1244 < dot(texture2D(u_shadowMapTex, _1248), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1244 < dot(texture2D(u_shadowMapTex, _1248 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1283), mix(float(_1244 < dot(texture2D(u_shadowMapTex, _1248 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1244 < dot(texture2D(u_shadowMapTex, _1248 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1283), _1255.x);\n            break;\n        }\n        _1293 = _1290;\n    }\n    else\n    {\n        _1293 = _1188;\n    }\n    gl_FragData[0] = vec4(_575.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_586, _665))) * _1293)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _586), _665)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _577);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _638 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _646 = (_638 * _Color) * _AlbedoIntensity;\n    highp vec4 _661 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _735 = (_661.xy - vec2(0.5)) * 2.0;\n    highp vec4 _789 = vec4(varying_ShadowPosition, 1.0);\n    highp float _793 = -(u_view * _789).z;\n    bool _806 = true && (_793 < u_csmFarBounds.x);\n    highp float _1098 = 0.0;\n    if (_806)\n    {\n        highp vec3 _821 = ((u_csmLightSpaceMatrices[0] * _789).xyz * 0.5) + vec3(0.5);\n        highp float _825 = _821.x;\n        highp float _829 = _821.y;\n        highp float _839 = (((_821.z + step(_825, 0.001000000047497451305389404296875)) + step(_829, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _825)) + step(0.999000012874603271484375, _829);\n        highp float _1095 = 0.0;\n        for (int SPIRV_Cross_Dummy264 = 0; SPIRV_Cross_Dummy264 < 1; SPIRV_Cross_Dummy264++)\n        {\n            if (_839 > 1.0)\n            {\n                _1095 = 1.0;\n                break;\n            }\n            highp float _890 = _839 - 0.001000000047497451305389404296875;\n            highp vec2 _896 = ((_821.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _907 = fract(_896 * vec2(2048.0));\n            highp float _962 = _907.y;\n            _1095 = mix(mix(float(_890 < dot(texture2D(u_shadowMapTex, _896), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_890 < dot(texture2D(u_shadowMapTex, _896 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _962), mix(float(_890 < dot(texture2D(u_shadowMapTex, _896 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_890 < dot(texture2D(u_shadowMapTex, _896 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _962), _907.x);\n            break;\n        }\n        _1098 = _1095;\n    }\n    else\n    {\n        _1098 = 1.0;\n    }\n    bool _1425 = _806 ? true : false;\n    bool _1117 = (!_1425) && (_793 < u_csmFarBounds.y);\n    highp float _1208 = 0.0;\n    if (_1117)\n    {\n        highp vec3 _1128 = ((u_csmLightSpaceMatrices[1] * _789).xyz * 0.5) + vec3(0.5);\n        highp float _1130 = _1128.x;\n        highp float _1133 = _1128.y;\n        highp float _1141 = (((_1128.z + step(_1130, 0.001000000047497451305389404296875)) + step(_1133, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1130)) + step(0.999000012874603271484375, _1133);\n        highp float _1205 = 0.0;\n        for (int SPIRV_Cross_Dummy340 = 0; SPIRV_Cross_Dummy340 < 1; SPIRV_Cross_Dummy340++)\n        {\n            if (_1141 > 1.0)\n            {\n                _1205 = 1.0;\n                break;\n            }\n            highp float _1159 = _1141 - 0.001000000047497451305389404296875;\n            highp vec2 _1163 = ((_1128.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1170 = fract(_1163 * vec2(2048.0));\n            highp float _1198 = _1170.y;\n            _1205 = mix(mix(float(_1159 < dot(texture2D(u_shadowMapTex, _1163), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1159 < dot(texture2D(u_shadowMapTex, _1163 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1198), mix(float(_1159 < dot(texture2D(u_shadowMapTex, _1163 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1159 < dot(texture2D(u_shadowMapTex, _1163 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1198), _1170.x);\n            break;\n        }\n        _1208 = _1205;\n    }\n    else\n    {\n        _1208 = _1098;\n    }\n    bool _1426 = _1117 ? true : _1425;\n    bool _1222 = (!_1426) && (_793 < u_csmFarBounds.z);\n    highp float _1313 = 0.0;\n    if (_1222)\n    {\n        highp vec3 _1233 = ((u_csmLightSpaceMatrices[2] * _789).xyz * 0.5) + vec3(0.5);\n        highp float _1235 = _1233.x;\n        highp float _1238 = _1233.y;\n        highp float _1246 = (((_1233.z + step(_1235, 0.001000000047497451305389404296875)) + step(_1238, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1235)) + step(0.999000012874603271484375, _1238);\n        highp float _1310 = 0.0;\n        for (int SPIRV_Cross_Dummy416 = 0; SPIRV_Cross_Dummy416 < 1; SPIRV_Cross_Dummy416++)\n        {\n            if (_1246 > 1.0)\n            {\n                _1310 = 1.0;\n                break;\n            }\n            highp float _1264 = _1246 - 0.001000000047497451305389404296875;\n            highp vec2 _1268 = ((_1233.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1275 = fract(_1268 * vec2(2048.0));\n            highp float _1303 = _1275.y;\n            _1310 = mix(mix(float(_1264 < dot(texture2D(u_shadowMapTex, _1268), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1264 < dot(texture2D(u_shadowMapTex, _1268 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1303), mix(float(_1264 < dot(texture2D(u_shadowMapTex, _1268 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1264 < dot(texture2D(u_shadowMapTex, _1268 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1303), _1275.x);\n            break;\n        }\n        _1313 = _1310;\n    }\n    else\n    {\n        _1313 = _1208;\n    }\n    highp float _1418 = 0.0;\n    if ((!(_1222 ? true : _1426)) && (_793 < u_csmFarBounds.w))\n    {\n        highp vec3 _1338 = ((u_csmLightSpaceMatrices[3] * _789).xyz * 0.5) + vec3(0.5);\n        highp float _1340 = _1338.x;\n        highp float _1343 = _1338.y;\n        highp float _1351 = (((_1338.z + step(_1340, 0.001000000047497451305389404296875)) + step(_1343, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1340)) + step(0.999000012874603271484375, _1343);\n        highp float _1415 = 0.0;\n        for (int SPIRV_Cross_Dummy486 = 0; SPIRV_Cross_Dummy486 < 1; SPIRV_Cross_Dummy486++)\n        {\n            if (_1351 > 1.0)\n            {\n                _1415 = 1.0;\n                break;\n            }\n            highp float _1369 = _1351 - 0.001000000047497451305389404296875;\n            highp vec2 _1373 = ((_1338.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1380 = fract(_1373 * vec2(2048.0));\n            highp float _1408 = _1380.y;\n            _1415 = mix(mix(float(_1369 < dot(texture2D(u_shadowMapTex, _1373), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1369 < dot(texture2D(u_shadowMapTex, _1373 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1408), mix(float(_1369 < dot(texture2D(u_shadowMapTex, _1373 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1369 < dot(texture2D(u_shadowMapTex, _1373 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1408), _1380.x);\n            break;\n        }\n        _1418 = _1415;\n    }\n    else\n    {\n        _1418 = _1313;\n    }\n    highp vec3 _683 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _707 = vec4(_646.xyz * (min(_683, mix(max(_683 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1418))), u_shadowColor), _683, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_735, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_735, _735)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _638.w))), _646.w);\n    highp vec3 _723 = _707.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_723.x, _723.y, _723.z, _707.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _474 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _482 = (_474 * _Color) * _AlbedoIntensity;\n    highp vec4 _497 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _575 = (_497.xy - vec2(0.5)) * 2.0;\n    highp vec4 _514 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _516 = _514.xyz * 2.0;\n    highp vec4 _540 = vec4(_482.xyz * (min(_516, mix(max(_516, u_shadowColor), _516, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_575, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_575, _575)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _474.w))), _482.w);\n    highp vec4 _546 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _659 = length(varying_positionCamera_Fog);\n    highp float _746 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _746 = (u_fogInfos.z - _659) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _747 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _747 = 1.0 / pow(2.7182800769805908203125, _659 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _748 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _748 = 1.0 / pow(2.7182800769805908203125, ((_659 * _659) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _748 = 1.0;\n            }\n            _747 = _748;\n        }\n        _746 = _747;\n    }\n    highp float _705 = clamp(_746, 0.0, 1.0);\n    highp vec3 _714 = ((_540.xyz + (_EmissionColor.xyz * _546.x)).xyz * _705) + (u_fogColor * (1.0 - _705));\n    gl_FragData[0] = vec4(_714.x, _714.y, _714.z, _540.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _653 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _661 = (_653 * _Color) * _AlbedoIntensity;\n    highp float _663 = _661.w;\n    if ((_663 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _672 = normalize(varying_LightDir);\n    highp vec4 _684 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _747 = (_684.xy - vec2(0.5)) * 2.0;\n    highp vec3 _758 = vec3(_747, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_747, _747))));\n    highp vec4 _801 = vec4(varying_ShadowPosition, 1.0);\n    highp float _805 = -(u_view * _801).z;\n    bool _818 = true && (_805 < u_csmFarBounds.x);\n    highp float _1141 = 0.0;\n    if (_818)\n    {\n        highp vec3 _833 = ((u_csmLightSpaceMatrices[0] * _801).xyz * 0.5) + vec3(0.5);\n        highp float _837 = _833.x;\n        highp float _841 = _833.y;\n        highp float _851 = (((_833.z + step(_837, 0.001000000047497451305389404296875)) + step(_841, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _837)) + step(0.999000012874603271484375, _841);\n        highp float _1138 = 0.0;\n        for (int SPIRV_Cross_Dummy273 = 0; SPIRV_Cross_Dummy273 < 1; SPIRV_Cross_Dummy273++)\n        {\n            if (_851 > 1.0)\n            {\n                _1138 = 1.0;\n                break;\n            }\n            highp float _902 = _851 - 0.001000000047497451305389404296875;\n            highp vec2 _908 = ((_833.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _919 = fract(_908 * vec2(2048.0));\n            highp float _974 = _919.y;\n            _1138 = mix(mix(float(_902 < dot(texture2D(u_shadowMapTex, _908), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_902 < dot(texture2D(u_shadowMapTex, _908 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _974), mix(float(_902 < dot(texture2D(u_shadowMapTex, _908 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_902 < dot(texture2D(u_shadowMapTex, _908 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _974), _919.x);\n            break;\n        }\n        _1141 = _1138;\n    }\n    else\n    {\n        _1141 = 1.0;\n    }\n    bool _1469 = _818 ? true : false;\n    bool _1160 = (!_1469) && (_805 < u_csmFarBounds.y);\n    highp float _1251 = 0.0;\n    if (_1160)\n    {\n        highp vec3 _1171 = ((u_csmLightSpaceMatrices[1] * _801).xyz * 0.5) + vec3(0.5);\n        highp float _1173 = _1171.x;\n        highp float _1176 = _1171.y;\n        highp float _1184 = (((_1171.z + step(_1173, 0.001000000047497451305389404296875)) + step(_1176, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1173)) + step(0.999000012874603271484375, _1176);\n        highp float _1248 = 0.0;\n        for (int SPIRV_Cross_Dummy349 = 0; SPIRV_Cross_Dummy349 < 1; SPIRV_Cross_Dummy349++)\n        {\n            if (_1184 > 1.0)\n            {\n                _1248 = 1.0;\n                break;\n            }\n            highp float _1202 = _1184 - 0.001000000047497451305389404296875;\n            highp vec2 _1206 = ((_1171.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1213 = fract(_1206 * vec2(2048.0));\n            highp float _1241 = _1213.y;\n            _1248 = mix(mix(float(_1202 < dot(texture2D(u_shadowMapTex, _1206), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1202 < dot(texture2D(u_shadowMapTex, _1206 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1241), mix(float(_1202 < dot(texture2D(u_shadowMapTex, _1206 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1202 < dot(texture2D(u_shadowMapTex, _1206 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1241), _1213.x);\n            break;\n        }\n        _1251 = _1248;\n    }\n    else\n    {\n        _1251 = _1141;\n    }\n    bool _1470 = _1160 ? true : _1469;\n    bool _1265 = (!_1470) && (_805 < u_csmFarBounds.z);\n    highp float _1356 = 0.0;\n    if (_1265)\n    {\n        highp vec3 _1276 = ((u_csmLightSpaceMatrices[2] * _801).xyz * 0.5) + vec3(0.5);\n        highp float _1278 = _1276.x;\n        highp float _1281 = _1276.y;\n        highp float _1289 = (((_1276.z + step(_1278, 0.001000000047497451305389404296875)) + step(_1281, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1278)) + step(0.999000012874603271484375, _1281);\n        highp float _1353 = 0.0;\n        for (int SPIRV_Cross_Dummy425 = 0; SPIRV_Cross_Dummy425 < 1; SPIRV_Cross_Dummy425++)\n        {\n            if (_1289 > 1.0)\n            {\n                _1353 = 1.0;\n                break;\n            }\n            highp float _1307 = _1289 - 0.001000000047497451305389404296875;\n            highp vec2 _1311 = ((_1276.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1318 = fract(_1311 * vec2(2048.0));\n            highp float _1346 = _1318.y;\n            _1353 = mix(mix(float(_1307 < dot(texture2D(u_shadowMapTex, _1311), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1307 < dot(texture2D(u_shadowMapTex, _1311 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1346), mix(float(_1307 < dot(texture2D(u_shadowMapTex, _1311 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1307 < dot(texture2D(u_shadowMapTex, _1311 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1346), _1318.x);\n            break;\n        }\n        _1356 = _1353;\n    }\n    else\n    {\n        _1356 = _1251;\n    }\n    highp float _1461 = 0.0;\n    if ((!(_1265 ? true : _1470)) && (_805 < u_csmFarBounds.w))\n    {\n        highp vec3 _1381 = ((u_csmLightSpaceMatrices[3] * _801).xyz * 0.5) + vec3(0.5);\n        highp float _1383 = _1381.x;\n        highp float _1386 = _1381.y;\n        highp float _1394 = (((_1381.z + step(_1383, 0.001000000047497451305389404296875)) + step(_1386, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1383)) + step(0.999000012874603271484375, _1386);\n        highp float _1458 = 0.0;\n        for (int SPIRV_Cross_Dummy495 = 0; SPIRV_Cross_Dummy495 < 1; SPIRV_Cross_Dummy495++)\n        {\n            if (_1394 > 1.0)\n            {\n                _1458 = 1.0;\n                break;\n            }\n            highp float _1412 = _1394 - 0.001000000047497451305389404296875;\n            highp vec2 _1416 = ((_1381.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1423 = fract(_1416 * vec2(2048.0));\n            highp float _1451 = _1423.y;\n            _1458 = mix(mix(float(_1412 < dot(texture2D(u_shadowMapTex, _1416), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1412 < dot(texture2D(u_shadowMapTex, _1416 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1451), mix(float(_1412 < dot(texture2D(u_shadowMapTex, _1416 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1412 < dot(texture2D(u_shadowMapTex, _1416 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1451), _1423.x);\n            break;\n        }\n        _1461 = _1458;\n    }\n    else\n    {\n        _1461 = _1356;\n    }\n    highp vec4 _710 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _729 = vec4(_661.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_672, _758))) * _1461)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _672), _758)), _Shininess * 128.0)) * (_710.xyz * _SpecColor.xyz))), _663);\n    highp float _1022 = length(varying_positionCamera_Fog);\n    highp float _1131 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1131 = (u_fogInfos.z - _1022) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1132 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1132 = 1.0 / pow(2.7182800769805908203125, _1022 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1133 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1133 = 1.0 / pow(2.7182800769805908203125, ((_1022 * _1022) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1133 = 1.0;\n            }\n            _1132 = _1133;\n        }\n        _1131 = _1132;\n    }\n    highp float _1068 = clamp(_1131, 0.0, 1.0);\n    highp vec3 _1077 = (_729.xyz * _1068) + (u_fogColor * (1.0 - _1068));\n    gl_FragData[0] = vec4(_1077.x, _1077.y, _1077.z, _729.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _725 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _733 = (_725 * _Color) * _AlbedoIntensity;\n    highp vec4 _748 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _829 = (_748.xy - vec2(0.5)) * 2.0;\n    highp vec4 _883 = vec4(varying_ShadowPosition, 1.0);\n    highp float _887 = -(u_view * _883).z;\n    bool _900 = true && (_887 < u_csmFarBounds.x);\n    highp float _1267 = 0.0;\n    if (_900)\n    {\n        highp vec3 _915 = ((u_csmLightSpaceMatrices[0] * _883).xyz * 0.5) + vec3(0.5);\n        highp float _919 = _915.x;\n        highp float _923 = _915.y;\n        highp float _933 = (((_915.z + step(_919, 0.001000000047497451305389404296875)) + step(_923, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _919)) + step(0.999000012874603271484375, _923);\n        highp float _1264 = 0.0;\n        for (int SPIRV_Cross_Dummy268 = 0; SPIRV_Cross_Dummy268 < 1; SPIRV_Cross_Dummy268++)\n        {\n            if (_933 > 1.0)\n            {\n                _1264 = 1.0;\n                break;\n            }\n            highp float _984 = _933 - 0.001000000047497451305389404296875;\n            highp vec2 _990 = ((_915.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _1001 = fract(_990 * vec2(2048.0));\n            highp float _1056 = _1001.y;\n            _1264 = mix(mix(float(_984 < dot(texture2D(u_shadowMapTex, _990), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_984 < dot(texture2D(u_shadowMapTex, _990 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1056), mix(float(_984 < dot(texture2D(u_shadowMapTex, _990 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_984 < dot(texture2D(u_shadowMapTex, _990 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1056), _1001.x);\n            break;\n        }\n        _1267 = _1264;\n    }\n    else\n    {\n        _1267 = 1.0;\n    }\n    bool _1595 = _900 ? true : false;\n    bool _1286 = (!_1595) && (_887 < u_csmFarBounds.y);\n    highp float _1377 = 0.0;\n    if (_1286)\n    {\n        highp vec3 _1297 = ((u_csmLightSpaceMatrices[1] * _883).xyz * 0.5) + vec3(0.5);\n        highp float _1299 = _1297.x;\n        highp float _1302 = _1297.y;\n        highp float _1310 = (((_1297.z + step(_1299, 0.001000000047497451305389404296875)) + step(_1302, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1299)) + step(0.999000012874603271484375, _1302);\n        highp float _1374 = 0.0;\n        for (int SPIRV_Cross_Dummy344 = 0; SPIRV_Cross_Dummy344 < 1; SPIRV_Cross_Dummy344++)\n        {\n            if (_1310 > 1.0)\n            {\n                _1374 = 1.0;\n                break;\n            }\n            highp float _1328 = _1310 - 0.001000000047497451305389404296875;\n            highp vec2 _1332 = ((_1297.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1339 = fract(_1332 * vec2(2048.0));\n            highp float _1367 = _1339.y;\n            _1374 = mix(mix(float(_1328 < dot(texture2D(u_shadowMapTex, _1332), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1328 < dot(texture2D(u_shadowMapTex, _1332 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1367), mix(float(_1328 < dot(texture2D(u_shadowMapTex, _1332 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1328 < dot(texture2D(u_shadowMapTex, _1332 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1367), _1339.x);\n            break;\n        }\n        _1377 = _1374;\n    }\n    else\n    {\n        _1377 = _1267;\n    }\n    bool _1596 = _1286 ? true : _1595;\n    bool _1391 = (!_1596) && (_887 < u_csmFarBounds.z);\n    highp float _1482 = 0.0;\n    if (_1391)\n    {\n        highp vec3 _1402 = ((u_csmLightSpaceMatrices[2] * _883).xyz * 0.5) + vec3(0.5);\n        highp float _1404 = _1402.x;\n        highp float _1407 = _1402.y;\n        highp float _1415 = (((_1402.z + step(_1404, 0.001000000047497451305389404296875)) + step(_1407, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1404)) + step(0.999000012874603271484375, _1407);\n        highp float _1479 = 0.0;\n        for (int SPIRV_Cross_Dummy420 = 0; SPIRV_Cross_Dummy420 < 1; SPIRV_Cross_Dummy420++)\n        {\n            if (_1415 > 1.0)\n            {\n                _1479 = 1.0;\n                break;\n            }\n            highp float _1433 = _1415 - 0.001000000047497451305389404296875;\n            highp vec2 _1437 = ((_1402.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1444 = fract(_1437 * vec2(2048.0));\n            highp float _1472 = _1444.y;\n            _1479 = mix(mix(float(_1433 < dot(texture2D(u_shadowMapTex, _1437), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1433 < dot(texture2D(u_shadowMapTex, _1437 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1472), mix(float(_1433 < dot(texture2D(u_shadowMapTex, _1437 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1433 < dot(texture2D(u_shadowMapTex, _1437 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1472), _1444.x);\n            break;\n        }\n        _1482 = _1479;\n    }\n    else\n    {\n        _1482 = _1377;\n    }\n    highp float _1587 = 0.0;\n    if ((!(_1391 ? true : _1596)) && (_887 < u_csmFarBounds.w))\n    {\n        highp vec3 _1507 = ((u_csmLightSpaceMatrices[3] * _883).xyz * 0.5) + vec3(0.5);\n        highp float _1509 = _1507.x;\n        highp float _1512 = _1507.y;\n        highp float _1520 = (((_1507.z + step(_1509, 0.001000000047497451305389404296875)) + step(_1512, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1509)) + step(0.999000012874603271484375, _1512);\n        highp float _1584 = 0.0;\n        for (int SPIRV_Cross_Dummy490 = 0; SPIRV_Cross_Dummy490 < 1; SPIRV_Cross_Dummy490++)\n        {\n            if (_1520 > 1.0)\n            {\n                _1584 = 1.0;\n                break;\n            }\n            highp float _1538 = _1520 - 0.001000000047497451305389404296875;\n            highp vec2 _1542 = ((_1507.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1549 = fract(_1542 * vec2(2048.0));\n            highp float _1577 = _1549.y;\n            _1584 = mix(mix(float(_1538 < dot(texture2D(u_shadowMapTex, _1542), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1538 < dot(texture2D(u_shadowMapTex, _1542 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1577), mix(float(_1538 < dot(texture2D(u_shadowMapTex, _1542 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1538 < dot(texture2D(u_shadowMapTex, _1542 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1577), _1549.x);\n            break;\n        }\n        _1587 = _1584;\n    }\n    else\n    {\n        _1587 = _1482;\n    }\n    highp vec4 _768 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _770 = _768.xyz * 2.0;\n    highp vec4 _794 = vec4(_733.xyz * (min(_770, mix(max(_770 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1587))), u_shadowColor), _770, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_829, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_829, _829)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _725.w))), _733.w);\n    highp vec4 _800 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1142 = length(varying_positionCamera_Fog);\n    highp float _1257 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1257 = (u_fogInfos.z - _1142) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1258 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1258 = 1.0 / pow(2.7182800769805908203125, _1142 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1259 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1259 = 1.0 / pow(2.7182800769805908203125, ((_1142 * _1142) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1259 = 1.0;\n            }\n            _1258 = _1259;\n        }\n        _1257 = _1258;\n    }\n    highp float _1188 = clamp(_1257, 0.0, 1.0);\n    highp vec3 _1197 = ((_794.xyz + (_EmissionColor.xyz * _800.x)).xyz * _1188) + (u_fogColor * (1.0 - _1188));\n    gl_FragData[0] = vec4(_1197.x, _1197.y, _1197.z, _794.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _579 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _587 = (_579 * _Color) * _AlbedoIntensity;\n    highp vec3 _590 = normalize(varying_LightDir);\n    highp vec4 _602 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _675 = (_602.xy - vec2(0.5)) * 2.0;\n    highp vec3 _686 = vec3(_675, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_675, _675))));\n    highp vec4 _729 = vec4(varying_ShadowPosition, 1.0);\n    highp float _733 = -(u_view * _729).z;\n    bool _746 = true && (_733 < u_csmFarBounds.x);\n    highp float _994 = 0.0;\n    if (_746)\n    {\n        highp vec3 _761 = ((u_csmLightSpaceMatrices[0] * _729).xyz * 0.5) + vec3(0.5);\n        highp float _765 = _761.x;\n        highp float _769 = _761.y;\n        highp float _779 = (((_761.z + step(_765, 0.001000000047497451305389404296875)) + step(_769, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _765)) + step(0.999000012874603271484375, _769);\n        highp float _991 = 0.0;\n        for (int SPIRV_Cross_Dummy262 = 0; SPIRV_Cross_Dummy262 < 1; SPIRV_Cross_Dummy262++)\n        {\n            if (_779 > 1.0)\n            {\n                _991 = 1.0;\n                break;\n            }\n            highp float _830 = _779 - 0.001000000047497451305389404296875;\n            highp vec2 _836 = ((_761.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _847 = fract(_836 * vec2(2048.0));\n            highp float _902 = _847.y;\n            _991 = mix(mix(float(_830 < dot(texture2D(u_shadowMapTex, _836), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_830 < dot(texture2D(u_shadowMapTex, _836 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _902), mix(float(_830 < dot(texture2D(u_shadowMapTex, _836 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_830 < dot(texture2D(u_shadowMapTex, _836 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _902), _847.x);\n            break;\n        }\n        _994 = _991;\n    }\n    else\n    {\n        _994 = 1.0;\n    }\n    bool _1321 = _746 ? true : false;\n    bool _1013 = (!_1321) && (_733 < u_csmFarBounds.y);\n    highp float _1104 = 0.0;\n    if (_1013)\n    {\n        highp vec3 _1024 = ((u_csmLightSpaceMatrices[1] * _729).xyz * 0.5) + vec3(0.5);\n        highp float _1026 = _1024.x;\n        highp float _1029 = _1024.y;\n        highp float _1037 = (((_1024.z + step(_1026, 0.001000000047497451305389404296875)) + step(_1029, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1026)) + step(0.999000012874603271484375, _1029);\n        highp float _1101 = 0.0;\n        for (int SPIRV_Cross_Dummy338 = 0; SPIRV_Cross_Dummy338 < 1; SPIRV_Cross_Dummy338++)\n        {\n            if (_1037 > 1.0)\n            {\n                _1101 = 1.0;\n                break;\n            }\n            highp float _1055 = _1037 - 0.001000000047497451305389404296875;\n            highp vec2 _1059 = ((_1024.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1066 = fract(_1059 * vec2(2048.0));\n            highp float _1094 = _1066.y;\n            _1101 = mix(mix(float(_1055 < dot(texture2D(u_shadowMapTex, _1059), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1055 < dot(texture2D(u_shadowMapTex, _1059 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1094), mix(float(_1055 < dot(texture2D(u_shadowMapTex, _1059 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1055 < dot(texture2D(u_shadowMapTex, _1059 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1094), _1066.x);\n            break;\n        }\n        _1104 = _1101;\n    }\n    else\n    {\n        _1104 = _994;\n    }\n    bool _1322 = _1013 ? true : _1321;\n    bool _1118 = (!_1322) && (_733 < u_csmFarBounds.z);\n    highp float _1209 = 0.0;\n    if (_1118)\n    {\n        highp vec3 _1129 = ((u_csmLightSpaceMatrices[2] * _729).xyz * 0.5) + vec3(0.5);\n        highp float _1131 = _1129.x;\n        highp float _1134 = _1129.y;\n        highp float _1142 = (((_1129.z + step(_1131, 0.001000000047497451305389404296875)) + step(_1134, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1131)) + step(0.999000012874603271484375, _1134);\n        highp float _1206 = 0.0;\n        for (int SPIRV_Cross_Dummy414 = 0; SPIRV_Cross_Dummy414 < 1; SPIRV_Cross_Dummy414++)\n        {\n            if (_1142 > 1.0)\n            {\n                _1206 = 1.0;\n                break;\n            }\n            highp float _1160 = _1142 - 0.001000000047497451305389404296875;\n            highp vec2 _1164 = ((_1129.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1171 = fract(_1164 * vec2(2048.0));\n            highp float _1199 = _1171.y;\n            _1206 = mix(mix(float(_1160 < dot(texture2D(u_shadowMapTex, _1164), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1160 < dot(texture2D(u_shadowMapTex, _1164 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1199), mix(float(_1160 < dot(texture2D(u_shadowMapTex, _1164 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1160 < dot(texture2D(u_shadowMapTex, _1164 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1199), _1171.x);\n            break;\n        }\n        _1209 = _1206;\n    }\n    else\n    {\n        _1209 = _1104;\n    }\n    highp float _1314 = 0.0;\n    if ((!(_1118 ? true : _1322)) && (_733 < u_csmFarBounds.w))\n    {\n        highp vec3 _1234 = ((u_csmLightSpaceMatrices[3] * _729).xyz * 0.5) + vec3(0.5);\n        highp float _1236 = _1234.x;\n        highp float _1239 = _1234.y;\n        highp float _1247 = (((_1234.z + step(_1236, 0.001000000047497451305389404296875)) + step(_1239, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1236)) + step(0.999000012874603271484375, _1239);\n        highp float _1311 = 0.0;\n        for (int SPIRV_Cross_Dummy484 = 0; SPIRV_Cross_Dummy484 < 1; SPIRV_Cross_Dummy484++)\n        {\n            if (_1247 > 1.0)\n            {\n                _1311 = 1.0;\n                break;\n            }\n            highp float _1265 = _1247 - 0.001000000047497451305389404296875;\n            highp vec2 _1269 = ((_1234.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1276 = fract(_1269 * vec2(2048.0));\n            highp float _1304 = _1276.y;\n            _1311 = mix(mix(float(_1265 < dot(texture2D(u_shadowMapTex, _1269), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1265 < dot(texture2D(u_shadowMapTex, _1269 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1304), mix(float(_1265 < dot(texture2D(u_shadowMapTex, _1269 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1265 < dot(texture2D(u_shadowMapTex, _1269 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1304), _1276.x);\n            break;\n        }\n        _1314 = _1311;\n    }\n    else\n    {\n        _1314 = _1209;\n    }\n    highp vec4 _647 = vec4(_587.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_590, _686))) * _1314)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _590), _686)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _587.w);\n    highp vec3 _663 = _647.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_663.x, _663.y, _663.z, _647.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _666 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _674 = (_666 * _Color) * _AlbedoIntensity;\n    highp vec3 _677 = normalize(varying_LightDir);\n    highp vec4 _689 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _769 = (_689.xy - vec2(0.5)) * 2.0;\n    highp vec3 _780 = vec3(_769, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_769, _769))));\n    highp vec4 _823 = vec4(varying_ShadowPosition, 1.0);\n    highp float _827 = -(u_view * _823).z;\n    bool _840 = true && (_827 < u_csmFarBounds.x);\n    highp float _1163 = 0.0;\n    if (_840)\n    {\n        highp vec3 _855 = ((u_csmLightSpaceMatrices[0] * _823).xyz * 0.5) + vec3(0.5);\n        highp float _859 = _855.x;\n        highp float _863 = _855.y;\n        highp float _873 = (((_855.z + step(_859, 0.001000000047497451305389404296875)) + step(_863, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _859)) + step(0.999000012874603271484375, _863);\n        highp float _1160 = 0.0;\n        for (int SPIRV_Cross_Dummy266 = 0; SPIRV_Cross_Dummy266 < 1; SPIRV_Cross_Dummy266++)\n        {\n            if (_873 > 1.0)\n            {\n                _1160 = 1.0;\n                break;\n            }\n            highp float _924 = _873 - 0.001000000047497451305389404296875;\n            highp vec2 _930 = ((_855.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _941 = fract(_930 * vec2(2048.0));\n            highp float _996 = _941.y;\n            _1160 = mix(mix(float(_924 < dot(texture2D(u_shadowMapTex, _930), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_924 < dot(texture2D(u_shadowMapTex, _930 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _996), mix(float(_924 < dot(texture2D(u_shadowMapTex, _930 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_924 < dot(texture2D(u_shadowMapTex, _930 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _996), _941.x);\n            break;\n        }\n        _1163 = _1160;\n    }\n    else\n    {\n        _1163 = 1.0;\n    }\n    bool _1491 = _840 ? true : false;\n    bool _1182 = (!_1491) && (_827 < u_csmFarBounds.y);\n    highp float _1273 = 0.0;\n    if (_1182)\n    {\n        highp vec3 _1193 = ((u_csmLightSpaceMatrices[1] * _823).xyz * 0.5) + vec3(0.5);\n        highp float _1195 = _1193.x;\n        highp float _1198 = _1193.y;\n        highp float _1206 = (((_1193.z + step(_1195, 0.001000000047497451305389404296875)) + step(_1198, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1195)) + step(0.999000012874603271484375, _1198);\n        highp float _1270 = 0.0;\n        for (int SPIRV_Cross_Dummy342 = 0; SPIRV_Cross_Dummy342 < 1; SPIRV_Cross_Dummy342++)\n        {\n            if (_1206 > 1.0)\n            {\n                _1270 = 1.0;\n                break;\n            }\n            highp float _1224 = _1206 - 0.001000000047497451305389404296875;\n            highp vec2 _1228 = ((_1193.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1235 = fract(_1228 * vec2(2048.0));\n            highp float _1263 = _1235.y;\n            _1270 = mix(mix(float(_1224 < dot(texture2D(u_shadowMapTex, _1228), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1224 < dot(texture2D(u_shadowMapTex, _1228 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1263), mix(float(_1224 < dot(texture2D(u_shadowMapTex, _1228 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1224 < dot(texture2D(u_shadowMapTex, _1228 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1263), _1235.x);\n            break;\n        }\n        _1273 = _1270;\n    }\n    else\n    {\n        _1273 = _1163;\n    }\n    bool _1492 = _1182 ? true : _1491;\n    bool _1287 = (!_1492) && (_827 < u_csmFarBounds.z);\n    highp float _1378 = 0.0;\n    if (_1287)\n    {\n        highp vec3 _1298 = ((u_csmLightSpaceMatrices[2] * _823).xyz * 0.5) + vec3(0.5);\n        highp float _1300 = _1298.x;\n        highp float _1303 = _1298.y;\n        highp float _1311 = (((_1298.z + step(_1300, 0.001000000047497451305389404296875)) + step(_1303, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1300)) + step(0.999000012874603271484375, _1303);\n        highp float _1375 = 0.0;\n        for (int SPIRV_Cross_Dummy418 = 0; SPIRV_Cross_Dummy418 < 1; SPIRV_Cross_Dummy418++)\n        {\n            if (_1311 > 1.0)\n            {\n                _1375 = 1.0;\n                break;\n            }\n            highp float _1329 = _1311 - 0.001000000047497451305389404296875;\n            highp vec2 _1333 = ((_1298.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1340 = fract(_1333 * vec2(2048.0));\n            highp float _1368 = _1340.y;\n            _1375 = mix(mix(float(_1329 < dot(texture2D(u_shadowMapTex, _1333), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1329 < dot(texture2D(u_shadowMapTex, _1333 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1368), mix(float(_1329 < dot(texture2D(u_shadowMapTex, _1333 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1329 < dot(texture2D(u_shadowMapTex, _1333 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1368), _1340.x);\n            break;\n        }\n        _1378 = _1375;\n    }\n    else\n    {\n        _1378 = _1273;\n    }\n    highp float _1483 = 0.0;\n    if ((!(_1287 ? true : _1492)) && (_827 < u_csmFarBounds.w))\n    {\n        highp vec3 _1403 = ((u_csmLightSpaceMatrices[3] * _823).xyz * 0.5) + vec3(0.5);\n        highp float _1405 = _1403.x;\n        highp float _1408 = _1403.y;\n        highp float _1416 = (((_1403.z + step(_1405, 0.001000000047497451305389404296875)) + step(_1408, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1405)) + step(0.999000012874603271484375, _1408);\n        highp float _1480 = 0.0;\n        for (int SPIRV_Cross_Dummy488 = 0; SPIRV_Cross_Dummy488 < 1; SPIRV_Cross_Dummy488++)\n        {\n            if (_1416 > 1.0)\n            {\n                _1480 = 1.0;\n                break;\n            }\n            highp float _1434 = _1416 - 0.001000000047497451305389404296875;\n            highp vec2 _1438 = ((_1403.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1445 = fract(_1438 * vec2(2048.0));\n            highp float _1473 = _1445.y;\n            _1480 = mix(mix(float(_1434 < dot(texture2D(u_shadowMapTex, _1438), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1434 < dot(texture2D(u_shadowMapTex, _1438 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1473), mix(float(_1434 < dot(texture2D(u_shadowMapTex, _1438 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1434 < dot(texture2D(u_shadowMapTex, _1438 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1473), _1445.x);\n            break;\n        }\n        _1483 = _1480;\n    }\n    else\n    {\n        _1483 = _1378;\n    }\n    highp vec4 _715 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _734 = vec4(_674.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_677, _780))) * _1483)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _677), _780)), _Shininess * 128.0)) * (_715.xyz * _SpecColor.xyz))), _674.w);\n    highp vec4 _740 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1044 = length(varying_positionCamera_Fog);\n    highp float _1153 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1153 = (u_fogInfos.z - _1044) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1154 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1154 = 1.0 / pow(2.7182800769805908203125, _1044 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1155 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1155 = 1.0 / pow(2.7182800769805908203125, ((_1044 * _1044) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1155 = 1.0;\n            }\n            _1154 = _1155;\n        }\n        _1153 = _1154;\n    }\n    highp float _1090 = clamp(_1153, 0.0, 1.0);\n    highp vec3 _1099 = ((_734.xyz + (_EmissionColor.xyz * _740.x)).xyz * _1090) + (u_fogColor * (1.0 - _1090));\n    gl_FragData[0] = vec4(_1099.x, _1099.y, _1099.z, _734.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _643 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _651 = (_643 * _Color) * _AlbedoIntensity;\n    highp vec4 _666 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _745 = (_666.xy - vec2(0.5)) * 2.0;\n    highp vec4 _799 = vec4(varying_ShadowPosition, 1.0);\n    highp float _803 = -(u_view * _799).z;\n    bool _816 = true && (_803 < u_csmFarBounds.x);\n    highp float _1107 = 0.0;\n    if (_816)\n    {\n        highp vec3 _831 = ((u_csmLightSpaceMatrices[0] * _799).xyz * 0.5) + vec3(0.5);\n        highp float _835 = _831.x;\n        highp float _839 = _831.y;\n        highp float _849 = (((_831.z + step(_835, 0.001000000047497451305389404296875)) + step(_839, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _835)) + step(0.999000012874603271484375, _839);\n        highp float _1104 = 0.0;\n        for (int SPIRV_Cross_Dummy267 = 0; SPIRV_Cross_Dummy267 < 1; SPIRV_Cross_Dummy267++)\n        {\n            if (_849 > 1.0)\n            {\n                _1104 = 1.0;\n                break;\n            }\n            highp float _900 = _849 - 0.001000000047497451305389404296875;\n            highp vec2 _906 = ((_831.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _917 = fract(_906 * vec2(2048.0));\n            highp float _972 = _917.y;\n            _1104 = mix(mix(float(_900 < dot(texture2D(u_shadowMapTex, _906), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_900 < dot(texture2D(u_shadowMapTex, _906 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _972), mix(float(_900 < dot(texture2D(u_shadowMapTex, _906 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_900 < dot(texture2D(u_shadowMapTex, _906 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _972), _917.x);\n            break;\n        }\n        _1107 = _1104;\n    }\n    else\n    {\n        _1107 = 1.0;\n    }\n    bool _1434 = _816 ? true : false;\n    bool _1126 = (!_1434) && (_803 < u_csmFarBounds.y);\n    highp float _1217 = 0.0;\n    if (_1126)\n    {\n        highp vec3 _1137 = ((u_csmLightSpaceMatrices[1] * _799).xyz * 0.5) + vec3(0.5);\n        highp float _1139 = _1137.x;\n        highp float _1142 = _1137.y;\n        highp float _1150 = (((_1137.z + step(_1139, 0.001000000047497451305389404296875)) + step(_1142, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1139)) + step(0.999000012874603271484375, _1142);\n        highp float _1214 = 0.0;\n        for (int SPIRV_Cross_Dummy343 = 0; SPIRV_Cross_Dummy343 < 1; SPIRV_Cross_Dummy343++)\n        {\n            if (_1150 > 1.0)\n            {\n                _1214 = 1.0;\n                break;\n            }\n            highp float _1168 = _1150 - 0.001000000047497451305389404296875;\n            highp vec2 _1172 = ((_1137.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1179 = fract(_1172 * vec2(2048.0));\n            highp float _1207 = _1179.y;\n            _1214 = mix(mix(float(_1168 < dot(texture2D(u_shadowMapTex, _1172), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1168 < dot(texture2D(u_shadowMapTex, _1172 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1207), mix(float(_1168 < dot(texture2D(u_shadowMapTex, _1172 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1168 < dot(texture2D(u_shadowMapTex, _1172 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1207), _1179.x);\n            break;\n        }\n        _1217 = _1214;\n    }\n    else\n    {\n        _1217 = _1107;\n    }\n    bool _1435 = _1126 ? true : _1434;\n    bool _1231 = (!_1435) && (_803 < u_csmFarBounds.z);\n    highp float _1322 = 0.0;\n    if (_1231)\n    {\n        highp vec3 _1242 = ((u_csmLightSpaceMatrices[2] * _799).xyz * 0.5) + vec3(0.5);\n        highp float _1244 = _1242.x;\n        highp float _1247 = _1242.y;\n        highp float _1255 = (((_1242.z + step(_1244, 0.001000000047497451305389404296875)) + step(_1247, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1244)) + step(0.999000012874603271484375, _1247);\n        highp float _1319 = 0.0;\n        for (int SPIRV_Cross_Dummy419 = 0; SPIRV_Cross_Dummy419 < 1; SPIRV_Cross_Dummy419++)\n        {\n            if (_1255 > 1.0)\n            {\n                _1319 = 1.0;\n                break;\n            }\n            highp float _1273 = _1255 - 0.001000000047497451305389404296875;\n            highp vec2 _1277 = ((_1242.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1284 = fract(_1277 * vec2(2048.0));\n            highp float _1312 = _1284.y;\n            _1319 = mix(mix(float(_1273 < dot(texture2D(u_shadowMapTex, _1277), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1273 < dot(texture2D(u_shadowMapTex, _1277 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1312), mix(float(_1273 < dot(texture2D(u_shadowMapTex, _1277 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1273 < dot(texture2D(u_shadowMapTex, _1277 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1312), _1284.x);\n            break;\n        }\n        _1322 = _1319;\n    }\n    else\n    {\n        _1322 = _1217;\n    }\n    highp float _1427 = 0.0;\n    if ((!(_1231 ? true : _1435)) && (_803 < u_csmFarBounds.w))\n    {\n        highp vec3 _1347 = ((u_csmLightSpaceMatrices[3] * _799).xyz * 0.5) + vec3(0.5);\n        highp float _1349 = _1347.x;\n        highp float _1352 = _1347.y;\n        highp float _1360 = (((_1347.z + step(_1349, 0.001000000047497451305389404296875)) + step(_1352, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1349)) + step(0.999000012874603271484375, _1352);\n        highp float _1424 = 0.0;\n        for (int SPIRV_Cross_Dummy489 = 0; SPIRV_Cross_Dummy489 < 1; SPIRV_Cross_Dummy489++)\n        {\n            if (_1360 > 1.0)\n            {\n                _1424 = 1.0;\n                break;\n            }\n            highp float _1378 = _1360 - 0.001000000047497451305389404296875;\n            highp vec2 _1382 = ((_1347.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1389 = fract(_1382 * vec2(2048.0));\n            highp float _1417 = _1389.y;\n            _1424 = mix(mix(float(_1378 < dot(texture2D(u_shadowMapTex, _1382), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1378 < dot(texture2D(u_shadowMapTex, _1382 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1417), mix(float(_1378 < dot(texture2D(u_shadowMapTex, _1382 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1378 < dot(texture2D(u_shadowMapTex, _1382 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1417), _1389.x);\n            break;\n        }\n        _1427 = _1424;\n    }\n    else\n    {\n        _1427 = _1322;\n    }\n    highp vec3 _688 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _717 = vec4(_651.xyz * (min(_688, mix(max(_688 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1427))), u_shadowColor), _688, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_745, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_745, _745)))))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _651.w);\n    highp vec3 _733 = _717.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_733.x, _733.y, _733.z, _717.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _730 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _738 = (_730 * _Color) * _AlbedoIntensity;\n    highp vec4 _753 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _839 = (_753.xy - vec2(0.5)) * 2.0;\n    highp vec4 _893 = vec4(varying_ShadowPosition, 1.0);\n    highp float _897 = -(u_view * _893).z;\n    bool _910 = true && (_897 < u_csmFarBounds.x);\n    highp float _1276 = 0.0;\n    if (_910)\n    {\n        highp vec3 _925 = ((u_csmLightSpaceMatrices[0] * _893).xyz * 0.5) + vec3(0.5);\n        highp float _929 = _925.x;\n        highp float _933 = _925.y;\n        highp float _943 = (((_925.z + step(_929, 0.001000000047497451305389404296875)) + step(_933, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _929)) + step(0.999000012874603271484375, _933);\n        highp float _1273 = 0.0;\n        for (int SPIRV_Cross_Dummy271 = 0; SPIRV_Cross_Dummy271 < 1; SPIRV_Cross_Dummy271++)\n        {\n            if (_943 > 1.0)\n            {\n                _1273 = 1.0;\n                break;\n            }\n            highp float _994 = _943 - 0.001000000047497451305389404296875;\n            highp vec2 _1000 = ((_925.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _1011 = fract(_1000 * vec2(2048.0));\n            highp float _1066 = _1011.y;\n            _1273 = mix(mix(float(_994 < dot(texture2D(u_shadowMapTex, _1000), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_994 < dot(texture2D(u_shadowMapTex, _1000 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1066), mix(float(_994 < dot(texture2D(u_shadowMapTex, _1000 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_994 < dot(texture2D(u_shadowMapTex, _1000 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1066), _1011.x);\n            break;\n        }\n        _1276 = _1273;\n    }\n    else\n    {\n        _1276 = 1.0;\n    }\n    bool _1604 = _910 ? true : false;\n    bool _1295 = (!_1604) && (_897 < u_csmFarBounds.y);\n    highp float _1386 = 0.0;\n    if (_1295)\n    {\n        highp vec3 _1306 = ((u_csmLightSpaceMatrices[1] * _893).xyz * 0.5) + vec3(0.5);\n        highp float _1308 = _1306.x;\n        highp float _1311 = _1306.y;\n        highp float _1319 = (((_1306.z + step(_1308, 0.001000000047497451305389404296875)) + step(_1311, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1308)) + step(0.999000012874603271484375, _1311);\n        highp float _1383 = 0.0;\n        for (int SPIRV_Cross_Dummy347 = 0; SPIRV_Cross_Dummy347 < 1; SPIRV_Cross_Dummy347++)\n        {\n            if (_1319 > 1.0)\n            {\n                _1383 = 1.0;\n                break;\n            }\n            highp float _1337 = _1319 - 0.001000000047497451305389404296875;\n            highp vec2 _1341 = ((_1306.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1348 = fract(_1341 * vec2(2048.0));\n            highp float _1376 = _1348.y;\n            _1383 = mix(mix(float(_1337 < dot(texture2D(u_shadowMapTex, _1341), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1337 < dot(texture2D(u_shadowMapTex, _1341 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1376), mix(float(_1337 < dot(texture2D(u_shadowMapTex, _1341 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1337 < dot(texture2D(u_shadowMapTex, _1341 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1376), _1348.x);\n            break;\n        }\n        _1386 = _1383;\n    }\n    else\n    {\n        _1386 = _1276;\n    }\n    bool _1605 = _1295 ? true : _1604;\n    bool _1400 = (!_1605) && (_897 < u_csmFarBounds.z);\n    highp float _1491 = 0.0;\n    if (_1400)\n    {\n        highp vec3 _1411 = ((u_csmLightSpaceMatrices[2] * _893).xyz * 0.5) + vec3(0.5);\n        highp float _1413 = _1411.x;\n        highp float _1416 = _1411.y;\n        highp float _1424 = (((_1411.z + step(_1413, 0.001000000047497451305389404296875)) + step(_1416, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1413)) + step(0.999000012874603271484375, _1416);\n        highp float _1488 = 0.0;\n        for (int SPIRV_Cross_Dummy423 = 0; SPIRV_Cross_Dummy423 < 1; SPIRV_Cross_Dummy423++)\n        {\n            if (_1424 > 1.0)\n            {\n                _1488 = 1.0;\n                break;\n            }\n            highp float _1442 = _1424 - 0.001000000047497451305389404296875;\n            highp vec2 _1446 = ((_1411.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1453 = fract(_1446 * vec2(2048.0));\n            highp float _1481 = _1453.y;\n            _1488 = mix(mix(float(_1442 < dot(texture2D(u_shadowMapTex, _1446), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1442 < dot(texture2D(u_shadowMapTex, _1446 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1481), mix(float(_1442 < dot(texture2D(u_shadowMapTex, _1446 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1442 < dot(texture2D(u_shadowMapTex, _1446 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1481), _1453.x);\n            break;\n        }\n        _1491 = _1488;\n    }\n    else\n    {\n        _1491 = _1386;\n    }\n    highp float _1596 = 0.0;\n    if ((!(_1400 ? true : _1605)) && (_897 < u_csmFarBounds.w))\n    {\n        highp vec3 _1516 = ((u_csmLightSpaceMatrices[3] * _893).xyz * 0.5) + vec3(0.5);\n        highp float _1518 = _1516.x;\n        highp float _1521 = _1516.y;\n        highp float _1529 = (((_1516.z + step(_1518, 0.001000000047497451305389404296875)) + step(_1521, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1518)) + step(0.999000012874603271484375, _1521);\n        highp float _1593 = 0.0;\n        for (int SPIRV_Cross_Dummy493 = 0; SPIRV_Cross_Dummy493 < 1; SPIRV_Cross_Dummy493++)\n        {\n            if (_1529 > 1.0)\n            {\n                _1593 = 1.0;\n                break;\n            }\n            highp float _1547 = _1529 - 0.001000000047497451305389404296875;\n            highp vec2 _1551 = ((_1516.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1558 = fract(_1551 * vec2(2048.0));\n            highp float _1586 = _1558.y;\n            _1593 = mix(mix(float(_1547 < dot(texture2D(u_shadowMapTex, _1551), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1547 < dot(texture2D(u_shadowMapTex, _1551 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1586), mix(float(_1547 < dot(texture2D(u_shadowMapTex, _1551 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1547 < dot(texture2D(u_shadowMapTex, _1551 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1586), _1558.x);\n            break;\n        }\n        _1596 = _1593;\n    }\n    else\n    {\n        _1596 = _1491;\n    }\n    highp vec4 _773 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _775 = _773.xyz * 2.0;\n    highp vec4 _785 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _804 = vec4(_738.xyz * (min(_775, mix(max(_775 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1596))), u_shadowColor), _775, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_839, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_839, _839)))))), _Shininess * 128.0)) * (_785.xyz * _SpecColor.xyz))), _738.w);\n    highp vec4 _810 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1152 = length(varying_positionCamera_Fog);\n    highp float _1266 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1266 = (u_fogInfos.z - _1152) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1267 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1267 = 1.0 / pow(2.7182800769805908203125, _1152 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1268 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1268 = 1.0 / pow(2.7182800769805908203125, ((_1152 * _1152) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1268 = 1.0;\n            }\n            _1267 = _1268;\n        }\n        _1266 = _1267;\n    }\n    highp float _1198 = clamp(_1266, 0.0, 1.0);\n    highp vec3 _1207 = ((_804.xyz + (_EmissionColor.xyz * _810.x)).xyz * _1198) + (u_fogColor * (1.0 - _1198));\n    gl_FragData[0] = vec4(_1207.x, _1207.y, _1207.z, _804.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _562 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _570 = (_562 * _Color) * _AlbedoIntensity;\n    highp float _572 = _570.w;\n    if ((_572 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _581 = normalize(varying_LightDir);\n    highp vec4 _593 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _644 = (_593.xy - vec2(0.5)) * 2.0;\n    highp vec3 _655 = vec3(_644, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_644, _644))));\n    highp vec4 _698 = vec4(varying_ShadowPosition, 1.0);\n    highp float _702 = -(u_view * _698).z;\n    bool _715 = true && (_702 < u_csmFarBounds.x);\n    highp float _964 = 0.0;\n    if (_715)\n    {\n        highp vec3 _730 = ((u_csmLightSpaceMatrices[0] * _698).xyz * 0.5) + vec3(0.5);\n        highp float _734 = _730.x;\n        highp float _738 = _730.y;\n        highp float _748 = (((_730.z + step(_734, 0.001000000047497451305389404296875)) + step(_738, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _734)) + step(0.999000012874603271484375, _738);\n        highp float _961 = 0.0;\n        for (int SPIRV_Cross_Dummy266 = 0; SPIRV_Cross_Dummy266 < 1; SPIRV_Cross_Dummy266++)\n        {\n            if (_748 > 1.0)\n            {\n                _961 = 1.0;\n                break;\n            }\n            highp float _799 = _748 - 0.001000000047497451305389404296875;\n            highp vec2 _805 = ((_730.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _816 = fract(_805 * vec2(2048.0));\n            highp float _871 = _816.y;\n            _961 = mix(mix(float(_799 < dot(texture2D(u_shadowMapTex, _805), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_799 < dot(texture2D(u_shadowMapTex, _805 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _871), mix(float(_799 < dot(texture2D(u_shadowMapTex, _805 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_799 < dot(texture2D(u_shadowMapTex, _805 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _871), _816.x);\n            break;\n        }\n        _964 = _961;\n    }\n    else\n    {\n        _964 = 1.0;\n    }\n    bool _1292 = _715 ? true : false;\n    bool _983 = (!_1292) && (_702 < u_csmFarBounds.y);\n    highp float _1074 = 0.0;\n    if (_983)\n    {\n        highp vec3 _994 = ((u_csmLightSpaceMatrices[1] * _698).xyz * 0.5) + vec3(0.5);\n        highp float _996 = _994.x;\n        highp float _999 = _994.y;\n        highp float _1007 = (((_994.z + step(_996, 0.001000000047497451305389404296875)) + step(_999, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _996)) + step(0.999000012874603271484375, _999);\n        highp float _1071 = 0.0;\n        for (int SPIRV_Cross_Dummy342 = 0; SPIRV_Cross_Dummy342 < 1; SPIRV_Cross_Dummy342++)\n        {\n            if (_1007 > 1.0)\n            {\n                _1071 = 1.0;\n                break;\n            }\n            highp float _1025 = _1007 - 0.001000000047497451305389404296875;\n            highp vec2 _1029 = ((_994.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1036 = fract(_1029 * vec2(2048.0));\n            highp float _1064 = _1036.y;\n            _1071 = mix(mix(float(_1025 < dot(texture2D(u_shadowMapTex, _1029), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1025 < dot(texture2D(u_shadowMapTex, _1029 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1064), mix(float(_1025 < dot(texture2D(u_shadowMapTex, _1029 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1025 < dot(texture2D(u_shadowMapTex, _1029 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1064), _1036.x);\n            break;\n        }\n        _1074 = _1071;\n    }\n    else\n    {\n        _1074 = _964;\n    }\n    bool _1293 = _983 ? true : _1292;\n    bool _1088 = (!_1293) && (_702 < u_csmFarBounds.z);\n    highp float _1179 = 0.0;\n    if (_1088)\n    {\n        highp vec3 _1099 = ((u_csmLightSpaceMatrices[2] * _698).xyz * 0.5) + vec3(0.5);\n        highp float _1101 = _1099.x;\n        highp float _1104 = _1099.y;\n        highp float _1112 = (((_1099.z + step(_1101, 0.001000000047497451305389404296875)) + step(_1104, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1101)) + step(0.999000012874603271484375, _1104);\n        highp float _1176 = 0.0;\n        for (int SPIRV_Cross_Dummy418 = 0; SPIRV_Cross_Dummy418 < 1; SPIRV_Cross_Dummy418++)\n        {\n            if (_1112 > 1.0)\n            {\n                _1176 = 1.0;\n                break;\n            }\n            highp float _1130 = _1112 - 0.001000000047497451305389404296875;\n            highp vec2 _1134 = ((_1099.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1141 = fract(_1134 * vec2(2048.0));\n            highp float _1169 = _1141.y;\n            _1176 = mix(mix(float(_1130 < dot(texture2D(u_shadowMapTex, _1134), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1130 < dot(texture2D(u_shadowMapTex, _1134 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1169), mix(float(_1130 < dot(texture2D(u_shadowMapTex, _1134 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1130 < dot(texture2D(u_shadowMapTex, _1134 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1169), _1141.x);\n            break;\n        }\n        _1179 = _1176;\n    }\n    else\n    {\n        _1179 = _1074;\n    }\n    highp float _1284 = 0.0;\n    if ((!(_1088 ? true : _1293)) && (_702 < u_csmFarBounds.w))\n    {\n        highp vec3 _1204 = ((u_csmLightSpaceMatrices[3] * _698).xyz * 0.5) + vec3(0.5);\n        highp float _1206 = _1204.x;\n        highp float _1209 = _1204.y;\n        highp float _1217 = (((_1204.z + step(_1206, 0.001000000047497451305389404296875)) + step(_1209, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1206)) + step(0.999000012874603271484375, _1209);\n        highp float _1281 = 0.0;\n        for (int SPIRV_Cross_Dummy488 = 0; SPIRV_Cross_Dummy488 < 1; SPIRV_Cross_Dummy488++)\n        {\n            if (_1217 > 1.0)\n            {\n                _1281 = 1.0;\n                break;\n            }\n            highp float _1235 = _1217 - 0.001000000047497451305389404296875;\n            highp vec2 _1239 = ((_1204.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1246 = fract(_1239 * vec2(2048.0));\n            highp float _1274 = _1246.y;\n            _1281 = mix(mix(float(_1235 < dot(texture2D(u_shadowMapTex, _1239), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1235 < dot(texture2D(u_shadowMapTex, _1239 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1274), mix(float(_1235 < dot(texture2D(u_shadowMapTex, _1239 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1235 < dot(texture2D(u_shadowMapTex, _1239 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1274), _1246.x);\n            break;\n        }\n        _1284 = _1281;\n    }\n    else\n    {\n        _1284 = _1179;\n    }\n    gl_FragData[0] = vec4(_570.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_581, _655))) * _1284)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _581), _655)), _Shininess * 128.0)) * (_SpecColor.xyz * _562.w))), _572);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _648 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _656 = (_648 * _Color) * _AlbedoIntensity;\n    highp float _658 = _656.w;\n    if ((_658 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _667 = normalize(varying_LightDir);\n    highp vec4 _679 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _737 = (_679.xy - vec2(0.5)) * 2.0;\n    highp vec3 _748 = vec3(_737, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_737, _737))));\n    highp vec4 _791 = vec4(varying_ShadowPosition, 1.0);\n    highp float _795 = -(u_view * _791).z;\n    bool _808 = true && (_795 < u_csmFarBounds.x);\n    highp float _1132 = 0.0;\n    if (_808)\n    {\n        highp vec3 _823 = ((u_csmLightSpaceMatrices[0] * _791).xyz * 0.5) + vec3(0.5);\n        highp float _827 = _823.x;\n        highp float _831 = _823.y;\n        highp float _841 = (((_823.z + step(_827, 0.001000000047497451305389404296875)) + step(_831, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _827)) + step(0.999000012874603271484375, _831);\n        highp float _1129 = 0.0;\n        for (int SPIRV_Cross_Dummy270 = 0; SPIRV_Cross_Dummy270 < 1; SPIRV_Cross_Dummy270++)\n        {\n            if (_841 > 1.0)\n            {\n                _1129 = 1.0;\n                break;\n            }\n            highp float _892 = _841 - 0.001000000047497451305389404296875;\n            highp vec2 _898 = ((_823.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _909 = fract(_898 * vec2(2048.0));\n            highp float _964 = _909.y;\n            _1129 = mix(mix(float(_892 < dot(texture2D(u_shadowMapTex, _898), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_892 < dot(texture2D(u_shadowMapTex, _898 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _964), mix(float(_892 < dot(texture2D(u_shadowMapTex, _898 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_892 < dot(texture2D(u_shadowMapTex, _898 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _964), _909.x);\n            break;\n        }\n        _1132 = _1129;\n    }\n    else\n    {\n        _1132 = 1.0;\n    }\n    bool _1460 = _808 ? true : false;\n    bool _1151 = (!_1460) && (_795 < u_csmFarBounds.y);\n    highp float _1242 = 0.0;\n    if (_1151)\n    {\n        highp vec3 _1162 = ((u_csmLightSpaceMatrices[1] * _791).xyz * 0.5) + vec3(0.5);\n        highp float _1164 = _1162.x;\n        highp float _1167 = _1162.y;\n        highp float _1175 = (((_1162.z + step(_1164, 0.001000000047497451305389404296875)) + step(_1167, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1164)) + step(0.999000012874603271484375, _1167);\n        highp float _1239 = 0.0;\n        for (int SPIRV_Cross_Dummy346 = 0; SPIRV_Cross_Dummy346 < 1; SPIRV_Cross_Dummy346++)\n        {\n            if (_1175 > 1.0)\n            {\n                _1239 = 1.0;\n                break;\n            }\n            highp float _1193 = _1175 - 0.001000000047497451305389404296875;\n            highp vec2 _1197 = ((_1162.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1204 = fract(_1197 * vec2(2048.0));\n            highp float _1232 = _1204.y;\n            _1239 = mix(mix(float(_1193 < dot(texture2D(u_shadowMapTex, _1197), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1193 < dot(texture2D(u_shadowMapTex, _1197 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1232), mix(float(_1193 < dot(texture2D(u_shadowMapTex, _1197 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1193 < dot(texture2D(u_shadowMapTex, _1197 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1232), _1204.x);\n            break;\n        }\n        _1242 = _1239;\n    }\n    else\n    {\n        _1242 = _1132;\n    }\n    bool _1461 = _1151 ? true : _1460;\n    bool _1256 = (!_1461) && (_795 < u_csmFarBounds.z);\n    highp float _1347 = 0.0;\n    if (_1256)\n    {\n        highp vec3 _1267 = ((u_csmLightSpaceMatrices[2] * _791).xyz * 0.5) + vec3(0.5);\n        highp float _1269 = _1267.x;\n        highp float _1272 = _1267.y;\n        highp float _1280 = (((_1267.z + step(_1269, 0.001000000047497451305389404296875)) + step(_1272, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1269)) + step(0.999000012874603271484375, _1272);\n        highp float _1344 = 0.0;\n        for (int SPIRV_Cross_Dummy422 = 0; SPIRV_Cross_Dummy422 < 1; SPIRV_Cross_Dummy422++)\n        {\n            if (_1280 > 1.0)\n            {\n                _1344 = 1.0;\n                break;\n            }\n            highp float _1298 = _1280 - 0.001000000047497451305389404296875;\n            highp vec2 _1302 = ((_1267.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1309 = fract(_1302 * vec2(2048.0));\n            highp float _1337 = _1309.y;\n            _1344 = mix(mix(float(_1298 < dot(texture2D(u_shadowMapTex, _1302), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1298 < dot(texture2D(u_shadowMapTex, _1302 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1337), mix(float(_1298 < dot(texture2D(u_shadowMapTex, _1302 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1298 < dot(texture2D(u_shadowMapTex, _1302 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1337), _1309.x);\n            break;\n        }\n        _1347 = _1344;\n    }\n    else\n    {\n        _1347 = _1242;\n    }\n    highp float _1452 = 0.0;\n    if ((!(_1256 ? true : _1461)) && (_795 < u_csmFarBounds.w))\n    {\n        highp vec3 _1372 = ((u_csmLightSpaceMatrices[3] * _791).xyz * 0.5) + vec3(0.5);\n        highp float _1374 = _1372.x;\n        highp float _1377 = _1372.y;\n        highp float _1385 = (((_1372.z + step(_1374, 0.001000000047497451305389404296875)) + step(_1377, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1374)) + step(0.999000012874603271484375, _1377);\n        highp float _1449 = 0.0;\n        for (int SPIRV_Cross_Dummy492 = 0; SPIRV_Cross_Dummy492 < 1; SPIRV_Cross_Dummy492++)\n        {\n            if (_1385 > 1.0)\n            {\n                _1449 = 1.0;\n                break;\n            }\n            highp float _1403 = _1385 - 0.001000000047497451305389404296875;\n            highp vec2 _1407 = ((_1372.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1414 = fract(_1407 * vec2(2048.0));\n            highp float _1442 = _1414.y;\n            _1449 = mix(mix(float(_1403 < dot(texture2D(u_shadowMapTex, _1407), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1403 < dot(texture2D(u_shadowMapTex, _1407 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1442), mix(float(_1403 < dot(texture2D(u_shadowMapTex, _1407 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1403 < dot(texture2D(u_shadowMapTex, _1407 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1442), _1414.x);\n            break;\n        }\n        _1452 = _1449;\n    }\n    else\n    {\n        _1452 = _1347;\n    }\n    highp vec4 _719 = vec4(_656.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_667, _748))) * _1452)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _667), _748)), _Shininess * 128.0)) * (_SpecColor.xyz * _648.w))), _658);\n    highp float _1012 = length(varying_positionCamera_Fog);\n    highp float _1122 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1122 = (u_fogInfos.z - _1012) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1123 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1123 = 1.0 / pow(2.7182800769805908203125, _1012 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1124 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1124 = 1.0 / pow(2.7182800769805908203125, ((_1012 * _1012) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1124 = 1.0;\n            }\n            _1123 = _1124;\n        }\n        _1122 = _1123;\n    }\n    highp float _1058 = clamp(_1122, 0.0, 1.0);\n    highp vec3 _1067 = (_719.xyz * _1058) + (u_fogColor * (1.0 - _1058));\n    gl_FragData[0] = vec4(_1067.x, _1067.y, _1067.z, _719.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _625 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _633 = (_625 * _Color) * _AlbedoIntensity;\n    highp float _635 = _633.w;\n    if ((_635 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _656 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _713 = (_656.xy - vec2(0.5)) * 2.0;\n    highp vec4 _767 = vec4(varying_ShadowPosition, 1.0);\n    highp float _771 = -(u_view * _767).z;\n    bool _784 = true && (_771 < u_csmFarBounds.x);\n    highp float _1076 = 0.0;\n    if (_784)\n    {\n        highp vec3 _799 = ((u_csmLightSpaceMatrices[0] * _767).xyz * 0.5) + vec3(0.5);\n        highp float _803 = _799.x;\n        highp float _807 = _799.y;\n        highp float _817 = (((_799.z + step(_803, 0.001000000047497451305389404296875)) + step(_807, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _803)) + step(0.999000012874603271484375, _807);\n        highp float _1073 = 0.0;\n        for (int SPIRV_Cross_Dummy271 = 0; SPIRV_Cross_Dummy271 < 1; SPIRV_Cross_Dummy271++)\n        {\n            if (_817 > 1.0)\n            {\n                _1073 = 1.0;\n                break;\n            }\n            highp float _868 = _817 - 0.001000000047497451305389404296875;\n            highp vec2 _874 = ((_799.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _885 = fract(_874 * vec2(2048.0));\n            highp float _940 = _885.y;\n            _1073 = mix(mix(float(_868 < dot(texture2D(u_shadowMapTex, _874), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_868 < dot(texture2D(u_shadowMapTex, _874 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _940), mix(float(_868 < dot(texture2D(u_shadowMapTex, _874 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_868 < dot(texture2D(u_shadowMapTex, _874 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _940), _885.x);\n            break;\n        }\n        _1076 = _1073;\n    }\n    else\n    {\n        _1076 = 1.0;\n    }\n    bool _1404 = _784 ? true : false;\n    bool _1095 = (!_1404) && (_771 < u_csmFarBounds.y);\n    highp float _1186 = 0.0;\n    if (_1095)\n    {\n        highp vec3 _1106 = ((u_csmLightSpaceMatrices[1] * _767).xyz * 0.5) + vec3(0.5);\n        highp float _1108 = _1106.x;\n        highp float _1111 = _1106.y;\n        highp float _1119 = (((_1106.z + step(_1108, 0.001000000047497451305389404296875)) + step(_1111, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1108)) + step(0.999000012874603271484375, _1111);\n        highp float _1183 = 0.0;\n        for (int SPIRV_Cross_Dummy347 = 0; SPIRV_Cross_Dummy347 < 1; SPIRV_Cross_Dummy347++)\n        {\n            if (_1119 > 1.0)\n            {\n                _1183 = 1.0;\n                break;\n            }\n            highp float _1137 = _1119 - 0.001000000047497451305389404296875;\n            highp vec2 _1141 = ((_1106.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1148 = fract(_1141 * vec2(2048.0));\n            highp float _1176 = _1148.y;\n            _1183 = mix(mix(float(_1137 < dot(texture2D(u_shadowMapTex, _1141), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1137 < dot(texture2D(u_shadowMapTex, _1141 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1176), mix(float(_1137 < dot(texture2D(u_shadowMapTex, _1141 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1137 < dot(texture2D(u_shadowMapTex, _1141 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1176), _1148.x);\n            break;\n        }\n        _1186 = _1183;\n    }\n    else\n    {\n        _1186 = _1076;\n    }\n    bool _1405 = _1095 ? true : _1404;\n    bool _1200 = (!_1405) && (_771 < u_csmFarBounds.z);\n    highp float _1291 = 0.0;\n    if (_1200)\n    {\n        highp vec3 _1211 = ((u_csmLightSpaceMatrices[2] * _767).xyz * 0.5) + vec3(0.5);\n        highp float _1213 = _1211.x;\n        highp float _1216 = _1211.y;\n        highp float _1224 = (((_1211.z + step(_1213, 0.001000000047497451305389404296875)) + step(_1216, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1213)) + step(0.999000012874603271484375, _1216);\n        highp float _1288 = 0.0;\n        for (int SPIRV_Cross_Dummy423 = 0; SPIRV_Cross_Dummy423 < 1; SPIRV_Cross_Dummy423++)\n        {\n            if (_1224 > 1.0)\n            {\n                _1288 = 1.0;\n                break;\n            }\n            highp float _1242 = _1224 - 0.001000000047497451305389404296875;\n            highp vec2 _1246 = ((_1211.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1253 = fract(_1246 * vec2(2048.0));\n            highp float _1281 = _1253.y;\n            _1288 = mix(mix(float(_1242 < dot(texture2D(u_shadowMapTex, _1246), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1242 < dot(texture2D(u_shadowMapTex, _1246 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1281), mix(float(_1242 < dot(texture2D(u_shadowMapTex, _1246 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1242 < dot(texture2D(u_shadowMapTex, _1246 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1281), _1253.x);\n            break;\n        }\n        _1291 = _1288;\n    }\n    else\n    {\n        _1291 = _1186;\n    }\n    highp float _1396 = 0.0;\n    if ((!(_1200 ? true : _1405)) && (_771 < u_csmFarBounds.w))\n    {\n        highp vec3 _1316 = ((u_csmLightSpaceMatrices[3] * _767).xyz * 0.5) + vec3(0.5);\n        highp float _1318 = _1316.x;\n        highp float _1321 = _1316.y;\n        highp float _1329 = (((_1316.z + step(_1318, 0.001000000047497451305389404296875)) + step(_1321, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1318)) + step(0.999000012874603271484375, _1321);\n        highp float _1393 = 0.0;\n        for (int SPIRV_Cross_Dummy493 = 0; SPIRV_Cross_Dummy493 < 1; SPIRV_Cross_Dummy493++)\n        {\n            if (_1329 > 1.0)\n            {\n                _1393 = 1.0;\n                break;\n            }\n            highp float _1347 = _1329 - 0.001000000047497451305389404296875;\n            highp vec2 _1351 = ((_1316.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1358 = fract(_1351 * vec2(2048.0));\n            highp float _1386 = _1358.y;\n            _1393 = mix(mix(float(_1347 < dot(texture2D(u_shadowMapTex, _1351), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1347 < dot(texture2D(u_shadowMapTex, _1351 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1386), mix(float(_1347 < dot(texture2D(u_shadowMapTex, _1351 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1347 < dot(texture2D(u_shadowMapTex, _1351 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1386), _1358.x);\n            break;\n        }\n        _1396 = _1393;\n    }\n    else\n    {\n        _1396 = _1291;\n    }\n    highp vec3 _678 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_633.xyz * (min(_678, mix(max(_678 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1396))), u_shadowColor), _678, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_713, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_713, _713)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _625.w))), _635);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _712 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _720 = (_712 * _Color) * _AlbedoIntensity;\n    highp float _722 = _720.w;\n    if ((_722 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _743 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _807 = (_743.xy - vec2(0.5)) * 2.0;\n    highp vec4 _861 = vec4(varying_ShadowPosition, 1.0);\n    highp float _865 = -(u_view * _861).z;\n    bool _878 = true && (_865 < u_csmFarBounds.x);\n    highp float _1245 = 0.0;\n    if (_878)\n    {\n        highp vec3 _893 = ((u_csmLightSpaceMatrices[0] * _861).xyz * 0.5) + vec3(0.5);\n        highp float _897 = _893.x;\n        highp float _901 = _893.y;\n        highp float _911 = (((_893.z + step(_897, 0.001000000047497451305389404296875)) + step(_901, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _897)) + step(0.999000012874603271484375, _901);\n        highp float _1242 = 0.0;\n        for (int SPIRV_Cross_Dummy275 = 0; SPIRV_Cross_Dummy275 < 1; SPIRV_Cross_Dummy275++)\n        {\n            if (_911 > 1.0)\n            {\n                _1242 = 1.0;\n                break;\n            }\n            highp float _962 = _911 - 0.001000000047497451305389404296875;\n            highp vec2 _968 = ((_893.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _979 = fract(_968 * vec2(2048.0));\n            highp float _1034 = _979.y;\n            _1242 = mix(mix(float(_962 < dot(texture2D(u_shadowMapTex, _968), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_962 < dot(texture2D(u_shadowMapTex, _968 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1034), mix(float(_962 < dot(texture2D(u_shadowMapTex, _968 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_962 < dot(texture2D(u_shadowMapTex, _968 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1034), _979.x);\n            break;\n        }\n        _1245 = _1242;\n    }\n    else\n    {\n        _1245 = 1.0;\n    }\n    bool _1573 = _878 ? true : false;\n    bool _1264 = (!_1573) && (_865 < u_csmFarBounds.y);\n    highp float _1355 = 0.0;\n    if (_1264)\n    {\n        highp vec3 _1275 = ((u_csmLightSpaceMatrices[1] * _861).xyz * 0.5) + vec3(0.5);\n        highp float _1277 = _1275.x;\n        highp float _1280 = _1275.y;\n        highp float _1288 = (((_1275.z + step(_1277, 0.001000000047497451305389404296875)) + step(_1280, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1277)) + step(0.999000012874603271484375, _1280);\n        highp float _1352 = 0.0;\n        for (int SPIRV_Cross_Dummy351 = 0; SPIRV_Cross_Dummy351 < 1; SPIRV_Cross_Dummy351++)\n        {\n            if (_1288 > 1.0)\n            {\n                _1352 = 1.0;\n                break;\n            }\n            highp float _1306 = _1288 - 0.001000000047497451305389404296875;\n            highp vec2 _1310 = ((_1275.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1317 = fract(_1310 * vec2(2048.0));\n            highp float _1345 = _1317.y;\n            _1352 = mix(mix(float(_1306 < dot(texture2D(u_shadowMapTex, _1310), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1306 < dot(texture2D(u_shadowMapTex, _1310 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1345), mix(float(_1306 < dot(texture2D(u_shadowMapTex, _1310 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1306 < dot(texture2D(u_shadowMapTex, _1310 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1345), _1317.x);\n            break;\n        }\n        _1355 = _1352;\n    }\n    else\n    {\n        _1355 = _1245;\n    }\n    bool _1574 = _1264 ? true : _1573;\n    bool _1369 = (!_1574) && (_865 < u_csmFarBounds.z);\n    highp float _1460 = 0.0;\n    if (_1369)\n    {\n        highp vec3 _1380 = ((u_csmLightSpaceMatrices[2] * _861).xyz * 0.5) + vec3(0.5);\n        highp float _1382 = _1380.x;\n        highp float _1385 = _1380.y;\n        highp float _1393 = (((_1380.z + step(_1382, 0.001000000047497451305389404296875)) + step(_1385, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1382)) + step(0.999000012874603271484375, _1385);\n        highp float _1457 = 0.0;\n        for (int SPIRV_Cross_Dummy427 = 0; SPIRV_Cross_Dummy427 < 1; SPIRV_Cross_Dummy427++)\n        {\n            if (_1393 > 1.0)\n            {\n                _1457 = 1.0;\n                break;\n            }\n            highp float _1411 = _1393 - 0.001000000047497451305389404296875;\n            highp vec2 _1415 = ((_1380.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1422 = fract(_1415 * vec2(2048.0));\n            highp float _1450 = _1422.y;\n            _1457 = mix(mix(float(_1411 < dot(texture2D(u_shadowMapTex, _1415), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1411 < dot(texture2D(u_shadowMapTex, _1415 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1450), mix(float(_1411 < dot(texture2D(u_shadowMapTex, _1415 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1411 < dot(texture2D(u_shadowMapTex, _1415 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1450), _1422.x);\n            break;\n        }\n        _1460 = _1457;\n    }\n    else\n    {\n        _1460 = _1355;\n    }\n    highp float _1565 = 0.0;\n    if ((!(_1369 ? true : _1574)) && (_865 < u_csmFarBounds.w))\n    {\n        highp vec3 _1485 = ((u_csmLightSpaceMatrices[3] * _861).xyz * 0.5) + vec3(0.5);\n        highp float _1487 = _1485.x;\n        highp float _1490 = _1485.y;\n        highp float _1498 = (((_1485.z + step(_1487, 0.001000000047497451305389404296875)) + step(_1490, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1487)) + step(0.999000012874603271484375, _1490);\n        highp float _1562 = 0.0;\n        for (int SPIRV_Cross_Dummy497 = 0; SPIRV_Cross_Dummy497 < 1; SPIRV_Cross_Dummy497++)\n        {\n            if (_1498 > 1.0)\n            {\n                _1562 = 1.0;\n                break;\n            }\n            highp float _1516 = _1498 - 0.001000000047497451305389404296875;\n            highp vec2 _1520 = ((_1485.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1527 = fract(_1520 * vec2(2048.0));\n            highp float _1555 = _1527.y;\n            _1562 = mix(mix(float(_1516 < dot(texture2D(u_shadowMapTex, _1520), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1516 < dot(texture2D(u_shadowMapTex, _1520 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1555), mix(float(_1516 < dot(texture2D(u_shadowMapTex, _1520 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1516 < dot(texture2D(u_shadowMapTex, _1520 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1555), _1527.x);\n            break;\n        }\n        _1565 = _1562;\n    }\n    else\n    {\n        _1565 = _1460;\n    }\n    highp vec4 _763 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _765 = _763.xyz * 2.0;\n    highp vec4 _789 = vec4(_720.xyz * (min(_765, mix(max(_765 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1565))), u_shadowColor), _765, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_807, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_807, _807)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _712.w))), _722);\n    highp float _1120 = length(varying_positionCamera_Fog);\n    highp float _1235 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1235 = (u_fogInfos.z - _1120) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1236 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1236 = 1.0 / pow(2.7182800769805908203125, _1120 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1237 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1237 = 1.0 / pow(2.7182800769805908203125, ((_1120 * _1120) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1237 = 1.0;\n            }\n            _1236 = _1237;\n        }\n        _1235 = _1236;\n    }\n    highp float _1166 = clamp(_1235, 0.0, 1.0);\n    highp vec3 _1175 = (_789.xyz * _1166) + (u_fogColor * (1.0 - _1166));\n    gl_FragData[0] = vec4(_1175.x, _1175.y, _1175.z, _789.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _569 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _577 = (_569 * _Color) * _AlbedoIntensity;\n    highp float _579 = _577.w;\n    if ((_579 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _588 = normalize(varying_LightDir);\n    highp vec4 _600 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _656 = (_600.xy - vec2(0.5)) * 2.0;\n    highp vec3 _667 = vec3(_656, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_656, _656))));\n    highp vec4 _710 = vec4(varying_ShadowPosition, 1.0);\n    highp float _714 = -(u_view * _710).z;\n    bool _727 = true && (_714 < u_csmFarBounds.x);\n    highp float _975 = 0.0;\n    if (_727)\n    {\n        highp vec3 _742 = ((u_csmLightSpaceMatrices[0] * _710).xyz * 0.5) + vec3(0.5);\n        highp float _746 = _742.x;\n        highp float _750 = _742.y;\n        highp float _760 = (((_742.z + step(_746, 0.001000000047497451305389404296875)) + step(_750, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _746)) + step(0.999000012874603271484375, _750);\n        highp float _972 = 0.0;\n        for (int SPIRV_Cross_Dummy269 = 0; SPIRV_Cross_Dummy269 < 1; SPIRV_Cross_Dummy269++)\n        {\n            if (_760 > 1.0)\n            {\n                _972 = 1.0;\n                break;\n            }\n            highp float _811 = _760 - 0.001000000047497451305389404296875;\n            highp vec2 _817 = ((_742.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _828 = fract(_817 * vec2(2048.0));\n            highp float _883 = _828.y;\n            _972 = mix(mix(float(_811 < dot(texture2D(u_shadowMapTex, _817), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_811 < dot(texture2D(u_shadowMapTex, _817 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _883), mix(float(_811 < dot(texture2D(u_shadowMapTex, _817 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_811 < dot(texture2D(u_shadowMapTex, _817 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _883), _828.x);\n            break;\n        }\n        _975 = _972;\n    }\n    else\n    {\n        _975 = 1.0;\n    }\n    bool _1303 = _727 ? true : false;\n    bool _994 = (!_1303) && (_714 < u_csmFarBounds.y);\n    highp float _1085 = 0.0;\n    if (_994)\n    {\n        highp vec3 _1005 = ((u_csmLightSpaceMatrices[1] * _710).xyz * 0.5) + vec3(0.5);\n        highp float _1007 = _1005.x;\n        highp float _1010 = _1005.y;\n        highp float _1018 = (((_1005.z + step(_1007, 0.001000000047497451305389404296875)) + step(_1010, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1007)) + step(0.999000012874603271484375, _1010);\n        highp float _1082 = 0.0;\n        for (int SPIRV_Cross_Dummy345 = 0; SPIRV_Cross_Dummy345 < 1; SPIRV_Cross_Dummy345++)\n        {\n            if (_1018 > 1.0)\n            {\n                _1082 = 1.0;\n                break;\n            }\n            highp float _1036 = _1018 - 0.001000000047497451305389404296875;\n            highp vec2 _1040 = ((_1005.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1047 = fract(_1040 * vec2(2048.0));\n            highp float _1075 = _1047.y;\n            _1082 = mix(mix(float(_1036 < dot(texture2D(u_shadowMapTex, _1040), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1036 < dot(texture2D(u_shadowMapTex, _1040 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1075), mix(float(_1036 < dot(texture2D(u_shadowMapTex, _1040 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1036 < dot(texture2D(u_shadowMapTex, _1040 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1075), _1047.x);\n            break;\n        }\n        _1085 = _1082;\n    }\n    else\n    {\n        _1085 = _975;\n    }\n    bool _1304 = _994 ? true : _1303;\n    bool _1099 = (!_1304) && (_714 < u_csmFarBounds.z);\n    highp float _1190 = 0.0;\n    if (_1099)\n    {\n        highp vec3 _1110 = ((u_csmLightSpaceMatrices[2] * _710).xyz * 0.5) + vec3(0.5);\n        highp float _1112 = _1110.x;\n        highp float _1115 = _1110.y;\n        highp float _1123 = (((_1110.z + step(_1112, 0.001000000047497451305389404296875)) + step(_1115, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1112)) + step(0.999000012874603271484375, _1115);\n        highp float _1187 = 0.0;\n        for (int SPIRV_Cross_Dummy421 = 0; SPIRV_Cross_Dummy421 < 1; SPIRV_Cross_Dummy421++)\n        {\n            if (_1123 > 1.0)\n            {\n                _1187 = 1.0;\n                break;\n            }\n            highp float _1141 = _1123 - 0.001000000047497451305389404296875;\n            highp vec2 _1145 = ((_1110.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1152 = fract(_1145 * vec2(2048.0));\n            highp float _1180 = _1152.y;\n            _1187 = mix(mix(float(_1141 < dot(texture2D(u_shadowMapTex, _1145), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1141 < dot(texture2D(u_shadowMapTex, _1145 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1180), mix(float(_1141 < dot(texture2D(u_shadowMapTex, _1145 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1141 < dot(texture2D(u_shadowMapTex, _1145 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1180), _1152.x);\n            break;\n        }\n        _1190 = _1187;\n    }\n    else\n    {\n        _1190 = _1085;\n    }\n    highp float _1295 = 0.0;\n    if ((!(_1099 ? true : _1304)) && (_714 < u_csmFarBounds.w))\n    {\n        highp vec3 _1215 = ((u_csmLightSpaceMatrices[3] * _710).xyz * 0.5) + vec3(0.5);\n        highp float _1217 = _1215.x;\n        highp float _1220 = _1215.y;\n        highp float _1228 = (((_1215.z + step(_1217, 0.001000000047497451305389404296875)) + step(_1220, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1217)) + step(0.999000012874603271484375, _1220);\n        highp float _1292 = 0.0;\n        for (int SPIRV_Cross_Dummy491 = 0; SPIRV_Cross_Dummy491 < 1; SPIRV_Cross_Dummy491++)\n        {\n            if (_1228 > 1.0)\n            {\n                _1292 = 1.0;\n                break;\n            }\n            highp float _1246 = _1228 - 0.001000000047497451305389404296875;\n            highp vec2 _1250 = ((_1215.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1257 = fract(_1250 * vec2(2048.0));\n            highp float _1285 = _1257.y;\n            _1292 = mix(mix(float(_1246 < dot(texture2D(u_shadowMapTex, _1250), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1246 < dot(texture2D(u_shadowMapTex, _1250 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1285), mix(float(_1246 < dot(texture2D(u_shadowMapTex, _1250 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1246 < dot(texture2D(u_shadowMapTex, _1250 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1285), _1257.x);\n            break;\n        }\n        _1295 = _1292;\n    }\n    else\n    {\n        _1295 = _1190;\n    }\n    gl_FragData[0] = vec4(_577.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_588, _667))) * _1295)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _588), _667)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _579);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _655 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _663 = (_655 * _Color) * _AlbedoIntensity;\n    highp float _665 = _663.w;\n    if ((_665 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _674 = normalize(varying_LightDir);\n    highp vec4 _686 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _749 = (_686.xy - vec2(0.5)) * 2.0;\n    highp vec3 _760 = vec3(_749, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_749, _749))));\n    highp vec4 _803 = vec4(varying_ShadowPosition, 1.0);\n    highp float _807 = -(u_view * _803).z;\n    bool _820 = true && (_807 < u_csmFarBounds.x);\n    highp float _1143 = 0.0;\n    if (_820)\n    {\n        highp vec3 _835 = ((u_csmLightSpaceMatrices[0] * _803).xyz * 0.5) + vec3(0.5);\n        highp float _839 = _835.x;\n        highp float _843 = _835.y;\n        highp float _853 = (((_835.z + step(_839, 0.001000000047497451305389404296875)) + step(_843, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _839)) + step(0.999000012874603271484375, _843);\n        highp float _1140 = 0.0;\n        for (int SPIRV_Cross_Dummy273 = 0; SPIRV_Cross_Dummy273 < 1; SPIRV_Cross_Dummy273++)\n        {\n            if (_853 > 1.0)\n            {\n                _1140 = 1.0;\n                break;\n            }\n            highp float _904 = _853 - 0.001000000047497451305389404296875;\n            highp vec2 _910 = ((_835.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _921 = fract(_910 * vec2(2048.0));\n            highp float _976 = _921.y;\n            _1140 = mix(mix(float(_904 < dot(texture2D(u_shadowMapTex, _910), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_904 < dot(texture2D(u_shadowMapTex, _910 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _976), mix(float(_904 < dot(texture2D(u_shadowMapTex, _910 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_904 < dot(texture2D(u_shadowMapTex, _910 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _976), _921.x);\n            break;\n        }\n        _1143 = _1140;\n    }\n    else\n    {\n        _1143 = 1.0;\n    }\n    bool _1471 = _820 ? true : false;\n    bool _1162 = (!_1471) && (_807 < u_csmFarBounds.y);\n    highp float _1253 = 0.0;\n    if (_1162)\n    {\n        highp vec3 _1173 = ((u_csmLightSpaceMatrices[1] * _803).xyz * 0.5) + vec3(0.5);\n        highp float _1175 = _1173.x;\n        highp float _1178 = _1173.y;\n        highp float _1186 = (((_1173.z + step(_1175, 0.001000000047497451305389404296875)) + step(_1178, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1175)) + step(0.999000012874603271484375, _1178);\n        highp float _1250 = 0.0;\n        for (int SPIRV_Cross_Dummy349 = 0; SPIRV_Cross_Dummy349 < 1; SPIRV_Cross_Dummy349++)\n        {\n            if (_1186 > 1.0)\n            {\n                _1250 = 1.0;\n                break;\n            }\n            highp float _1204 = _1186 - 0.001000000047497451305389404296875;\n            highp vec2 _1208 = ((_1173.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1215 = fract(_1208 * vec2(2048.0));\n            highp float _1243 = _1215.y;\n            _1250 = mix(mix(float(_1204 < dot(texture2D(u_shadowMapTex, _1208), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1204 < dot(texture2D(u_shadowMapTex, _1208 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1243), mix(float(_1204 < dot(texture2D(u_shadowMapTex, _1208 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1204 < dot(texture2D(u_shadowMapTex, _1208 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1243), _1215.x);\n            break;\n        }\n        _1253 = _1250;\n    }\n    else\n    {\n        _1253 = _1143;\n    }\n    bool _1472 = _1162 ? true : _1471;\n    bool _1267 = (!_1472) && (_807 < u_csmFarBounds.z);\n    highp float _1358 = 0.0;\n    if (_1267)\n    {\n        highp vec3 _1278 = ((u_csmLightSpaceMatrices[2] * _803).xyz * 0.5) + vec3(0.5);\n        highp float _1280 = _1278.x;\n        highp float _1283 = _1278.y;\n        highp float _1291 = (((_1278.z + step(_1280, 0.001000000047497451305389404296875)) + step(_1283, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1280)) + step(0.999000012874603271484375, _1283);\n        highp float _1355 = 0.0;\n        for (int SPIRV_Cross_Dummy425 = 0; SPIRV_Cross_Dummy425 < 1; SPIRV_Cross_Dummy425++)\n        {\n            if (_1291 > 1.0)\n            {\n                _1355 = 1.0;\n                break;\n            }\n            highp float _1309 = _1291 - 0.001000000047497451305389404296875;\n            highp vec2 _1313 = ((_1278.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1320 = fract(_1313 * vec2(2048.0));\n            highp float _1348 = _1320.y;\n            _1355 = mix(mix(float(_1309 < dot(texture2D(u_shadowMapTex, _1313), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1309 < dot(texture2D(u_shadowMapTex, _1313 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1348), mix(float(_1309 < dot(texture2D(u_shadowMapTex, _1313 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1309 < dot(texture2D(u_shadowMapTex, _1313 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1348), _1320.x);\n            break;\n        }\n        _1358 = _1355;\n    }\n    else\n    {\n        _1358 = _1253;\n    }\n    highp float _1463 = 0.0;\n    if ((!(_1267 ? true : _1472)) && (_807 < u_csmFarBounds.w))\n    {\n        highp vec3 _1383 = ((u_csmLightSpaceMatrices[3] * _803).xyz * 0.5) + vec3(0.5);\n        highp float _1385 = _1383.x;\n        highp float _1388 = _1383.y;\n        highp float _1396 = (((_1383.z + step(_1385, 0.001000000047497451305389404296875)) + step(_1388, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1385)) + step(0.999000012874603271484375, _1388);\n        highp float _1460 = 0.0;\n        for (int SPIRV_Cross_Dummy495 = 0; SPIRV_Cross_Dummy495 < 1; SPIRV_Cross_Dummy495++)\n        {\n            if (_1396 > 1.0)\n            {\n                _1460 = 1.0;\n                break;\n            }\n            highp float _1414 = _1396 - 0.001000000047497451305389404296875;\n            highp vec2 _1418 = ((_1383.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1425 = fract(_1418 * vec2(2048.0));\n            highp float _1453 = _1425.y;\n            _1460 = mix(mix(float(_1414 < dot(texture2D(u_shadowMapTex, _1418), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1414 < dot(texture2D(u_shadowMapTex, _1418 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1453), mix(float(_1414 < dot(texture2D(u_shadowMapTex, _1418 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1414 < dot(texture2D(u_shadowMapTex, _1418 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1453), _1425.x);\n            break;\n        }\n        _1463 = _1460;\n    }\n    else\n    {\n        _1463 = _1358;\n    }\n    highp vec4 _712 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _731 = vec4(_663.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_674, _760))) * _1463)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _674), _760)), _Shininess * 128.0)) * (_712.xyz * _SpecColor.xyz))), _665);\n    highp float _1024 = length(varying_positionCamera_Fog);\n    highp float _1133 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1133 = (u_fogInfos.z - _1024) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1134 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1134 = 1.0 / pow(2.7182800769805908203125, _1024 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1135 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1135 = 1.0 / pow(2.7182800769805908203125, ((_1024 * _1024) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1135 = 1.0;\n            }\n            _1134 = _1135;\n        }\n        _1133 = _1134;\n    }\n    highp float _1070 = clamp(_1133, 0.0, 1.0);\n    highp vec3 _1079 = (_731.xyz * _1070) + (u_fogColor * (1.0 - _1070));\n    gl_FragData[0] = vec4(_1079.x, _1079.y, _1079.z, _731.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _632 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _640 = (_632 * _Color) * _AlbedoIntensity;\n    highp float _642 = _640.w;\n    if ((_642 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _663 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _725 = (_663.xy - vec2(0.5)) * 2.0;\n    highp vec4 _779 = vec4(varying_ShadowPosition, 1.0);\n    highp float _783 = -(u_view * _779).z;\n    bool _796 = true && (_783 < u_csmFarBounds.x);\n    highp float _1087 = 0.0;\n    if (_796)\n    {\n        highp vec3 _811 = ((u_csmLightSpaceMatrices[0] * _779).xyz * 0.5) + vec3(0.5);\n        highp float _815 = _811.x;\n        highp float _819 = _811.y;\n        highp float _829 = (((_811.z + step(_815, 0.001000000047497451305389404296875)) + step(_819, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _815)) + step(0.999000012874603271484375, _819);\n        highp float _1084 = 0.0;\n        for (int SPIRV_Cross_Dummy274 = 0; SPIRV_Cross_Dummy274 < 1; SPIRV_Cross_Dummy274++)\n        {\n            if (_829 > 1.0)\n            {\n                _1084 = 1.0;\n                break;\n            }\n            highp float _880 = _829 - 0.001000000047497451305389404296875;\n            highp vec2 _886 = ((_811.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _897 = fract(_886 * vec2(2048.0));\n            highp float _952 = _897.y;\n            _1084 = mix(mix(float(_880 < dot(texture2D(u_shadowMapTex, _886), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_880 < dot(texture2D(u_shadowMapTex, _886 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _952), mix(float(_880 < dot(texture2D(u_shadowMapTex, _886 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_880 < dot(texture2D(u_shadowMapTex, _886 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _952), _897.x);\n            break;\n        }\n        _1087 = _1084;\n    }\n    else\n    {\n        _1087 = 1.0;\n    }\n    bool _1415 = _796 ? true : false;\n    bool _1106 = (!_1415) && (_783 < u_csmFarBounds.y);\n    highp float _1197 = 0.0;\n    if (_1106)\n    {\n        highp vec3 _1117 = ((u_csmLightSpaceMatrices[1] * _779).xyz * 0.5) + vec3(0.5);\n        highp float _1119 = _1117.x;\n        highp float _1122 = _1117.y;\n        highp float _1130 = (((_1117.z + step(_1119, 0.001000000047497451305389404296875)) + step(_1122, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1119)) + step(0.999000012874603271484375, _1122);\n        highp float _1194 = 0.0;\n        for (int SPIRV_Cross_Dummy350 = 0; SPIRV_Cross_Dummy350 < 1; SPIRV_Cross_Dummy350++)\n        {\n            if (_1130 > 1.0)\n            {\n                _1194 = 1.0;\n                break;\n            }\n            highp float _1148 = _1130 - 0.001000000047497451305389404296875;\n            highp vec2 _1152 = ((_1117.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1159 = fract(_1152 * vec2(2048.0));\n            highp float _1187 = _1159.y;\n            _1194 = mix(mix(float(_1148 < dot(texture2D(u_shadowMapTex, _1152), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1148 < dot(texture2D(u_shadowMapTex, _1152 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1187), mix(float(_1148 < dot(texture2D(u_shadowMapTex, _1152 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1148 < dot(texture2D(u_shadowMapTex, _1152 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1187), _1159.x);\n            break;\n        }\n        _1197 = _1194;\n    }\n    else\n    {\n        _1197 = _1087;\n    }\n    bool _1416 = _1106 ? true : _1415;\n    bool _1211 = (!_1416) && (_783 < u_csmFarBounds.z);\n    highp float _1302 = 0.0;\n    if (_1211)\n    {\n        highp vec3 _1222 = ((u_csmLightSpaceMatrices[2] * _779).xyz * 0.5) + vec3(0.5);\n        highp float _1224 = _1222.x;\n        highp float _1227 = _1222.y;\n        highp float _1235 = (((_1222.z + step(_1224, 0.001000000047497451305389404296875)) + step(_1227, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1224)) + step(0.999000012874603271484375, _1227);\n        highp float _1299 = 0.0;\n        for (int SPIRV_Cross_Dummy426 = 0; SPIRV_Cross_Dummy426 < 1; SPIRV_Cross_Dummy426++)\n        {\n            if (_1235 > 1.0)\n            {\n                _1299 = 1.0;\n                break;\n            }\n            highp float _1253 = _1235 - 0.001000000047497451305389404296875;\n            highp vec2 _1257 = ((_1222.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1264 = fract(_1257 * vec2(2048.0));\n            highp float _1292 = _1264.y;\n            _1299 = mix(mix(float(_1253 < dot(texture2D(u_shadowMapTex, _1257), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1253 < dot(texture2D(u_shadowMapTex, _1257 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1292), mix(float(_1253 < dot(texture2D(u_shadowMapTex, _1257 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1253 < dot(texture2D(u_shadowMapTex, _1257 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1292), _1264.x);\n            break;\n        }\n        _1302 = _1299;\n    }\n    else\n    {\n        _1302 = _1197;\n    }\n    highp float _1407 = 0.0;\n    if ((!(_1211 ? true : _1416)) && (_783 < u_csmFarBounds.w))\n    {\n        highp vec3 _1327 = ((u_csmLightSpaceMatrices[3] * _779).xyz * 0.5) + vec3(0.5);\n        highp float _1329 = _1327.x;\n        highp float _1332 = _1327.y;\n        highp float _1340 = (((_1327.z + step(_1329, 0.001000000047497451305389404296875)) + step(_1332, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1329)) + step(0.999000012874603271484375, _1332);\n        highp float _1404 = 0.0;\n        for (int SPIRV_Cross_Dummy496 = 0; SPIRV_Cross_Dummy496 < 1; SPIRV_Cross_Dummy496++)\n        {\n            if (_1340 > 1.0)\n            {\n                _1404 = 1.0;\n                break;\n            }\n            highp float _1358 = _1340 - 0.001000000047497451305389404296875;\n            highp vec2 _1362 = ((_1327.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1369 = fract(_1362 * vec2(2048.0));\n            highp float _1397 = _1369.y;\n            _1404 = mix(mix(float(_1358 < dot(texture2D(u_shadowMapTex, _1362), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1358 < dot(texture2D(u_shadowMapTex, _1362 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1397), mix(float(_1358 < dot(texture2D(u_shadowMapTex, _1362 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1358 < dot(texture2D(u_shadowMapTex, _1362 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1397), _1369.x);\n            break;\n        }\n        _1407 = _1404;\n    }\n    else\n    {\n        _1407 = _1302;\n    }\n    highp vec3 _685 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    gl_FragData[0] = vec4(_640.xyz * (min(_685, mix(max(_685 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1407))), u_shadowColor), _685, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_725, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_725, _725)))))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _642);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _719 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _727 = (_719 * _Color) * _AlbedoIntensity;\n    highp float _729 = _727.w;\n    if ((_729 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _750 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _819 = (_750.xy - vec2(0.5)) * 2.0;\n    highp vec4 _873 = vec4(varying_ShadowPosition, 1.0);\n    highp float _877 = -(u_view * _873).z;\n    bool _890 = true && (_877 < u_csmFarBounds.x);\n    highp float _1256 = 0.0;\n    if (_890)\n    {\n        highp vec3 _905 = ((u_csmLightSpaceMatrices[0] * _873).xyz * 0.5) + vec3(0.5);\n        highp float _909 = _905.x;\n        highp float _913 = _905.y;\n        highp float _923 = (((_905.z + step(_909, 0.001000000047497451305389404296875)) + step(_913, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _909)) + step(0.999000012874603271484375, _913);\n        highp float _1253 = 0.0;\n        for (int SPIRV_Cross_Dummy278 = 0; SPIRV_Cross_Dummy278 < 1; SPIRV_Cross_Dummy278++)\n        {\n            if (_923 > 1.0)\n            {\n                _1253 = 1.0;\n                break;\n            }\n            highp float _974 = _923 - 0.001000000047497451305389404296875;\n            highp vec2 _980 = ((_905.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _991 = fract(_980 * vec2(2048.0));\n            highp float _1046 = _991.y;\n            _1253 = mix(mix(float(_974 < dot(texture2D(u_shadowMapTex, _980), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_974 < dot(texture2D(u_shadowMapTex, _980 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1046), mix(float(_974 < dot(texture2D(u_shadowMapTex, _980 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_974 < dot(texture2D(u_shadowMapTex, _980 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1046), _991.x);\n            break;\n        }\n        _1256 = _1253;\n    }\n    else\n    {\n        _1256 = 1.0;\n    }\n    bool _1584 = _890 ? true : false;\n    bool _1275 = (!_1584) && (_877 < u_csmFarBounds.y);\n    highp float _1366 = 0.0;\n    if (_1275)\n    {\n        highp vec3 _1286 = ((u_csmLightSpaceMatrices[1] * _873).xyz * 0.5) + vec3(0.5);\n        highp float _1288 = _1286.x;\n        highp float _1291 = _1286.y;\n        highp float _1299 = (((_1286.z + step(_1288, 0.001000000047497451305389404296875)) + step(_1291, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1288)) + step(0.999000012874603271484375, _1291);\n        highp float _1363 = 0.0;\n        for (int SPIRV_Cross_Dummy354 = 0; SPIRV_Cross_Dummy354 < 1; SPIRV_Cross_Dummy354++)\n        {\n            if (_1299 > 1.0)\n            {\n                _1363 = 1.0;\n                break;\n            }\n            highp float _1317 = _1299 - 0.001000000047497451305389404296875;\n            highp vec2 _1321 = ((_1286.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1328 = fract(_1321 * vec2(2048.0));\n            highp float _1356 = _1328.y;\n            _1363 = mix(mix(float(_1317 < dot(texture2D(u_shadowMapTex, _1321), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1317 < dot(texture2D(u_shadowMapTex, _1321 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1356), mix(float(_1317 < dot(texture2D(u_shadowMapTex, _1321 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1317 < dot(texture2D(u_shadowMapTex, _1321 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1356), _1328.x);\n            break;\n        }\n        _1366 = _1363;\n    }\n    else\n    {\n        _1366 = _1256;\n    }\n    bool _1585 = _1275 ? true : _1584;\n    bool _1380 = (!_1585) && (_877 < u_csmFarBounds.z);\n    highp float _1471 = 0.0;\n    if (_1380)\n    {\n        highp vec3 _1391 = ((u_csmLightSpaceMatrices[2] * _873).xyz * 0.5) + vec3(0.5);\n        highp float _1393 = _1391.x;\n        highp float _1396 = _1391.y;\n        highp float _1404 = (((_1391.z + step(_1393, 0.001000000047497451305389404296875)) + step(_1396, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1393)) + step(0.999000012874603271484375, _1396);\n        highp float _1468 = 0.0;\n        for (int SPIRV_Cross_Dummy430 = 0; SPIRV_Cross_Dummy430 < 1; SPIRV_Cross_Dummy430++)\n        {\n            if (_1404 > 1.0)\n            {\n                _1468 = 1.0;\n                break;\n            }\n            highp float _1422 = _1404 - 0.001000000047497451305389404296875;\n            highp vec2 _1426 = ((_1391.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1433 = fract(_1426 * vec2(2048.0));\n            highp float _1461 = _1433.y;\n            _1468 = mix(mix(float(_1422 < dot(texture2D(u_shadowMapTex, _1426), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1422 < dot(texture2D(u_shadowMapTex, _1426 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1461), mix(float(_1422 < dot(texture2D(u_shadowMapTex, _1426 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1422 < dot(texture2D(u_shadowMapTex, _1426 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1461), _1433.x);\n            break;\n        }\n        _1471 = _1468;\n    }\n    else\n    {\n        _1471 = _1366;\n    }\n    highp float _1576 = 0.0;\n    if ((!(_1380 ? true : _1585)) && (_877 < u_csmFarBounds.w))\n    {\n        highp vec3 _1496 = ((u_csmLightSpaceMatrices[3] * _873).xyz * 0.5) + vec3(0.5);\n        highp float _1498 = _1496.x;\n        highp float _1501 = _1496.y;\n        highp float _1509 = (((_1496.z + step(_1498, 0.001000000047497451305389404296875)) + step(_1501, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1498)) + step(0.999000012874603271484375, _1501);\n        highp float _1573 = 0.0;\n        for (int SPIRV_Cross_Dummy500 = 0; SPIRV_Cross_Dummy500 < 1; SPIRV_Cross_Dummy500++)\n        {\n            if (_1509 > 1.0)\n            {\n                _1573 = 1.0;\n                break;\n            }\n            highp float _1527 = _1509 - 0.001000000047497451305389404296875;\n            highp vec2 _1531 = ((_1496.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1538 = fract(_1531 * vec2(2048.0));\n            highp float _1566 = _1538.y;\n            _1573 = mix(mix(float(_1527 < dot(texture2D(u_shadowMapTex, _1531), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1527 < dot(texture2D(u_shadowMapTex, _1531 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1566), mix(float(_1527 < dot(texture2D(u_shadowMapTex, _1531 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1527 < dot(texture2D(u_shadowMapTex, _1531 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1566), _1538.x);\n            break;\n        }\n        _1576 = _1573;\n    }\n    else\n    {\n        _1576 = _1471;\n    }\n    highp vec4 _770 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _772 = _770.xyz * 2.0;\n    highp vec4 _782 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _801 = vec4(_727.xyz * (min(_772, mix(max(_772 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1576))), u_shadowColor), _772, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_819, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_819, _819)))))), _Shininess * 128.0)) * (_782.xyz * _SpecColor.xyz))), _729);\n    highp float _1132 = length(varying_positionCamera_Fog);\n    highp float _1246 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1246 = (u_fogInfos.z - _1132) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1247 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1247 = 1.0 / pow(2.7182800769805908203125, _1132 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1248 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1248 = 1.0 / pow(2.7182800769805908203125, ((_1132 * _1132) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1248 = 1.0;\n            }\n            _1247 = _1248;\n        }\n        _1246 = _1247;\n    }\n    highp float _1178 = clamp(_1246, 0.0, 1.0);\n    highp vec3 _1187 = (_801.xyz * _1178) + (u_fogColor * (1.0 - _1178));\n    gl_FragData[0] = vec4(_1187.x, _1187.y, _1187.z, _801.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _584 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _592 = (_584 * _Color) * _AlbedoIntensity;\n    highp float _594 = _592.w;\n    if ((_594 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _603 = normalize(varying_LightDir);\n    highp vec4 _615 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _684 = (_615.xy - vec2(0.5)) * 2.0;\n    highp vec3 _695 = vec3(_684, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_684, _684))));\n    highp vec4 _738 = vec4(varying_ShadowPosition, 1.0);\n    highp float _742 = -(u_view * _738).z;\n    bool _755 = true && (_742 < u_csmFarBounds.x);\n    highp float _1005 = 0.0;\n    if (_755)\n    {\n        highp vec3 _770 = ((u_csmLightSpaceMatrices[0] * _738).xyz * 0.5) + vec3(0.5);\n        highp float _774 = _770.x;\n        highp float _778 = _770.y;\n        highp float _788 = (((_770.z + step(_774, 0.001000000047497451305389404296875)) + step(_778, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _774)) + step(0.999000012874603271484375, _778);\n        highp float _1002 = 0.0;\n        for (int SPIRV_Cross_Dummy269 = 0; SPIRV_Cross_Dummy269 < 1; SPIRV_Cross_Dummy269++)\n        {\n            if (_788 > 1.0)\n            {\n                _1002 = 1.0;\n                break;\n            }\n            highp float _839 = _788 - 0.001000000047497451305389404296875;\n            highp vec2 _845 = ((_770.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _856 = fract(_845 * vec2(2048.0));\n            highp float _911 = _856.y;\n            _1002 = mix(mix(float(_839 < dot(texture2D(u_shadowMapTex, _845), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_839 < dot(texture2D(u_shadowMapTex, _845 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _911), mix(float(_839 < dot(texture2D(u_shadowMapTex, _845 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_839 < dot(texture2D(u_shadowMapTex, _845 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _911), _856.x);\n            break;\n        }\n        _1005 = _1002;\n    }\n    else\n    {\n        _1005 = 1.0;\n    }\n    bool _1332 = _755 ? true : false;\n    bool _1024 = (!_1332) && (_742 < u_csmFarBounds.y);\n    highp float _1115 = 0.0;\n    if (_1024)\n    {\n        highp vec3 _1035 = ((u_csmLightSpaceMatrices[1] * _738).xyz * 0.5) + vec3(0.5);\n        highp float _1037 = _1035.x;\n        highp float _1040 = _1035.y;\n        highp float _1048 = (((_1035.z + step(_1037, 0.001000000047497451305389404296875)) + step(_1040, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1037)) + step(0.999000012874603271484375, _1040);\n        highp float _1112 = 0.0;\n        for (int SPIRV_Cross_Dummy345 = 0; SPIRV_Cross_Dummy345 < 1; SPIRV_Cross_Dummy345++)\n        {\n            if (_1048 > 1.0)\n            {\n                _1112 = 1.0;\n                break;\n            }\n            highp float _1066 = _1048 - 0.001000000047497451305389404296875;\n            highp vec2 _1070 = ((_1035.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1077 = fract(_1070 * vec2(2048.0));\n            highp float _1105 = _1077.y;\n            _1112 = mix(mix(float(_1066 < dot(texture2D(u_shadowMapTex, _1070), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1066 < dot(texture2D(u_shadowMapTex, _1070 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1105), mix(float(_1066 < dot(texture2D(u_shadowMapTex, _1070 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1066 < dot(texture2D(u_shadowMapTex, _1070 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1105), _1077.x);\n            break;\n        }\n        _1115 = _1112;\n    }\n    else\n    {\n        _1115 = _1005;\n    }\n    bool _1333 = _1024 ? true : _1332;\n    bool _1129 = (!_1333) && (_742 < u_csmFarBounds.z);\n    highp float _1220 = 0.0;\n    if (_1129)\n    {\n        highp vec3 _1140 = ((u_csmLightSpaceMatrices[2] * _738).xyz * 0.5) + vec3(0.5);\n        highp float _1142 = _1140.x;\n        highp float _1145 = _1140.y;\n        highp float _1153 = (((_1140.z + step(_1142, 0.001000000047497451305389404296875)) + step(_1145, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1142)) + step(0.999000012874603271484375, _1145);\n        highp float _1217 = 0.0;\n        for (int SPIRV_Cross_Dummy421 = 0; SPIRV_Cross_Dummy421 < 1; SPIRV_Cross_Dummy421++)\n        {\n            if (_1153 > 1.0)\n            {\n                _1217 = 1.0;\n                break;\n            }\n            highp float _1171 = _1153 - 0.001000000047497451305389404296875;\n            highp vec2 _1175 = ((_1140.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1182 = fract(_1175 * vec2(2048.0));\n            highp float _1210 = _1182.y;\n            _1217 = mix(mix(float(_1171 < dot(texture2D(u_shadowMapTex, _1175), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1171 < dot(texture2D(u_shadowMapTex, _1175 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1210), mix(float(_1171 < dot(texture2D(u_shadowMapTex, _1175 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1171 < dot(texture2D(u_shadowMapTex, _1175 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1210), _1182.x);\n            break;\n        }\n        _1220 = _1217;\n    }\n    else\n    {\n        _1220 = _1115;\n    }\n    highp float _1325 = 0.0;\n    if ((!(_1129 ? true : _1333)) && (_742 < u_csmFarBounds.w))\n    {\n        highp vec3 _1245 = ((u_csmLightSpaceMatrices[3] * _738).xyz * 0.5) + vec3(0.5);\n        highp float _1247 = _1245.x;\n        highp float _1250 = _1245.y;\n        highp float _1258 = (((_1245.z + step(_1247, 0.001000000047497451305389404296875)) + step(_1250, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1247)) + step(0.999000012874603271484375, _1250);\n        highp float _1322 = 0.0;\n        for (int SPIRV_Cross_Dummy491 = 0; SPIRV_Cross_Dummy491 < 1; SPIRV_Cross_Dummy491++)\n        {\n            if (_1258 > 1.0)\n            {\n                _1322 = 1.0;\n                break;\n            }\n            highp float _1276 = _1258 - 0.001000000047497451305389404296875;\n            highp vec2 _1280 = ((_1245.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1287 = fract(_1280 * vec2(2048.0));\n            highp float _1315 = _1287.y;\n            _1322 = mix(mix(float(_1276 < dot(texture2D(u_shadowMapTex, _1280), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1276 < dot(texture2D(u_shadowMapTex, _1280 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1315), mix(float(_1276 < dot(texture2D(u_shadowMapTex, _1280 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1276 < dot(texture2D(u_shadowMapTex, _1280 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1315), _1287.x);\n            break;\n        }\n        _1325 = _1322;\n    }\n    else\n    {\n        _1325 = _1220;\n    }\n    highp vec4 _655 = vec4(_592.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_603, _695))) * _1325)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _603), _695)), _Shininess * 128.0)) * (_SpecColor.xyz * _584.w))), _594);\n    highp vec3 _671 = _655.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_671.x, _671.y, _671.z, _655.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _670 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _678 = (_670 * _Color) * _AlbedoIntensity;\n    highp float _680 = _678.w;\n    if ((_680 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _689 = normalize(varying_LightDir);\n    highp vec4 _701 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _777 = (_701.xy - vec2(0.5)) * 2.0;\n    highp vec3 _788 = vec3(_777, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_777, _777))));\n    highp vec4 _831 = vec4(varying_ShadowPosition, 1.0);\n    highp float _835 = -(u_view * _831).z;\n    bool _848 = true && (_835 < u_csmFarBounds.x);\n    highp float _1173 = 0.0;\n    if (_848)\n    {\n        highp vec3 _863 = ((u_csmLightSpaceMatrices[0] * _831).xyz * 0.5) + vec3(0.5);\n        highp float _867 = _863.x;\n        highp float _871 = _863.y;\n        highp float _881 = (((_863.z + step(_867, 0.001000000047497451305389404296875)) + step(_871, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _867)) + step(0.999000012874603271484375, _871);\n        highp float _1170 = 0.0;\n        for (int SPIRV_Cross_Dummy273 = 0; SPIRV_Cross_Dummy273 < 1; SPIRV_Cross_Dummy273++)\n        {\n            if (_881 > 1.0)\n            {\n                _1170 = 1.0;\n                break;\n            }\n            highp float _932 = _881 - 0.001000000047497451305389404296875;\n            highp vec2 _938 = ((_863.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _949 = fract(_938 * vec2(2048.0));\n            highp float _1004 = _949.y;\n            _1170 = mix(mix(float(_932 < dot(texture2D(u_shadowMapTex, _938), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_932 < dot(texture2D(u_shadowMapTex, _938 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1004), mix(float(_932 < dot(texture2D(u_shadowMapTex, _938 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_932 < dot(texture2D(u_shadowMapTex, _938 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1004), _949.x);\n            break;\n        }\n        _1173 = _1170;\n    }\n    else\n    {\n        _1173 = 1.0;\n    }\n    bool _1501 = _848 ? true : false;\n    bool _1192 = (!_1501) && (_835 < u_csmFarBounds.y);\n    highp float _1283 = 0.0;\n    if (_1192)\n    {\n        highp vec3 _1203 = ((u_csmLightSpaceMatrices[1] * _831).xyz * 0.5) + vec3(0.5);\n        highp float _1205 = _1203.x;\n        highp float _1208 = _1203.y;\n        highp float _1216 = (((_1203.z + step(_1205, 0.001000000047497451305389404296875)) + step(_1208, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1205)) + step(0.999000012874603271484375, _1208);\n        highp float _1280 = 0.0;\n        for (int SPIRV_Cross_Dummy349 = 0; SPIRV_Cross_Dummy349 < 1; SPIRV_Cross_Dummy349++)\n        {\n            if (_1216 > 1.0)\n            {\n                _1280 = 1.0;\n                break;\n            }\n            highp float _1234 = _1216 - 0.001000000047497451305389404296875;\n            highp vec2 _1238 = ((_1203.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1245 = fract(_1238 * vec2(2048.0));\n            highp float _1273 = _1245.y;\n            _1280 = mix(mix(float(_1234 < dot(texture2D(u_shadowMapTex, _1238), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1234 < dot(texture2D(u_shadowMapTex, _1238 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1273), mix(float(_1234 < dot(texture2D(u_shadowMapTex, _1238 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1234 < dot(texture2D(u_shadowMapTex, _1238 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1273), _1245.x);\n            break;\n        }\n        _1283 = _1280;\n    }\n    else\n    {\n        _1283 = _1173;\n    }\n    bool _1502 = _1192 ? true : _1501;\n    bool _1297 = (!_1502) && (_835 < u_csmFarBounds.z);\n    highp float _1388 = 0.0;\n    if (_1297)\n    {\n        highp vec3 _1308 = ((u_csmLightSpaceMatrices[2] * _831).xyz * 0.5) + vec3(0.5);\n        highp float _1310 = _1308.x;\n        highp float _1313 = _1308.y;\n        highp float _1321 = (((_1308.z + step(_1310, 0.001000000047497451305389404296875)) + step(_1313, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1310)) + step(0.999000012874603271484375, _1313);\n        highp float _1385 = 0.0;\n        for (int SPIRV_Cross_Dummy425 = 0; SPIRV_Cross_Dummy425 < 1; SPIRV_Cross_Dummy425++)\n        {\n            if (_1321 > 1.0)\n            {\n                _1385 = 1.0;\n                break;\n            }\n            highp float _1339 = _1321 - 0.001000000047497451305389404296875;\n            highp vec2 _1343 = ((_1308.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1350 = fract(_1343 * vec2(2048.0));\n            highp float _1378 = _1350.y;\n            _1385 = mix(mix(float(_1339 < dot(texture2D(u_shadowMapTex, _1343), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1339 < dot(texture2D(u_shadowMapTex, _1343 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1378), mix(float(_1339 < dot(texture2D(u_shadowMapTex, _1343 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1339 < dot(texture2D(u_shadowMapTex, _1343 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1378), _1350.x);\n            break;\n        }\n        _1388 = _1385;\n    }\n    else\n    {\n        _1388 = _1283;\n    }\n    highp float _1493 = 0.0;\n    if ((!(_1297 ? true : _1502)) && (_835 < u_csmFarBounds.w))\n    {\n        highp vec3 _1413 = ((u_csmLightSpaceMatrices[3] * _831).xyz * 0.5) + vec3(0.5);\n        highp float _1415 = _1413.x;\n        highp float _1418 = _1413.y;\n        highp float _1426 = (((_1413.z + step(_1415, 0.001000000047497451305389404296875)) + step(_1418, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1415)) + step(0.999000012874603271484375, _1418);\n        highp float _1490 = 0.0;\n        for (int SPIRV_Cross_Dummy495 = 0; SPIRV_Cross_Dummy495 < 1; SPIRV_Cross_Dummy495++)\n        {\n            if (_1426 > 1.0)\n            {\n                _1490 = 1.0;\n                break;\n            }\n            highp float _1444 = _1426 - 0.001000000047497451305389404296875;\n            highp vec2 _1448 = ((_1413.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1455 = fract(_1448 * vec2(2048.0));\n            highp float _1483 = _1455.y;\n            _1490 = mix(mix(float(_1444 < dot(texture2D(u_shadowMapTex, _1448), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1444 < dot(texture2D(u_shadowMapTex, _1448 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1483), mix(float(_1444 < dot(texture2D(u_shadowMapTex, _1448 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1444 < dot(texture2D(u_shadowMapTex, _1448 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1483), _1455.x);\n            break;\n        }\n        _1493 = _1490;\n    }\n    else\n    {\n        _1493 = _1388;\n    }\n    highp vec4 _741 = vec4(_678.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_689, _788))) * _1493)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _689), _788)), _Shininess * 128.0)) * (_SpecColor.xyz * _670.w))), _680);\n    highp vec4 _747 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1052 = length(varying_positionCamera_Fog);\n    highp float _1163 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1163 = (u_fogInfos.z - _1052) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1164 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1164 = 1.0 / pow(2.7182800769805908203125, _1052 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1165 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1165 = 1.0 / pow(2.7182800769805908203125, ((_1052 * _1052) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1165 = 1.0;\n            }\n            _1164 = _1165;\n        }\n        _1163 = _1164;\n    }\n    highp float _1098 = clamp(_1163, 0.0, 1.0);\n    highp vec3 _1107 = ((_741.xyz + (_EmissionColor.xyz * _747.x)).xyz * _1098) + (u_fogColor * (1.0 - _1098));\n    gl_FragData[0] = vec4(_1107.x, _1107.y, _1107.z, _741.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _647 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _655 = (_647 * _Color) * _AlbedoIntensity;\n    highp float _657 = _655.w;\n    if ((_657 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _678 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _753 = (_678.xy - vec2(0.5)) * 2.0;\n    highp vec4 _807 = vec4(varying_ShadowPosition, 1.0);\n    highp float _811 = -(u_view * _807).z;\n    bool _824 = true && (_811 < u_csmFarBounds.x);\n    highp float _1117 = 0.0;\n    if (_824)\n    {\n        highp vec3 _839 = ((u_csmLightSpaceMatrices[0] * _807).xyz * 0.5) + vec3(0.5);\n        highp float _843 = _839.x;\n        highp float _847 = _839.y;\n        highp float _857 = (((_839.z + step(_843, 0.001000000047497451305389404296875)) + step(_847, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _843)) + step(0.999000012874603271484375, _847);\n        highp float _1114 = 0.0;\n        for (int SPIRV_Cross_Dummy274 = 0; SPIRV_Cross_Dummy274 < 1; SPIRV_Cross_Dummy274++)\n        {\n            if (_857 > 1.0)\n            {\n                _1114 = 1.0;\n                break;\n            }\n            highp float _908 = _857 - 0.001000000047497451305389404296875;\n            highp vec2 _914 = ((_839.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _925 = fract(_914 * vec2(2048.0));\n            highp float _980 = _925.y;\n            _1114 = mix(mix(float(_908 < dot(texture2D(u_shadowMapTex, _914), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_908 < dot(texture2D(u_shadowMapTex, _914 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _980), mix(float(_908 < dot(texture2D(u_shadowMapTex, _914 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_908 < dot(texture2D(u_shadowMapTex, _914 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _980), _925.x);\n            break;\n        }\n        _1117 = _1114;\n    }\n    else\n    {\n        _1117 = 1.0;\n    }\n    bool _1444 = _824 ? true : false;\n    bool _1136 = (!_1444) && (_811 < u_csmFarBounds.y);\n    highp float _1227 = 0.0;\n    if (_1136)\n    {\n        highp vec3 _1147 = ((u_csmLightSpaceMatrices[1] * _807).xyz * 0.5) + vec3(0.5);\n        highp float _1149 = _1147.x;\n        highp float _1152 = _1147.y;\n        highp float _1160 = (((_1147.z + step(_1149, 0.001000000047497451305389404296875)) + step(_1152, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1149)) + step(0.999000012874603271484375, _1152);\n        highp float _1224 = 0.0;\n        for (int SPIRV_Cross_Dummy350 = 0; SPIRV_Cross_Dummy350 < 1; SPIRV_Cross_Dummy350++)\n        {\n            if (_1160 > 1.0)\n            {\n                _1224 = 1.0;\n                break;\n            }\n            highp float _1178 = _1160 - 0.001000000047497451305389404296875;\n            highp vec2 _1182 = ((_1147.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1189 = fract(_1182 * vec2(2048.0));\n            highp float _1217 = _1189.y;\n            _1224 = mix(mix(float(_1178 < dot(texture2D(u_shadowMapTex, _1182), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1178 < dot(texture2D(u_shadowMapTex, _1182 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1217), mix(float(_1178 < dot(texture2D(u_shadowMapTex, _1182 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1178 < dot(texture2D(u_shadowMapTex, _1182 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1217), _1189.x);\n            break;\n        }\n        _1227 = _1224;\n    }\n    else\n    {\n        _1227 = _1117;\n    }\n    bool _1445 = _1136 ? true : _1444;\n    bool _1241 = (!_1445) && (_811 < u_csmFarBounds.z);\n    highp float _1332 = 0.0;\n    if (_1241)\n    {\n        highp vec3 _1252 = ((u_csmLightSpaceMatrices[2] * _807).xyz * 0.5) + vec3(0.5);\n        highp float _1254 = _1252.x;\n        highp float _1257 = _1252.y;\n        highp float _1265 = (((_1252.z + step(_1254, 0.001000000047497451305389404296875)) + step(_1257, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1254)) + step(0.999000012874603271484375, _1257);\n        highp float _1329 = 0.0;\n        for (int SPIRV_Cross_Dummy426 = 0; SPIRV_Cross_Dummy426 < 1; SPIRV_Cross_Dummy426++)\n        {\n            if (_1265 > 1.0)\n            {\n                _1329 = 1.0;\n                break;\n            }\n            highp float _1283 = _1265 - 0.001000000047497451305389404296875;\n            highp vec2 _1287 = ((_1252.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1294 = fract(_1287 * vec2(2048.0));\n            highp float _1322 = _1294.y;\n            _1329 = mix(mix(float(_1283 < dot(texture2D(u_shadowMapTex, _1287), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1283 < dot(texture2D(u_shadowMapTex, _1287 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1322), mix(float(_1283 < dot(texture2D(u_shadowMapTex, _1287 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1283 < dot(texture2D(u_shadowMapTex, _1287 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1322), _1294.x);\n            break;\n        }\n        _1332 = _1329;\n    }\n    else\n    {\n        _1332 = _1227;\n    }\n    highp float _1437 = 0.0;\n    if ((!(_1241 ? true : _1445)) && (_811 < u_csmFarBounds.w))\n    {\n        highp vec3 _1357 = ((u_csmLightSpaceMatrices[3] * _807).xyz * 0.5) + vec3(0.5);\n        highp float _1359 = _1357.x;\n        highp float _1362 = _1357.y;\n        highp float _1370 = (((_1357.z + step(_1359, 0.001000000047497451305389404296875)) + step(_1362, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1359)) + step(0.999000012874603271484375, _1362);\n        highp float _1434 = 0.0;\n        for (int SPIRV_Cross_Dummy496 = 0; SPIRV_Cross_Dummy496 < 1; SPIRV_Cross_Dummy496++)\n        {\n            if (_1370 > 1.0)\n            {\n                _1434 = 1.0;\n                break;\n            }\n            highp float _1388 = _1370 - 0.001000000047497451305389404296875;\n            highp vec2 _1392 = ((_1357.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1399 = fract(_1392 * vec2(2048.0));\n            highp float _1427 = _1399.y;\n            _1434 = mix(mix(float(_1388 < dot(texture2D(u_shadowMapTex, _1392), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1388 < dot(texture2D(u_shadowMapTex, _1392 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1427), mix(float(_1388 < dot(texture2D(u_shadowMapTex, _1392 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1388 < dot(texture2D(u_shadowMapTex, _1392 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1427), _1399.x);\n            break;\n        }\n        _1437 = _1434;\n    }\n    else\n    {\n        _1437 = _1332;\n    }\n    highp vec3 _700 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _724 = vec4(_655.xyz * (min(_700, mix(max(_700 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1437))), u_shadowColor), _700, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_753, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_753, _753)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _647.w))), _657);\n    highp vec3 _740 = _724.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_740.x, _740.y, _740.z, _724.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _734 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _742 = (_734 * _Color) * _AlbedoIntensity;\n    highp float _744 = _742.w;\n    if ((_744 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _765 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _847 = (_765.xy - vec2(0.5)) * 2.0;\n    highp vec4 _901 = vec4(varying_ShadowPosition, 1.0);\n    highp float _905 = -(u_view * _901).z;\n    bool _918 = true && (_905 < u_csmFarBounds.x);\n    highp float _1286 = 0.0;\n    if (_918)\n    {\n        highp vec3 _933 = ((u_csmLightSpaceMatrices[0] * _901).xyz * 0.5) + vec3(0.5);\n        highp float _937 = _933.x;\n        highp float _941 = _933.y;\n        highp float _951 = (((_933.z + step(_937, 0.001000000047497451305389404296875)) + step(_941, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _937)) + step(0.999000012874603271484375, _941);\n        highp float _1283 = 0.0;\n        for (int SPIRV_Cross_Dummy278 = 0; SPIRV_Cross_Dummy278 < 1; SPIRV_Cross_Dummy278++)\n        {\n            if (_951 > 1.0)\n            {\n                _1283 = 1.0;\n                break;\n            }\n            highp float _1002 = _951 - 0.001000000047497451305389404296875;\n            highp vec2 _1008 = ((_933.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _1019 = fract(_1008 * vec2(2048.0));\n            highp float _1074 = _1019.y;\n            _1283 = mix(mix(float(_1002 < dot(texture2D(u_shadowMapTex, _1008), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1002 < dot(texture2D(u_shadowMapTex, _1008 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1074), mix(float(_1002 < dot(texture2D(u_shadowMapTex, _1008 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1002 < dot(texture2D(u_shadowMapTex, _1008 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1074), _1019.x);\n            break;\n        }\n        _1286 = _1283;\n    }\n    else\n    {\n        _1286 = 1.0;\n    }\n    bool _1614 = _918 ? true : false;\n    bool _1305 = (!_1614) && (_905 < u_csmFarBounds.y);\n    highp float _1396 = 0.0;\n    if (_1305)\n    {\n        highp vec3 _1316 = ((u_csmLightSpaceMatrices[1] * _901).xyz * 0.5) + vec3(0.5);\n        highp float _1318 = _1316.x;\n        highp float _1321 = _1316.y;\n        highp float _1329 = (((_1316.z + step(_1318, 0.001000000047497451305389404296875)) + step(_1321, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1318)) + step(0.999000012874603271484375, _1321);\n        highp float _1393 = 0.0;\n        for (int SPIRV_Cross_Dummy354 = 0; SPIRV_Cross_Dummy354 < 1; SPIRV_Cross_Dummy354++)\n        {\n            if (_1329 > 1.0)\n            {\n                _1393 = 1.0;\n                break;\n            }\n            highp float _1347 = _1329 - 0.001000000047497451305389404296875;\n            highp vec2 _1351 = ((_1316.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1358 = fract(_1351 * vec2(2048.0));\n            highp float _1386 = _1358.y;\n            _1393 = mix(mix(float(_1347 < dot(texture2D(u_shadowMapTex, _1351), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1347 < dot(texture2D(u_shadowMapTex, _1351 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1386), mix(float(_1347 < dot(texture2D(u_shadowMapTex, _1351 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1347 < dot(texture2D(u_shadowMapTex, _1351 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1386), _1358.x);\n            break;\n        }\n        _1396 = _1393;\n    }\n    else\n    {\n        _1396 = _1286;\n    }\n    bool _1615 = _1305 ? true : _1614;\n    bool _1410 = (!_1615) && (_905 < u_csmFarBounds.z);\n    highp float _1501 = 0.0;\n    if (_1410)\n    {\n        highp vec3 _1421 = ((u_csmLightSpaceMatrices[2] * _901).xyz * 0.5) + vec3(0.5);\n        highp float _1423 = _1421.x;\n        highp float _1426 = _1421.y;\n        highp float _1434 = (((_1421.z + step(_1423, 0.001000000047497451305389404296875)) + step(_1426, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1423)) + step(0.999000012874603271484375, _1426);\n        highp float _1498 = 0.0;\n        for (int SPIRV_Cross_Dummy430 = 0; SPIRV_Cross_Dummy430 < 1; SPIRV_Cross_Dummy430++)\n        {\n            if (_1434 > 1.0)\n            {\n                _1498 = 1.0;\n                break;\n            }\n            highp float _1452 = _1434 - 0.001000000047497451305389404296875;\n            highp vec2 _1456 = ((_1421.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1463 = fract(_1456 * vec2(2048.0));\n            highp float _1491 = _1463.y;\n            _1498 = mix(mix(float(_1452 < dot(texture2D(u_shadowMapTex, _1456), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1452 < dot(texture2D(u_shadowMapTex, _1456 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1491), mix(float(_1452 < dot(texture2D(u_shadowMapTex, _1456 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1452 < dot(texture2D(u_shadowMapTex, _1456 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1491), _1463.x);\n            break;\n        }\n        _1501 = _1498;\n    }\n    else\n    {\n        _1501 = _1396;\n    }\n    highp float _1606 = 0.0;\n    if ((!(_1410 ? true : _1615)) && (_905 < u_csmFarBounds.w))\n    {\n        highp vec3 _1526 = ((u_csmLightSpaceMatrices[3] * _901).xyz * 0.5) + vec3(0.5);\n        highp float _1528 = _1526.x;\n        highp float _1531 = _1526.y;\n        highp float _1539 = (((_1526.z + step(_1528, 0.001000000047497451305389404296875)) + step(_1531, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1528)) + step(0.999000012874603271484375, _1531);\n        highp float _1603 = 0.0;\n        for (int SPIRV_Cross_Dummy500 = 0; SPIRV_Cross_Dummy500 < 1; SPIRV_Cross_Dummy500++)\n        {\n            if (_1539 > 1.0)\n            {\n                _1603 = 1.0;\n                break;\n            }\n            highp float _1557 = _1539 - 0.001000000047497451305389404296875;\n            highp vec2 _1561 = ((_1526.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1568 = fract(_1561 * vec2(2048.0));\n            highp float _1596 = _1568.y;\n            _1603 = mix(mix(float(_1557 < dot(texture2D(u_shadowMapTex, _1561), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1557 < dot(texture2D(u_shadowMapTex, _1561 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1596), mix(float(_1557 < dot(texture2D(u_shadowMapTex, _1561 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1557 < dot(texture2D(u_shadowMapTex, _1561 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1596), _1568.x);\n            break;\n        }\n        _1606 = _1603;\n    }\n    else\n    {\n        _1606 = _1501;\n    }\n    highp vec4 _785 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _787 = _785.xyz * 2.0;\n    highp vec4 _811 = vec4(_742.xyz * (min(_787, mix(max(_787 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1606))), u_shadowColor), _787, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_847, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_847, _847)))))), _Shininess * 128.0)) * (_SpecColor.xyz * _734.w))), _744);\n    highp vec4 _817 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1160 = length(varying_positionCamera_Fog);\n    highp float _1276 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1276 = (u_fogInfos.z - _1160) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1277 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1277 = 1.0 / pow(2.7182800769805908203125, _1160 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1278 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1278 = 1.0 / pow(2.7182800769805908203125, ((_1160 * _1160) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1278 = 1.0;\n            }\n            _1277 = _1278;\n        }\n        _1276 = _1277;\n    }\n    highp float _1206 = clamp(_1276, 0.0, 1.0);\n    highp vec3 _1215 = ((_811.xyz + (_EmissionColor.xyz * _817.x)).xyz * _1206) + (u_fogColor * (1.0 - _1206));\n    gl_FragData[0] = vec4(_1215.x, _1215.y, _1215.z, _811.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\n\nvoid main()\n{\n    highp vec4 _337 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _345 = (_337 * _Color) * _AlbedoIntensity;\n    highp float _347 = _345.w;\n    if ((_347 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _356 = normalize(varying_LightDir);\n    highp vec2 _439 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _450 = vec3(_439, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_439, _439))));\n    highp vec4 _410 = vec4(_345.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_356, _450))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _356), _450)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _347);\n    highp vec3 _426 = _410.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_426.x, _426.y, _426.z, _410.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _589 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _597 = (_589 * _Color) * _AlbedoIntensity;\n    highp float _599 = _597.w;\n    if ((_599 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _608 = normalize(varying_LightDir);\n    highp vec4 _620 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _694 = (_620.xy - vec2(0.5)) * 2.0;\n    highp vec3 _705 = vec3(_694, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_694, _694))));\n    highp vec4 _748 = vec4(varying_ShadowPosition, 1.0);\n    highp float _752 = -(u_view * _748).z;\n    bool _765 = true && (_752 < u_csmFarBounds.x);\n    highp float _1014 = 0.0;\n    if (_765)\n    {\n        highp vec3 _780 = ((u_csmLightSpaceMatrices[0] * _748).xyz * 0.5) + vec3(0.5);\n        highp float _784 = _780.x;\n        highp float _788 = _780.y;\n        highp float _798 = (((_780.z + step(_784, 0.001000000047497451305389404296875)) + step(_788, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _784)) + step(0.999000012874603271484375, _788);\n        highp float _1011 = 0.0;\n        for (int SPIRV_Cross_Dummy272 = 0; SPIRV_Cross_Dummy272 < 1; SPIRV_Cross_Dummy272++)\n        {\n            if (_798 > 1.0)\n            {\n                _1011 = 1.0;\n                break;\n            }\n            highp float _849 = _798 - 0.001000000047497451305389404296875;\n            highp vec2 _855 = ((_780.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _866 = fract(_855 * vec2(2048.0));\n            highp float _921 = _866.y;\n            _1011 = mix(mix(float(_849 < dot(texture2D(u_shadowMapTex, _855), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_849 < dot(texture2D(u_shadowMapTex, _855 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _921), mix(float(_849 < dot(texture2D(u_shadowMapTex, _855 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_849 < dot(texture2D(u_shadowMapTex, _855 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _921), _866.x);\n            break;\n        }\n        _1014 = _1011;\n    }\n    else\n    {\n        _1014 = 1.0;\n    }\n    bool _1341 = _765 ? true : false;\n    bool _1033 = (!_1341) && (_752 < u_csmFarBounds.y);\n    highp float _1124 = 0.0;\n    if (_1033)\n    {\n        highp vec3 _1044 = ((u_csmLightSpaceMatrices[1] * _748).xyz * 0.5) + vec3(0.5);\n        highp float _1046 = _1044.x;\n        highp float _1049 = _1044.y;\n        highp float _1057 = (((_1044.z + step(_1046, 0.001000000047497451305389404296875)) + step(_1049, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1046)) + step(0.999000012874603271484375, _1049);\n        highp float _1121 = 0.0;\n        for (int SPIRV_Cross_Dummy348 = 0; SPIRV_Cross_Dummy348 < 1; SPIRV_Cross_Dummy348++)\n        {\n            if (_1057 > 1.0)\n            {\n                _1121 = 1.0;\n                break;\n            }\n            highp float _1075 = _1057 - 0.001000000047497451305389404296875;\n            highp vec2 _1079 = ((_1044.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1086 = fract(_1079 * vec2(2048.0));\n            highp float _1114 = _1086.y;\n            _1121 = mix(mix(float(_1075 < dot(texture2D(u_shadowMapTex, _1079), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1075 < dot(texture2D(u_shadowMapTex, _1079 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1114), mix(float(_1075 < dot(texture2D(u_shadowMapTex, _1079 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1075 < dot(texture2D(u_shadowMapTex, _1079 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1114), _1086.x);\n            break;\n        }\n        _1124 = _1121;\n    }\n    else\n    {\n        _1124 = _1014;\n    }\n    bool _1342 = _1033 ? true : _1341;\n    bool _1138 = (!_1342) && (_752 < u_csmFarBounds.z);\n    highp float _1229 = 0.0;\n    if (_1138)\n    {\n        highp vec3 _1149 = ((u_csmLightSpaceMatrices[2] * _748).xyz * 0.5) + vec3(0.5);\n        highp float _1151 = _1149.x;\n        highp float _1154 = _1149.y;\n        highp float _1162 = (((_1149.z + step(_1151, 0.001000000047497451305389404296875)) + step(_1154, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1151)) + step(0.999000012874603271484375, _1154);\n        highp float _1226 = 0.0;\n        for (int SPIRV_Cross_Dummy424 = 0; SPIRV_Cross_Dummy424 < 1; SPIRV_Cross_Dummy424++)\n        {\n            if (_1162 > 1.0)\n            {\n                _1226 = 1.0;\n                break;\n            }\n            highp float _1180 = _1162 - 0.001000000047497451305389404296875;\n            highp vec2 _1184 = ((_1149.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1191 = fract(_1184 * vec2(2048.0));\n            highp float _1219 = _1191.y;\n            _1226 = mix(mix(float(_1180 < dot(texture2D(u_shadowMapTex, _1184), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1180 < dot(texture2D(u_shadowMapTex, _1184 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1219), mix(float(_1180 < dot(texture2D(u_shadowMapTex, _1184 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1180 < dot(texture2D(u_shadowMapTex, _1184 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1219), _1191.x);\n            break;\n        }\n        _1229 = _1226;\n    }\n    else\n    {\n        _1229 = _1124;\n    }\n    highp float _1334 = 0.0;\n    if ((!(_1138 ? true : _1342)) && (_752 < u_csmFarBounds.w))\n    {\n        highp vec3 _1254 = ((u_csmLightSpaceMatrices[3] * _748).xyz * 0.5) + vec3(0.5);\n        highp float _1256 = _1254.x;\n        highp float _1259 = _1254.y;\n        highp float _1267 = (((_1254.z + step(_1256, 0.001000000047497451305389404296875)) + step(_1259, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1256)) + step(0.999000012874603271484375, _1259);\n        highp float _1331 = 0.0;\n        for (int SPIRV_Cross_Dummy494 = 0; SPIRV_Cross_Dummy494 < 1; SPIRV_Cross_Dummy494++)\n        {\n            if (_1267 > 1.0)\n            {\n                _1331 = 1.0;\n                break;\n            }\n            highp float _1285 = _1267 - 0.001000000047497451305389404296875;\n            highp vec2 _1289 = ((_1254.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1296 = fract(_1289 * vec2(2048.0));\n            highp float _1324 = _1296.y;\n            _1331 = mix(mix(float(_1285 < dot(texture2D(u_shadowMapTex, _1289), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1285 < dot(texture2D(u_shadowMapTex, _1289 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1324), mix(float(_1285 < dot(texture2D(u_shadowMapTex, _1289 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1285 < dot(texture2D(u_shadowMapTex, _1289 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1324), _1296.x);\n            break;\n        }\n        _1334 = _1331;\n    }\n    else\n    {\n        _1334 = _1229;\n    }\n    highp vec4 _665 = vec4(_597.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_608, _705))) * _1334)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _608), _705)), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _599);\n    highp vec3 _681 = _665.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_681.x, _681.y, _681.z, _665.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _425 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _433 = (_425 * _Color) * _AlbedoIntensity;\n    highp float _435 = _433.w;\n    if ((_435 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _444 = normalize(varying_LightDir);\n    highp vec4 _456 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _534 = (_456.xy - vec2(0.5)) * 2.0;\n    highp vec3 _545 = vec3(_534, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_534, _534))));\n    highp vec4 _479 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _498 = vec4(_433.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_444, _545))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _444), _545)), _Shininess * 128.0)) * (_479.xyz * _SpecColor.xyz))), _435);\n    highp vec4 _504 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _580 = length(varying_positionCamera_Fog);\n    highp float _662 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _662 = (u_fogInfos.z - _580) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _663 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _663 = 1.0 / pow(2.7182800769805908203125, _580 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _664 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _664 = 1.0 / pow(2.7182800769805908203125, ((_580 * _580) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _664 = 1.0;\n            }\n            _663 = _664;\n        }\n        _662 = _663;\n    }\n    highp float _626 = clamp(_662, 0.0, 1.0);\n    highp vec3 _635 = ((_498.xyz + (_EmissionColor.xyz * _504.x)).xyz * _626) + (u_fogColor * (1.0 - _626));\n    gl_FragData[0] = vec4(_635.x, _635.y, _635.z, _498.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _675 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _683 = (_675 * _Color) * _AlbedoIntensity;\n    highp float _685 = _683.w;\n    if ((_685 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _694 = normalize(varying_LightDir);\n    highp vec4 _706 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _787 = (_706.xy - vec2(0.5)) * 2.0;\n    highp vec3 _798 = vec3(_787, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_787, _787))));\n    highp vec4 _841 = vec4(varying_ShadowPosition, 1.0);\n    highp float _845 = -(u_view * _841).z;\n    bool _858 = true && (_845 < u_csmFarBounds.x);\n    highp float _1182 = 0.0;\n    if (_858)\n    {\n        highp vec3 _873 = ((u_csmLightSpaceMatrices[0] * _841).xyz * 0.5) + vec3(0.5);\n        highp float _877 = _873.x;\n        highp float _881 = _873.y;\n        highp float _891 = (((_873.z + step(_877, 0.001000000047497451305389404296875)) + step(_881, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _877)) + step(0.999000012874603271484375, _881);\n        highp float _1179 = 0.0;\n        for (int SPIRV_Cross_Dummy276 = 0; SPIRV_Cross_Dummy276 < 1; SPIRV_Cross_Dummy276++)\n        {\n            if (_891 > 1.0)\n            {\n                _1179 = 1.0;\n                break;\n            }\n            highp float _942 = _891 - 0.001000000047497451305389404296875;\n            highp vec2 _948 = ((_873.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _959 = fract(_948 * vec2(2048.0));\n            highp float _1014 = _959.y;\n            _1179 = mix(mix(float(_942 < dot(texture2D(u_shadowMapTex, _948), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_942 < dot(texture2D(u_shadowMapTex, _948 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1014), mix(float(_942 < dot(texture2D(u_shadowMapTex, _948 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_942 < dot(texture2D(u_shadowMapTex, _948 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1014), _959.x);\n            break;\n        }\n        _1182 = _1179;\n    }\n    else\n    {\n        _1182 = 1.0;\n    }\n    bool _1510 = _858 ? true : false;\n    bool _1201 = (!_1510) && (_845 < u_csmFarBounds.y);\n    highp float _1292 = 0.0;\n    if (_1201)\n    {\n        highp vec3 _1212 = ((u_csmLightSpaceMatrices[1] * _841).xyz * 0.5) + vec3(0.5);\n        highp float _1214 = _1212.x;\n        highp float _1217 = _1212.y;\n        highp float _1225 = (((_1212.z + step(_1214, 0.001000000047497451305389404296875)) + step(_1217, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1214)) + step(0.999000012874603271484375, _1217);\n        highp float _1289 = 0.0;\n        for (int SPIRV_Cross_Dummy352 = 0; SPIRV_Cross_Dummy352 < 1; SPIRV_Cross_Dummy352++)\n        {\n            if (_1225 > 1.0)\n            {\n                _1289 = 1.0;\n                break;\n            }\n            highp float _1243 = _1225 - 0.001000000047497451305389404296875;\n            highp vec2 _1247 = ((_1212.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1254 = fract(_1247 * vec2(2048.0));\n            highp float _1282 = _1254.y;\n            _1289 = mix(mix(float(_1243 < dot(texture2D(u_shadowMapTex, _1247), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1243 < dot(texture2D(u_shadowMapTex, _1247 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1282), mix(float(_1243 < dot(texture2D(u_shadowMapTex, _1247 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1243 < dot(texture2D(u_shadowMapTex, _1247 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1282), _1254.x);\n            break;\n        }\n        _1292 = _1289;\n    }\n    else\n    {\n        _1292 = _1182;\n    }\n    bool _1511 = _1201 ? true : _1510;\n    bool _1306 = (!_1511) && (_845 < u_csmFarBounds.z);\n    highp float _1397 = 0.0;\n    if (_1306)\n    {\n        highp vec3 _1317 = ((u_csmLightSpaceMatrices[2] * _841).xyz * 0.5) + vec3(0.5);\n        highp float _1319 = _1317.x;\n        highp float _1322 = _1317.y;\n        highp float _1330 = (((_1317.z + step(_1319, 0.001000000047497451305389404296875)) + step(_1322, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1319)) + step(0.999000012874603271484375, _1322);\n        highp float _1394 = 0.0;\n        for (int SPIRV_Cross_Dummy428 = 0; SPIRV_Cross_Dummy428 < 1; SPIRV_Cross_Dummy428++)\n        {\n            if (_1330 > 1.0)\n            {\n                _1394 = 1.0;\n                break;\n            }\n            highp float _1348 = _1330 - 0.001000000047497451305389404296875;\n            highp vec2 _1352 = ((_1317.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1359 = fract(_1352 * vec2(2048.0));\n            highp float _1387 = _1359.y;\n            _1394 = mix(mix(float(_1348 < dot(texture2D(u_shadowMapTex, _1352), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1348 < dot(texture2D(u_shadowMapTex, _1352 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1387), mix(float(_1348 < dot(texture2D(u_shadowMapTex, _1352 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1348 < dot(texture2D(u_shadowMapTex, _1352 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1387), _1359.x);\n            break;\n        }\n        _1397 = _1394;\n    }\n    else\n    {\n        _1397 = _1292;\n    }\n    highp float _1502 = 0.0;\n    if ((!(_1306 ? true : _1511)) && (_845 < u_csmFarBounds.w))\n    {\n        highp vec3 _1422 = ((u_csmLightSpaceMatrices[3] * _841).xyz * 0.5) + vec3(0.5);\n        highp float _1424 = _1422.x;\n        highp float _1427 = _1422.y;\n        highp float _1435 = (((_1422.z + step(_1424, 0.001000000047497451305389404296875)) + step(_1427, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1424)) + step(0.999000012874603271484375, _1427);\n        highp float _1499 = 0.0;\n        for (int SPIRV_Cross_Dummy498 = 0; SPIRV_Cross_Dummy498 < 1; SPIRV_Cross_Dummy498++)\n        {\n            if (_1435 > 1.0)\n            {\n                _1499 = 1.0;\n                break;\n            }\n            highp float _1453 = _1435 - 0.001000000047497451305389404296875;\n            highp vec2 _1457 = ((_1422.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1464 = fract(_1457 * vec2(2048.0));\n            highp float _1492 = _1464.y;\n            _1499 = mix(mix(float(_1453 < dot(texture2D(u_shadowMapTex, _1457), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1453 < dot(texture2D(u_shadowMapTex, _1457 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1492), mix(float(_1453 < dot(texture2D(u_shadowMapTex, _1457 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1453 < dot(texture2D(u_shadowMapTex, _1457 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1492), _1464.x);\n            break;\n        }\n        _1502 = _1499;\n    }\n    else\n    {\n        _1502 = _1397;\n    }\n    highp vec4 _732 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _751 = vec4(_683.xyz * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_694, _798))) * _1502)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _694), _798)), _Shininess * 128.0)) * (_732.xyz * _SpecColor.xyz))), _685);\n    highp vec4 _757 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1062 = length(varying_positionCamera_Fog);\n    highp float _1172 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1172 = (u_fogInfos.z - _1062) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1173 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1173 = 1.0 / pow(2.7182800769805908203125, _1062 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1174 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1174 = 1.0 / pow(2.7182800769805908203125, ((_1062 * _1062) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1174 = 1.0;\n            }\n            _1173 = _1174;\n        }\n        _1172 = _1173;\n    }\n    highp float _1108 = clamp(_1172, 0.0, 1.0);\n    highp vec3 _1117 = ((_751.xyz + (_EmissionColor.xyz * _757.x)).xyz * _1108) + (u_fogColor * (1.0 - _1108));\n    gl_FragData[0] = vec4(_1117.x, _1117.y, _1117.z, _751.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\n\nvoid main()\n{\n    highp vec4 _400 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _408 = (_400 * _Color) * _AlbedoIntensity;\n    highp float _410 = _408.w;\n    if ((_410 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec2 _508 = (texture2D(_BumpMap, varying_TexCoord).xy - vec2(0.5)) * 2.0;\n    highp vec3 _450 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _479 = vec4(_408.xyz * (min(_450, mix(max(_450, u_shadowColor), _450, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_508, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_508, _508)))))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _410);\n    highp vec3 _495 = _479.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_495.x, _495.y, _495.z, _479.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _652 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _660 = (_652 * _Color) * _AlbedoIntensity;\n    highp float _662 = _660.w;\n    if ((_662 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _683 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _763 = (_683.xy - vec2(0.5)) * 2.0;\n    highp vec4 _817 = vec4(varying_ShadowPosition, 1.0);\n    highp float _821 = -(u_view * _817).z;\n    bool _834 = true && (_821 < u_csmFarBounds.x);\n    highp float _1126 = 0.0;\n    if (_834)\n    {\n        highp vec3 _849 = ((u_csmLightSpaceMatrices[0] * _817).xyz * 0.5) + vec3(0.5);\n        highp float _853 = _849.x;\n        highp float _857 = _849.y;\n        highp float _867 = (((_849.z + step(_853, 0.001000000047497451305389404296875)) + step(_857, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _853)) + step(0.999000012874603271484375, _857);\n        highp float _1123 = 0.0;\n        for (int SPIRV_Cross_Dummy277 = 0; SPIRV_Cross_Dummy277 < 1; SPIRV_Cross_Dummy277++)\n        {\n            if (_867 > 1.0)\n            {\n                _1123 = 1.0;\n                break;\n            }\n            highp float _918 = _867 - 0.001000000047497451305389404296875;\n            highp vec2 _924 = ((_849.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _935 = fract(_924 * vec2(2048.0));\n            highp float _990 = _935.y;\n            _1123 = mix(mix(float(_918 < dot(texture2D(u_shadowMapTex, _924), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_918 < dot(texture2D(u_shadowMapTex, _924 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _990), mix(float(_918 < dot(texture2D(u_shadowMapTex, _924 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_918 < dot(texture2D(u_shadowMapTex, _924 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _990), _935.x);\n            break;\n        }\n        _1126 = _1123;\n    }\n    else\n    {\n        _1126 = 1.0;\n    }\n    bool _1453 = _834 ? true : false;\n    bool _1145 = (!_1453) && (_821 < u_csmFarBounds.y);\n    highp float _1236 = 0.0;\n    if (_1145)\n    {\n        highp vec3 _1156 = ((u_csmLightSpaceMatrices[1] * _817).xyz * 0.5) + vec3(0.5);\n        highp float _1158 = _1156.x;\n        highp float _1161 = _1156.y;\n        highp float _1169 = (((_1156.z + step(_1158, 0.001000000047497451305389404296875)) + step(_1161, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1158)) + step(0.999000012874603271484375, _1161);\n        highp float _1233 = 0.0;\n        for (int SPIRV_Cross_Dummy353 = 0; SPIRV_Cross_Dummy353 < 1; SPIRV_Cross_Dummy353++)\n        {\n            if (_1169 > 1.0)\n            {\n                _1233 = 1.0;\n                break;\n            }\n            highp float _1187 = _1169 - 0.001000000047497451305389404296875;\n            highp vec2 _1191 = ((_1156.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1198 = fract(_1191 * vec2(2048.0));\n            highp float _1226 = _1198.y;\n            _1233 = mix(mix(float(_1187 < dot(texture2D(u_shadowMapTex, _1191), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1187 < dot(texture2D(u_shadowMapTex, _1191 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1226), mix(float(_1187 < dot(texture2D(u_shadowMapTex, _1191 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1187 < dot(texture2D(u_shadowMapTex, _1191 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1226), _1198.x);\n            break;\n        }\n        _1236 = _1233;\n    }\n    else\n    {\n        _1236 = _1126;\n    }\n    bool _1454 = _1145 ? true : _1453;\n    bool _1250 = (!_1454) && (_821 < u_csmFarBounds.z);\n    highp float _1341 = 0.0;\n    if (_1250)\n    {\n        highp vec3 _1261 = ((u_csmLightSpaceMatrices[2] * _817).xyz * 0.5) + vec3(0.5);\n        highp float _1263 = _1261.x;\n        highp float _1266 = _1261.y;\n        highp float _1274 = (((_1261.z + step(_1263, 0.001000000047497451305389404296875)) + step(_1266, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1263)) + step(0.999000012874603271484375, _1266);\n        highp float _1338 = 0.0;\n        for (int SPIRV_Cross_Dummy429 = 0; SPIRV_Cross_Dummy429 < 1; SPIRV_Cross_Dummy429++)\n        {\n            if (_1274 > 1.0)\n            {\n                _1338 = 1.0;\n                break;\n            }\n            highp float _1292 = _1274 - 0.001000000047497451305389404296875;\n            highp vec2 _1296 = ((_1261.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1303 = fract(_1296 * vec2(2048.0));\n            highp float _1331 = _1303.y;\n            _1338 = mix(mix(float(_1292 < dot(texture2D(u_shadowMapTex, _1296), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1292 < dot(texture2D(u_shadowMapTex, _1296 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1331), mix(float(_1292 < dot(texture2D(u_shadowMapTex, _1296 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1292 < dot(texture2D(u_shadowMapTex, _1296 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1331), _1303.x);\n            break;\n        }\n        _1341 = _1338;\n    }\n    else\n    {\n        _1341 = _1236;\n    }\n    highp float _1446 = 0.0;\n    if ((!(_1250 ? true : _1454)) && (_821 < u_csmFarBounds.w))\n    {\n        highp vec3 _1366 = ((u_csmLightSpaceMatrices[3] * _817).xyz * 0.5) + vec3(0.5);\n        highp float _1368 = _1366.x;\n        highp float _1371 = _1366.y;\n        highp float _1379 = (((_1366.z + step(_1368, 0.001000000047497451305389404296875)) + step(_1371, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1368)) + step(0.999000012874603271484375, _1371);\n        highp float _1443 = 0.0;\n        for (int SPIRV_Cross_Dummy499 = 0; SPIRV_Cross_Dummy499 < 1; SPIRV_Cross_Dummy499++)\n        {\n            if (_1379 > 1.0)\n            {\n                _1443 = 1.0;\n                break;\n            }\n            highp float _1397 = _1379 - 0.001000000047497451305389404296875;\n            highp vec2 _1401 = ((_1366.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1408 = fract(_1401 * vec2(2048.0));\n            highp float _1436 = _1408.y;\n            _1443 = mix(mix(float(_1397 < dot(texture2D(u_shadowMapTex, _1401), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1397 < dot(texture2D(u_shadowMapTex, _1401 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1436), mix(float(_1397 < dot(texture2D(u_shadowMapTex, _1401 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1397 < dot(texture2D(u_shadowMapTex, _1401 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1436), _1408.x);\n            break;\n        }\n        _1446 = _1443;\n    }\n    else\n    {\n        _1446 = _1341;\n    }\n    highp vec3 _705 = texture2D(u_lightMap, varying_LightMapCoord).xyz * 2.0;\n    highp vec4 _734 = vec4(_660.xyz * (min(_705, mix(max(_705 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1446))), u_shadowColor), _705, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_763, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_763, _763)))))), _Shininess * 128.0)) * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _662);\n    highp vec3 _750 = _734.xyz + (_EmissionColor.xyz * texture2D(_EmissionMap, varying_TexCoord).x);\n    gl_FragData[0] = vec4(_750.x, _750.y, _750.z, _734.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _488 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _496 = (_488 * _Color) * _AlbedoIntensity;\n    highp float _498 = _496.w;\n    if ((_498 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _519 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _603 = (_519.xy - vec2(0.5)) * 2.0;\n    highp vec4 _536 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _538 = _536.xyz * 2.0;\n    highp vec4 _548 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _567 = vec4(_496.xyz * (min(_538, mix(max(_538, u_shadowColor), _538, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_603, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_603, _603)))))), _Shininess * 128.0)) * (_548.xyz * _SpecColor.xyz))), _498);\n    highp vec4 _573 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _687 = length(varying_positionCamera_Fog);\n    highp float _774 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _774 = (u_fogInfos.z - _687) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _775 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _775 = 1.0 / pow(2.7182800769805908203125, _687 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _776 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _776 = 1.0 / pow(2.7182800769805908203125, ((_687 * _687) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _776 = 1.0;\n            }\n            _775 = _776;\n        }\n        _774 = _775;\n    }\n    highp float _733 = clamp(_774, 0.0, 1.0);\n    highp vec3 _742 = ((_567.xyz + (_EmissionColor.xyz * _573.x)).xyz * _733) + (u_fogColor * (1.0 - _733));\n    gl_FragData[0] = vec4(_742.x, _742.y, _742.z, _567.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _EmissionColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D u_shadowMapTex;\nuniform highp sampler2D u_lightMap;\nuniform highp sampler2D _SpecGlossMap;\nuniform highp sampler2D _EmissionMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec2 varying_LightMapCoord;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _739 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _747 = (_739 * _Color) * _AlbedoIntensity;\n    highp float _749 = _747.w;\n    if ((_749 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec4 _770 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _857 = (_770.xy - vec2(0.5)) * 2.0;\n    highp vec4 _911 = vec4(varying_ShadowPosition, 1.0);\n    highp float _915 = -(u_view * _911).z;\n    bool _928 = true && (_915 < u_csmFarBounds.x);\n    highp float _1295 = 0.0;\n    if (_928)\n    {\n        highp vec3 _943 = ((u_csmLightSpaceMatrices[0] * _911).xyz * 0.5) + vec3(0.5);\n        highp float _947 = _943.x;\n        highp float _951 = _943.y;\n        highp float _961 = (((_943.z + step(_947, 0.001000000047497451305389404296875)) + step(_951, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _947)) + step(0.999000012874603271484375, _951);\n        highp float _1292 = 0.0;\n        for (int SPIRV_Cross_Dummy281 = 0; SPIRV_Cross_Dummy281 < 1; SPIRV_Cross_Dummy281++)\n        {\n            if (_961 > 1.0)\n            {\n                _1292 = 1.0;\n                break;\n            }\n            highp float _1012 = _961 - 0.001000000047497451305389404296875;\n            highp vec2 _1018 = ((_943.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _1029 = fract(_1018 * vec2(2048.0));\n            highp float _1084 = _1029.y;\n            _1292 = mix(mix(float(_1012 < dot(texture2D(u_shadowMapTex, _1018), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1012 < dot(texture2D(u_shadowMapTex, _1018 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1084), mix(float(_1012 < dot(texture2D(u_shadowMapTex, _1018 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1012 < dot(texture2D(u_shadowMapTex, _1018 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1084), _1029.x);\n            break;\n        }\n        _1295 = _1292;\n    }\n    else\n    {\n        _1295 = 1.0;\n    }\n    bool _1623 = _928 ? true : false;\n    bool _1314 = (!_1623) && (_915 < u_csmFarBounds.y);\n    highp float _1405 = 0.0;\n    if (_1314)\n    {\n        highp vec3 _1325 = ((u_csmLightSpaceMatrices[1] * _911).xyz * 0.5) + vec3(0.5);\n        highp float _1327 = _1325.x;\n        highp float _1330 = _1325.y;\n        highp float _1338 = (((_1325.z + step(_1327, 0.001000000047497451305389404296875)) + step(_1330, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1327)) + step(0.999000012874603271484375, _1330);\n        highp float _1402 = 0.0;\n        for (int SPIRV_Cross_Dummy357 = 0; SPIRV_Cross_Dummy357 < 1; SPIRV_Cross_Dummy357++)\n        {\n            if (_1338 > 1.0)\n            {\n                _1402 = 1.0;\n                break;\n            }\n            highp float _1356 = _1338 - 0.001000000047497451305389404296875;\n            highp vec2 _1360 = ((_1325.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1367 = fract(_1360 * vec2(2048.0));\n            highp float _1395 = _1367.y;\n            _1402 = mix(mix(float(_1356 < dot(texture2D(u_shadowMapTex, _1360), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1356 < dot(texture2D(u_shadowMapTex, _1360 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1395), mix(float(_1356 < dot(texture2D(u_shadowMapTex, _1360 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1356 < dot(texture2D(u_shadowMapTex, _1360 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1395), _1367.x);\n            break;\n        }\n        _1405 = _1402;\n    }\n    else\n    {\n        _1405 = _1295;\n    }\n    bool _1624 = _1314 ? true : _1623;\n    bool _1419 = (!_1624) && (_915 < u_csmFarBounds.z);\n    highp float _1510 = 0.0;\n    if (_1419)\n    {\n        highp vec3 _1430 = ((u_csmLightSpaceMatrices[2] * _911).xyz * 0.5) + vec3(0.5);\n        highp float _1432 = _1430.x;\n        highp float _1435 = _1430.y;\n        highp float _1443 = (((_1430.z + step(_1432, 0.001000000047497451305389404296875)) + step(_1435, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1432)) + step(0.999000012874603271484375, _1435);\n        highp float _1507 = 0.0;\n        for (int SPIRV_Cross_Dummy433 = 0; SPIRV_Cross_Dummy433 < 1; SPIRV_Cross_Dummy433++)\n        {\n            if (_1443 > 1.0)\n            {\n                _1507 = 1.0;\n                break;\n            }\n            highp float _1461 = _1443 - 0.001000000047497451305389404296875;\n            highp vec2 _1465 = ((_1430.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1472 = fract(_1465 * vec2(2048.0));\n            highp float _1500 = _1472.y;\n            _1507 = mix(mix(float(_1461 < dot(texture2D(u_shadowMapTex, _1465), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1461 < dot(texture2D(u_shadowMapTex, _1465 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1500), mix(float(_1461 < dot(texture2D(u_shadowMapTex, _1465 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1461 < dot(texture2D(u_shadowMapTex, _1465 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1500), _1472.x);\n            break;\n        }\n        _1510 = _1507;\n    }\n    else\n    {\n        _1510 = _1405;\n    }\n    highp float _1615 = 0.0;\n    if ((!(_1419 ? true : _1624)) && (_915 < u_csmFarBounds.w))\n    {\n        highp vec3 _1535 = ((u_csmLightSpaceMatrices[3] * _911).xyz * 0.5) + vec3(0.5);\n        highp float _1537 = _1535.x;\n        highp float _1540 = _1535.y;\n        highp float _1548 = (((_1535.z + step(_1537, 0.001000000047497451305389404296875)) + step(_1540, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1537)) + step(0.999000012874603271484375, _1540);\n        highp float _1612 = 0.0;\n        for (int SPIRV_Cross_Dummy503 = 0; SPIRV_Cross_Dummy503 < 1; SPIRV_Cross_Dummy503++)\n        {\n            if (_1548 > 1.0)\n            {\n                _1612 = 1.0;\n                break;\n            }\n            highp float _1566 = _1548 - 0.001000000047497451305389404296875;\n            highp vec2 _1570 = ((_1535.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1577 = fract(_1570 * vec2(2048.0));\n            highp float _1605 = _1577.y;\n            _1612 = mix(mix(float(_1566 < dot(texture2D(u_shadowMapTex, _1570), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1566 < dot(texture2D(u_shadowMapTex, _1570 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1605), mix(float(_1566 < dot(texture2D(u_shadowMapTex, _1570 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1566 < dot(texture2D(u_shadowMapTex, _1570 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1605), _1577.x);\n            break;\n        }\n        _1615 = _1612;\n    }\n    else\n    {\n        _1615 = _1510;\n    }\n    highp vec4 _790 = texture2D(u_lightMap, varying_LightMapCoord);\n    highp vec3 _792 = _790.xyz * 2.0;\n    highp vec4 _802 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _821 = vec4(_747.xyz * (min(_792, mix(max(_792 - (u_lightColor * (clamp(dot(normalize(varying_WorldNormal), u_lightDir), 0.0, 1.0) * (1.0 - _1615))), u_shadowColor), _792, vec3(u_shadowStrength))) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + normalize(varying_LightDir)), vec3(_857, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_857, _857)))))), _Shininess * 128.0)) * (_802.xyz * _SpecColor.xyz))), _749);\n    highp vec4 _827 = texture2D(_EmissionMap, varying_TexCoord);\n    highp float _1170 = length(varying_positionCamera_Fog);\n    highp float _1285 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _1285 = (u_fogInfos.z - _1170) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _1286 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _1286 = 1.0 / pow(2.7182800769805908203125, _1170 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _1287 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _1287 = 1.0 / pow(2.7182800769805908203125, ((_1170 * _1170) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _1287 = 1.0;\n            }\n            _1286 = _1287;\n        }\n        _1285 = _1286;\n    }\n    highp float _1216 = clamp(_1285, 0.0, 1.0);\n    highp vec3 _1225 = ((_821.xyz + (_EmissionColor.xyz * _827.x)).xyz * _1216) + (u_fogColor * (1.0 - _1216));\n    gl_FragData[0] = vec4(_1225.x, _1225.y, _1225.z, _821.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_tangentWS;\nvarying vec3 varying_bitangentWS;\n\nvoid main()\n{\n    int _784 = int(a_boneIndex.x) * 3;\n    int _789 = _784 + 1;\n    int _793 = _784 + 2;\n    int _835 = int(a_boneIndex.y) * 3;\n    int _840 = _835 + 1;\n    int _844 = _835 + 2;\n    int _886 = int(a_boneIndex.z) * 3;\n    int _891 = _886 + 1;\n    int _895 = _886 + 2;\n    int _937 = int(a_boneIndex.w) * 3;\n    int _942 = _937 + 1;\n    int _946 = _937 + 2;\n    mat4 _681 = mat4(vec4(u_boneOffsetMatrix[_784].xyz, 0.0), vec4(u_boneOffsetMatrix[_789].xyz, 0.0), vec4(u_boneOffsetMatrix[_793].xyz, 0.0), vec4(u_boneOffsetMatrix[_784].w, u_boneOffsetMatrix[_789].w, u_boneOffsetMatrix[_793].w, 1.0)) * a_boneWeight.x;\n    mat4 _685 = mat4(vec4(u_boneOffsetMatrix[_835].xyz, 0.0), vec4(u_boneOffsetMatrix[_840].xyz, 0.0), vec4(u_boneOffsetMatrix[_844].xyz, 0.0), vec4(u_boneOffsetMatrix[_835].w, u_boneOffsetMatrix[_840].w, u_boneOffsetMatrix[_844].w, 1.0)) * a_boneWeight.y;\n    mat4 _703 = mat4(vec4(u_boneOffsetMatrix[_886].xyz, 0.0), vec4(u_boneOffsetMatrix[_891].xyz, 0.0), vec4(u_boneOffsetMatrix[_895].xyz, 0.0), vec4(u_boneOffsetMatrix[_886].w, u_boneOffsetMatrix[_891].w, u_boneOffsetMatrix[_895].w, 1.0)) * a_boneWeight.z;\n    mat4 _721 = mat4(vec4(u_boneOffsetMatrix[_937].xyz, 0.0), vec4(u_boneOffsetMatrix[_942].xyz, 0.0), vec4(u_boneOffsetMatrix[_946].xyz, 0.0), vec4(u_boneOffsetMatrix[_937].w, u_boneOffsetMatrix[_942].w, u_boneOffsetMatrix[_946].w, 1.0)) * a_boneWeight.w;\n    mat4 _739 = u_bindTargetWorldInverse * mat4(((_681[0] + _685[0]) + _703[0]) + _721[0], ((_681[1] + _685[1]) + _703[1]) + _721[1], ((_681[2] + _685[2]) + _703[2]) + _721[2], ((_681[3] + _685[3]) + _703[3]) + _721[3]);\n    mat3 _747 = mat3(_739[0].xyz, _739[1].xyz, _739[2].xyz);\n    vec4 _984 = u_world * (_739 * a_position);\n    mat3 _1004 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1007 = normalize(_1004 * (_747 * a_normal));\n    vec3 _1021 = normalize(_1004 * (_747 * a_tangent.xyz).xyz);\n    gl_Position = u_projection * (u_view * _984);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _984.xyz);\n    varying_normalWS = _1007;\n    varying_positionWS = _984;\n    varying_positionCamera_Fog = (u_view * vec4(_984.xyz, 1.0)).xyz;\n    varying_tangentWS = _1021;\n    varying_bitangentWS = cross(_1021, _1007) * a_tangent.w;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp mat4 u_bindTargetWorldInverse;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _589 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _597 = (_589 * _Color) * _AlbedoIntensity;\n    highp float _599 = _597.w;\n    if ((_599 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _608 = normalize(varying_ViewDir);\n    highp vec4 _617 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _718 = (_617.xy - vec2(0.5)) * 2.0;\n    highp vec3 _734 = vec3(_718, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_718, _718)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _992 = vec3(0.0);\n    highp vec3 _993 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _986 = vec3(0.0);\n        highp float _987 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _987 = 1.0;\n            _986 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _762 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _766 = max(dot(_762, _762), 6.103515625e-05);\n            highp vec3 _770 = _762 * inversesqrt(_766);\n            highp float _830 = clamp((dot(u_spotDirFA[0].xyz, _770) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _987 = ((1.0 / _766) * clamp((_766 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_830 * _830);\n            _986 = _770;\n        }\n        highp vec3 _660 = u_lightColorFA[0].xyz * _987;\n        _993 = _660 * max(0.0, dot(_986, _734));\n        _992 = _660 * pow(max(0.0, dot(normalize(_608 + _986), _734)), _Shininess * 128.0);\n    }\n    else\n    {\n        _993 = vec3(0.0);\n        _992 = vec3(0.0);\n    }\n    highp vec3 _1070 = vec3(0.0);\n    highp vec3 _1071 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _1045 = 0.0;\n        highp vec3 _1046 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _1045 = 1.0;\n            _1046 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _1015 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _1017 = max(dot(_1015, _1015), 6.103515625e-05);\n            highp vec3 _1019 = _1015 * inversesqrt(_1017);\n            highp float _1039 = clamp((dot(u_spotDirFA[1].xyz, _1019) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _1045 = ((1.0 / _1017) * clamp((_1017 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_1039 * _1039);\n            _1046 = _1019;\n        }\n        highp vec3 _1054 = u_lightColorFA[1].xyz * _1045;\n        _1070 = _993 + (_1054 * max(0.0, dot(_1046, _734)));\n        _1071 = _992 + (_1054 * pow(max(0.0, dot(normalize(_608 + _1046), _734)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1070 = _993;\n        _1071 = _992;\n    }\n    highp vec3 _1148 = vec3(0.0);\n    highp vec3 _1149 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _1123 = 0.0;\n        highp vec3 _1124 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _1123 = 1.0;\n            _1124 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _1093 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _1095 = max(dot(_1093, _1093), 6.103515625e-05);\n            highp vec3 _1097 = _1093 * inversesqrt(_1095);\n            highp float _1117 = clamp((dot(u_spotDirFA[2].xyz, _1097) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _1123 = ((1.0 / _1095) * clamp((_1095 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_1117 * _1117);\n            _1124 = _1097;\n        }\n        highp vec3 _1132 = u_lightColorFA[2].xyz * _1123;\n        _1148 = _1070 + (_1132 * max(0.0, dot(_1124, _734)));\n        _1149 = _1071 + (_1132 * pow(max(0.0, dot(normalize(_608 + _1124), _734)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1148 = _1070;\n        _1149 = _1071;\n    }\n    highp vec3 _1226 = vec3(0.0);\n    highp vec3 _1227 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1201 = 0.0;\n        highp vec3 _1202 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1201 = 1.0;\n            _1202 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1171 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1173 = max(dot(_1171, _1171), 6.103515625e-05);\n            highp vec3 _1175 = _1171 * inversesqrt(_1173);\n            highp float _1195 = clamp((dot(u_spotDirFA[3].xyz, _1175) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1201 = ((1.0 / _1173) * clamp((_1173 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1195 * _1195);\n            _1202 = _1175;\n        }\n        highp vec3 _1210 = u_lightColorFA[3].xyz * _1201;\n        _1226 = _1148 + (_1210 * max(0.0, dot(_1202, _734)));\n        _1227 = _1149 + (_1210 * pow(max(0.0, dot(normalize(_608 + _1202), _734)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1226 = _1148;\n        _1227 = _1149;\n    }\n    highp vec4 _700 = vec4(_597.xyz * (_1226 + (_1227 * (_SpecColor.xyz * _589.w))), _599);\n    highp float _868 = length(varying_positionCamera_Fog);\n    highp float _980 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _980 = (u_fogInfos.z - _868) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _981 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _981 = 1.0 / pow(2.7182800769805908203125, _868 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _982 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _982 = 1.0 / pow(2.7182800769805908203125, ((_868 * _868) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _982 = 1.0;\n            }\n            _981 = _982;\n        }\n        _980 = _981;\n    }\n    highp float _914 = clamp(_980, 0.0, 1.0);\n    highp vec3 _923 = (_700.xyz * _914) + (u_fogColor * (1.0 - _914));\n    gl_FragData[0] = vec4(_923.x, _923.y, _923.z, _700.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\n\nvoid main()\n{\n    int _715 = int(a_boneIndex.x) * 3;\n    int _720 = _715 + 1;\n    int _724 = _715 + 2;\n    int _766 = int(a_boneIndex.y) * 3;\n    int _771 = _766 + 1;\n    int _775 = _766 + 2;\n    int _817 = int(a_boneIndex.z) * 3;\n    int _822 = _817 + 1;\n    int _826 = _817 + 2;\n    int _868 = int(a_boneIndex.w) * 3;\n    int _873 = _868 + 1;\n    int _877 = _868 + 2;\n    mat4 _612 = mat4(vec4(u_boneOffsetMatrix[_715].xyz, 0.0), vec4(u_boneOffsetMatrix[_720].xyz, 0.0), vec4(u_boneOffsetMatrix[_724].xyz, 0.0), vec4(u_boneOffsetMatrix[_715].w, u_boneOffsetMatrix[_720].w, u_boneOffsetMatrix[_724].w, 1.0)) * a_boneWeight.x;\n    mat4 _616 = mat4(vec4(u_boneOffsetMatrix[_766].xyz, 0.0), vec4(u_boneOffsetMatrix[_771].xyz, 0.0), vec4(u_boneOffsetMatrix[_775].xyz, 0.0), vec4(u_boneOffsetMatrix[_766].w, u_boneOffsetMatrix[_771].w, u_boneOffsetMatrix[_775].w, 1.0)) * a_boneWeight.y;\n    mat4 _634 = mat4(vec4(u_boneOffsetMatrix[_817].xyz, 0.0), vec4(u_boneOffsetMatrix[_822].xyz, 0.0), vec4(u_boneOffsetMatrix[_826].xyz, 0.0), vec4(u_boneOffsetMatrix[_817].w, u_boneOffsetMatrix[_822].w, u_boneOffsetMatrix[_826].w, 1.0)) * a_boneWeight.z;\n    mat4 _652 = mat4(vec4(u_boneOffsetMatrix[_868].xyz, 0.0), vec4(u_boneOffsetMatrix[_873].xyz, 0.0), vec4(u_boneOffsetMatrix[_877].xyz, 0.0), vec4(u_boneOffsetMatrix[_868].w, u_boneOffsetMatrix[_873].w, u_boneOffsetMatrix[_877].w, 1.0)) * a_boneWeight.w;\n    mat4 _670 = u_bindTargetWorldInverse * mat4(((_612[0] + _616[0]) + _634[0]) + _652[0], ((_612[1] + _616[1]) + _634[1]) + _652[1], ((_612[2] + _616[2]) + _634[2]) + _652[2], ((_612[3] + _616[3]) + _634[3]) + _652[3]);\n    vec4 _915 = u_world * (_670 * a_position);\n    gl_Position = u_projection * (u_view * _915);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _915.xyz);\n    varying_normalWS = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_670[0].xyz, _670[1].xyz, _670[2].xyz) * a_normal));\n    varying_positionWS = _915;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp mat4 u_bindTargetWorldInverse;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\n\nvoid main()\n{\n    highp vec4 _411 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _419 = (_411 * _Color) * _AlbedoIntensity;\n    highp vec3 _422 = normalize(varying_ViewDir);\n    highp vec3 _425 = normalize(varying_normalWS);\n    highp vec3 _661 = vec3(0.0);\n    highp vec3 _662 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _655 = vec3(0.0);\n        highp float _656 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _656 = 1.0;\n            _655 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _515 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _519 = max(dot(_515, _515), 6.103515625e-05);\n            highp vec3 _523 = _515 * inversesqrt(_519);\n            highp float _583 = clamp((dot(u_spotDirFA[0].xyz, _523) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _656 = ((1.0 / _519) * clamp((_519 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_583 * _583);\n            _655 = _523;\n        }\n        highp vec3 _446 = u_lightColorFA[0].xyz * _656;\n        _662 = _446 * max(0.0, dot(_655, _425));\n        _661 = _446 * pow(max(0.0, dot(normalize(_422 + _655), _425)), _Shininess * 128.0);\n    }\n    else\n    {\n        _662 = vec3(0.0);\n        _661 = vec3(0.0);\n    }\n    highp vec3 _738 = vec3(0.0);\n    highp vec3 _739 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _713 = 0.0;\n        highp vec3 _714 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _713 = 1.0;\n            _714 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _683 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _685 = max(dot(_683, _683), 6.103515625e-05);\n            highp vec3 _687 = _683 * inversesqrt(_685);\n            highp float _707 = clamp((dot(u_spotDirFA[1].xyz, _687) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _713 = ((1.0 / _685) * clamp((_685 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_707 * _707);\n            _714 = _687;\n        }\n        highp vec3 _722 = u_lightColorFA[1].xyz * _713;\n        _738 = _662 + (_722 * max(0.0, dot(_714, _425)));\n        _739 = _661 + (_722 * pow(max(0.0, dot(normalize(_422 + _714), _425)), _Shininess * 128.0));\n    }\n    else\n    {\n        _738 = _662;\n        _739 = _661;\n    }\n    highp vec3 _816 = vec3(0.0);\n    highp vec3 _817 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _791 = 0.0;\n        highp vec3 _792 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _791 = 1.0;\n            _792 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _761 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _763 = max(dot(_761, _761), 6.103515625e-05);\n            highp vec3 _765 = _761 * inversesqrt(_763);\n            highp float _785 = clamp((dot(u_spotDirFA[2].xyz, _765) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _791 = ((1.0 / _763) * clamp((_763 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_785 * _785);\n            _792 = _765;\n        }\n        highp vec3 _800 = u_lightColorFA[2].xyz * _791;\n        _816 = _738 + (_800 * max(0.0, dot(_792, _425)));\n        _817 = _739 + (_800 * pow(max(0.0, dot(normalize(_422 + _792), _425)), _Shininess * 128.0));\n    }\n    else\n    {\n        _816 = _738;\n        _817 = _739;\n    }\n    highp vec3 _894 = vec3(0.0);\n    highp vec3 _895 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _869 = 0.0;\n        highp vec3 _870 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _869 = 1.0;\n            _870 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _839 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _841 = max(dot(_839, _839), 6.103515625e-05);\n            highp vec3 _843 = _839 * inversesqrt(_841);\n            highp float _863 = clamp((dot(u_spotDirFA[3].xyz, _843) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _869 = ((1.0 / _841) * clamp((_841 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_863 * _863);\n            _870 = _843;\n        }\n        highp vec3 _878 = u_lightColorFA[3].xyz * _869;\n        _894 = _816 + (_878 * max(0.0, dot(_870, _425)));\n        _895 = _817 + (_878 * pow(max(0.0, dot(normalize(_422 + _870), _425)), _Shininess * 128.0));\n    }\n    else\n    {\n        _894 = _816;\n        _895 = _817;\n    }\n    gl_FragData[0] = vec4(_419.xyz * (_894 + (_895 * (_SpecColor.xyz * _411.w))), _419.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\n\nvoid main()\n{\n    vec4 _416 = u_world * a_position;\n    gl_Position = u_projection * (u_view * _416);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _416.xyz);\n    varying_normalWS = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_positionWS = _416;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\n\nvoid main()\n{\n    highp vec4 _407 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _415 = (_407 * _Color) * _AlbedoIntensity;\n    highp vec3 _418 = normalize(varying_ViewDir);\n    highp vec3 _421 = normalize(varying_normalWS);\n    highp vec3 _657 = vec3(0.0);\n    highp vec3 _658 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _651 = vec3(0.0);\n        highp float _652 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _652 = 1.0;\n            _651 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _511 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _515 = max(dot(_511, _511), 6.103515625e-05);\n            highp vec3 _519 = _511 * inversesqrt(_515);\n            highp float _579 = clamp((dot(u_spotDirFA[0].xyz, _519) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _652 = ((1.0 / _515) * clamp((_515 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_579 * _579);\n            _651 = _519;\n        }\n        highp vec3 _442 = u_lightColorFA[0].xyz * _652;\n        _658 = _442 * max(0.0, dot(_651, _421));\n        _657 = _442 * pow(max(0.0, dot(normalize(_418 + _651), _421)), _Shininess * 128.0);\n    }\n    else\n    {\n        _658 = vec3(0.0);\n        _657 = vec3(0.0);\n    }\n    highp vec3 _734 = vec3(0.0);\n    highp vec3 _735 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _709 = 0.0;\n        highp vec3 _710 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _709 = 1.0;\n            _710 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _679 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _681 = max(dot(_679, _679), 6.103515625e-05);\n            highp vec3 _683 = _679 * inversesqrt(_681);\n            highp float _703 = clamp((dot(u_spotDirFA[1].xyz, _683) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _709 = ((1.0 / _681) * clamp((_681 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_703 * _703);\n            _710 = _683;\n        }\n        highp vec3 _718 = u_lightColorFA[1].xyz * _709;\n        _734 = _658 + (_718 * max(0.0, dot(_710, _421)));\n        _735 = _657 + (_718 * pow(max(0.0, dot(normalize(_418 + _710), _421)), _Shininess * 128.0));\n    }\n    else\n    {\n        _734 = _658;\n        _735 = _657;\n    }\n    highp vec3 _812 = vec3(0.0);\n    highp vec3 _813 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _787 = 0.0;\n        highp vec3 _788 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _787 = 1.0;\n            _788 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _757 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _759 = max(dot(_757, _757), 6.103515625e-05);\n            highp vec3 _761 = _757 * inversesqrt(_759);\n            highp float _781 = clamp((dot(u_spotDirFA[2].xyz, _761) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _787 = ((1.0 / _759) * clamp((_759 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_781 * _781);\n            _788 = _761;\n        }\n        highp vec3 _796 = u_lightColorFA[2].xyz * _787;\n        _812 = _734 + (_796 * max(0.0, dot(_788, _421)));\n        _813 = _735 + (_796 * pow(max(0.0, dot(normalize(_418 + _788), _421)), _Shininess * 128.0));\n    }\n    else\n    {\n        _812 = _734;\n        _813 = _735;\n    }\n    highp vec3 _890 = vec3(0.0);\n    highp vec3 _891 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _865 = 0.0;\n        highp vec3 _866 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _865 = 1.0;\n            _866 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _835 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _837 = max(dot(_835, _835), 6.103515625e-05);\n            highp vec3 _839 = _835 * inversesqrt(_837);\n            highp float _859 = clamp((dot(u_spotDirFA[3].xyz, _839) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _865 = ((1.0 / _837) * clamp((_837 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_859 * _859);\n            _866 = _839;\n        }\n        highp vec3 _874 = u_lightColorFA[3].xyz * _865;\n        _890 = _812 + (_874 * max(0.0, dot(_866, _421)));\n        _891 = _813 + (_874 * pow(max(0.0, dot(normalize(_418 + _866), _421)), _Shininess * 128.0));\n    }\n    else\n    {\n        _890 = _812;\n        _891 = _813;\n    }\n    gl_FragData[0] = vec4(_415.xyz * (_890 + (_891 * (_SpecColor.xyz * _407.w))), _415.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    float _789 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _795 = (3.0 * (_789 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _798 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _802 = floor(_795 * _798);\n    float _808 = _795 - (_802 * u_skinnedAnimationMapInfo.x);\n    float _813 = (_802 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _823 = texture2D(u_skinnedAnimationMap, vec2((_808 + 0.5) * _798, _813));\n    vec4 _833 = texture2D(u_skinnedAnimationMap, vec2((_808 + 1.5) * _798, _813));\n    vec4 _843 = texture2D(u_skinnedAnimationMap, vec2((_808 + 2.5) * _798, _813));\n    float _894 = (3.0 * (_789 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _901 = floor(_894 * _798);\n    float _907 = _894 - (_901 * u_skinnedAnimationMapInfo.x);\n    float _912 = (_901 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _922 = texture2D(u_skinnedAnimationMap, vec2((_907 + 0.5) * _798, _912));\n    vec4 _932 = texture2D(u_skinnedAnimationMap, vec2((_907 + 1.5) * _798, _912));\n    vec4 _942 = texture2D(u_skinnedAnimationMap, vec2((_907 + 2.5) * _798, _912));\n    float _993 = (3.0 * (_789 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1000 = floor(_993 * _798);\n    float _1006 = _993 - (_1000 * u_skinnedAnimationMapInfo.x);\n    float _1011 = (_1000 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1021 = texture2D(u_skinnedAnimationMap, vec2((_1006 + 0.5) * _798, _1011));\n    vec4 _1031 = texture2D(u_skinnedAnimationMap, vec2((_1006 + 1.5) * _798, _1011));\n    vec4 _1041 = texture2D(u_skinnedAnimationMap, vec2((_1006 + 2.5) * _798, _1011));\n    float _1092 = (3.0 * (_789 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1099 = floor(_1092 * _798);\n    float _1105 = _1092 - (_1099 * u_skinnedAnimationMapInfo.x);\n    float _1110 = (_1099 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1120 = texture2D(u_skinnedAnimationMap, vec2((_1105 + 0.5) * _798, _1110));\n    vec4 _1130 = texture2D(u_skinnedAnimationMap, vec2((_1105 + 1.5) * _798, _1110));\n    vec4 _1140 = texture2D(u_skinnedAnimationMap, vec2((_1105 + 2.5) * _798, _1110));\n    mat4 _685 = mat4(vec4(_823.xyz, 0.0), vec4(_833.xyz, 0.0), vec4(_843.xyz, 0.0), vec4(_823.w, _833.w, _843.w, 1.0)) * a_boneWeight.x;\n    mat4 _689 = mat4(vec4(_922.xyz, 0.0), vec4(_932.xyz, 0.0), vec4(_942.xyz, 0.0), vec4(_922.w, _932.w, _942.w, 1.0)) * a_boneWeight.y;\n    mat4 _707 = mat4(vec4(_1021.xyz, 0.0), vec4(_1031.xyz, 0.0), vec4(_1041.xyz, 0.0), vec4(_1021.w, _1031.w, _1041.w, 1.0)) * a_boneWeight.z;\n    mat4 _725 = mat4(vec4(_1120.xyz, 0.0), vec4(_1130.xyz, 0.0), vec4(_1140.xyz, 0.0), vec4(_1120.w, _1130.w, _1140.w, 1.0)) * a_boneWeight.w;\n    vec4 _729 = ((_685[0] + _689[0]) + _707[0]) + _725[0];\n    vec4 _732 = ((_685[1] + _689[1]) + _707[1]) + _725[1];\n    vec4 _735 = ((_685[2] + _689[2]) + _707[2]) + _725[2];\n    vec4 _1176 = u_world * (mat4(_729, _732, _735, ((_685[3] + _689[3]) + _707[3]) + _725[3]) * a_position);\n    gl_Position = u_projection * (u_view * _1176);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1176.xyz);\n    varying_normalWS = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_729.xyz, _732.xyz, _735.xyz) * a_normal));\n    varying_positionWS = _1176;\n    varying_positionCamera_Fog = (u_view * vec4(_1176.xyz, 1.0)).xyz;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_skinnedAnimationMapInfo;\nuniform highp float u_skinnedAnimationInfo;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _514 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _522 = (_514 * _Color) * _AlbedoIntensity;\n    highp float _524 = _522.w;\n    if ((_524 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _533 = normalize(varying_ViewDir);\n    highp vec3 _536 = normalize(varying_normalWS);\n    highp vec3 _860 = vec3(0.0);\n    highp vec3 _861 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _854 = vec3(0.0);\n        highp float _855 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _855 = 1.0;\n            _854 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _639 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _643 = max(dot(_639, _639), 6.103515625e-05);\n            highp vec3 _647 = _639 * inversesqrt(_643);\n            highp float _707 = clamp((dot(u_spotDirFA[0].xyz, _647) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _855 = ((1.0 / _643) * clamp((_643 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_707 * _707);\n            _854 = _647;\n        }\n        highp vec3 _557 = u_lightColorFA[0].xyz * _855;\n        _861 = _557 * max(0.0, dot(_854, _536));\n        _860 = _557 * pow(max(0.0, dot(normalize(_533 + _854), _536)), _Shininess * 128.0);\n    }\n    else\n    {\n        _861 = vec3(0.0);\n        _860 = vec3(0.0);\n    }\n    highp vec3 _937 = vec3(0.0);\n    highp vec3 _938 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _912 = 0.0;\n        highp vec3 _913 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _912 = 1.0;\n            _913 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _882 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _884 = max(dot(_882, _882), 6.103515625e-05);\n            highp vec3 _886 = _882 * inversesqrt(_884);\n            highp float _906 = clamp((dot(u_spotDirFA[1].xyz, _886) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _912 = ((1.0 / _884) * clamp((_884 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_906 * _906);\n            _913 = _886;\n        }\n        highp vec3 _921 = u_lightColorFA[1].xyz * _912;\n        _937 = _861 + (_921 * max(0.0, dot(_913, _536)));\n        _938 = _860 + (_921 * pow(max(0.0, dot(normalize(_533 + _913), _536)), _Shininess * 128.0));\n    }\n    else\n    {\n        _937 = _861;\n        _938 = _860;\n    }\n    highp vec3 _1015 = vec3(0.0);\n    highp vec3 _1016 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _990 = 0.0;\n        highp vec3 _991 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _990 = 1.0;\n            _991 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _960 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _962 = max(dot(_960, _960), 6.103515625e-05);\n            highp vec3 _964 = _960 * inversesqrt(_962);\n            highp float _984 = clamp((dot(u_spotDirFA[2].xyz, _964) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _990 = ((1.0 / _962) * clamp((_962 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_984 * _984);\n            _991 = _964;\n        }\n        highp vec3 _999 = u_lightColorFA[2].xyz * _990;\n        _1015 = _937 + (_999 * max(0.0, dot(_991, _536)));\n        _1016 = _938 + (_999 * pow(max(0.0, dot(normalize(_533 + _991), _536)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1015 = _937;\n        _1016 = _938;\n    }\n    highp vec3 _1093 = vec3(0.0);\n    highp vec3 _1094 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1068 = 0.0;\n        highp vec3 _1069 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1068 = 1.0;\n            _1069 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1038 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1040 = max(dot(_1038, _1038), 6.103515625e-05);\n            highp vec3 _1042 = _1038 * inversesqrt(_1040);\n            highp float _1062 = clamp((dot(u_spotDirFA[3].xyz, _1042) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1068 = ((1.0 / _1040) * clamp((_1040 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1062 * _1062);\n            _1069 = _1042;\n        }\n        highp vec3 _1077 = u_lightColorFA[3].xyz * _1068;\n        _1093 = _1015 + (_1077 * max(0.0, dot(_1069, _536)));\n        _1094 = _1016 + (_1077 * pow(max(0.0, dot(normalize(_533 + _1069), _536)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1093 = _1015;\n        _1094 = _1016;\n    }\n    highp vec4 _583 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _602 = vec4(_522.xyz * (_1093 + (_1094 * (_583.xyz * _SpecColor.xyz))), _524);\n    highp float _745 = length(varying_positionCamera_Fog);\n    highp float _848 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _848 = (u_fogInfos.z - _745) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _849 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _849 = 1.0 / pow(2.7182800769805908203125, _745 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _850 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _850 = 1.0 / pow(2.7182800769805908203125, ((_745 * _745) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _850 = 1.0;\n            }\n            _849 = _850;\n        }\n        _848 = _849;\n    }\n    highp float _791 = clamp(_848, 0.0, 1.0);\n    highp vec3 _800 = (_602.xyz * _791) + (u_fogColor * (1.0 - _791));\n    gl_FragData[0] = vec4(_800.x, _800.y, _800.z, _602.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\n\nvoid main()\n{\n    int _707 = int(a_boneIndex.x) * 3;\n    int _712 = _707 + 1;\n    int _716 = _707 + 2;\n    int _758 = int(a_boneIndex.y) * 3;\n    int _763 = _758 + 1;\n    int _767 = _758 + 2;\n    int _809 = int(a_boneIndex.z) * 3;\n    int _814 = _809 + 1;\n    int _818 = _809 + 2;\n    int _860 = int(a_boneIndex.w) * 3;\n    int _865 = _860 + 1;\n    int _869 = _860 + 2;\n    mat4 _608 = mat4(vec4(u_boneOffsetMatrix[_707].xyz, 0.0), vec4(u_boneOffsetMatrix[_712].xyz, 0.0), vec4(u_boneOffsetMatrix[_716].xyz, 0.0), vec4(u_boneOffsetMatrix[_707].w, u_boneOffsetMatrix[_712].w, u_boneOffsetMatrix[_716].w, 1.0)) * a_boneWeight.x;\n    mat4 _612 = mat4(vec4(u_boneOffsetMatrix[_758].xyz, 0.0), vec4(u_boneOffsetMatrix[_763].xyz, 0.0), vec4(u_boneOffsetMatrix[_767].xyz, 0.0), vec4(u_boneOffsetMatrix[_758].w, u_boneOffsetMatrix[_763].w, u_boneOffsetMatrix[_767].w, 1.0)) * a_boneWeight.y;\n    mat4 _630 = mat4(vec4(u_boneOffsetMatrix[_809].xyz, 0.0), vec4(u_boneOffsetMatrix[_814].xyz, 0.0), vec4(u_boneOffsetMatrix[_818].xyz, 0.0), vec4(u_boneOffsetMatrix[_809].w, u_boneOffsetMatrix[_814].w, u_boneOffsetMatrix[_818].w, 1.0)) * a_boneWeight.z;\n    mat4 _648 = mat4(vec4(u_boneOffsetMatrix[_860].xyz, 0.0), vec4(u_boneOffsetMatrix[_865].xyz, 0.0), vec4(u_boneOffsetMatrix[_869].xyz, 0.0), vec4(u_boneOffsetMatrix[_860].w, u_boneOffsetMatrix[_865].w, u_boneOffsetMatrix[_869].w, 1.0)) * a_boneWeight.w;\n    vec4 _652 = ((_608[0] + _612[0]) + _630[0]) + _648[0];\n    vec4 _655 = ((_608[1] + _612[1]) + _630[1]) + _648[1];\n    vec4 _658 = ((_608[2] + _612[2]) + _630[2]) + _648[2];\n    vec4 _907 = u_world * (mat4(_652, _655, _658, ((_608[3] + _612[3]) + _630[3]) + _648[3]) * a_position);\n    gl_Position = u_projection * (u_view * _907);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _907.xyz);\n    varying_normalWS = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_652.xyz, _655.xyz, _658.xyz) * a_normal));\n    varying_positionWS = _907;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\n\nvoid main()\n{\n    highp vec4 _410 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _418 = (_410 * _Color) * _AlbedoIntensity;\n    highp vec3 _421 = normalize(varying_ViewDir);\n    highp vec3 _424 = normalize(varying_normalWS);\n    highp vec3 _660 = vec3(0.0);\n    highp vec3 _661 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _654 = vec3(0.0);\n        highp float _655 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _655 = 1.0;\n            _654 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _514 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _518 = max(dot(_514, _514), 6.103515625e-05);\n            highp vec3 _522 = _514 * inversesqrt(_518);\n            highp float _582 = clamp((dot(u_spotDirFA[0].xyz, _522) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _655 = ((1.0 / _518) * clamp((_518 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_582 * _582);\n            _654 = _522;\n        }\n        highp vec3 _445 = u_lightColorFA[0].xyz * _655;\n        _661 = _445 * max(0.0, dot(_654, _424));\n        _660 = _445 * pow(max(0.0, dot(normalize(_421 + _654), _424)), _Shininess * 128.0);\n    }\n    else\n    {\n        _661 = vec3(0.0);\n        _660 = vec3(0.0);\n    }\n    highp vec3 _737 = vec3(0.0);\n    highp vec3 _738 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _712 = 0.0;\n        highp vec3 _713 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _712 = 1.0;\n            _713 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _682 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _684 = max(dot(_682, _682), 6.103515625e-05);\n            highp vec3 _686 = _682 * inversesqrt(_684);\n            highp float _706 = clamp((dot(u_spotDirFA[1].xyz, _686) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _712 = ((1.0 / _684) * clamp((_684 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_706 * _706);\n            _713 = _686;\n        }\n        highp vec3 _721 = u_lightColorFA[1].xyz * _712;\n        _737 = _661 + (_721 * max(0.0, dot(_713, _424)));\n        _738 = _660 + (_721 * pow(max(0.0, dot(normalize(_421 + _713), _424)), _Shininess * 128.0));\n    }\n    else\n    {\n        _737 = _661;\n        _738 = _660;\n    }\n    highp vec3 _815 = vec3(0.0);\n    highp vec3 _816 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _790 = 0.0;\n        highp vec3 _791 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _790 = 1.0;\n            _791 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _760 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _762 = max(dot(_760, _760), 6.103515625e-05);\n            highp vec3 _764 = _760 * inversesqrt(_762);\n            highp float _784 = clamp((dot(u_spotDirFA[2].xyz, _764) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _790 = ((1.0 / _762) * clamp((_762 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_784 * _784);\n            _791 = _764;\n        }\n        highp vec3 _799 = u_lightColorFA[2].xyz * _790;\n        _815 = _737 + (_799 * max(0.0, dot(_791, _424)));\n        _816 = _738 + (_799 * pow(max(0.0, dot(normalize(_421 + _791), _424)), _Shininess * 128.0));\n    }\n    else\n    {\n        _815 = _737;\n        _816 = _738;\n    }\n    highp vec3 _893 = vec3(0.0);\n    highp vec3 _894 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _868 = 0.0;\n        highp vec3 _869 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _868 = 1.0;\n            _869 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _838 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _840 = max(dot(_838, _838), 6.103515625e-05);\n            highp vec3 _842 = _838 * inversesqrt(_840);\n            highp float _862 = clamp((dot(u_spotDirFA[3].xyz, _842) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _868 = ((1.0 / _840) * clamp((_840 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_862 * _862);\n            _869 = _842;\n        }\n        highp vec3 _877 = u_lightColorFA[3].xyz * _868;\n        _893 = _815 + (_877 * max(0.0, dot(_869, _424)));\n        _894 = _816 + (_877 * pow(max(0.0, dot(normalize(_421 + _869), _424)), _Shininess * 128.0));\n    }\n    else\n    {\n        _893 = _815;\n        _894 = _816;\n    }\n    gl_FragData[0] = vec4(_418.xyz * (_893 + (_894 * (_SpecColor.xyz * _410.w))), _418.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_tangentWS;\nvarying vec3 varying_bitangentWS;\n\nvoid main()\n{\n    vec4 _485 = u_world * a_position;\n    mat3 _505 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _508 = normalize(_505 * a_normal);\n    vec3 _522 = normalize(_505 * a_tangent.xyz);\n    gl_Position = u_projection * (u_view * _485);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _485.xyz);\n    varying_normalWS = _508;\n    varying_positionWS = _485;\n    varying_positionCamera_Fog = (u_view * vec4(_485.xyz, 1.0)).xyz;\n    varying_tangentWS = _522;\n    varying_bitangentWS = cross(_522, _508) * a_tangent.w;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _586 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _594 = (_586 * _Color) * _AlbedoIntensity;\n    highp float _596 = _594.w;\n    if ((_596 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _605 = normalize(varying_ViewDir);\n    highp vec4 _614 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _715 = (_614.xy - vec2(0.5)) * 2.0;\n    highp vec3 _731 = vec3(_715, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_715, _715)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _989 = vec3(0.0);\n    highp vec3 _990 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _983 = vec3(0.0);\n        highp float _984 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _984 = 1.0;\n            _983 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _759 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _763 = max(dot(_759, _759), 6.103515625e-05);\n            highp vec3 _767 = _759 * inversesqrt(_763);\n            highp float _827 = clamp((dot(u_spotDirFA[0].xyz, _767) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _984 = ((1.0 / _763) * clamp((_763 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_827 * _827);\n            _983 = _767;\n        }\n        highp vec3 _657 = u_lightColorFA[0].xyz * _984;\n        _990 = _657 * max(0.0, dot(_983, _731));\n        _989 = _657 * pow(max(0.0, dot(normalize(_605 + _983), _731)), _Shininess * 128.0);\n    }\n    else\n    {\n        _990 = vec3(0.0);\n        _989 = vec3(0.0);\n    }\n    highp vec3 _1067 = vec3(0.0);\n    highp vec3 _1068 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _1042 = 0.0;\n        highp vec3 _1043 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _1042 = 1.0;\n            _1043 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _1012 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _1014 = max(dot(_1012, _1012), 6.103515625e-05);\n            highp vec3 _1016 = _1012 * inversesqrt(_1014);\n            highp float _1036 = clamp((dot(u_spotDirFA[1].xyz, _1016) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _1042 = ((1.0 / _1014) * clamp((_1014 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_1036 * _1036);\n            _1043 = _1016;\n        }\n        highp vec3 _1051 = u_lightColorFA[1].xyz * _1042;\n        _1067 = _990 + (_1051 * max(0.0, dot(_1043, _731)));\n        _1068 = _989 + (_1051 * pow(max(0.0, dot(normalize(_605 + _1043), _731)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1067 = _990;\n        _1068 = _989;\n    }\n    highp vec3 _1145 = vec3(0.0);\n    highp vec3 _1146 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _1120 = 0.0;\n        highp vec3 _1121 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _1120 = 1.0;\n            _1121 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _1090 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _1092 = max(dot(_1090, _1090), 6.103515625e-05);\n            highp vec3 _1094 = _1090 * inversesqrt(_1092);\n            highp float _1114 = clamp((dot(u_spotDirFA[2].xyz, _1094) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _1120 = ((1.0 / _1092) * clamp((_1092 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_1114 * _1114);\n            _1121 = _1094;\n        }\n        highp vec3 _1129 = u_lightColorFA[2].xyz * _1120;\n        _1145 = _1067 + (_1129 * max(0.0, dot(_1121, _731)));\n        _1146 = _1068 + (_1129 * pow(max(0.0, dot(normalize(_605 + _1121), _731)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1145 = _1067;\n        _1146 = _1068;\n    }\n    highp vec3 _1223 = vec3(0.0);\n    highp vec3 _1224 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1198 = 0.0;\n        highp vec3 _1199 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1198 = 1.0;\n            _1199 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1168 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1170 = max(dot(_1168, _1168), 6.103515625e-05);\n            highp vec3 _1172 = _1168 * inversesqrt(_1170);\n            highp float _1192 = clamp((dot(u_spotDirFA[3].xyz, _1172) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1198 = ((1.0 / _1170) * clamp((_1170 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1192 * _1192);\n            _1199 = _1172;\n        }\n        highp vec3 _1207 = u_lightColorFA[3].xyz * _1198;\n        _1223 = _1145 + (_1207 * max(0.0, dot(_1199, _731)));\n        _1224 = _1146 + (_1207 * pow(max(0.0, dot(normalize(_605 + _1199), _731)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1223 = _1145;\n        _1224 = _1146;\n    }\n    highp vec4 _697 = vec4(_594.xyz * (_1223 + (_1224 * (_SpecColor.xyz * _586.w))), _596);\n    highp float _865 = length(varying_positionCamera_Fog);\n    highp float _977 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _977 = (u_fogInfos.z - _865) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _978 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _978 = 1.0 / pow(2.7182800769805908203125, _865 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _979 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _979 = 1.0 / pow(2.7182800769805908203125, ((_865 * _865) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _979 = 1.0;\n            }\n            _978 = _979;\n        }\n        _977 = _978;\n    }\n    highp float _911 = clamp(_977, 0.0, 1.0);\n    highp vec3 _920 = (_697.xyz * _911) + (u_fogColor * (1.0 - _911));\n    gl_FragData[0] = vec4(_920.x, _920.y, _920.z, _697.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_tangentWS;\nvarying vec3 varying_bitangentWS;\n\nvoid main()\n{\n    int _776 = int(a_boneIndex.x) * 3;\n    int _781 = _776 + 1;\n    int _785 = _776 + 2;\n    int _827 = int(a_boneIndex.y) * 3;\n    int _832 = _827 + 1;\n    int _836 = _827 + 2;\n    int _878 = int(a_boneIndex.z) * 3;\n    int _883 = _878 + 1;\n    int _887 = _878 + 2;\n    int _929 = int(a_boneIndex.w) * 3;\n    int _934 = _929 + 1;\n    int _938 = _929 + 2;\n    mat4 _677 = mat4(vec4(u_boneOffsetMatrix[_776].xyz, 0.0), vec4(u_boneOffsetMatrix[_781].xyz, 0.0), vec4(u_boneOffsetMatrix[_785].xyz, 0.0), vec4(u_boneOffsetMatrix[_776].w, u_boneOffsetMatrix[_781].w, u_boneOffsetMatrix[_785].w, 1.0)) * a_boneWeight.x;\n    mat4 _681 = mat4(vec4(u_boneOffsetMatrix[_827].xyz, 0.0), vec4(u_boneOffsetMatrix[_832].xyz, 0.0), vec4(u_boneOffsetMatrix[_836].xyz, 0.0), vec4(u_boneOffsetMatrix[_827].w, u_boneOffsetMatrix[_832].w, u_boneOffsetMatrix[_836].w, 1.0)) * a_boneWeight.y;\n    mat4 _699 = mat4(vec4(u_boneOffsetMatrix[_878].xyz, 0.0), vec4(u_boneOffsetMatrix[_883].xyz, 0.0), vec4(u_boneOffsetMatrix[_887].xyz, 0.0), vec4(u_boneOffsetMatrix[_878].w, u_boneOffsetMatrix[_883].w, u_boneOffsetMatrix[_887].w, 1.0)) * a_boneWeight.z;\n    mat4 _717 = mat4(vec4(u_boneOffsetMatrix[_929].xyz, 0.0), vec4(u_boneOffsetMatrix[_934].xyz, 0.0), vec4(u_boneOffsetMatrix[_938].xyz, 0.0), vec4(u_boneOffsetMatrix[_929].w, u_boneOffsetMatrix[_934].w, u_boneOffsetMatrix[_938].w, 1.0)) * a_boneWeight.w;\n    vec4 _721 = ((_677[0] + _681[0]) + _699[0]) + _717[0];\n    vec4 _724 = ((_677[1] + _681[1]) + _699[1]) + _717[1];\n    vec4 _727 = ((_677[2] + _681[2]) + _699[2]) + _717[2];\n    mat3 _739 = mat3(_721.xyz, _724.xyz, _727.xyz);\n    vec4 _976 = u_world * (mat4(_721, _724, _727, ((_677[3] + _681[3]) + _699[3]) + _717[3]) * a_position);\n    mat3 _996 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _999 = normalize(_996 * (_739 * a_normal));\n    vec3 _1013 = normalize(_996 * (_739 * a_tangent.xyz).xyz);\n    gl_Position = u_projection * (u_view * _976);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _976.xyz);\n    varying_normalWS = _999;\n    varying_positionWS = _976;\n    varying_positionCamera_Fog = (u_view * vec4(_976.xyz, 1.0)).xyz;\n    varying_tangentWS = _1013;\n    varying_bitangentWS = cross(_1013, _999) * a_tangent.w;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _588 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _596 = (_588 * _Color) * _AlbedoIntensity;\n    highp float _598 = _596.w;\n    if ((_598 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _607 = normalize(varying_ViewDir);\n    highp vec4 _616 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _717 = (_616.xy - vec2(0.5)) * 2.0;\n    highp vec3 _733 = vec3(_717, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_717, _717)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _991 = vec3(0.0);\n    highp vec3 _992 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _985 = vec3(0.0);\n        highp float _986 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _986 = 1.0;\n            _985 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _761 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _765 = max(dot(_761, _761), 6.103515625e-05);\n            highp vec3 _769 = _761 * inversesqrt(_765);\n            highp float _829 = clamp((dot(u_spotDirFA[0].xyz, _769) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _986 = ((1.0 / _765) * clamp((_765 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_829 * _829);\n            _985 = _769;\n        }\n        highp vec3 _659 = u_lightColorFA[0].xyz * _986;\n        _992 = _659 * max(0.0, dot(_985, _733));\n        _991 = _659 * pow(max(0.0, dot(normalize(_607 + _985), _733)), _Shininess * 128.0);\n    }\n    else\n    {\n        _992 = vec3(0.0);\n        _991 = vec3(0.0);\n    }\n    highp vec3 _1069 = vec3(0.0);\n    highp vec3 _1070 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _1044 = 0.0;\n        highp vec3 _1045 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _1044 = 1.0;\n            _1045 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _1014 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _1016 = max(dot(_1014, _1014), 6.103515625e-05);\n            highp vec3 _1018 = _1014 * inversesqrt(_1016);\n            highp float _1038 = clamp((dot(u_spotDirFA[1].xyz, _1018) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _1044 = ((1.0 / _1016) * clamp((_1016 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_1038 * _1038);\n            _1045 = _1018;\n        }\n        highp vec3 _1053 = u_lightColorFA[1].xyz * _1044;\n        _1069 = _992 + (_1053 * max(0.0, dot(_1045, _733)));\n        _1070 = _991 + (_1053 * pow(max(0.0, dot(normalize(_607 + _1045), _733)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1069 = _992;\n        _1070 = _991;\n    }\n    highp vec3 _1147 = vec3(0.0);\n    highp vec3 _1148 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _1122 = 0.0;\n        highp vec3 _1123 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _1122 = 1.0;\n            _1123 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _1092 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _1094 = max(dot(_1092, _1092), 6.103515625e-05);\n            highp vec3 _1096 = _1092 * inversesqrt(_1094);\n            highp float _1116 = clamp((dot(u_spotDirFA[2].xyz, _1096) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _1122 = ((1.0 / _1094) * clamp((_1094 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_1116 * _1116);\n            _1123 = _1096;\n        }\n        highp vec3 _1131 = u_lightColorFA[2].xyz * _1122;\n        _1147 = _1069 + (_1131 * max(0.0, dot(_1123, _733)));\n        _1148 = _1070 + (_1131 * pow(max(0.0, dot(normalize(_607 + _1123), _733)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1147 = _1069;\n        _1148 = _1070;\n    }\n    highp vec3 _1225 = vec3(0.0);\n    highp vec3 _1226 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1200 = 0.0;\n        highp vec3 _1201 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1200 = 1.0;\n            _1201 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1170 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1172 = max(dot(_1170, _1170), 6.103515625e-05);\n            highp vec3 _1174 = _1170 * inversesqrt(_1172);\n            highp float _1194 = clamp((dot(u_spotDirFA[3].xyz, _1174) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1200 = ((1.0 / _1172) * clamp((_1172 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1194 * _1194);\n            _1201 = _1174;\n        }\n        highp vec3 _1209 = u_lightColorFA[3].xyz * _1200;\n        _1225 = _1147 + (_1209 * max(0.0, dot(_1201, _733)));\n        _1226 = _1148 + (_1209 * pow(max(0.0, dot(normalize(_607 + _1201), _733)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1225 = _1147;\n        _1226 = _1148;\n    }\n    highp vec4 _699 = vec4(_596.xyz * (_1225 + (_1226 * (_SpecColor.xyz * _588.w))), _598);\n    highp float _867 = length(varying_positionCamera_Fog);\n    highp float _979 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _979 = (u_fogInfos.z - _867) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _980 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _980 = 1.0 / pow(2.7182800769805908203125, _867 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _981 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _981 = 1.0 / pow(2.7182800769805908203125, ((_867 * _867) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _981 = 1.0;\n            }\n            _980 = _981;\n        }\n        _979 = _980;\n    }\n    highp float _913 = clamp(_979, 0.0, 1.0);\n    highp vec3 _922 = (_699.xyz * _913) + (u_fogColor * (1.0 - _913));\n    gl_FragData[0] = vec4(_922.x, _922.y, _922.z, _699.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_tangentWS;\nvarying vec3 varying_bitangentWS;\n\nvoid main()\n{\n    float _833 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _839 = (3.0 * (_833 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _842 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _846 = floor(_839 * _842);\n    float _852 = _839 - (_846 * u_skinnedAnimationMapInfo.x);\n    float _857 = (_846 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _867 = texture2D(u_skinnedAnimationMap, vec2((_852 + 0.5) * _842, _857));\n    vec4 _877 = texture2D(u_skinnedAnimationMap, vec2((_852 + 1.5) * _842, _857));\n    vec4 _887 = texture2D(u_skinnedAnimationMap, vec2((_852 + 2.5) * _842, _857));\n    float _938 = (3.0 * (_833 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _945 = floor(_938 * _842);\n    float _951 = _938 - (_945 * u_skinnedAnimationMapInfo.x);\n    float _956 = (_945 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _966 = texture2D(u_skinnedAnimationMap, vec2((_951 + 0.5) * _842, _956));\n    vec4 _976 = texture2D(u_skinnedAnimationMap, vec2((_951 + 1.5) * _842, _956));\n    vec4 _986 = texture2D(u_skinnedAnimationMap, vec2((_951 + 2.5) * _842, _956));\n    float _1037 = (3.0 * (_833 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1044 = floor(_1037 * _842);\n    float _1050 = _1037 - (_1044 * u_skinnedAnimationMapInfo.x);\n    float _1055 = (_1044 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1065 = texture2D(u_skinnedAnimationMap, vec2((_1050 + 0.5) * _842, _1055));\n    vec4 _1075 = texture2D(u_skinnedAnimationMap, vec2((_1050 + 1.5) * _842, _1055));\n    vec4 _1085 = texture2D(u_skinnedAnimationMap, vec2((_1050 + 2.5) * _842, _1055));\n    float _1136 = (3.0 * (_833 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1143 = floor(_1136 * _842);\n    float _1149 = _1136 - (_1143 * u_skinnedAnimationMapInfo.x);\n    float _1154 = (_1143 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1164 = texture2D(u_skinnedAnimationMap, vec2((_1149 + 0.5) * _842, _1154));\n    vec4 _1174 = texture2D(u_skinnedAnimationMap, vec2((_1149 + 1.5) * _842, _1154));\n    vec4 _1184 = texture2D(u_skinnedAnimationMap, vec2((_1149 + 2.5) * _842, _1154));\n    mat4 _729 = mat4(vec4(_867.xyz, 0.0), vec4(_877.xyz, 0.0), vec4(_887.xyz, 0.0), vec4(_867.w, _877.w, _887.w, 1.0)) * a_boneWeight.x;\n    mat4 _733 = mat4(vec4(_966.xyz, 0.0), vec4(_976.xyz, 0.0), vec4(_986.xyz, 0.0), vec4(_966.w, _976.w, _986.w, 1.0)) * a_boneWeight.y;\n    mat4 _751 = mat4(vec4(_1065.xyz, 0.0), vec4(_1075.xyz, 0.0), vec4(_1085.xyz, 0.0), vec4(_1065.w, _1075.w, _1085.w, 1.0)) * a_boneWeight.z;\n    mat4 _769 = mat4(vec4(_1164.xyz, 0.0), vec4(_1174.xyz, 0.0), vec4(_1184.xyz, 0.0), vec4(_1164.w, _1174.w, _1184.w, 1.0)) * a_boneWeight.w;\n    vec4 _773 = ((_729[0] + _733[0]) + _751[0]) + _769[0];\n    vec4 _776 = ((_729[1] + _733[1]) + _751[1]) + _769[1];\n    vec4 _779 = ((_729[2] + _733[2]) + _751[2]) + _769[2];\n    mat3 _791 = mat3(_773.xyz, _776.xyz, _779.xyz);\n    vec4 _1220 = u_world * (mat4(_773, _776, _779, ((_729[3] + _733[3]) + _751[3]) + _769[3]) * a_position);\n    mat3 _1240 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1243 = normalize(_1240 * (_791 * a_normal));\n    vec3 _1257 = normalize(_1240 * (_791 * a_tangent.xyz).xyz);\n    gl_Position = u_projection * (u_view * _1220);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1220.xyz);\n    varying_normalWS = _1243;\n    varying_positionWS = _1220;\n    varying_positionCamera_Fog = (u_view * vec4(_1220.xyz, 1.0)).xyz;\n    varying_tangentWS = _1257;\n    varying_bitangentWS = cross(_1257, _1243) * a_tangent.w;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_skinnedAnimationMapInfo;\nuniform highp float u_skinnedAnimationInfo;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _589 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _597 = (_589 * _Color) * _AlbedoIntensity;\n    highp float _599 = _597.w;\n    if ((_599 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _608 = normalize(varying_ViewDir);\n    highp vec4 _617 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _718 = (_617.xy - vec2(0.5)) * 2.0;\n    highp vec3 _734 = vec3(_718, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_718, _718)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _992 = vec3(0.0);\n    highp vec3 _993 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _986 = vec3(0.0);\n        highp float _987 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _987 = 1.0;\n            _986 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _762 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _766 = max(dot(_762, _762), 6.103515625e-05);\n            highp vec3 _770 = _762 * inversesqrt(_766);\n            highp float _830 = clamp((dot(u_spotDirFA[0].xyz, _770) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _987 = ((1.0 / _766) * clamp((_766 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_830 * _830);\n            _986 = _770;\n        }\n        highp vec3 _660 = u_lightColorFA[0].xyz * _987;\n        _993 = _660 * max(0.0, dot(_986, _734));\n        _992 = _660 * pow(max(0.0, dot(normalize(_608 + _986), _734)), _Shininess * 128.0);\n    }\n    else\n    {\n        _993 = vec3(0.0);\n        _992 = vec3(0.0);\n    }\n    highp vec3 _1070 = vec3(0.0);\n    highp vec3 _1071 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _1045 = 0.0;\n        highp vec3 _1046 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _1045 = 1.0;\n            _1046 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _1015 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _1017 = max(dot(_1015, _1015), 6.103515625e-05);\n            highp vec3 _1019 = _1015 * inversesqrt(_1017);\n            highp float _1039 = clamp((dot(u_spotDirFA[1].xyz, _1019) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _1045 = ((1.0 / _1017) * clamp((_1017 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_1039 * _1039);\n            _1046 = _1019;\n        }\n        highp vec3 _1054 = u_lightColorFA[1].xyz * _1045;\n        _1070 = _993 + (_1054 * max(0.0, dot(_1046, _734)));\n        _1071 = _992 + (_1054 * pow(max(0.0, dot(normalize(_608 + _1046), _734)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1070 = _993;\n        _1071 = _992;\n    }\n    highp vec3 _1148 = vec3(0.0);\n    highp vec3 _1149 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _1123 = 0.0;\n        highp vec3 _1124 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _1123 = 1.0;\n            _1124 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _1093 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _1095 = max(dot(_1093, _1093), 6.103515625e-05);\n            highp vec3 _1097 = _1093 * inversesqrt(_1095);\n            highp float _1117 = clamp((dot(u_spotDirFA[2].xyz, _1097) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _1123 = ((1.0 / _1095) * clamp((_1095 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_1117 * _1117);\n            _1124 = _1097;\n        }\n        highp vec3 _1132 = u_lightColorFA[2].xyz * _1123;\n        _1148 = _1070 + (_1132 * max(0.0, dot(_1124, _734)));\n        _1149 = _1071 + (_1132 * pow(max(0.0, dot(normalize(_608 + _1124), _734)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1148 = _1070;\n        _1149 = _1071;\n    }\n    highp vec3 _1226 = vec3(0.0);\n    highp vec3 _1227 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1201 = 0.0;\n        highp vec3 _1202 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1201 = 1.0;\n            _1202 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1171 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1173 = max(dot(_1171, _1171), 6.103515625e-05);\n            highp vec3 _1175 = _1171 * inversesqrt(_1173);\n            highp float _1195 = clamp((dot(u_spotDirFA[3].xyz, _1175) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1201 = ((1.0 / _1173) * clamp((_1173 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1195 * _1195);\n            _1202 = _1175;\n        }\n        highp vec3 _1210 = u_lightColorFA[3].xyz * _1201;\n        _1226 = _1148 + (_1210 * max(0.0, dot(_1202, _734)));\n        _1227 = _1149 + (_1210 * pow(max(0.0, dot(normalize(_608 + _1202), _734)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1226 = _1148;\n        _1227 = _1149;\n    }\n    highp vec4 _700 = vec4(_597.xyz * (_1226 + (_1227 * (_SpecColor.xyz * _589.w))), _599);\n    highp float _868 = length(varying_positionCamera_Fog);\n    highp float _980 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _980 = (u_fogInfos.z - _868) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _981 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _981 = 1.0 / pow(2.7182800769805908203125, _868 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _982 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _982 = 1.0 / pow(2.7182800769805908203125, ((_868 * _868) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _982 = 1.0;\n            }\n            _981 = _982;\n        }\n        _980 = _981;\n    }\n    highp float _914 = clamp(_980, 0.0, 1.0);\n    highp vec3 _923 = (_700.xyz * _914) + (u_fogColor * (1.0 - _914));\n    gl_FragData[0] = vec4(_923.x, _923.y, _923.z, _700.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\n\nvoid main()\n{\n    float _764 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _770 = (3.0 * (_764 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _773 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _777 = floor(_770 * _773);\n    float _783 = _770 - (_777 * u_skinnedAnimationMapInfo.x);\n    float _788 = (_777 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _798 = texture2D(u_skinnedAnimationMap, vec2((_783 + 0.5) * _773, _788));\n    vec4 _808 = texture2D(u_skinnedAnimationMap, vec2((_783 + 1.5) * _773, _788));\n    vec4 _818 = texture2D(u_skinnedAnimationMap, vec2((_783 + 2.5) * _773, _788));\n    float _869 = (3.0 * (_764 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _876 = floor(_869 * _773);\n    float _882 = _869 - (_876 * u_skinnedAnimationMapInfo.x);\n    float _887 = (_876 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _897 = texture2D(u_skinnedAnimationMap, vec2((_882 + 0.5) * _773, _887));\n    vec4 _907 = texture2D(u_skinnedAnimationMap, vec2((_882 + 1.5) * _773, _887));\n    vec4 _917 = texture2D(u_skinnedAnimationMap, vec2((_882 + 2.5) * _773, _887));\n    float _968 = (3.0 * (_764 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _975 = floor(_968 * _773);\n    float _981 = _968 - (_975 * u_skinnedAnimationMapInfo.x);\n    float _986 = (_975 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _996 = texture2D(u_skinnedAnimationMap, vec2((_981 + 0.5) * _773, _986));\n    vec4 _1006 = texture2D(u_skinnedAnimationMap, vec2((_981 + 1.5) * _773, _986));\n    vec4 _1016 = texture2D(u_skinnedAnimationMap, vec2((_981 + 2.5) * _773, _986));\n    float _1067 = (3.0 * (_764 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1074 = floor(_1067 * _773);\n    float _1080 = _1067 - (_1074 * u_skinnedAnimationMapInfo.x);\n    float _1085 = (_1074 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1095 = texture2D(u_skinnedAnimationMap, vec2((_1080 + 0.5) * _773, _1085));\n    vec4 _1105 = texture2D(u_skinnedAnimationMap, vec2((_1080 + 1.5) * _773, _1085));\n    vec4 _1115 = texture2D(u_skinnedAnimationMap, vec2((_1080 + 2.5) * _773, _1085));\n    mat4 _660 = mat4(vec4(_798.xyz, 0.0), vec4(_808.xyz, 0.0), vec4(_818.xyz, 0.0), vec4(_798.w, _808.w, _818.w, 1.0)) * a_boneWeight.x;\n    mat4 _664 = mat4(vec4(_897.xyz, 0.0), vec4(_907.xyz, 0.0), vec4(_917.xyz, 0.0), vec4(_897.w, _907.w, _917.w, 1.0)) * a_boneWeight.y;\n    mat4 _682 = mat4(vec4(_996.xyz, 0.0), vec4(_1006.xyz, 0.0), vec4(_1016.xyz, 0.0), vec4(_996.w, _1006.w, _1016.w, 1.0)) * a_boneWeight.z;\n    mat4 _700 = mat4(vec4(_1095.xyz, 0.0), vec4(_1105.xyz, 0.0), vec4(_1115.xyz, 0.0), vec4(_1095.w, _1105.w, _1115.w, 1.0)) * a_boneWeight.w;\n    vec4 _704 = ((_660[0] + _664[0]) + _682[0]) + _700[0];\n    vec4 _707 = ((_660[1] + _664[1]) + _682[1]) + _700[1];\n    vec4 _710 = ((_660[2] + _664[2]) + _682[2]) + _700[2];\n    vec4 _1151 = u_world * (mat4(_704, _707, _710, ((_660[3] + _664[3]) + _682[3]) + _700[3]) * a_position);\n    gl_Position = u_projection * (u_view * _1151);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1151.xyz);\n    varying_normalWS = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_704.xyz, _707.xyz, _710.xyz) * a_normal));\n    varying_positionWS = _1151;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_skinnedAnimationMapInfo;\nuniform highp float u_skinnedAnimationInfo;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\n\nvoid main()\n{\n    highp vec4 _411 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _419 = (_411 * _Color) * _AlbedoIntensity;\n    highp vec3 _422 = normalize(varying_ViewDir);\n    highp vec3 _425 = normalize(varying_normalWS);\n    highp vec3 _661 = vec3(0.0);\n    highp vec3 _662 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _655 = vec3(0.0);\n        highp float _656 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _656 = 1.0;\n            _655 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _515 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _519 = max(dot(_515, _515), 6.103515625e-05);\n            highp vec3 _523 = _515 * inversesqrt(_519);\n            highp float _583 = clamp((dot(u_spotDirFA[0].xyz, _523) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _656 = ((1.0 / _519) * clamp((_519 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_583 * _583);\n            _655 = _523;\n        }\n        highp vec3 _446 = u_lightColorFA[0].xyz * _656;\n        _662 = _446 * max(0.0, dot(_655, _425));\n        _661 = _446 * pow(max(0.0, dot(normalize(_422 + _655), _425)), _Shininess * 128.0);\n    }\n    else\n    {\n        _662 = vec3(0.0);\n        _661 = vec3(0.0);\n    }\n    highp vec3 _738 = vec3(0.0);\n    highp vec3 _739 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _713 = 0.0;\n        highp vec3 _714 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _713 = 1.0;\n            _714 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _683 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _685 = max(dot(_683, _683), 6.103515625e-05);\n            highp vec3 _687 = _683 * inversesqrt(_685);\n            highp float _707 = clamp((dot(u_spotDirFA[1].xyz, _687) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _713 = ((1.0 / _685) * clamp((_685 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_707 * _707);\n            _714 = _687;\n        }\n        highp vec3 _722 = u_lightColorFA[1].xyz * _713;\n        _738 = _662 + (_722 * max(0.0, dot(_714, _425)));\n        _739 = _661 + (_722 * pow(max(0.0, dot(normalize(_422 + _714), _425)), _Shininess * 128.0));\n    }\n    else\n    {\n        _738 = _662;\n        _739 = _661;\n    }\n    highp vec3 _816 = vec3(0.0);\n    highp vec3 _817 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _791 = 0.0;\n        highp vec3 _792 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _791 = 1.0;\n            _792 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _761 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _763 = max(dot(_761, _761), 6.103515625e-05);\n            highp vec3 _765 = _761 * inversesqrt(_763);\n            highp float _785 = clamp((dot(u_spotDirFA[2].xyz, _765) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _791 = ((1.0 / _763) * clamp((_763 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_785 * _785);\n            _792 = _765;\n        }\n        highp vec3 _800 = u_lightColorFA[2].xyz * _791;\n        _816 = _738 + (_800 * max(0.0, dot(_792, _425)));\n        _817 = _739 + (_800 * pow(max(0.0, dot(normalize(_422 + _792), _425)), _Shininess * 128.0));\n    }\n    else\n    {\n        _816 = _738;\n        _817 = _739;\n    }\n    highp vec3 _894 = vec3(0.0);\n    highp vec3 _895 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _869 = 0.0;\n        highp vec3 _870 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _869 = 1.0;\n            _870 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _839 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _841 = max(dot(_839, _839), 6.103515625e-05);\n            highp vec3 _843 = _839 * inversesqrt(_841);\n            highp float _863 = clamp((dot(u_spotDirFA[3].xyz, _843) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _869 = ((1.0 / _841) * clamp((_841 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_863 * _863);\n            _870 = _843;\n        }\n        highp vec3 _878 = u_lightColorFA[3].xyz * _869;\n        _894 = _816 + (_878 * max(0.0, dot(_870, _425)));\n        _895 = _817 + (_878 * pow(max(0.0, dot(normalize(_422 + _870), _425)), _Shininess * 128.0));\n    }\n    else\n    {\n        _894 = _816;\n        _895 = _817;\n    }\n    gl_FragData[0] = vec4(_419.xyz * (_894 + (_895 * (_SpecColor.xyz * _411.w))), _419.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_tangentWS;\nvarying vec3 varying_bitangentWS;\n\nvoid main()\n{\n    vec4 _481 = u_world * a_position;\n    mat3 _501 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _504 = normalize(_501 * a_normal);\n    vec3 _518 = normalize(_501 * a_tangent.xyz);\n    gl_Position = u_projection * (u_view * _481);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _481.xyz);\n    varying_normalWS = _504;\n    varying_positionWS = _481;\n    varying_positionCamera_Fog = (u_view * vec4(_481.xyz, 1.0)).xyz;\n    varying_tangentWS = _518;\n    varying_bitangentWS = cross(_518, _504) * a_tangent.w;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _591 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _599 = (_591 * _Color) * _AlbedoIntensity;\n    highp float _601 = _599.w;\n    if ((_601 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _610 = normalize(varying_ViewDir);\n    highp vec4 _619 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _725 = (_619.xy - vec2(0.5)) * 2.0;\n    highp vec3 _741 = vec3(_725, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_725, _725)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _998 = vec3(0.0);\n    highp vec3 _999 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _992 = vec3(0.0);\n        highp float _993 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _993 = 1.0;\n            _992 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _769 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _773 = max(dot(_769, _769), 6.103515625e-05);\n            highp vec3 _777 = _769 * inversesqrt(_773);\n            highp float _837 = clamp((dot(u_spotDirFA[0].xyz, _777) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _993 = ((1.0 / _773) * clamp((_773 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_837 * _837);\n            _992 = _777;\n        }\n        highp vec3 _662 = u_lightColorFA[0].xyz * _993;\n        _999 = _662 * max(0.0, dot(_992, _741));\n        _998 = _662 * pow(max(0.0, dot(normalize(_610 + _992), _741)), _Shininess * 128.0);\n    }\n    else\n    {\n        _999 = vec3(0.0);\n        _998 = vec3(0.0);\n    }\n    highp vec3 _1076 = vec3(0.0);\n    highp vec3 _1077 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _1051 = 0.0;\n        highp vec3 _1052 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _1051 = 1.0;\n            _1052 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _1021 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _1023 = max(dot(_1021, _1021), 6.103515625e-05);\n            highp vec3 _1025 = _1021 * inversesqrt(_1023);\n            highp float _1045 = clamp((dot(u_spotDirFA[1].xyz, _1025) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _1051 = ((1.0 / _1023) * clamp((_1023 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_1045 * _1045);\n            _1052 = _1025;\n        }\n        highp vec3 _1060 = u_lightColorFA[1].xyz * _1051;\n        _1076 = _999 + (_1060 * max(0.0, dot(_1052, _741)));\n        _1077 = _998 + (_1060 * pow(max(0.0, dot(normalize(_610 + _1052), _741)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1076 = _999;\n        _1077 = _998;\n    }\n    highp vec3 _1154 = vec3(0.0);\n    highp vec3 _1155 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _1129 = 0.0;\n        highp vec3 _1130 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _1129 = 1.0;\n            _1130 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _1099 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _1101 = max(dot(_1099, _1099), 6.103515625e-05);\n            highp vec3 _1103 = _1099 * inversesqrt(_1101);\n            highp float _1123 = clamp((dot(u_spotDirFA[2].xyz, _1103) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _1129 = ((1.0 / _1101) * clamp((_1101 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_1123 * _1123);\n            _1130 = _1103;\n        }\n        highp vec3 _1138 = u_lightColorFA[2].xyz * _1129;\n        _1154 = _1076 + (_1138 * max(0.0, dot(_1130, _741)));\n        _1155 = _1077 + (_1138 * pow(max(0.0, dot(normalize(_610 + _1130), _741)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1154 = _1076;\n        _1155 = _1077;\n    }\n    highp vec3 _1232 = vec3(0.0);\n    highp vec3 _1233 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1207 = 0.0;\n        highp vec3 _1208 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1207 = 1.0;\n            _1208 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1177 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1179 = max(dot(_1177, _1177), 6.103515625e-05);\n            highp vec3 _1181 = _1177 * inversesqrt(_1179);\n            highp float _1201 = clamp((dot(u_spotDirFA[3].xyz, _1181) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1207 = ((1.0 / _1179) * clamp((_1179 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1201 * _1201);\n            _1208 = _1181;\n        }\n        highp vec3 _1216 = u_lightColorFA[3].xyz * _1207;\n        _1232 = _1154 + (_1216 * max(0.0, dot(_1208, _741)));\n        _1233 = _1155 + (_1216 * pow(max(0.0, dot(normalize(_610 + _1208), _741)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1232 = _1154;\n        _1233 = _1155;\n    }\n    highp vec4 _688 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _707 = vec4(_599.xyz * (_1232 + (_1233 * (_688.xyz * _SpecColor.xyz))), _601);\n    highp float _875 = length(varying_positionCamera_Fog);\n    highp float _986 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _986 = (u_fogInfos.z - _875) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _987 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _987 = 1.0 / pow(2.7182800769805908203125, _875 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _988 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _988 = 1.0 / pow(2.7182800769805908203125, ((_875 * _875) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _988 = 1.0;\n            }\n            _987 = _988;\n        }\n        _986 = _987;\n    }\n    highp float _921 = clamp(_986, 0.0, 1.0);\n    highp vec3 _930 = (_707.xyz * _921) + (u_fogColor * (1.0 - _921));\n    gl_FragData[0] = vec4(_930.x, _930.y, _930.z, _707.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_tangentWS;\nvarying vec3 varying_bitangentWS;\n\nvoid main()\n{\n    vec4 _456 = u_world * a_position;\n    mat3 _476 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _479 = normalize(_476 * a_normal);\n    vec3 _493 = normalize(_476 * a_tangent.xyz);\n    gl_Position = u_projection * (u_view * _456);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _456.xyz);\n    varying_normalWS = _479;\n    varying_positionWS = _456;\n    varying_tangentWS = _493;\n    varying_bitangentWS = cross(_493, _479) * a_tangent.w;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _502 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _510 = (_502 * _Color) * _AlbedoIntensity;\n    highp float _512 = _510.w;\n    if ((_512 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _521 = normalize(varying_ViewDir);\n    highp vec4 _530 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _629 = (_530.xy - vec2(0.5)) * 2.0;\n    highp vec3 _645 = vec3(_629, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_629, _629)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _827 = vec3(0.0);\n    highp vec3 _828 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _821 = vec3(0.0);\n        highp float _822 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _822 = 1.0;\n            _821 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _673 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _677 = max(dot(_673, _673), 6.103515625e-05);\n            highp vec3 _681 = _673 * inversesqrt(_677);\n            highp float _741 = clamp((dot(u_spotDirFA[0].xyz, _681) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _822 = ((1.0 / _677) * clamp((_677 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_741 * _741);\n            _821 = _681;\n        }\n        highp vec3 _573 = u_lightColorFA[0].xyz * _822;\n        _828 = _573 * max(0.0, dot(_821, _645));\n        _827 = _573 * pow(max(0.0, dot(normalize(_521 + _821), _645)), _Shininess * 128.0);\n    }\n    else\n    {\n        _828 = vec3(0.0);\n        _827 = vec3(0.0);\n    }\n    highp vec3 _905 = vec3(0.0);\n    highp vec3 _906 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _880 = 0.0;\n        highp vec3 _881 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _880 = 1.0;\n            _881 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _850 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _852 = max(dot(_850, _850), 6.103515625e-05);\n            highp vec3 _854 = _850 * inversesqrt(_852);\n            highp float _874 = clamp((dot(u_spotDirFA[1].xyz, _854) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _880 = ((1.0 / _852) * clamp((_852 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_874 * _874);\n            _881 = _854;\n        }\n        highp vec3 _889 = u_lightColorFA[1].xyz * _880;\n        _905 = _828 + (_889 * max(0.0, dot(_881, _645)));\n        _906 = _827 + (_889 * pow(max(0.0, dot(normalize(_521 + _881), _645)), _Shininess * 128.0));\n    }\n    else\n    {\n        _905 = _828;\n        _906 = _827;\n    }\n    highp vec3 _983 = vec3(0.0);\n    highp vec3 _984 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _958 = 0.0;\n        highp vec3 _959 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _958 = 1.0;\n            _959 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _928 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _930 = max(dot(_928, _928), 6.103515625e-05);\n            highp vec3 _932 = _928 * inversesqrt(_930);\n            highp float _952 = clamp((dot(u_spotDirFA[2].xyz, _932) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _958 = ((1.0 / _930) * clamp((_930 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_952 * _952);\n            _959 = _932;\n        }\n        highp vec3 _967 = u_lightColorFA[2].xyz * _958;\n        _983 = _905 + (_967 * max(0.0, dot(_959, _645)));\n        _984 = _906 + (_967 * pow(max(0.0, dot(normalize(_521 + _959), _645)), _Shininess * 128.0));\n    }\n    else\n    {\n        _983 = _905;\n        _984 = _906;\n    }\n    highp vec3 _1061 = vec3(0.0);\n    highp vec3 _1062 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1036 = 0.0;\n        highp vec3 _1037 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1036 = 1.0;\n            _1037 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1006 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1008 = max(dot(_1006, _1006), 6.103515625e-05);\n            highp vec3 _1010 = _1006 * inversesqrt(_1008);\n            highp float _1030 = clamp((dot(u_spotDirFA[3].xyz, _1010) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1036 = ((1.0 / _1008) * clamp((_1008 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1030 * _1030);\n            _1037 = _1010;\n        }\n        highp vec3 _1045 = u_lightColorFA[3].xyz * _1036;\n        _1061 = _983 + (_1045 * max(0.0, dot(_1037, _645)));\n        _1062 = _984 + (_1045 * pow(max(0.0, dot(normalize(_521 + _1037), _645)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1061 = _983;\n        _1062 = _984;\n    }\n    gl_FragData[0] = vec4(_510.xyz * (_1061 + (_1062 * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _512);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_skinnedAnimationMapInfo;\nuniform highp float u_skinnedAnimationInfo;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _500 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _508 = (_500 * _Color) * _AlbedoIntensity;\n    highp vec3 _511 = normalize(varying_ViewDir);\n    highp vec3 _514 = normalize(varying_normalWS);\n    highp vec3 _832 = vec3(0.0);\n    highp vec3 _833 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _826 = vec3(0.0);\n        highp float _827 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _827 = 1.0;\n            _826 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _611 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _615 = max(dot(_611, _611), 6.103515625e-05);\n            highp vec3 _619 = _611 * inversesqrt(_615);\n            highp float _679 = clamp((dot(u_spotDirFA[0].xyz, _619) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _827 = ((1.0 / _615) * clamp((_615 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_679 * _679);\n            _826 = _619;\n        }\n        highp vec3 _535 = u_lightColorFA[0].xyz * _827;\n        _833 = _535 * max(0.0, dot(_826, _514));\n        _832 = _535 * pow(max(0.0, dot(normalize(_511 + _826), _514)), _Shininess * 128.0);\n    }\n    else\n    {\n        _833 = vec3(0.0);\n        _832 = vec3(0.0);\n    }\n    highp vec3 _909 = vec3(0.0);\n    highp vec3 _910 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _884 = 0.0;\n        highp vec3 _885 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _884 = 1.0;\n            _885 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _854 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _856 = max(dot(_854, _854), 6.103515625e-05);\n            highp vec3 _858 = _854 * inversesqrt(_856);\n            highp float _878 = clamp((dot(u_spotDirFA[1].xyz, _858) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _884 = ((1.0 / _856) * clamp((_856 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_878 * _878);\n            _885 = _858;\n        }\n        highp vec3 _893 = u_lightColorFA[1].xyz * _884;\n        _909 = _833 + (_893 * max(0.0, dot(_885, _514)));\n        _910 = _832 + (_893 * pow(max(0.0, dot(normalize(_511 + _885), _514)), _Shininess * 128.0));\n    }\n    else\n    {\n        _909 = _833;\n        _910 = _832;\n    }\n    highp vec3 _987 = vec3(0.0);\n    highp vec3 _988 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _962 = 0.0;\n        highp vec3 _963 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _962 = 1.0;\n            _963 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _932 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _934 = max(dot(_932, _932), 6.103515625e-05);\n            highp vec3 _936 = _932 * inversesqrt(_934);\n            highp float _956 = clamp((dot(u_spotDirFA[2].xyz, _936) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _962 = ((1.0 / _934) * clamp((_934 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_956 * _956);\n            _963 = _936;\n        }\n        highp vec3 _971 = u_lightColorFA[2].xyz * _962;\n        _987 = _909 + (_971 * max(0.0, dot(_963, _514)));\n        _988 = _910 + (_971 * pow(max(0.0, dot(normalize(_511 + _963), _514)), _Shininess * 128.0));\n    }\n    else\n    {\n        _987 = _909;\n        _988 = _910;\n    }\n    highp vec3 _1065 = vec3(0.0);\n    highp vec3 _1066 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1040 = 0.0;\n        highp vec3 _1041 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1040 = 1.0;\n            _1041 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1010 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1012 = max(dot(_1010, _1010), 6.103515625e-05);\n            highp vec3 _1014 = _1010 * inversesqrt(_1012);\n            highp float _1034 = clamp((dot(u_spotDirFA[3].xyz, _1014) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1040 = ((1.0 / _1012) * clamp((_1012 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1034 * _1034);\n            _1041 = _1014;\n        }\n        highp vec3 _1049 = u_lightColorFA[3].xyz * _1040;\n        _1065 = _987 + (_1049 * max(0.0, dot(_1041, _514)));\n        _1066 = _988 + (_1049 * pow(max(0.0, dot(normalize(_511 + _1041), _514)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1065 = _987;\n        _1066 = _988;\n    }\n    highp vec4 _575 = vec4(_508.xyz * (_1065 + (_1066 * (_SpecColor.xyz * _500.w))), _508.w);\n    highp float _717 = length(varying_positionCamera_Fog);\n    highp float _820 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _820 = (u_fogInfos.z - _717) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _821 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _821 = 1.0 / pow(2.7182800769805908203125, _717 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _822 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _822 = 1.0 / pow(2.7182800769805908203125, ((_717 * _717) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _822 = 1.0;\n            }\n            _821 = _822;\n        }\n        _820 = _821;\n    }\n    highp float _763 = clamp(_820, 0.0, 1.0);\n    highp vec3 _772 = (_575.xyz * _763) + (u_fogColor * (1.0 - _763));\n    gl_FragData[0] = vec4(_772.x, _772.y, _772.z, _575.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_tangentWS;\nvarying vec3 varying_bitangentWS;\n\nvoid main()\n{\n    float _808 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _814 = (3.0 * (_808 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _817 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _821 = floor(_814 * _817);\n    float _827 = _814 - (_821 * u_skinnedAnimationMapInfo.x);\n    float _832 = (_821 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _842 = texture2D(u_skinnedAnimationMap, vec2((_827 + 0.5) * _817, _832));\n    vec4 _852 = texture2D(u_skinnedAnimationMap, vec2((_827 + 1.5) * _817, _832));\n    vec4 _862 = texture2D(u_skinnedAnimationMap, vec2((_827 + 2.5) * _817, _832));\n    float _913 = (3.0 * (_808 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _920 = floor(_913 * _817);\n    float _926 = _913 - (_920 * u_skinnedAnimationMapInfo.x);\n    float _931 = (_920 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _941 = texture2D(u_skinnedAnimationMap, vec2((_926 + 0.5) * _817, _931));\n    vec4 _951 = texture2D(u_skinnedAnimationMap, vec2((_926 + 1.5) * _817, _931));\n    vec4 _961 = texture2D(u_skinnedAnimationMap, vec2((_926 + 2.5) * _817, _931));\n    float _1012 = (3.0 * (_808 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1019 = floor(_1012 * _817);\n    float _1025 = _1012 - (_1019 * u_skinnedAnimationMapInfo.x);\n    float _1030 = (_1019 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1040 = texture2D(u_skinnedAnimationMap, vec2((_1025 + 0.5) * _817, _1030));\n    vec4 _1050 = texture2D(u_skinnedAnimationMap, vec2((_1025 + 1.5) * _817, _1030));\n    vec4 _1060 = texture2D(u_skinnedAnimationMap, vec2((_1025 + 2.5) * _817, _1030));\n    float _1111 = (3.0 * (_808 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1118 = floor(_1111 * _817);\n    float _1124 = _1111 - (_1118 * u_skinnedAnimationMapInfo.x);\n    float _1129 = (_1118 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1139 = texture2D(u_skinnedAnimationMap, vec2((_1124 + 0.5) * _817, _1129));\n    vec4 _1149 = texture2D(u_skinnedAnimationMap, vec2((_1124 + 1.5) * _817, _1129));\n    vec4 _1159 = texture2D(u_skinnedAnimationMap, vec2((_1124 + 2.5) * _817, _1129));\n    mat4 _704 = mat4(vec4(_842.xyz, 0.0), vec4(_852.xyz, 0.0), vec4(_862.xyz, 0.0), vec4(_842.w, _852.w, _862.w, 1.0)) * a_boneWeight.x;\n    mat4 _708 = mat4(vec4(_941.xyz, 0.0), vec4(_951.xyz, 0.0), vec4(_961.xyz, 0.0), vec4(_941.w, _951.w, _961.w, 1.0)) * a_boneWeight.y;\n    mat4 _726 = mat4(vec4(_1040.xyz, 0.0), vec4(_1050.xyz, 0.0), vec4(_1060.xyz, 0.0), vec4(_1040.w, _1050.w, _1060.w, 1.0)) * a_boneWeight.z;\n    mat4 _744 = mat4(vec4(_1139.xyz, 0.0), vec4(_1149.xyz, 0.0), vec4(_1159.xyz, 0.0), vec4(_1139.w, _1149.w, _1159.w, 1.0)) * a_boneWeight.w;\n    vec4 _748 = ((_704[0] + _708[0]) + _726[0]) + _744[0];\n    vec4 _751 = ((_704[1] + _708[1]) + _726[1]) + _744[1];\n    vec4 _754 = ((_704[2] + _708[2]) + _726[2]) + _744[2];\n    mat3 _766 = mat3(_748.xyz, _751.xyz, _754.xyz);\n    vec4 _1195 = u_world * (mat4(_748, _751, _754, ((_704[3] + _708[3]) + _726[3]) + _744[3]) * a_position);\n    mat3 _1215 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1218 = normalize(_1215 * (_766 * a_normal));\n    vec3 _1232 = normalize(_1215 * (_766 * a_tangent.xyz).xyz);\n    gl_Position = u_projection * (u_view * _1195);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1195.xyz);\n    varying_normalWS = _1218;\n    varying_positionWS = _1195;\n    varying_tangentWS = _1232;\n    varying_bitangentWS = cross(_1232, _1218) * a_tangent.w;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_skinnedAnimationMapInfo;\nuniform highp float u_skinnedAnimationInfo;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _501 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _509 = (_501 * _Color) * _AlbedoIntensity;\n    highp float _511 = _509.w;\n    if ((_511 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _520 = normalize(varying_ViewDir);\n    highp vec4 _529 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _623 = (_529.xy - vec2(0.5)) * 2.0;\n    highp vec3 _639 = vec3(_623, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_623, _623)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _822 = vec3(0.0);\n    highp vec3 _823 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _816 = vec3(0.0);\n        highp float _817 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _817 = 1.0;\n            _816 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _667 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _671 = max(dot(_667, _667), 6.103515625e-05);\n            highp vec3 _675 = _667 * inversesqrt(_671);\n            highp float _735 = clamp((dot(u_spotDirFA[0].xyz, _675) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _817 = ((1.0 / _671) * clamp((_671 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_735 * _735);\n            _816 = _675;\n        }\n        highp vec3 _572 = u_lightColorFA[0].xyz * _817;\n        _823 = _572 * max(0.0, dot(_816, _639));\n        _822 = _572 * pow(max(0.0, dot(normalize(_520 + _816), _639)), _Shininess * 128.0);\n    }\n    else\n    {\n        _823 = vec3(0.0);\n        _822 = vec3(0.0);\n    }\n    highp vec3 _900 = vec3(0.0);\n    highp vec3 _901 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _875 = 0.0;\n        highp vec3 _876 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _875 = 1.0;\n            _876 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _845 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _847 = max(dot(_845, _845), 6.103515625e-05);\n            highp vec3 _849 = _845 * inversesqrt(_847);\n            highp float _869 = clamp((dot(u_spotDirFA[1].xyz, _849) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _875 = ((1.0 / _847) * clamp((_847 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_869 * _869);\n            _876 = _849;\n        }\n        highp vec3 _884 = u_lightColorFA[1].xyz * _875;\n        _900 = _823 + (_884 * max(0.0, dot(_876, _639)));\n        _901 = _822 + (_884 * pow(max(0.0, dot(normalize(_520 + _876), _639)), _Shininess * 128.0));\n    }\n    else\n    {\n        _900 = _823;\n        _901 = _822;\n    }\n    highp vec3 _978 = vec3(0.0);\n    highp vec3 _979 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _953 = 0.0;\n        highp vec3 _954 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _953 = 1.0;\n            _954 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _923 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _925 = max(dot(_923, _923), 6.103515625e-05);\n            highp vec3 _927 = _923 * inversesqrt(_925);\n            highp float _947 = clamp((dot(u_spotDirFA[2].xyz, _927) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _953 = ((1.0 / _925) * clamp((_925 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_947 * _947);\n            _954 = _927;\n        }\n        highp vec3 _962 = u_lightColorFA[2].xyz * _953;\n        _978 = _900 + (_962 * max(0.0, dot(_954, _639)));\n        _979 = _901 + (_962 * pow(max(0.0, dot(normalize(_520 + _954), _639)), _Shininess * 128.0));\n    }\n    else\n    {\n        _978 = _900;\n        _979 = _901;\n    }\n    highp vec3 _1056 = vec3(0.0);\n    highp vec3 _1057 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1031 = 0.0;\n        highp vec3 _1032 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1031 = 1.0;\n            _1032 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1001 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1003 = max(dot(_1001, _1001), 6.103515625e-05);\n            highp vec3 _1005 = _1001 * inversesqrt(_1003);\n            highp float _1025 = clamp((dot(u_spotDirFA[3].xyz, _1005) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1031 = ((1.0 / _1003) * clamp((_1003 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1025 * _1025);\n            _1032 = _1005;\n        }\n        highp vec3 _1040 = u_lightColorFA[3].xyz * _1031;\n        _1056 = _978 + (_1040 * max(0.0, dot(_1032, _639)));\n        _1057 = _979 + (_1040 * pow(max(0.0, dot(normalize(_520 + _1032), _639)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1056 = _978;\n        _1057 = _979;\n    }\n    gl_FragData[0] = vec4(_509.xyz * (_1056 + (_1057 * (_SpecColor.xyz * _501.w))), _511);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_skinnedAnimationMapInfo;\nuniform highp float u_skinnedAnimationInfo;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\n\nvoid main()\n{\n    highp vec4 _425 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _433 = (_425 * _Color) * _AlbedoIntensity;\n    highp float _435 = _433.w;\n    if ((_435 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _444 = normalize(varying_ViewDir);\n    highp vec3 _447 = normalize(varying_normalWS);\n    highp vec3 _689 = vec3(0.0);\n    highp vec3 _690 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _683 = vec3(0.0);\n        highp float _684 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _684 = 1.0;\n            _683 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _543 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _547 = max(dot(_543, _543), 6.103515625e-05);\n            highp vec3 _551 = _543 * inversesqrt(_547);\n            highp float _611 = clamp((dot(u_spotDirFA[0].xyz, _551) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _684 = ((1.0 / _547) * clamp((_547 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_611 * _611);\n            _683 = _551;\n        }\n        highp vec3 _468 = u_lightColorFA[0].xyz * _684;\n        _690 = _468 * max(0.0, dot(_683, _447));\n        _689 = _468 * pow(max(0.0, dot(normalize(_444 + _683), _447)), _Shininess * 128.0);\n    }\n    else\n    {\n        _690 = vec3(0.0);\n        _689 = vec3(0.0);\n    }\n    highp vec3 _766 = vec3(0.0);\n    highp vec3 _767 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _741 = 0.0;\n        highp vec3 _742 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _741 = 1.0;\n            _742 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _711 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _713 = max(dot(_711, _711), 6.103515625e-05);\n            highp vec3 _715 = _711 * inversesqrt(_713);\n            highp float _735 = clamp((dot(u_spotDirFA[1].xyz, _715) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _741 = ((1.0 / _713) * clamp((_713 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_735 * _735);\n            _742 = _715;\n        }\n        highp vec3 _750 = u_lightColorFA[1].xyz * _741;\n        _766 = _690 + (_750 * max(0.0, dot(_742, _447)));\n        _767 = _689 + (_750 * pow(max(0.0, dot(normalize(_444 + _742), _447)), _Shininess * 128.0));\n    }\n    else\n    {\n        _766 = _690;\n        _767 = _689;\n    }\n    highp vec3 _844 = vec3(0.0);\n    highp vec3 _845 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _819 = 0.0;\n        highp vec3 _820 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _819 = 1.0;\n            _820 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _789 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _791 = max(dot(_789, _789), 6.103515625e-05);\n            highp vec3 _793 = _789 * inversesqrt(_791);\n            highp float _813 = clamp((dot(u_spotDirFA[2].xyz, _793) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _819 = ((1.0 / _791) * clamp((_791 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_813 * _813);\n            _820 = _793;\n        }\n        highp vec3 _828 = u_lightColorFA[2].xyz * _819;\n        _844 = _766 + (_828 * max(0.0, dot(_820, _447)));\n        _845 = _767 + (_828 * pow(max(0.0, dot(normalize(_444 + _820), _447)), _Shininess * 128.0));\n    }\n    else\n    {\n        _844 = _766;\n        _845 = _767;\n    }\n    highp vec3 _922 = vec3(0.0);\n    highp vec3 _923 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _897 = 0.0;\n        highp vec3 _898 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _897 = 1.0;\n            _898 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _867 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _869 = max(dot(_867, _867), 6.103515625e-05);\n            highp vec3 _871 = _867 * inversesqrt(_869);\n            highp float _891 = clamp((dot(u_spotDirFA[3].xyz, _871) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _897 = ((1.0 / _869) * clamp((_869 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_891 * _891);\n            _898 = _871;\n        }\n        highp vec3 _906 = u_lightColorFA[3].xyz * _897;\n        _922 = _844 + (_906 * max(0.0, dot(_898, _447)));\n        _923 = _845 + (_906 * pow(max(0.0, dot(normalize(_444 + _898), _447)), _Shininess * 128.0));\n    }\n    else\n    {\n        _922 = _844;\n        _923 = _845;\n    }\n    gl_FragData[0] = vec4(_433.xyz * (_922 + (_923 * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _435);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    vec4 _441 = u_world * a_position;\n    gl_Position = u_projection * (u_view * _441);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _441.xyz);\n    varying_normalWS = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_positionWS = _441;\n    varying_positionCamera_Fog = (u_view * vec4(_441.xyz, 1.0)).xyz;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _496 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _504 = (_496 * _Color) * _AlbedoIntensity;\n    highp vec3 _507 = normalize(varying_ViewDir);\n    highp vec3 _510 = normalize(varying_normalWS);\n    highp vec3 _828 = vec3(0.0);\n    highp vec3 _829 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _822 = vec3(0.0);\n        highp float _823 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _823 = 1.0;\n            _822 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _607 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _611 = max(dot(_607, _607), 6.103515625e-05);\n            highp vec3 _615 = _607 * inversesqrt(_611);\n            highp float _675 = clamp((dot(u_spotDirFA[0].xyz, _615) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _823 = ((1.0 / _611) * clamp((_611 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_675 * _675);\n            _822 = _615;\n        }\n        highp vec3 _531 = u_lightColorFA[0].xyz * _823;\n        _829 = _531 * max(0.0, dot(_822, _510));\n        _828 = _531 * pow(max(0.0, dot(normalize(_507 + _822), _510)), _Shininess * 128.0);\n    }\n    else\n    {\n        _829 = vec3(0.0);\n        _828 = vec3(0.0);\n    }\n    highp vec3 _905 = vec3(0.0);\n    highp vec3 _906 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _880 = 0.0;\n        highp vec3 _881 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _880 = 1.0;\n            _881 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _850 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _852 = max(dot(_850, _850), 6.103515625e-05);\n            highp vec3 _854 = _850 * inversesqrt(_852);\n            highp float _874 = clamp((dot(u_spotDirFA[1].xyz, _854) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _880 = ((1.0 / _852) * clamp((_852 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_874 * _874);\n            _881 = _854;\n        }\n        highp vec3 _889 = u_lightColorFA[1].xyz * _880;\n        _905 = _829 + (_889 * max(0.0, dot(_881, _510)));\n        _906 = _828 + (_889 * pow(max(0.0, dot(normalize(_507 + _881), _510)), _Shininess * 128.0));\n    }\n    else\n    {\n        _905 = _829;\n        _906 = _828;\n    }\n    highp vec3 _983 = vec3(0.0);\n    highp vec3 _984 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _958 = 0.0;\n        highp vec3 _959 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _958 = 1.0;\n            _959 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _928 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _930 = max(dot(_928, _928), 6.103515625e-05);\n            highp vec3 _932 = _928 * inversesqrt(_930);\n            highp float _952 = clamp((dot(u_spotDirFA[2].xyz, _932) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _958 = ((1.0 / _930) * clamp((_930 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_952 * _952);\n            _959 = _932;\n        }\n        highp vec3 _967 = u_lightColorFA[2].xyz * _958;\n        _983 = _905 + (_967 * max(0.0, dot(_959, _510)));\n        _984 = _906 + (_967 * pow(max(0.0, dot(normalize(_507 + _959), _510)), _Shininess * 128.0));\n    }\n    else\n    {\n        _983 = _905;\n        _984 = _906;\n    }\n    highp vec3 _1061 = vec3(0.0);\n    highp vec3 _1062 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1036 = 0.0;\n        highp vec3 _1037 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1036 = 1.0;\n            _1037 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1006 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1008 = max(dot(_1006, _1006), 6.103515625e-05);\n            highp vec3 _1010 = _1006 * inversesqrt(_1008);\n            highp float _1030 = clamp((dot(u_spotDirFA[3].xyz, _1010) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1036 = ((1.0 / _1008) * clamp((_1008 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1030 * _1030);\n            _1037 = _1010;\n        }\n        highp vec3 _1045 = u_lightColorFA[3].xyz * _1036;\n        _1061 = _983 + (_1045 * max(0.0, dot(_1037, _510)));\n        _1062 = _984 + (_1045 * pow(max(0.0, dot(normalize(_507 + _1037), _510)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1061 = _983;\n        _1062 = _984;\n    }\n    highp vec4 _571 = vec4(_504.xyz * (_1061 + (_1062 * (_SpecColor.xyz * _496.w))), _504.w);\n    highp float _713 = length(varying_positionCamera_Fog);\n    highp float _816 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _816 = (u_fogInfos.z - _713) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _817 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _817 = 1.0 / pow(2.7182800769805908203125, _713 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _818 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _818 = 1.0 / pow(2.7182800769805908203125, ((_713 * _713) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _818 = 1.0;\n            }\n            _817 = _818;\n        }\n        _816 = _817;\n    }\n    highp float _759 = clamp(_816, 0.0, 1.0);\n    highp vec3 _768 = (_571.xyz * _759) + (u_fogColor * (1.0 - _759));\n    gl_FragData[0] = vec4(_768.x, _768.y, _768.z, _571.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _732 = int(a_boneIndex.x) * 3;\n    int _737 = _732 + 1;\n    int _741 = _732 + 2;\n    int _783 = int(a_boneIndex.y) * 3;\n    int _788 = _783 + 1;\n    int _792 = _783 + 2;\n    int _834 = int(a_boneIndex.z) * 3;\n    int _839 = _834 + 1;\n    int _843 = _834 + 2;\n    int _885 = int(a_boneIndex.w) * 3;\n    int _890 = _885 + 1;\n    int _894 = _885 + 2;\n    mat4 _633 = mat4(vec4(u_boneOffsetMatrix[_732].xyz, 0.0), vec4(u_boneOffsetMatrix[_737].xyz, 0.0), vec4(u_boneOffsetMatrix[_741].xyz, 0.0), vec4(u_boneOffsetMatrix[_732].w, u_boneOffsetMatrix[_737].w, u_boneOffsetMatrix[_741].w, 1.0)) * a_boneWeight.x;\n    mat4 _637 = mat4(vec4(u_boneOffsetMatrix[_783].xyz, 0.0), vec4(u_boneOffsetMatrix[_788].xyz, 0.0), vec4(u_boneOffsetMatrix[_792].xyz, 0.0), vec4(u_boneOffsetMatrix[_783].w, u_boneOffsetMatrix[_788].w, u_boneOffsetMatrix[_792].w, 1.0)) * a_boneWeight.y;\n    mat4 _655 = mat4(vec4(u_boneOffsetMatrix[_834].xyz, 0.0), vec4(u_boneOffsetMatrix[_839].xyz, 0.0), vec4(u_boneOffsetMatrix[_843].xyz, 0.0), vec4(u_boneOffsetMatrix[_834].w, u_boneOffsetMatrix[_839].w, u_boneOffsetMatrix[_843].w, 1.0)) * a_boneWeight.z;\n    mat4 _673 = mat4(vec4(u_boneOffsetMatrix[_885].xyz, 0.0), vec4(u_boneOffsetMatrix[_890].xyz, 0.0), vec4(u_boneOffsetMatrix[_894].xyz, 0.0), vec4(u_boneOffsetMatrix[_885].w, u_boneOffsetMatrix[_890].w, u_boneOffsetMatrix[_894].w, 1.0)) * a_boneWeight.w;\n    vec4 _677 = ((_633[0] + _637[0]) + _655[0]) + _673[0];\n    vec4 _680 = ((_633[1] + _637[1]) + _655[1]) + _673[1];\n    vec4 _683 = ((_633[2] + _637[2]) + _655[2]) + _673[2];\n    vec4 _932 = u_world * (mat4(_677, _680, _683, ((_633[3] + _637[3]) + _655[3]) + _673[3]) * a_position);\n    gl_Position = u_projection * (u_view * _932);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _932.xyz);\n    varying_normalWS = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_677.xyz, _680.xyz, _683.xyz) * a_normal));\n    varying_positionWS = _932;\n    varying_positionCamera_Fog = (u_view * vec4(_932.xyz, 1.0)).xyz;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _499 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _507 = (_499 * _Color) * _AlbedoIntensity;\n    highp vec3 _510 = normalize(varying_ViewDir);\n    highp vec3 _513 = normalize(varying_normalWS);\n    highp vec3 _831 = vec3(0.0);\n    highp vec3 _832 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _825 = vec3(0.0);\n        highp float _826 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _826 = 1.0;\n            _825 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _610 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _614 = max(dot(_610, _610), 6.103515625e-05);\n            highp vec3 _618 = _610 * inversesqrt(_614);\n            highp float _678 = clamp((dot(u_spotDirFA[0].xyz, _618) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _826 = ((1.0 / _614) * clamp((_614 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_678 * _678);\n            _825 = _618;\n        }\n        highp vec3 _534 = u_lightColorFA[0].xyz * _826;\n        _832 = _534 * max(0.0, dot(_825, _513));\n        _831 = _534 * pow(max(0.0, dot(normalize(_510 + _825), _513)), _Shininess * 128.0);\n    }\n    else\n    {\n        _832 = vec3(0.0);\n        _831 = vec3(0.0);\n    }\n    highp vec3 _908 = vec3(0.0);\n    highp vec3 _909 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _883 = 0.0;\n        highp vec3 _884 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _883 = 1.0;\n            _884 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _853 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _855 = max(dot(_853, _853), 6.103515625e-05);\n            highp vec3 _857 = _853 * inversesqrt(_855);\n            highp float _877 = clamp((dot(u_spotDirFA[1].xyz, _857) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _883 = ((1.0 / _855) * clamp((_855 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_877 * _877);\n            _884 = _857;\n        }\n        highp vec3 _892 = u_lightColorFA[1].xyz * _883;\n        _908 = _832 + (_892 * max(0.0, dot(_884, _513)));\n        _909 = _831 + (_892 * pow(max(0.0, dot(normalize(_510 + _884), _513)), _Shininess * 128.0));\n    }\n    else\n    {\n        _908 = _832;\n        _909 = _831;\n    }\n    highp vec3 _986 = vec3(0.0);\n    highp vec3 _987 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _961 = 0.0;\n        highp vec3 _962 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _961 = 1.0;\n            _962 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _931 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _933 = max(dot(_931, _931), 6.103515625e-05);\n            highp vec3 _935 = _931 * inversesqrt(_933);\n            highp float _955 = clamp((dot(u_spotDirFA[2].xyz, _935) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _961 = ((1.0 / _933) * clamp((_933 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_955 * _955);\n            _962 = _935;\n        }\n        highp vec3 _970 = u_lightColorFA[2].xyz * _961;\n        _986 = _908 + (_970 * max(0.0, dot(_962, _513)));\n        _987 = _909 + (_970 * pow(max(0.0, dot(normalize(_510 + _962), _513)), _Shininess * 128.0));\n    }\n    else\n    {\n        _986 = _908;\n        _987 = _909;\n    }\n    highp vec3 _1064 = vec3(0.0);\n    highp vec3 _1065 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1039 = 0.0;\n        highp vec3 _1040 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1039 = 1.0;\n            _1040 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1009 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1011 = max(dot(_1009, _1009), 6.103515625e-05);\n            highp vec3 _1013 = _1009 * inversesqrt(_1011);\n            highp float _1033 = clamp((dot(u_spotDirFA[3].xyz, _1013) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1039 = ((1.0 / _1011) * clamp((_1011 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1033 * _1033);\n            _1040 = _1013;\n        }\n        highp vec3 _1048 = u_lightColorFA[3].xyz * _1039;\n        _1064 = _986 + (_1048 * max(0.0, dot(_1040, _513)));\n        _1065 = _987 + (_1048 * pow(max(0.0, dot(normalize(_510 + _1040), _513)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1064 = _986;\n        _1065 = _987;\n    }\n    highp vec4 _574 = vec4(_507.xyz * (_1064 + (_1065 * (_SpecColor.xyz * _499.w))), _507.w);\n    highp float _716 = length(varying_positionCamera_Fog);\n    highp float _819 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _819 = (u_fogInfos.z - _716) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _820 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _820 = 1.0 / pow(2.7182800769805908203125, _716 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _821 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _821 = 1.0 / pow(2.7182800769805908203125, ((_716 * _716) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _821 = 1.0;\n            }\n            _820 = _821;\n        }\n        _819 = _820;\n    }\n    highp float _762 = clamp(_819, 0.0, 1.0);\n    highp vec3 _771 = (_574.xyz * _762) + (u_fogColor * (1.0 - _762));\n    gl_FragData[0] = vec4(_771.x, _771.y, _771.z, _574.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_tangentWS;\nvarying vec3 varying_bitangentWS;\n\nvoid main()\n{\n    vec4 _460 = u_world * a_position;\n    mat3 _480 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _483 = normalize(_480 * a_normal);\n    vec3 _497 = normalize(_480 * a_tangent.xyz);\n    gl_Position = u_projection * (u_view * _460);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _460.xyz);\n    varying_normalWS = _483;\n    varying_positionWS = _460;\n    varying_tangentWS = _497;\n    varying_bitangentWS = cross(_497, _483) * a_tangent.w;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _497 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _505 = (_497 * _Color) * _AlbedoIntensity;\n    highp float _507 = _505.w;\n    if ((_507 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _516 = normalize(varying_ViewDir);\n    highp vec4 _525 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _619 = (_525.xy - vec2(0.5)) * 2.0;\n    highp vec3 _635 = vec3(_619, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_619, _619)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _818 = vec3(0.0);\n    highp vec3 _819 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _812 = vec3(0.0);\n        highp float _813 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _813 = 1.0;\n            _812 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _663 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _667 = max(dot(_663, _663), 6.103515625e-05);\n            highp vec3 _671 = _663 * inversesqrt(_667);\n            highp float _731 = clamp((dot(u_spotDirFA[0].xyz, _671) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _813 = ((1.0 / _667) * clamp((_667 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_731 * _731);\n            _812 = _671;\n        }\n        highp vec3 _568 = u_lightColorFA[0].xyz * _813;\n        _819 = _568 * max(0.0, dot(_812, _635));\n        _818 = _568 * pow(max(0.0, dot(normalize(_516 + _812), _635)), _Shininess * 128.0);\n    }\n    else\n    {\n        _819 = vec3(0.0);\n        _818 = vec3(0.0);\n    }\n    highp vec3 _896 = vec3(0.0);\n    highp vec3 _897 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _871 = 0.0;\n        highp vec3 _872 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _871 = 1.0;\n            _872 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _841 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _843 = max(dot(_841, _841), 6.103515625e-05);\n            highp vec3 _845 = _841 * inversesqrt(_843);\n            highp float _865 = clamp((dot(u_spotDirFA[1].xyz, _845) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _871 = ((1.0 / _843) * clamp((_843 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_865 * _865);\n            _872 = _845;\n        }\n        highp vec3 _880 = u_lightColorFA[1].xyz * _871;\n        _896 = _819 + (_880 * max(0.0, dot(_872, _635)));\n        _897 = _818 + (_880 * pow(max(0.0, dot(normalize(_516 + _872), _635)), _Shininess * 128.0));\n    }\n    else\n    {\n        _896 = _819;\n        _897 = _818;\n    }\n    highp vec3 _974 = vec3(0.0);\n    highp vec3 _975 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _949 = 0.0;\n        highp vec3 _950 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _949 = 1.0;\n            _950 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _919 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _921 = max(dot(_919, _919), 6.103515625e-05);\n            highp vec3 _923 = _919 * inversesqrt(_921);\n            highp float _943 = clamp((dot(u_spotDirFA[2].xyz, _923) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _949 = ((1.0 / _921) * clamp((_921 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_943 * _943);\n            _950 = _923;\n        }\n        highp vec3 _958 = u_lightColorFA[2].xyz * _949;\n        _974 = _896 + (_958 * max(0.0, dot(_950, _635)));\n        _975 = _897 + (_958 * pow(max(0.0, dot(normalize(_516 + _950), _635)), _Shininess * 128.0));\n    }\n    else\n    {\n        _974 = _896;\n        _975 = _897;\n    }\n    highp vec3 _1052 = vec3(0.0);\n    highp vec3 _1053 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1027 = 0.0;\n        highp vec3 _1028 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1027 = 1.0;\n            _1028 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _997 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _999 = max(dot(_997, _997), 6.103515625e-05);\n            highp vec3 _1001 = _997 * inversesqrt(_999);\n            highp float _1021 = clamp((dot(u_spotDirFA[3].xyz, _1001) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1027 = ((1.0 / _999) * clamp((_999 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1021 * _1021);\n            _1028 = _1001;\n        }\n        highp vec3 _1036 = u_lightColorFA[3].xyz * _1027;\n        _1052 = _974 + (_1036 * max(0.0, dot(_1028, _635)));\n        _1053 = _975 + (_1036 * pow(max(0.0, dot(normalize(_516 + _1028), _635)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1052 = _974;\n        _1053 = _975;\n    }\n    gl_FragData[0] = vec4(_505.xyz * (_1052 + (_1053 * (_SpecColor.xyz * _497.w))), _507);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_tangentWS;\nvarying vec3 varying_bitangentWS;\n\nvoid main()\n{\n    int _751 = int(a_boneIndex.x) * 3;\n    int _756 = _751 + 1;\n    int _760 = _751 + 2;\n    int _802 = int(a_boneIndex.y) * 3;\n    int _807 = _802 + 1;\n    int _811 = _802 + 2;\n    int _853 = int(a_boneIndex.z) * 3;\n    int _858 = _853 + 1;\n    int _862 = _853 + 2;\n    int _904 = int(a_boneIndex.w) * 3;\n    int _909 = _904 + 1;\n    int _913 = _904 + 2;\n    mat4 _652 = mat4(vec4(u_boneOffsetMatrix[_751].xyz, 0.0), vec4(u_boneOffsetMatrix[_756].xyz, 0.0), vec4(u_boneOffsetMatrix[_760].xyz, 0.0), vec4(u_boneOffsetMatrix[_751].w, u_boneOffsetMatrix[_756].w, u_boneOffsetMatrix[_760].w, 1.0)) * a_boneWeight.x;\n    mat4 _656 = mat4(vec4(u_boneOffsetMatrix[_802].xyz, 0.0), vec4(u_boneOffsetMatrix[_807].xyz, 0.0), vec4(u_boneOffsetMatrix[_811].xyz, 0.0), vec4(u_boneOffsetMatrix[_802].w, u_boneOffsetMatrix[_807].w, u_boneOffsetMatrix[_811].w, 1.0)) * a_boneWeight.y;\n    mat4 _674 = mat4(vec4(u_boneOffsetMatrix[_853].xyz, 0.0), vec4(u_boneOffsetMatrix[_858].xyz, 0.0), vec4(u_boneOffsetMatrix[_862].xyz, 0.0), vec4(u_boneOffsetMatrix[_853].w, u_boneOffsetMatrix[_858].w, u_boneOffsetMatrix[_862].w, 1.0)) * a_boneWeight.z;\n    mat4 _692 = mat4(vec4(u_boneOffsetMatrix[_904].xyz, 0.0), vec4(u_boneOffsetMatrix[_909].xyz, 0.0), vec4(u_boneOffsetMatrix[_913].xyz, 0.0), vec4(u_boneOffsetMatrix[_904].w, u_boneOffsetMatrix[_909].w, u_boneOffsetMatrix[_913].w, 1.0)) * a_boneWeight.w;\n    vec4 _696 = ((_652[0] + _656[0]) + _674[0]) + _692[0];\n    vec4 _699 = ((_652[1] + _656[1]) + _674[1]) + _692[1];\n    vec4 _702 = ((_652[2] + _656[2]) + _674[2]) + _692[2];\n    mat3 _714 = mat3(_696.xyz, _699.xyz, _702.xyz);\n    vec4 _951 = u_world * (mat4(_696, _699, _702, ((_652[3] + _656[3]) + _674[3]) + _692[3]) * a_position);\n    mat3 _971 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _974 = normalize(_971 * (_714 * a_normal));\n    vec3 _988 = normalize(_971 * (_714 * a_tangent.xyz).xyz);\n    gl_Position = u_projection * (u_view * _951);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _951.xyz);\n    varying_normalWS = _974;\n    varying_positionWS = _951;\n    varying_tangentWS = _988;\n    varying_bitangentWS = cross(_988, _974) * a_tangent.w;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _500 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _508 = (_500 * _Color) * _AlbedoIntensity;\n    highp float _510 = _508.w;\n    if ((_510 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _519 = normalize(varying_ViewDir);\n    highp vec4 _528 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _622 = (_528.xy - vec2(0.5)) * 2.0;\n    highp vec3 _638 = vec3(_622, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_622, _622)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _821 = vec3(0.0);\n    highp vec3 _822 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _815 = vec3(0.0);\n        highp float _816 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _816 = 1.0;\n            _815 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _666 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _670 = max(dot(_666, _666), 6.103515625e-05);\n            highp vec3 _674 = _666 * inversesqrt(_670);\n            highp float _734 = clamp((dot(u_spotDirFA[0].xyz, _674) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _816 = ((1.0 / _670) * clamp((_670 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_734 * _734);\n            _815 = _674;\n        }\n        highp vec3 _571 = u_lightColorFA[0].xyz * _816;\n        _822 = _571 * max(0.0, dot(_815, _638));\n        _821 = _571 * pow(max(0.0, dot(normalize(_519 + _815), _638)), _Shininess * 128.0);\n    }\n    else\n    {\n        _822 = vec3(0.0);\n        _821 = vec3(0.0);\n    }\n    highp vec3 _899 = vec3(0.0);\n    highp vec3 _900 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _874 = 0.0;\n        highp vec3 _875 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _874 = 1.0;\n            _875 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _844 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _846 = max(dot(_844, _844), 6.103515625e-05);\n            highp vec3 _848 = _844 * inversesqrt(_846);\n            highp float _868 = clamp((dot(u_spotDirFA[1].xyz, _848) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _874 = ((1.0 / _846) * clamp((_846 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_868 * _868);\n            _875 = _848;\n        }\n        highp vec3 _883 = u_lightColorFA[1].xyz * _874;\n        _899 = _822 + (_883 * max(0.0, dot(_875, _638)));\n        _900 = _821 + (_883 * pow(max(0.0, dot(normalize(_519 + _875), _638)), _Shininess * 128.0));\n    }\n    else\n    {\n        _899 = _822;\n        _900 = _821;\n    }\n    highp vec3 _977 = vec3(0.0);\n    highp vec3 _978 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _952 = 0.0;\n        highp vec3 _953 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _952 = 1.0;\n            _953 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _922 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _924 = max(dot(_922, _922), 6.103515625e-05);\n            highp vec3 _926 = _922 * inversesqrt(_924);\n            highp float _946 = clamp((dot(u_spotDirFA[2].xyz, _926) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _952 = ((1.0 / _924) * clamp((_924 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_946 * _946);\n            _953 = _926;\n        }\n        highp vec3 _961 = u_lightColorFA[2].xyz * _952;\n        _977 = _899 + (_961 * max(0.0, dot(_953, _638)));\n        _978 = _900 + (_961 * pow(max(0.0, dot(normalize(_519 + _953), _638)), _Shininess * 128.0));\n    }\n    else\n    {\n        _977 = _899;\n        _978 = _900;\n    }\n    highp vec3 _1055 = vec3(0.0);\n    highp vec3 _1056 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1030 = 0.0;\n        highp vec3 _1031 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1030 = 1.0;\n            _1031 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1000 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1002 = max(dot(_1000, _1000), 6.103515625e-05);\n            highp vec3 _1004 = _1000 * inversesqrt(_1002);\n            highp float _1024 = clamp((dot(u_spotDirFA[3].xyz, _1004) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1030 = ((1.0 / _1002) * clamp((_1002 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1024 * _1024);\n            _1031 = _1004;\n        }\n        highp vec3 _1039 = u_lightColorFA[3].xyz * _1030;\n        _1055 = _977 + (_1039 * max(0.0, dot(_1031, _638)));\n        _1056 = _978 + (_1039 * pow(max(0.0, dot(normalize(_519 + _1031), _638)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1055 = _977;\n        _1056 = _978;\n    }\n    gl_FragData[0] = vec4(_508.xyz * (_1055 + (_1056 * (_SpecColor.xyz * _500.w))), _510);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _740 = int(a_boneIndex.x) * 3;\n    int _745 = _740 + 1;\n    int _749 = _740 + 2;\n    int _791 = int(a_boneIndex.y) * 3;\n    int _796 = _791 + 1;\n    int _800 = _791 + 2;\n    int _842 = int(a_boneIndex.z) * 3;\n    int _847 = _842 + 1;\n    int _851 = _842 + 2;\n    int _893 = int(a_boneIndex.w) * 3;\n    int _898 = _893 + 1;\n    int _902 = _893 + 2;\n    mat4 _637 = mat4(vec4(u_boneOffsetMatrix[_740].xyz, 0.0), vec4(u_boneOffsetMatrix[_745].xyz, 0.0), vec4(u_boneOffsetMatrix[_749].xyz, 0.0), vec4(u_boneOffsetMatrix[_740].w, u_boneOffsetMatrix[_745].w, u_boneOffsetMatrix[_749].w, 1.0)) * a_boneWeight.x;\n    mat4 _641 = mat4(vec4(u_boneOffsetMatrix[_791].xyz, 0.0), vec4(u_boneOffsetMatrix[_796].xyz, 0.0), vec4(u_boneOffsetMatrix[_800].xyz, 0.0), vec4(u_boneOffsetMatrix[_791].w, u_boneOffsetMatrix[_796].w, u_boneOffsetMatrix[_800].w, 1.0)) * a_boneWeight.y;\n    mat4 _659 = mat4(vec4(u_boneOffsetMatrix[_842].xyz, 0.0), vec4(u_boneOffsetMatrix[_847].xyz, 0.0), vec4(u_boneOffsetMatrix[_851].xyz, 0.0), vec4(u_boneOffsetMatrix[_842].w, u_boneOffsetMatrix[_847].w, u_boneOffsetMatrix[_851].w, 1.0)) * a_boneWeight.z;\n    mat4 _677 = mat4(vec4(u_boneOffsetMatrix[_893].xyz, 0.0), vec4(u_boneOffsetMatrix[_898].xyz, 0.0), vec4(u_boneOffsetMatrix[_902].xyz, 0.0), vec4(u_boneOffsetMatrix[_893].w, u_boneOffsetMatrix[_898].w, u_boneOffsetMatrix[_902].w, 1.0)) * a_boneWeight.w;\n    mat4 _695 = u_bindTargetWorldInverse * mat4(((_637[0] + _641[0]) + _659[0]) + _677[0], ((_637[1] + _641[1]) + _659[1]) + _677[1], ((_637[2] + _641[2]) + _659[2]) + _677[2], ((_637[3] + _641[3]) + _659[3]) + _677[3]);\n    vec4 _940 = u_world * (_695 * a_position);\n    gl_Position = u_projection * (u_view * _940);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _940.xyz);\n    varying_normalWS = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_695[0].xyz, _695[1].xyz, _695[2].xyz) * a_normal));\n    varying_positionWS = _940;\n    varying_positionCamera_Fog = (u_view * vec4(_940.xyz, 1.0)).xyz;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp mat4 u_bindTargetWorldInverse;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _500 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _508 = (_500 * _Color) * _AlbedoIntensity;\n    highp vec3 _511 = normalize(varying_ViewDir);\n    highp vec3 _514 = normalize(varying_normalWS);\n    highp vec3 _832 = vec3(0.0);\n    highp vec3 _833 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _826 = vec3(0.0);\n        highp float _827 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _827 = 1.0;\n            _826 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _611 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _615 = max(dot(_611, _611), 6.103515625e-05);\n            highp vec3 _619 = _611 * inversesqrt(_615);\n            highp float _679 = clamp((dot(u_spotDirFA[0].xyz, _619) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _827 = ((1.0 / _615) * clamp((_615 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_679 * _679);\n            _826 = _619;\n        }\n        highp vec3 _535 = u_lightColorFA[0].xyz * _827;\n        _833 = _535 * max(0.0, dot(_826, _514));\n        _832 = _535 * pow(max(0.0, dot(normalize(_511 + _826), _514)), _Shininess * 128.0);\n    }\n    else\n    {\n        _833 = vec3(0.0);\n        _832 = vec3(0.0);\n    }\n    highp vec3 _909 = vec3(0.0);\n    highp vec3 _910 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _884 = 0.0;\n        highp vec3 _885 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _884 = 1.0;\n            _885 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _854 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _856 = max(dot(_854, _854), 6.103515625e-05);\n            highp vec3 _858 = _854 * inversesqrt(_856);\n            highp float _878 = clamp((dot(u_spotDirFA[1].xyz, _858) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _884 = ((1.0 / _856) * clamp((_856 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_878 * _878);\n            _885 = _858;\n        }\n        highp vec3 _893 = u_lightColorFA[1].xyz * _884;\n        _909 = _833 + (_893 * max(0.0, dot(_885, _514)));\n        _910 = _832 + (_893 * pow(max(0.0, dot(normalize(_511 + _885), _514)), _Shininess * 128.0));\n    }\n    else\n    {\n        _909 = _833;\n        _910 = _832;\n    }\n    highp vec3 _987 = vec3(0.0);\n    highp vec3 _988 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _962 = 0.0;\n        highp vec3 _963 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _962 = 1.0;\n            _963 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _932 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _934 = max(dot(_932, _932), 6.103515625e-05);\n            highp vec3 _936 = _932 * inversesqrt(_934);\n            highp float _956 = clamp((dot(u_spotDirFA[2].xyz, _936) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _962 = ((1.0 / _934) * clamp((_934 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_956 * _956);\n            _963 = _936;\n        }\n        highp vec3 _971 = u_lightColorFA[2].xyz * _962;\n        _987 = _909 + (_971 * max(0.0, dot(_963, _514)));\n        _988 = _910 + (_971 * pow(max(0.0, dot(normalize(_511 + _963), _514)), _Shininess * 128.0));\n    }\n    else\n    {\n        _987 = _909;\n        _988 = _910;\n    }\n    highp vec3 _1065 = vec3(0.0);\n    highp vec3 _1066 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1040 = 0.0;\n        highp vec3 _1041 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1040 = 1.0;\n            _1041 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1010 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1012 = max(dot(_1010, _1010), 6.103515625e-05);\n            highp vec3 _1014 = _1010 * inversesqrt(_1012);\n            highp float _1034 = clamp((dot(u_spotDirFA[3].xyz, _1014) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1040 = ((1.0 / _1012) * clamp((_1012 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1034 * _1034);\n            _1041 = _1014;\n        }\n        highp vec3 _1049 = u_lightColorFA[3].xyz * _1040;\n        _1065 = _987 + (_1049 * max(0.0, dot(_1041, _514)));\n        _1066 = _988 + (_1049 * pow(max(0.0, dot(normalize(_511 + _1041), _514)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1065 = _987;\n        _1066 = _988;\n    }\n    highp vec4 _575 = vec4(_508.xyz * (_1065 + (_1066 * (_SpecColor.xyz * _500.w))), _508.w);\n    highp float _717 = length(varying_positionCamera_Fog);\n    highp float _820 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _820 = (u_fogInfos.z - _717) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _821 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _821 = 1.0 / pow(2.7182800769805908203125, _717 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _822 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _822 = 1.0 / pow(2.7182800769805908203125, ((_717 * _717) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _822 = 1.0;\n            }\n            _821 = _822;\n        }\n        _820 = _821;\n    }\n    highp float _763 = clamp(_820, 0.0, 1.0);\n    highp vec3 _772 = (_575.xyz * _763) + (u_fogColor * (1.0 - _763));\n    gl_FragData[0] = vec4(_772.x, _772.y, _772.z, _575.w);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_tangentWS;\nvarying vec3 varying_bitangentWS;\n\nvoid main()\n{\n    int _759 = int(a_boneIndex.x) * 3;\n    int _764 = _759 + 1;\n    int _768 = _759 + 2;\n    int _810 = int(a_boneIndex.y) * 3;\n    int _815 = _810 + 1;\n    int _819 = _810 + 2;\n    int _861 = int(a_boneIndex.z) * 3;\n    int _866 = _861 + 1;\n    int _870 = _861 + 2;\n    int _912 = int(a_boneIndex.w) * 3;\n    int _917 = _912 + 1;\n    int _921 = _912 + 2;\n    mat4 _656 = mat4(vec4(u_boneOffsetMatrix[_759].xyz, 0.0), vec4(u_boneOffsetMatrix[_764].xyz, 0.0), vec4(u_boneOffsetMatrix[_768].xyz, 0.0), vec4(u_boneOffsetMatrix[_759].w, u_boneOffsetMatrix[_764].w, u_boneOffsetMatrix[_768].w, 1.0)) * a_boneWeight.x;\n    mat4 _660 = mat4(vec4(u_boneOffsetMatrix[_810].xyz, 0.0), vec4(u_boneOffsetMatrix[_815].xyz, 0.0), vec4(u_boneOffsetMatrix[_819].xyz, 0.0), vec4(u_boneOffsetMatrix[_810].w, u_boneOffsetMatrix[_815].w, u_boneOffsetMatrix[_819].w, 1.0)) * a_boneWeight.y;\n    mat4 _678 = mat4(vec4(u_boneOffsetMatrix[_861].xyz, 0.0), vec4(u_boneOffsetMatrix[_866].xyz, 0.0), vec4(u_boneOffsetMatrix[_870].xyz, 0.0), vec4(u_boneOffsetMatrix[_861].w, u_boneOffsetMatrix[_866].w, u_boneOffsetMatrix[_870].w, 1.0)) * a_boneWeight.z;\n    mat4 _696 = mat4(vec4(u_boneOffsetMatrix[_912].xyz, 0.0), vec4(u_boneOffsetMatrix[_917].xyz, 0.0), vec4(u_boneOffsetMatrix[_921].xyz, 0.0), vec4(u_boneOffsetMatrix[_912].w, u_boneOffsetMatrix[_917].w, u_boneOffsetMatrix[_921].w, 1.0)) * a_boneWeight.w;\n    mat4 _714 = u_bindTargetWorldInverse * mat4(((_656[0] + _660[0]) + _678[0]) + _696[0], ((_656[1] + _660[1]) + _678[1]) + _696[1], ((_656[2] + _660[2]) + _678[2]) + _696[2], ((_656[3] + _660[3]) + _678[3]) + _696[3]);\n    mat3 _722 = mat3(_714[0].xyz, _714[1].xyz, _714[2].xyz);\n    vec4 _959 = u_world * (_714 * a_position);\n    mat3 _979 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _982 = normalize(_979 * (_722 * a_normal));\n    vec3 _996 = normalize(_979 * (_722 * a_tangent.xyz).xyz);\n    gl_Position = u_projection * (u_view * _959);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _959.xyz);\n    varying_normalWS = _982;\n    varying_positionWS = _959;\n    varying_tangentWS = _996;\n    varying_bitangentWS = cross(_996, _982) * a_tangent.w;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp mat4 u_bindTargetWorldInverse;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _501 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _509 = (_501 * _Color) * _AlbedoIntensity;\n    highp float _511 = _509.w;\n    if ((_511 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _520 = normalize(varying_ViewDir);\n    highp vec4 _529 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _623 = (_529.xy - vec2(0.5)) * 2.0;\n    highp vec3 _639 = vec3(_623, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_623, _623)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _822 = vec3(0.0);\n    highp vec3 _823 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _816 = vec3(0.0);\n        highp float _817 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _817 = 1.0;\n            _816 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _667 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _671 = max(dot(_667, _667), 6.103515625e-05);\n            highp vec3 _675 = _667 * inversesqrt(_671);\n            highp float _735 = clamp((dot(u_spotDirFA[0].xyz, _675) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _817 = ((1.0 / _671) * clamp((_671 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_735 * _735);\n            _816 = _675;\n        }\n        highp vec3 _572 = u_lightColorFA[0].xyz * _817;\n        _823 = _572 * max(0.0, dot(_816, _639));\n        _822 = _572 * pow(max(0.0, dot(normalize(_520 + _816), _639)), _Shininess * 128.0);\n    }\n    else\n    {\n        _823 = vec3(0.0);\n        _822 = vec3(0.0);\n    }\n    highp vec3 _900 = vec3(0.0);\n    highp vec3 _901 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _875 = 0.0;\n        highp vec3 _876 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _875 = 1.0;\n            _876 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _845 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _847 = max(dot(_845, _845), 6.103515625e-05);\n            highp vec3 _849 = _845 * inversesqrt(_847);\n            highp float _869 = clamp((dot(u_spotDirFA[1].xyz, _849) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _875 = ((1.0 / _847) * clamp((_847 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_869 * _869);\n            _876 = _849;\n        }\n        highp vec3 _884 = u_lightColorFA[1].xyz * _875;\n        _900 = _823 + (_884 * max(0.0, dot(_876, _639)));\n        _901 = _822 + (_884 * pow(max(0.0, dot(normalize(_520 + _876), _639)), _Shininess * 128.0));\n    }\n    else\n    {\n        _900 = _823;\n        _901 = _822;\n    }\n    highp vec3 _978 = vec3(0.0);\n    highp vec3 _979 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _953 = 0.0;\n        highp vec3 _954 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _953 = 1.0;\n            _954 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _923 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _925 = max(dot(_923, _923), 6.103515625e-05);\n            highp vec3 _927 = _923 * inversesqrt(_925);\n            highp float _947 = clamp((dot(u_spotDirFA[2].xyz, _927) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _953 = ((1.0 / _925) * clamp((_925 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_947 * _947);\n            _954 = _927;\n        }\n        highp vec3 _962 = u_lightColorFA[2].xyz * _953;\n        _978 = _900 + (_962 * max(0.0, dot(_954, _639)));\n        _979 = _901 + (_962 * pow(max(0.0, dot(normalize(_520 + _954), _639)), _Shininess * 128.0));\n    }\n    else\n    {\n        _978 = _900;\n        _979 = _901;\n    }\n    highp vec3 _1056 = vec3(0.0);\n    highp vec3 _1057 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1031 = 0.0;\n        highp vec3 _1032 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1031 = 1.0;\n            _1032 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1001 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1003 = max(dot(_1001, _1001), 6.103515625e-05);\n            highp vec3 _1005 = _1001 * inversesqrt(_1003);\n            highp float _1025 = clamp((dot(u_spotDirFA[3].xyz, _1005) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1031 = ((1.0 / _1003) * clamp((_1003 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1025 * _1025);\n            _1032 = _1005;\n        }\n        highp vec3 _1040 = u_lightColorFA[3].xyz * _1031;\n        _1056 = _978 + (_1040 * max(0.0, dot(_1032, _639)));\n        _1057 = _979 + (_1040 * pow(max(0.0, dot(normalize(_520 + _1032), _639)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1056 = _978;\n        _1057 = _979;\n    }\n    gl_FragData[0] = vec4(_509.xyz * (_1056 + (_1057 * (_SpecColor.xyz * _501.w))), _511);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\n\nvoid main()\n{\n    float _768 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _774 = (3.0 * (_768 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _777 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _781 = floor(_774 * _777);\n    float _787 = _774 - (_781 * u_skinnedAnimationMapInfo.x);\n    float _792 = (_781 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _802 = texture2D(u_skinnedAnimationMap, vec2((_787 + 0.5) * _777, _792));\n    vec4 _812 = texture2D(u_skinnedAnimationMap, vec2((_787 + 1.5) * _777, _792));\n    vec4 _822 = texture2D(u_skinnedAnimationMap, vec2((_787 + 2.5) * _777, _792));\n    float _873 = (3.0 * (_768 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _880 = floor(_873 * _777);\n    float _886 = _873 - (_880 * u_skinnedAnimationMapInfo.x);\n    float _891 = (_880 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _901 = texture2D(u_skinnedAnimationMap, vec2((_886 + 0.5) * _777, _891));\n    vec4 _911 = texture2D(u_skinnedAnimationMap, vec2((_886 + 1.5) * _777, _891));\n    vec4 _921 = texture2D(u_skinnedAnimationMap, vec2((_886 + 2.5) * _777, _891));\n    float _972 = (3.0 * (_768 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _979 = floor(_972 * _777);\n    float _985 = _972 - (_979 * u_skinnedAnimationMapInfo.x);\n    float _990 = (_979 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1000 = texture2D(u_skinnedAnimationMap, vec2((_985 + 0.5) * _777, _990));\n    vec4 _1010 = texture2D(u_skinnedAnimationMap, vec2((_985 + 1.5) * _777, _990));\n    vec4 _1020 = texture2D(u_skinnedAnimationMap, vec2((_985 + 2.5) * _777, _990));\n    float _1071 = (3.0 * (_768 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1078 = floor(_1071 * _777);\n    float _1084 = _1071 - (_1078 * u_skinnedAnimationMapInfo.x);\n    float _1089 = (_1078 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1099 = texture2D(u_skinnedAnimationMap, vec2((_1084 + 0.5) * _777, _1089));\n    vec4 _1109 = texture2D(u_skinnedAnimationMap, vec2((_1084 + 1.5) * _777, _1089));\n    vec4 _1119 = texture2D(u_skinnedAnimationMap, vec2((_1084 + 2.5) * _777, _1089));\n    mat4 _664 = mat4(vec4(_802.xyz, 0.0), vec4(_812.xyz, 0.0), vec4(_822.xyz, 0.0), vec4(_802.w, _812.w, _822.w, 1.0)) * a_boneWeight.x;\n    mat4 _668 = mat4(vec4(_901.xyz, 0.0), vec4(_911.xyz, 0.0), vec4(_921.xyz, 0.0), vec4(_901.w, _911.w, _921.w, 1.0)) * a_boneWeight.y;\n    mat4 _686 = mat4(vec4(_1000.xyz, 0.0), vec4(_1010.xyz, 0.0), vec4(_1020.xyz, 0.0), vec4(_1000.w, _1010.w, _1020.w, 1.0)) * a_boneWeight.z;\n    mat4 _704 = mat4(vec4(_1099.xyz, 0.0), vec4(_1109.xyz, 0.0), vec4(_1119.xyz, 0.0), vec4(_1099.w, _1109.w, _1119.w, 1.0)) * a_boneWeight.w;\n    vec4 _708 = ((_664[0] + _668[0]) + _686[0]) + _704[0];\n    vec4 _711 = ((_664[1] + _668[1]) + _686[1]) + _704[1];\n    vec4 _714 = ((_664[2] + _668[2]) + _686[2]) + _704[2];\n    vec4 _1155 = u_world * (mat4(_708, _711, _714, ((_664[3] + _668[3]) + _686[3]) + _704[3]) * a_position);\n    gl_Position = u_projection * (u_view * _1155);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1155.xyz);\n    varying_normalWS = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_708.xyz, _711.xyz, _714.xyz) * a_normal));\n    varying_positionWS = _1155;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_tangentWS;\nvarying vec3 varying_bitangentWS;\n\nvoid main()\n{\n    float _829 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _835 = (3.0 * (_829 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _838 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _842 = floor(_835 * _838);\n    float _848 = _835 - (_842 * u_skinnedAnimationMapInfo.x);\n    float _853 = (_842 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _863 = texture2D(u_skinnedAnimationMap, vec2((_848 + 0.5) * _838, _853));\n    vec4 _873 = texture2D(u_skinnedAnimationMap, vec2((_848 + 1.5) * _838, _853));\n    vec4 _883 = texture2D(u_skinnedAnimationMap, vec2((_848 + 2.5) * _838, _853));\n    float _934 = (3.0 * (_829 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _941 = floor(_934 * _838);\n    float _947 = _934 - (_941 * u_skinnedAnimationMapInfo.x);\n    float _952 = (_941 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _962 = texture2D(u_skinnedAnimationMap, vec2((_947 + 0.5) * _838, _952));\n    vec4 _972 = texture2D(u_skinnedAnimationMap, vec2((_947 + 1.5) * _838, _952));\n    vec4 _982 = texture2D(u_skinnedAnimationMap, vec2((_947 + 2.5) * _838, _952));\n    float _1033 = (3.0 * (_829 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1040 = floor(_1033 * _838);\n    float _1046 = _1033 - (_1040 * u_skinnedAnimationMapInfo.x);\n    float _1051 = (_1040 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1061 = texture2D(u_skinnedAnimationMap, vec2((_1046 + 0.5) * _838, _1051));\n    vec4 _1071 = texture2D(u_skinnedAnimationMap, vec2((_1046 + 1.5) * _838, _1051));\n    vec4 _1081 = texture2D(u_skinnedAnimationMap, vec2((_1046 + 2.5) * _838, _1051));\n    float _1132 = (3.0 * (_829 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1139 = floor(_1132 * _838);\n    float _1145 = _1132 - (_1139 * u_skinnedAnimationMapInfo.x);\n    float _1150 = (_1139 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1160 = texture2D(u_skinnedAnimationMap, vec2((_1145 + 0.5) * _838, _1150));\n    vec4 _1170 = texture2D(u_skinnedAnimationMap, vec2((_1145 + 1.5) * _838, _1150));\n    vec4 _1180 = texture2D(u_skinnedAnimationMap, vec2((_1145 + 2.5) * _838, _1150));\n    mat4 _725 = mat4(vec4(_863.xyz, 0.0), vec4(_873.xyz, 0.0), vec4(_883.xyz, 0.0), vec4(_863.w, _873.w, _883.w, 1.0)) * a_boneWeight.x;\n    mat4 _729 = mat4(vec4(_962.xyz, 0.0), vec4(_972.xyz, 0.0), vec4(_982.xyz, 0.0), vec4(_962.w, _972.w, _982.w, 1.0)) * a_boneWeight.y;\n    mat4 _747 = mat4(vec4(_1061.xyz, 0.0), vec4(_1071.xyz, 0.0), vec4(_1081.xyz, 0.0), vec4(_1061.w, _1071.w, _1081.w, 1.0)) * a_boneWeight.z;\n    mat4 _765 = mat4(vec4(_1160.xyz, 0.0), vec4(_1170.xyz, 0.0), vec4(_1180.xyz, 0.0), vec4(_1160.w, _1170.w, _1180.w, 1.0)) * a_boneWeight.w;\n    vec4 _769 = ((_725[0] + _729[0]) + _747[0]) + _765[0];\n    vec4 _772 = ((_725[1] + _729[1]) + _747[1]) + _765[1];\n    vec4 _775 = ((_725[2] + _729[2]) + _747[2]) + _765[2];\n    mat3 _787 = mat3(_769.xyz, _772.xyz, _775.xyz);\n    vec4 _1216 = u_world * (mat4(_769, _772, _775, ((_725[3] + _729[3]) + _747[3]) + _765[3]) * a_position);\n    mat3 _1236 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1239 = normalize(_1236 * (_787 * a_normal));\n    vec3 _1253 = normalize(_1236 * (_787 * a_tangent.xyz).xyz);\n    gl_Position = u_projection * (u_view * _1216);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1216.xyz);\n    varying_normalWS = _1239;\n    varying_positionWS = _1216;\n    varying_positionCamera_Fog = (u_view * vec4(_1216.xyz, 1.0)).xyz;\n    varying_tangentWS = _1253;\n    varying_bitangentWS = cross(_1253, _1239) * a_tangent.w;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    float _793 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _799 = (3.0 * (_793 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _802 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _806 = floor(_799 * _802);\n    float _812 = _799 - (_806 * u_skinnedAnimationMapInfo.x);\n    float _817 = (_806 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _827 = texture2D(u_skinnedAnimationMap, vec2((_812 + 0.5) * _802, _817));\n    vec4 _837 = texture2D(u_skinnedAnimationMap, vec2((_812 + 1.5) * _802, _817));\n    vec4 _847 = texture2D(u_skinnedAnimationMap, vec2((_812 + 2.5) * _802, _817));\n    float _898 = (3.0 * (_793 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _905 = floor(_898 * _802);\n    float _911 = _898 - (_905 * u_skinnedAnimationMapInfo.x);\n    float _916 = (_905 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _926 = texture2D(u_skinnedAnimationMap, vec2((_911 + 0.5) * _802, _916));\n    vec4 _936 = texture2D(u_skinnedAnimationMap, vec2((_911 + 1.5) * _802, _916));\n    vec4 _946 = texture2D(u_skinnedAnimationMap, vec2((_911 + 2.5) * _802, _916));\n    float _997 = (3.0 * (_793 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1004 = floor(_997 * _802);\n    float _1010 = _997 - (_1004 * u_skinnedAnimationMapInfo.x);\n    float _1015 = (_1004 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1025 = texture2D(u_skinnedAnimationMap, vec2((_1010 + 0.5) * _802, _1015));\n    vec4 _1035 = texture2D(u_skinnedAnimationMap, vec2((_1010 + 1.5) * _802, _1015));\n    vec4 _1045 = texture2D(u_skinnedAnimationMap, vec2((_1010 + 2.5) * _802, _1015));\n    float _1096 = (3.0 * (_793 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1103 = floor(_1096 * _802);\n    float _1109 = _1096 - (_1103 * u_skinnedAnimationMapInfo.x);\n    float _1114 = (_1103 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1124 = texture2D(u_skinnedAnimationMap, vec2((_1109 + 0.5) * _802, _1114));\n    vec4 _1134 = texture2D(u_skinnedAnimationMap, vec2((_1109 + 1.5) * _802, _1114));\n    vec4 _1144 = texture2D(u_skinnedAnimationMap, vec2((_1109 + 2.5) * _802, _1114));\n    mat4 _689 = mat4(vec4(_827.xyz, 0.0), vec4(_837.xyz, 0.0), vec4(_847.xyz, 0.0), vec4(_827.w, _837.w, _847.w, 1.0)) * a_boneWeight.x;\n    mat4 _693 = mat4(vec4(_926.xyz, 0.0), vec4(_936.xyz, 0.0), vec4(_946.xyz, 0.0), vec4(_926.w, _936.w, _946.w, 1.0)) * a_boneWeight.y;\n    mat4 _711 = mat4(vec4(_1025.xyz, 0.0), vec4(_1035.xyz, 0.0), vec4(_1045.xyz, 0.0), vec4(_1025.w, _1035.w, _1045.w, 1.0)) * a_boneWeight.z;\n    mat4 _729 = mat4(vec4(_1124.xyz, 0.0), vec4(_1134.xyz, 0.0), vec4(_1144.xyz, 0.0), vec4(_1124.w, _1134.w, _1144.w, 1.0)) * a_boneWeight.w;\n    vec4 _733 = ((_689[0] + _693[0]) + _711[0]) + _729[0];\n    vec4 _736 = ((_689[1] + _693[1]) + _711[1]) + _729[1];\n    vec4 _739 = ((_689[2] + _693[2]) + _711[2]) + _729[2];\n    vec4 _1180 = u_world * (mat4(_733, _736, _739, ((_689[3] + _693[3]) + _711[3]) + _729[3]) * a_position);\n    gl_Position = u_projection * (u_view * _1180);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1180.xyz);\n    varying_normalWS = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_733.xyz, _736.xyz, _739.xyz) * a_normal));\n    varying_positionWS = _1180;\n    varying_positionCamera_Fog = (u_view * vec4(_1180.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\n\nvoid main()\n{\n    vec4 _420 = u_world * a_position;\n    gl_Position = u_projection * (u_view * _420);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _420.xyz);\n    varying_normalWS = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_positionWS = _420;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\n\nvoid main()\n{\n    int _711 = int(a_boneIndex.x) * 3;\n    int _716 = _711 + 1;\n    int _720 = _711 + 2;\n    int _762 = int(a_boneIndex.y) * 3;\n    int _767 = _762 + 1;\n    int _771 = _762 + 2;\n    int _813 = int(a_boneIndex.z) * 3;\n    int _818 = _813 + 1;\n    int _822 = _813 + 2;\n    int _864 = int(a_boneIndex.w) * 3;\n    int _869 = _864 + 1;\n    int _873 = _864 + 2;\n    mat4 _612 = mat4(vec4(u_boneOffsetMatrix[_711].xyz, 0.0), vec4(u_boneOffsetMatrix[_716].xyz, 0.0), vec4(u_boneOffsetMatrix[_720].xyz, 0.0), vec4(u_boneOffsetMatrix[_711].w, u_boneOffsetMatrix[_716].w, u_boneOffsetMatrix[_720].w, 1.0)) * a_boneWeight.x;\n    mat4 _616 = mat4(vec4(u_boneOffsetMatrix[_762].xyz, 0.0), vec4(u_boneOffsetMatrix[_767].xyz, 0.0), vec4(u_boneOffsetMatrix[_771].xyz, 0.0), vec4(u_boneOffsetMatrix[_762].w, u_boneOffsetMatrix[_767].w, u_boneOffsetMatrix[_771].w, 1.0)) * a_boneWeight.y;\n    mat4 _634 = mat4(vec4(u_boneOffsetMatrix[_813].xyz, 0.0), vec4(u_boneOffsetMatrix[_818].xyz, 0.0), vec4(u_boneOffsetMatrix[_822].xyz, 0.0), vec4(u_boneOffsetMatrix[_813].w, u_boneOffsetMatrix[_818].w, u_boneOffsetMatrix[_822].w, 1.0)) * a_boneWeight.z;\n    mat4 _652 = mat4(vec4(u_boneOffsetMatrix[_864].xyz, 0.0), vec4(u_boneOffsetMatrix[_869].xyz, 0.0), vec4(u_boneOffsetMatrix[_873].xyz, 0.0), vec4(u_boneOffsetMatrix[_864].w, u_boneOffsetMatrix[_869].w, u_boneOffsetMatrix[_873].w, 1.0)) * a_boneWeight.w;\n    vec4 _656 = ((_612[0] + _616[0]) + _634[0]) + _652[0];\n    vec4 _659 = ((_612[1] + _616[1]) + _634[1]) + _652[1];\n    vec4 _662 = ((_612[2] + _616[2]) + _634[2]) + _652[2];\n    vec4 _911 = u_world * (mat4(_656, _659, _662, ((_612[3] + _616[3]) + _634[3]) + _652[3]) * a_position);\n    gl_Position = u_projection * (u_view * _911);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _911.xyz);\n    varying_normalWS = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_656.xyz, _659.xyz, _662.xyz) * a_normal));\n    varying_positionWS = _911;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_tangentWS;\nvarying vec3 varying_bitangentWS;\n\nvoid main()\n{\n    int _772 = int(a_boneIndex.x) * 3;\n    int _777 = _772 + 1;\n    int _781 = _772 + 2;\n    int _823 = int(a_boneIndex.y) * 3;\n    int _828 = _823 + 1;\n    int _832 = _823 + 2;\n    int _874 = int(a_boneIndex.z) * 3;\n    int _879 = _874 + 1;\n    int _883 = _874 + 2;\n    int _925 = int(a_boneIndex.w) * 3;\n    int _930 = _925 + 1;\n    int _934 = _925 + 2;\n    mat4 _673 = mat4(vec4(u_boneOffsetMatrix[_772].xyz, 0.0), vec4(u_boneOffsetMatrix[_777].xyz, 0.0), vec4(u_boneOffsetMatrix[_781].xyz, 0.0), vec4(u_boneOffsetMatrix[_772].w, u_boneOffsetMatrix[_777].w, u_boneOffsetMatrix[_781].w, 1.0)) * a_boneWeight.x;\n    mat4 _677 = mat4(vec4(u_boneOffsetMatrix[_823].xyz, 0.0), vec4(u_boneOffsetMatrix[_828].xyz, 0.0), vec4(u_boneOffsetMatrix[_832].xyz, 0.0), vec4(u_boneOffsetMatrix[_823].w, u_boneOffsetMatrix[_828].w, u_boneOffsetMatrix[_832].w, 1.0)) * a_boneWeight.y;\n    mat4 _695 = mat4(vec4(u_boneOffsetMatrix[_874].xyz, 0.0), vec4(u_boneOffsetMatrix[_879].xyz, 0.0), vec4(u_boneOffsetMatrix[_883].xyz, 0.0), vec4(u_boneOffsetMatrix[_874].w, u_boneOffsetMatrix[_879].w, u_boneOffsetMatrix[_883].w, 1.0)) * a_boneWeight.z;\n    mat4 _713 = mat4(vec4(u_boneOffsetMatrix[_925].xyz, 0.0), vec4(u_boneOffsetMatrix[_930].xyz, 0.0), vec4(u_boneOffsetMatrix[_934].xyz, 0.0), vec4(u_boneOffsetMatrix[_925].w, u_boneOffsetMatrix[_930].w, u_boneOffsetMatrix[_934].w, 1.0)) * a_boneWeight.w;\n    vec4 _717 = ((_673[0] + _677[0]) + _695[0]) + _713[0];\n    vec4 _720 = ((_673[1] + _677[1]) + _695[1]) + _713[1];\n    vec4 _723 = ((_673[2] + _677[2]) + _695[2]) + _713[2];\n    mat3 _735 = mat3(_717.xyz, _720.xyz, _723.xyz);\n    vec4 _972 = u_world * (mat4(_717, _720, _723, ((_673[3] + _677[3]) + _695[3]) + _713[3]) * a_position);\n    mat3 _992 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _995 = normalize(_992 * (_735 * a_normal));\n    vec3 _1009 = normalize(_992 * (_735 * a_tangent.xyz).xyz);\n    gl_Position = u_projection * (u_view * _972);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _972.xyz);\n    varying_normalWS = _995;\n    varying_positionWS = _972;\n    varying_positionCamera_Fog = (u_view * vec4(_972.xyz, 1.0)).xyz;\n    varying_tangentWS = _1009;\n    varying_bitangentWS = cross(_1009, _995) * a_tangent.w;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\n\nvoid main()\n{\n    int _719 = int(a_boneIndex.x) * 3;\n    int _724 = _719 + 1;\n    int _728 = _719 + 2;\n    int _770 = int(a_boneIndex.y) * 3;\n    int _775 = _770 + 1;\n    int _779 = _770 + 2;\n    int _821 = int(a_boneIndex.z) * 3;\n    int _826 = _821 + 1;\n    int _830 = _821 + 2;\n    int _872 = int(a_boneIndex.w) * 3;\n    int _877 = _872 + 1;\n    int _881 = _872 + 2;\n    mat4 _616 = mat4(vec4(u_boneOffsetMatrix[_719].xyz, 0.0), vec4(u_boneOffsetMatrix[_724].xyz, 0.0), vec4(u_boneOffsetMatrix[_728].xyz, 0.0), vec4(u_boneOffsetMatrix[_719].w, u_boneOffsetMatrix[_724].w, u_boneOffsetMatrix[_728].w, 1.0)) * a_boneWeight.x;\n    mat4 _620 = mat4(vec4(u_boneOffsetMatrix[_770].xyz, 0.0), vec4(u_boneOffsetMatrix[_775].xyz, 0.0), vec4(u_boneOffsetMatrix[_779].xyz, 0.0), vec4(u_boneOffsetMatrix[_770].w, u_boneOffsetMatrix[_775].w, u_boneOffsetMatrix[_779].w, 1.0)) * a_boneWeight.y;\n    mat4 _638 = mat4(vec4(u_boneOffsetMatrix[_821].xyz, 0.0), vec4(u_boneOffsetMatrix[_826].xyz, 0.0), vec4(u_boneOffsetMatrix[_830].xyz, 0.0), vec4(u_boneOffsetMatrix[_821].w, u_boneOffsetMatrix[_826].w, u_boneOffsetMatrix[_830].w, 1.0)) * a_boneWeight.z;\n    mat4 _656 = mat4(vec4(u_boneOffsetMatrix[_872].xyz, 0.0), vec4(u_boneOffsetMatrix[_877].xyz, 0.0), vec4(u_boneOffsetMatrix[_881].xyz, 0.0), vec4(u_boneOffsetMatrix[_872].w, u_boneOffsetMatrix[_877].w, u_boneOffsetMatrix[_881].w, 1.0)) * a_boneWeight.w;\n    mat4 _674 = u_bindTargetWorldInverse * mat4(((_616[0] + _620[0]) + _638[0]) + _656[0], ((_616[1] + _620[1]) + _638[1]) + _656[1], ((_616[2] + _620[2]) + _638[2]) + _656[2], ((_616[3] + _620[3]) + _638[3]) + _656[3]);\n    vec4 _919 = u_world * (_674 * a_position);\n    gl_Position = u_projection * (u_view * _919);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _919.xyz);\n    varying_normalWS = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_674[0].xyz, _674[1].xyz, _674[2].xyz) * a_normal));\n    varying_positionWS = _919;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_positionCamera_Fog;\nvarying vec3 varying_tangentWS;\nvarying vec3 varying_bitangentWS;\n\nvoid main()\n{\n    int _780 = int(a_boneIndex.x) * 3;\n    int _785 = _780 + 1;\n    int _789 = _780 + 2;\n    int _831 = int(a_boneIndex.y) * 3;\n    int _836 = _831 + 1;\n    int _840 = _831 + 2;\n    int _882 = int(a_boneIndex.z) * 3;\n    int _887 = _882 + 1;\n    int _891 = _882 + 2;\n    int _933 = int(a_boneIndex.w) * 3;\n    int _938 = _933 + 1;\n    int _942 = _933 + 2;\n    mat4 _677 = mat4(vec4(u_boneOffsetMatrix[_780].xyz, 0.0), vec4(u_boneOffsetMatrix[_785].xyz, 0.0), vec4(u_boneOffsetMatrix[_789].xyz, 0.0), vec4(u_boneOffsetMatrix[_780].w, u_boneOffsetMatrix[_785].w, u_boneOffsetMatrix[_789].w, 1.0)) * a_boneWeight.x;\n    mat4 _681 = mat4(vec4(u_boneOffsetMatrix[_831].xyz, 0.0), vec4(u_boneOffsetMatrix[_836].xyz, 0.0), vec4(u_boneOffsetMatrix[_840].xyz, 0.0), vec4(u_boneOffsetMatrix[_831].w, u_boneOffsetMatrix[_836].w, u_boneOffsetMatrix[_840].w, 1.0)) * a_boneWeight.y;\n    mat4 _699 = mat4(vec4(u_boneOffsetMatrix[_882].xyz, 0.0), vec4(u_boneOffsetMatrix[_887].xyz, 0.0), vec4(u_boneOffsetMatrix[_891].xyz, 0.0), vec4(u_boneOffsetMatrix[_882].w, u_boneOffsetMatrix[_887].w, u_boneOffsetMatrix[_891].w, 1.0)) * a_boneWeight.z;\n    mat4 _717 = mat4(vec4(u_boneOffsetMatrix[_933].xyz, 0.0), vec4(u_boneOffsetMatrix[_938].xyz, 0.0), vec4(u_boneOffsetMatrix[_942].xyz, 0.0), vec4(u_boneOffsetMatrix[_933].w, u_boneOffsetMatrix[_938].w, u_boneOffsetMatrix[_942].w, 1.0)) * a_boneWeight.w;\n    mat4 _735 = u_bindTargetWorldInverse * mat4(((_677[0] + _681[0]) + _699[0]) + _717[0], ((_677[1] + _681[1]) + _699[1]) + _717[1], ((_677[2] + _681[2]) + _699[2]) + _717[2], ((_677[3] + _681[3]) + _699[3]) + _717[3]);\n    mat3 _743 = mat3(_735[0].xyz, _735[1].xyz, _735[2].xyz);\n    vec4 _980 = u_world * (_735 * a_position);\n    mat3 _1000 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1003 = normalize(_1000 * (_743 * a_normal));\n    vec3 _1017 = normalize(_1000 * (_743 * a_tangent.xyz).xyz);\n    gl_Position = u_projection * (u_view * _980);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _980.xyz);\n    varying_normalWS = _1003;\n    varying_positionWS = _980;\n    varying_positionCamera_Fog = (u_view * vec4(_980.xyz, 1.0)).xyz;\n    varying_tangentWS = _1017;\n    varying_bitangentWS = cross(_1017, _1003) * a_tangent.w;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_skinnedAnimationMapInfo;\nuniform float u_skinnedAnimationInfo;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nuniform highp sampler2D u_skinnedAnimationMap;\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_tangentWS;\nvarying vec3 varying_bitangentWS;\n\nvoid main()\n{\n    float _804 = u_skinnedAnimationInfo * u_skinnedAnimationMapInfo.z;\n    float _810 = (3.0 * (_804 + a_boneIndex.x)) + u_skinnedAnimationMapInfo.w;\n    float _813 = 1.0 / u_skinnedAnimationMapInfo.x;\n    float _817 = floor(_810 * _813);\n    float _823 = _810 - (_817 * u_skinnedAnimationMapInfo.x);\n    float _828 = (_817 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _838 = texture2D(u_skinnedAnimationMap, vec2((_823 + 0.5) * _813, _828));\n    vec4 _848 = texture2D(u_skinnedAnimationMap, vec2((_823 + 1.5) * _813, _828));\n    vec4 _858 = texture2D(u_skinnedAnimationMap, vec2((_823 + 2.5) * _813, _828));\n    float _909 = (3.0 * (_804 + a_boneIndex.y)) + u_skinnedAnimationMapInfo.w;\n    float _916 = floor(_909 * _813);\n    float _922 = _909 - (_916 * u_skinnedAnimationMapInfo.x);\n    float _927 = (_916 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _937 = texture2D(u_skinnedAnimationMap, vec2((_922 + 0.5) * _813, _927));\n    vec4 _947 = texture2D(u_skinnedAnimationMap, vec2((_922 + 1.5) * _813, _927));\n    vec4 _957 = texture2D(u_skinnedAnimationMap, vec2((_922 + 2.5) * _813, _927));\n    float _1008 = (3.0 * (_804 + a_boneIndex.z)) + u_skinnedAnimationMapInfo.w;\n    float _1015 = floor(_1008 * _813);\n    float _1021 = _1008 - (_1015 * u_skinnedAnimationMapInfo.x);\n    float _1026 = (_1015 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1036 = texture2D(u_skinnedAnimationMap, vec2((_1021 + 0.5) * _813, _1026));\n    vec4 _1046 = texture2D(u_skinnedAnimationMap, vec2((_1021 + 1.5) * _813, _1026));\n    vec4 _1056 = texture2D(u_skinnedAnimationMap, vec2((_1021 + 2.5) * _813, _1026));\n    float _1107 = (3.0 * (_804 + a_boneIndex.w)) + u_skinnedAnimationMapInfo.w;\n    float _1114 = floor(_1107 * _813);\n    float _1120 = _1107 - (_1114 * u_skinnedAnimationMapInfo.x);\n    float _1125 = (_1114 + 0.5) / u_skinnedAnimationMapInfo.y;\n    vec4 _1135 = texture2D(u_skinnedAnimationMap, vec2((_1120 + 0.5) * _813, _1125));\n    vec4 _1145 = texture2D(u_skinnedAnimationMap, vec2((_1120 + 1.5) * _813, _1125));\n    vec4 _1155 = texture2D(u_skinnedAnimationMap, vec2((_1120 + 2.5) * _813, _1125));\n    mat4 _700 = mat4(vec4(_838.xyz, 0.0), vec4(_848.xyz, 0.0), vec4(_858.xyz, 0.0), vec4(_838.w, _848.w, _858.w, 1.0)) * a_boneWeight.x;\n    mat4 _704 = mat4(vec4(_937.xyz, 0.0), vec4(_947.xyz, 0.0), vec4(_957.xyz, 0.0), vec4(_937.w, _947.w, _957.w, 1.0)) * a_boneWeight.y;\n    mat4 _722 = mat4(vec4(_1036.xyz, 0.0), vec4(_1046.xyz, 0.0), vec4(_1056.xyz, 0.0), vec4(_1036.w, _1046.w, _1056.w, 1.0)) * a_boneWeight.z;\n    mat4 _740 = mat4(vec4(_1135.xyz, 0.0), vec4(_1145.xyz, 0.0), vec4(_1155.xyz, 0.0), vec4(_1135.w, _1145.w, _1155.w, 1.0)) * a_boneWeight.w;\n    vec4 _744 = ((_700[0] + _704[0]) + _722[0]) + _740[0];\n    vec4 _747 = ((_700[1] + _704[1]) + _722[1]) + _740[1];\n    vec4 _750 = ((_700[2] + _704[2]) + _722[2]) + _740[2];\n    mat3 _762 = mat3(_744.xyz, _747.xyz, _750.xyz);\n    vec4 _1191 = u_world * (mat4(_744, _747, _750, ((_700[3] + _704[3]) + _722[3]) + _740[3]) * a_position);\n    mat3 _1211 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _1214 = normalize(_1211 * (_762 * a_normal));\n    vec3 _1228 = normalize(_1211 * (_762 * a_tangent.xyz).xyz);\n    gl_Position = u_projection * (u_view * _1191);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _1191.xyz);\n    varying_normalWS = _1214;\n    varying_positionWS = _1191;\n    varying_tangentWS = _1228;\n    varying_bitangentWS = cross(_1228, _1214) * a_tangent.w;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    vec4 _445 = u_world * a_position;\n    gl_Position = u_projection * (u_view * _445);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _445.xyz);\n    varying_normalWS = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_positionWS = _445;\n    varying_positionCamera_Fog = (u_view * vec4(_445.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _736 = int(a_boneIndex.x) * 3;\n    int _741 = _736 + 1;\n    int _745 = _736 + 2;\n    int _787 = int(a_boneIndex.y) * 3;\n    int _792 = _787 + 1;\n    int _796 = _787 + 2;\n    int _838 = int(a_boneIndex.z) * 3;\n    int _843 = _838 + 1;\n    int _847 = _838 + 2;\n    int _889 = int(a_boneIndex.w) * 3;\n    int _894 = _889 + 1;\n    int _898 = _889 + 2;\n    mat4 _637 = mat4(vec4(u_boneOffsetMatrix[_736].xyz, 0.0), vec4(u_boneOffsetMatrix[_741].xyz, 0.0), vec4(u_boneOffsetMatrix[_745].xyz, 0.0), vec4(u_boneOffsetMatrix[_736].w, u_boneOffsetMatrix[_741].w, u_boneOffsetMatrix[_745].w, 1.0)) * a_boneWeight.x;\n    mat4 _641 = mat4(vec4(u_boneOffsetMatrix[_787].xyz, 0.0), vec4(u_boneOffsetMatrix[_792].xyz, 0.0), vec4(u_boneOffsetMatrix[_796].xyz, 0.0), vec4(u_boneOffsetMatrix[_787].w, u_boneOffsetMatrix[_792].w, u_boneOffsetMatrix[_796].w, 1.0)) * a_boneWeight.y;\n    mat4 _659 = mat4(vec4(u_boneOffsetMatrix[_838].xyz, 0.0), vec4(u_boneOffsetMatrix[_843].xyz, 0.0), vec4(u_boneOffsetMatrix[_847].xyz, 0.0), vec4(u_boneOffsetMatrix[_838].w, u_boneOffsetMatrix[_843].w, u_boneOffsetMatrix[_847].w, 1.0)) * a_boneWeight.z;\n    mat4 _677 = mat4(vec4(u_boneOffsetMatrix[_889].xyz, 0.0), vec4(u_boneOffsetMatrix[_894].xyz, 0.0), vec4(u_boneOffsetMatrix[_898].xyz, 0.0), vec4(u_boneOffsetMatrix[_889].w, u_boneOffsetMatrix[_894].w, u_boneOffsetMatrix[_898].w, 1.0)) * a_boneWeight.w;\n    vec4 _681 = ((_637[0] + _641[0]) + _659[0]) + _677[0];\n    vec4 _684 = ((_637[1] + _641[1]) + _659[1]) + _677[1];\n    vec4 _687 = ((_637[2] + _641[2]) + _659[2]) + _677[2];\n    vec4 _936 = u_world * (mat4(_681, _684, _687, ((_637[3] + _641[3]) + _659[3]) + _677[3]) * a_position);\n    gl_Position = u_projection * (u_view * _936);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _936.xyz);\n    varying_normalWS = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_681.xyz, _684.xyz, _687.xyz) * a_normal));\n    varying_positionWS = _936;\n    varying_positionCamera_Fog = (u_view * vec4(_936.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_tangentWS;\nvarying vec3 varying_bitangentWS;\n\nvoid main()\n{\n    int _747 = int(a_boneIndex.x) * 3;\n    int _752 = _747 + 1;\n    int _756 = _747 + 2;\n    int _798 = int(a_boneIndex.y) * 3;\n    int _803 = _798 + 1;\n    int _807 = _798 + 2;\n    int _849 = int(a_boneIndex.z) * 3;\n    int _854 = _849 + 1;\n    int _858 = _849 + 2;\n    int _900 = int(a_boneIndex.w) * 3;\n    int _905 = _900 + 1;\n    int _909 = _900 + 2;\n    mat4 _648 = mat4(vec4(u_boneOffsetMatrix[_747].xyz, 0.0), vec4(u_boneOffsetMatrix[_752].xyz, 0.0), vec4(u_boneOffsetMatrix[_756].xyz, 0.0), vec4(u_boneOffsetMatrix[_747].w, u_boneOffsetMatrix[_752].w, u_boneOffsetMatrix[_756].w, 1.0)) * a_boneWeight.x;\n    mat4 _652 = mat4(vec4(u_boneOffsetMatrix[_798].xyz, 0.0), vec4(u_boneOffsetMatrix[_803].xyz, 0.0), vec4(u_boneOffsetMatrix[_807].xyz, 0.0), vec4(u_boneOffsetMatrix[_798].w, u_boneOffsetMatrix[_803].w, u_boneOffsetMatrix[_807].w, 1.0)) * a_boneWeight.y;\n    mat4 _670 = mat4(vec4(u_boneOffsetMatrix[_849].xyz, 0.0), vec4(u_boneOffsetMatrix[_854].xyz, 0.0), vec4(u_boneOffsetMatrix[_858].xyz, 0.0), vec4(u_boneOffsetMatrix[_849].w, u_boneOffsetMatrix[_854].w, u_boneOffsetMatrix[_858].w, 1.0)) * a_boneWeight.z;\n    mat4 _688 = mat4(vec4(u_boneOffsetMatrix[_900].xyz, 0.0), vec4(u_boneOffsetMatrix[_905].xyz, 0.0), vec4(u_boneOffsetMatrix[_909].xyz, 0.0), vec4(u_boneOffsetMatrix[_900].w, u_boneOffsetMatrix[_905].w, u_boneOffsetMatrix[_909].w, 1.0)) * a_boneWeight.w;\n    vec4 _692 = ((_648[0] + _652[0]) + _670[0]) + _688[0];\n    vec4 _695 = ((_648[1] + _652[1]) + _670[1]) + _688[1];\n    vec4 _698 = ((_648[2] + _652[2]) + _670[2]) + _688[2];\n    mat3 _710 = mat3(_692.xyz, _695.xyz, _698.xyz);\n    vec4 _947 = u_world * (mat4(_692, _695, _698, ((_648[3] + _652[3]) + _670[3]) + _688[3]) * a_position);\n    mat3 _967 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _970 = normalize(_967 * (_710 * a_normal));\n    vec3 _984 = normalize(_967 * (_710 * a_tangent.xyz).xyz);\n    gl_Position = u_projection * (u_view * _947);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _947.xyz);\n    varying_normalWS = _970;\n    varying_positionWS = _947;\n    varying_tangentWS = _984;\n    varying_bitangentWS = cross(_984, _970) * a_tangent.w;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    int _744 = int(a_boneIndex.x) * 3;\n    int _749 = _744 + 1;\n    int _753 = _744 + 2;\n    int _795 = int(a_boneIndex.y) * 3;\n    int _800 = _795 + 1;\n    int _804 = _795 + 2;\n    int _846 = int(a_boneIndex.z) * 3;\n    int _851 = _846 + 1;\n    int _855 = _846 + 2;\n    int _897 = int(a_boneIndex.w) * 3;\n    int _902 = _897 + 1;\n    int _906 = _897 + 2;\n    mat4 _641 = mat4(vec4(u_boneOffsetMatrix[_744].xyz, 0.0), vec4(u_boneOffsetMatrix[_749].xyz, 0.0), vec4(u_boneOffsetMatrix[_753].xyz, 0.0), vec4(u_boneOffsetMatrix[_744].w, u_boneOffsetMatrix[_749].w, u_boneOffsetMatrix[_753].w, 1.0)) * a_boneWeight.x;\n    mat4 _645 = mat4(vec4(u_boneOffsetMatrix[_795].xyz, 0.0), vec4(u_boneOffsetMatrix[_800].xyz, 0.0), vec4(u_boneOffsetMatrix[_804].xyz, 0.0), vec4(u_boneOffsetMatrix[_795].w, u_boneOffsetMatrix[_800].w, u_boneOffsetMatrix[_804].w, 1.0)) * a_boneWeight.y;\n    mat4 _663 = mat4(vec4(u_boneOffsetMatrix[_846].xyz, 0.0), vec4(u_boneOffsetMatrix[_851].xyz, 0.0), vec4(u_boneOffsetMatrix[_855].xyz, 0.0), vec4(u_boneOffsetMatrix[_846].w, u_boneOffsetMatrix[_851].w, u_boneOffsetMatrix[_855].w, 1.0)) * a_boneWeight.z;\n    mat4 _681 = mat4(vec4(u_boneOffsetMatrix[_897].xyz, 0.0), vec4(u_boneOffsetMatrix[_902].xyz, 0.0), vec4(u_boneOffsetMatrix[_906].xyz, 0.0), vec4(u_boneOffsetMatrix[_897].w, u_boneOffsetMatrix[_902].w, u_boneOffsetMatrix[_906].w, 1.0)) * a_boneWeight.w;\n    mat4 _699 = u_bindTargetWorldInverse * mat4(((_641[0] + _645[0]) + _663[0]) + _681[0], ((_641[1] + _645[1]) + _663[1]) + _681[1], ((_641[2] + _645[2]) + _663[2]) + _681[2], ((_641[3] + _645[3]) + _663[3]) + _681[3]);\n    vec4 _944 = u_world * (_699 * a_position);\n    gl_Position = u_projection * (u_view * _944);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _944.xyz);\n    varying_normalWS = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * (mat3(_699[0].xyz, _699[1].xyz, _699[2].xyz) * a_normal));\n    varying_positionWS = _944;\n    varying_positionCamera_Fog = (u_view * vec4(_944.xyz, 1.0)).xyz;\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform mat4 u_bindTargetWorldInverse;\nuniform vec4 u_boneOffsetMatrix[288];\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _Color;\nuniform vec4 _SpecColor;\nuniform vec4 _MainTex_ST;\nuniform float _AlbedoIntensity;\nuniform float _Shininess;\nuniform float _Cutoff;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\nattribute vec4 a_boneWeight;\nattribute vec4 a_boneIndex;\nvarying vec2 varying_TexCoord;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_normalWS;\nvarying vec4 varying_positionWS;\nvarying vec3 varying_tangentWS;\nvarying vec3 varying_bitangentWS;\n\nvoid main()\n{\n    int _755 = int(a_boneIndex.x) * 3;\n    int _760 = _755 + 1;\n    int _764 = _755 + 2;\n    int _806 = int(a_boneIndex.y) * 3;\n    int _811 = _806 + 1;\n    int _815 = _806 + 2;\n    int _857 = int(a_boneIndex.z) * 3;\n    int _862 = _857 + 1;\n    int _866 = _857 + 2;\n    int _908 = int(a_boneIndex.w) * 3;\n    int _913 = _908 + 1;\n    int _917 = _908 + 2;\n    mat4 _652 = mat4(vec4(u_boneOffsetMatrix[_755].xyz, 0.0), vec4(u_boneOffsetMatrix[_760].xyz, 0.0), vec4(u_boneOffsetMatrix[_764].xyz, 0.0), vec4(u_boneOffsetMatrix[_755].w, u_boneOffsetMatrix[_760].w, u_boneOffsetMatrix[_764].w, 1.0)) * a_boneWeight.x;\n    mat4 _656 = mat4(vec4(u_boneOffsetMatrix[_806].xyz, 0.0), vec4(u_boneOffsetMatrix[_811].xyz, 0.0), vec4(u_boneOffsetMatrix[_815].xyz, 0.0), vec4(u_boneOffsetMatrix[_806].w, u_boneOffsetMatrix[_811].w, u_boneOffsetMatrix[_815].w, 1.0)) * a_boneWeight.y;\n    mat4 _674 = mat4(vec4(u_boneOffsetMatrix[_857].xyz, 0.0), vec4(u_boneOffsetMatrix[_862].xyz, 0.0), vec4(u_boneOffsetMatrix[_866].xyz, 0.0), vec4(u_boneOffsetMatrix[_857].w, u_boneOffsetMatrix[_862].w, u_boneOffsetMatrix[_866].w, 1.0)) * a_boneWeight.z;\n    mat4 _692 = mat4(vec4(u_boneOffsetMatrix[_908].xyz, 0.0), vec4(u_boneOffsetMatrix[_913].xyz, 0.0), vec4(u_boneOffsetMatrix[_917].xyz, 0.0), vec4(u_boneOffsetMatrix[_908].w, u_boneOffsetMatrix[_913].w, u_boneOffsetMatrix[_917].w, 1.0)) * a_boneWeight.w;\n    mat4 _710 = u_bindTargetWorldInverse * mat4(((_652[0] + _656[0]) + _674[0]) + _692[0], ((_652[1] + _656[1]) + _674[1]) + _692[1], ((_652[2] + _656[2]) + _674[2]) + _692[2], ((_652[3] + _656[3]) + _674[3]) + _692[3]);\n    mat3 _718 = mat3(_710[0].xyz, _710[1].xyz, _710[2].xyz);\n    vec4 _955 = u_world * (_710 * a_position);\n    mat3 _975 = mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz);\n    vec3 _978 = normalize(_975 * (_718 * a_normal));\n    vec3 _992 = normalize(_975 * (_718 * a_tangent.xyz).xyz);\n    gl_Position = u_projection * (u_view * _955);\n    varying_TexCoord = (vec2(a_texCoord.x, a_texCoord.y - 1.0) * _MainTex_ST.xy) + vec2(_MainTex_ST.z, 1.0 - _MainTex_ST.w);\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _955.xyz);\n    varying_normalWS = _978;\n    varying_positionWS = _955;\n    varying_tangentWS = _992;\n    varying_bitangentWS = cross(_992, _978) * a_tangent.w;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_skinnedAnimationMapInfo;\nuniform highp float u_skinnedAnimationInfo;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _509 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _517 = (_509 * _Color) * _AlbedoIntensity;\n    highp float _519 = _517.w;\n    if ((_519 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _528 = normalize(varying_ViewDir);\n    highp vec3 _531 = normalize(varying_normalWS);\n    highp vec3 _851 = vec3(0.0);\n    highp vec3 _852 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _845 = vec3(0.0);\n        highp float _846 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _846 = 1.0;\n            _845 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _629 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _633 = max(dot(_629, _629), 6.103515625e-05);\n            highp vec3 _637 = _629 * inversesqrt(_633);\n            highp float _697 = clamp((dot(u_spotDirFA[0].xyz, _637) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _846 = ((1.0 / _633) * clamp((_633 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_697 * _697);\n            _845 = _637;\n        }\n        highp vec3 _552 = u_lightColorFA[0].xyz * _846;\n        _852 = _552 * max(0.0, dot(_845, _531));\n        _851 = _552 * pow(max(0.0, dot(normalize(_528 + _845), _531)), _Shininess * 128.0);\n    }\n    else\n    {\n        _852 = vec3(0.0);\n        _851 = vec3(0.0);\n    }\n    highp vec3 _928 = vec3(0.0);\n    highp vec3 _929 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _903 = 0.0;\n        highp vec3 _904 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _903 = 1.0;\n            _904 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _873 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _875 = max(dot(_873, _873), 6.103515625e-05);\n            highp vec3 _877 = _873 * inversesqrt(_875);\n            highp float _897 = clamp((dot(u_spotDirFA[1].xyz, _877) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _903 = ((1.0 / _875) * clamp((_875 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_897 * _897);\n            _904 = _877;\n        }\n        highp vec3 _912 = u_lightColorFA[1].xyz * _903;\n        _928 = _852 + (_912 * max(0.0, dot(_904, _531)));\n        _929 = _851 + (_912 * pow(max(0.0, dot(normalize(_528 + _904), _531)), _Shininess * 128.0));\n    }\n    else\n    {\n        _928 = _852;\n        _929 = _851;\n    }\n    highp vec3 _1006 = vec3(0.0);\n    highp vec3 _1007 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _981 = 0.0;\n        highp vec3 _982 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _981 = 1.0;\n            _982 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _951 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _953 = max(dot(_951, _951), 6.103515625e-05);\n            highp vec3 _955 = _951 * inversesqrt(_953);\n            highp float _975 = clamp((dot(u_spotDirFA[2].xyz, _955) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _981 = ((1.0 / _953) * clamp((_953 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_975 * _975);\n            _982 = _955;\n        }\n        highp vec3 _990 = u_lightColorFA[2].xyz * _981;\n        _1006 = _928 + (_990 * max(0.0, dot(_982, _531)));\n        _1007 = _929 + (_990 * pow(max(0.0, dot(normalize(_528 + _982), _531)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1006 = _928;\n        _1007 = _929;\n    }\n    highp vec3 _1084 = vec3(0.0);\n    highp vec3 _1085 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1059 = 0.0;\n        highp vec3 _1060 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1059 = 1.0;\n            _1060 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1029 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1031 = max(dot(_1029, _1029), 6.103515625e-05);\n            highp vec3 _1033 = _1029 * inversesqrt(_1031);\n            highp float _1053 = clamp((dot(u_spotDirFA[3].xyz, _1033) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1059 = ((1.0 / _1031) * clamp((_1031 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1053 * _1053);\n            _1060 = _1033;\n        }\n        highp vec3 _1068 = u_lightColorFA[3].xyz * _1059;\n        _1084 = _1006 + (_1068 * max(0.0, dot(_1060, _531)));\n        _1085 = _1007 + (_1068 * pow(max(0.0, dot(normalize(_528 + _1060), _531)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1084 = _1006;\n        _1085 = _1007;\n    }\n    highp vec4 _592 = vec4(_517.xyz * (_1084 + (_1085 * (_SpecColor.xyz * _509.w))), _519);\n    highp float _735 = length(varying_positionCamera_Fog);\n    highp float _839 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _839 = (u_fogInfos.z - _735) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _840 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _840 = 1.0 / pow(2.7182800769805908203125, _735 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _841 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _841 = 1.0 / pow(2.7182800769805908203125, ((_735 * _735) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _841 = 1.0;\n            }\n            _840 = _841;\n        }\n        _839 = _840;\n    }\n    highp float _781 = clamp(_839, 0.0, 1.0);\n    highp vec3 _790 = (_592.xyz * _781) + (u_fogColor * (1.0 - _781));\n    gl_FragData[0] = vec4(_790.x, _790.y, _790.z, _592.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_skinnedAnimationMapInfo;\nuniform highp float u_skinnedAnimationInfo;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\n\nvoid main()\n{\n    highp vec4 _416 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _424 = (_416 * _Color) * _AlbedoIntensity;\n    highp vec3 _427 = normalize(varying_ViewDir);\n    highp vec3 _430 = normalize(varying_normalWS);\n    highp vec3 _670 = vec3(0.0);\n    highp vec3 _671 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _664 = vec3(0.0);\n        highp float _665 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _665 = 1.0;\n            _664 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _525 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _529 = max(dot(_525, _525), 6.103515625e-05);\n            highp vec3 _533 = _525 * inversesqrt(_529);\n            highp float _593 = clamp((dot(u_spotDirFA[0].xyz, _533) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _665 = ((1.0 / _529) * clamp((_529 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_593 * _593);\n            _664 = _533;\n        }\n        highp vec3 _451 = u_lightColorFA[0].xyz * _665;\n        _671 = _451 * max(0.0, dot(_664, _430));\n        _670 = _451 * pow(max(0.0, dot(normalize(_427 + _664), _430)), _Shininess * 128.0);\n    }\n    else\n    {\n        _671 = vec3(0.0);\n        _670 = vec3(0.0);\n    }\n    highp vec3 _747 = vec3(0.0);\n    highp vec3 _748 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _722 = 0.0;\n        highp vec3 _723 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _722 = 1.0;\n            _723 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _692 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _694 = max(dot(_692, _692), 6.103515625e-05);\n            highp vec3 _696 = _692 * inversesqrt(_694);\n            highp float _716 = clamp((dot(u_spotDirFA[1].xyz, _696) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _722 = ((1.0 / _694) * clamp((_694 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_716 * _716);\n            _723 = _696;\n        }\n        highp vec3 _731 = u_lightColorFA[1].xyz * _722;\n        _747 = _671 + (_731 * max(0.0, dot(_723, _430)));\n        _748 = _670 + (_731 * pow(max(0.0, dot(normalize(_427 + _723), _430)), _Shininess * 128.0));\n    }\n    else\n    {\n        _747 = _671;\n        _748 = _670;\n    }\n    highp vec3 _825 = vec3(0.0);\n    highp vec3 _826 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _800 = 0.0;\n        highp vec3 _801 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _800 = 1.0;\n            _801 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _770 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _772 = max(dot(_770, _770), 6.103515625e-05);\n            highp vec3 _774 = _770 * inversesqrt(_772);\n            highp float _794 = clamp((dot(u_spotDirFA[2].xyz, _774) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _800 = ((1.0 / _772) * clamp((_772 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_794 * _794);\n            _801 = _774;\n        }\n        highp vec3 _809 = u_lightColorFA[2].xyz * _800;\n        _825 = _747 + (_809 * max(0.0, dot(_801, _430)));\n        _826 = _748 + (_809 * pow(max(0.0, dot(normalize(_427 + _801), _430)), _Shininess * 128.0));\n    }\n    else\n    {\n        _825 = _747;\n        _826 = _748;\n    }\n    highp vec3 _903 = vec3(0.0);\n    highp vec3 _904 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _878 = 0.0;\n        highp vec3 _879 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _878 = 1.0;\n            _879 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _848 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _850 = max(dot(_848, _848), 6.103515625e-05);\n            highp vec3 _852 = _848 * inversesqrt(_850);\n            highp float _872 = clamp((dot(u_spotDirFA[3].xyz, _852) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _878 = ((1.0 / _850) * clamp((_850 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_872 * _872);\n            _879 = _852;\n        }\n        highp vec3 _887 = u_lightColorFA[3].xyz * _878;\n        _903 = _825 + (_887 * max(0.0, dot(_879, _430)));\n        _904 = _826 + (_887 * pow(max(0.0, dot(normalize(_427 + _879), _430)), _Shininess * 128.0));\n    }\n    else\n    {\n        _903 = _825;\n        _904 = _826;\n    }\n    gl_FragData[0] = vec4(_424.xyz * (_903 + (_904 * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _424.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_skinnedAnimationMapInfo;\nuniform highp float u_skinnedAnimationInfo;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _594 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _602 = (_594 * _Color) * _AlbedoIntensity;\n    highp float _604 = _602.w;\n    if ((_604 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _613 = normalize(varying_ViewDir);\n    highp vec4 _622 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _728 = (_622.xy - vec2(0.5)) * 2.0;\n    highp vec3 _744 = vec3(_728, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_728, _728)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _1001 = vec3(0.0);\n    highp vec3 _1002 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _995 = vec3(0.0);\n        highp float _996 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _996 = 1.0;\n            _995 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _772 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _776 = max(dot(_772, _772), 6.103515625e-05);\n            highp vec3 _780 = _772 * inversesqrt(_776);\n            highp float _840 = clamp((dot(u_spotDirFA[0].xyz, _780) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _996 = ((1.0 / _776) * clamp((_776 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_840 * _840);\n            _995 = _780;\n        }\n        highp vec3 _665 = u_lightColorFA[0].xyz * _996;\n        _1002 = _665 * max(0.0, dot(_995, _744));\n        _1001 = _665 * pow(max(0.0, dot(normalize(_613 + _995), _744)), _Shininess * 128.0);\n    }\n    else\n    {\n        _1002 = vec3(0.0);\n        _1001 = vec3(0.0);\n    }\n    highp vec3 _1079 = vec3(0.0);\n    highp vec3 _1080 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _1054 = 0.0;\n        highp vec3 _1055 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _1054 = 1.0;\n            _1055 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _1024 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _1026 = max(dot(_1024, _1024), 6.103515625e-05);\n            highp vec3 _1028 = _1024 * inversesqrt(_1026);\n            highp float _1048 = clamp((dot(u_spotDirFA[1].xyz, _1028) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _1054 = ((1.0 / _1026) * clamp((_1026 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_1048 * _1048);\n            _1055 = _1028;\n        }\n        highp vec3 _1063 = u_lightColorFA[1].xyz * _1054;\n        _1079 = _1002 + (_1063 * max(0.0, dot(_1055, _744)));\n        _1080 = _1001 + (_1063 * pow(max(0.0, dot(normalize(_613 + _1055), _744)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1079 = _1002;\n        _1080 = _1001;\n    }\n    highp vec3 _1157 = vec3(0.0);\n    highp vec3 _1158 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _1132 = 0.0;\n        highp vec3 _1133 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _1132 = 1.0;\n            _1133 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _1102 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _1104 = max(dot(_1102, _1102), 6.103515625e-05);\n            highp vec3 _1106 = _1102 * inversesqrt(_1104);\n            highp float _1126 = clamp((dot(u_spotDirFA[2].xyz, _1106) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _1132 = ((1.0 / _1104) * clamp((_1104 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_1126 * _1126);\n            _1133 = _1106;\n        }\n        highp vec3 _1141 = u_lightColorFA[2].xyz * _1132;\n        _1157 = _1079 + (_1141 * max(0.0, dot(_1133, _744)));\n        _1158 = _1080 + (_1141 * pow(max(0.0, dot(normalize(_613 + _1133), _744)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1157 = _1079;\n        _1158 = _1080;\n    }\n    highp vec3 _1235 = vec3(0.0);\n    highp vec3 _1236 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1210 = 0.0;\n        highp vec3 _1211 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1210 = 1.0;\n            _1211 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1180 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1182 = max(dot(_1180, _1180), 6.103515625e-05);\n            highp vec3 _1184 = _1180 * inversesqrt(_1182);\n            highp float _1204 = clamp((dot(u_spotDirFA[3].xyz, _1184) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1210 = ((1.0 / _1182) * clamp((_1182 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1204 * _1204);\n            _1211 = _1184;\n        }\n        highp vec3 _1219 = u_lightColorFA[3].xyz * _1210;\n        _1235 = _1157 + (_1219 * max(0.0, dot(_1211, _744)));\n        _1236 = _1158 + (_1219 * pow(max(0.0, dot(normalize(_613 + _1211), _744)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1235 = _1157;\n        _1236 = _1158;\n    }\n    highp vec4 _691 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _710 = vec4(_602.xyz * (_1235 + (_1236 * (_691.xyz * _SpecColor.xyz))), _604);\n    highp float _878 = length(varying_positionCamera_Fog);\n    highp float _989 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _989 = (u_fogInfos.z - _878) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _990 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _990 = 1.0 / pow(2.7182800769805908203125, _878 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _991 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _991 = 1.0 / pow(2.7182800769805908203125, ((_878 * _878) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _991 = 1.0;\n            }\n            _990 = _991;\n        }\n        _989 = _990;\n    }\n    highp float _924 = clamp(_989, 0.0, 1.0);\n    highp vec3 _933 = (_710.xyz * _924) + (u_fogColor * (1.0 - _924));\n    gl_FragData[0] = vec4(_933.x, _933.y, _933.z, _710.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\n\nvoid main()\n{\n    highp vec4 _412 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _420 = (_412 * _Color) * _AlbedoIntensity;\n    highp vec3 _423 = normalize(varying_ViewDir);\n    highp vec3 _426 = normalize(varying_normalWS);\n    highp vec3 _666 = vec3(0.0);\n    highp vec3 _667 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _660 = vec3(0.0);\n        highp float _661 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _661 = 1.0;\n            _660 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _521 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _525 = max(dot(_521, _521), 6.103515625e-05);\n            highp vec3 _529 = _521 * inversesqrt(_525);\n            highp float _589 = clamp((dot(u_spotDirFA[0].xyz, _529) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _661 = ((1.0 / _525) * clamp((_525 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_589 * _589);\n            _660 = _529;\n        }\n        highp vec3 _447 = u_lightColorFA[0].xyz * _661;\n        _667 = _447 * max(0.0, dot(_660, _426));\n        _666 = _447 * pow(max(0.0, dot(normalize(_423 + _660), _426)), _Shininess * 128.0);\n    }\n    else\n    {\n        _667 = vec3(0.0);\n        _666 = vec3(0.0);\n    }\n    highp vec3 _743 = vec3(0.0);\n    highp vec3 _744 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _718 = 0.0;\n        highp vec3 _719 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _718 = 1.0;\n            _719 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _688 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _690 = max(dot(_688, _688), 6.103515625e-05);\n            highp vec3 _692 = _688 * inversesqrt(_690);\n            highp float _712 = clamp((dot(u_spotDirFA[1].xyz, _692) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _718 = ((1.0 / _690) * clamp((_690 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_712 * _712);\n            _719 = _692;\n        }\n        highp vec3 _727 = u_lightColorFA[1].xyz * _718;\n        _743 = _667 + (_727 * max(0.0, dot(_719, _426)));\n        _744 = _666 + (_727 * pow(max(0.0, dot(normalize(_423 + _719), _426)), _Shininess * 128.0));\n    }\n    else\n    {\n        _743 = _667;\n        _744 = _666;\n    }\n    highp vec3 _821 = vec3(0.0);\n    highp vec3 _822 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _796 = 0.0;\n        highp vec3 _797 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _796 = 1.0;\n            _797 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _766 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _768 = max(dot(_766, _766), 6.103515625e-05);\n            highp vec3 _770 = _766 * inversesqrt(_768);\n            highp float _790 = clamp((dot(u_spotDirFA[2].xyz, _770) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _796 = ((1.0 / _768) * clamp((_768 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_790 * _790);\n            _797 = _770;\n        }\n        highp vec3 _805 = u_lightColorFA[2].xyz * _796;\n        _821 = _743 + (_805 * max(0.0, dot(_797, _426)));\n        _822 = _744 + (_805 * pow(max(0.0, dot(normalize(_423 + _797), _426)), _Shininess * 128.0));\n    }\n    else\n    {\n        _821 = _743;\n        _822 = _744;\n    }\n    highp vec3 _899 = vec3(0.0);\n    highp vec3 _900 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _874 = 0.0;\n        highp vec3 _875 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _874 = 1.0;\n            _875 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _844 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _846 = max(dot(_844, _844), 6.103515625e-05);\n            highp vec3 _848 = _844 * inversesqrt(_846);\n            highp float _868 = clamp((dot(u_spotDirFA[3].xyz, _848) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _874 = ((1.0 / _846) * clamp((_846 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_868 * _868);\n            _875 = _848;\n        }\n        highp vec3 _883 = u_lightColorFA[3].xyz * _874;\n        _899 = _821 + (_883 * max(0.0, dot(_875, _426)));\n        _900 = _822 + (_883 * pow(max(0.0, dot(normalize(_423 + _875), _426)), _Shininess * 128.0));\n    }\n    else\n    {\n        _899 = _821;\n        _900 = _822;\n    }\n    gl_FragData[0] = vec4(_420.xyz * (_899 + (_900 * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _420.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _593 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _601 = (_593 * _Color) * _AlbedoIntensity;\n    highp float _603 = _601.w;\n    if ((_603 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _612 = normalize(varying_ViewDir);\n    highp vec4 _621 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _727 = (_621.xy - vec2(0.5)) * 2.0;\n    highp vec3 _743 = vec3(_727, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_727, _727)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _1000 = vec3(0.0);\n    highp vec3 _1001 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _994 = vec3(0.0);\n        highp float _995 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _995 = 1.0;\n            _994 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _771 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _775 = max(dot(_771, _771), 6.103515625e-05);\n            highp vec3 _779 = _771 * inversesqrt(_775);\n            highp float _839 = clamp((dot(u_spotDirFA[0].xyz, _779) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _995 = ((1.0 / _775) * clamp((_775 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_839 * _839);\n            _994 = _779;\n        }\n        highp vec3 _664 = u_lightColorFA[0].xyz * _995;\n        _1001 = _664 * max(0.0, dot(_994, _743));\n        _1000 = _664 * pow(max(0.0, dot(normalize(_612 + _994), _743)), _Shininess * 128.0);\n    }\n    else\n    {\n        _1001 = vec3(0.0);\n        _1000 = vec3(0.0);\n    }\n    highp vec3 _1078 = vec3(0.0);\n    highp vec3 _1079 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _1053 = 0.0;\n        highp vec3 _1054 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _1053 = 1.0;\n            _1054 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _1023 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _1025 = max(dot(_1023, _1023), 6.103515625e-05);\n            highp vec3 _1027 = _1023 * inversesqrt(_1025);\n            highp float _1047 = clamp((dot(u_spotDirFA[1].xyz, _1027) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _1053 = ((1.0 / _1025) * clamp((_1025 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_1047 * _1047);\n            _1054 = _1027;\n        }\n        highp vec3 _1062 = u_lightColorFA[1].xyz * _1053;\n        _1078 = _1001 + (_1062 * max(0.0, dot(_1054, _743)));\n        _1079 = _1000 + (_1062 * pow(max(0.0, dot(normalize(_612 + _1054), _743)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1078 = _1001;\n        _1079 = _1000;\n    }\n    highp vec3 _1156 = vec3(0.0);\n    highp vec3 _1157 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _1131 = 0.0;\n        highp vec3 _1132 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _1131 = 1.0;\n            _1132 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _1101 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _1103 = max(dot(_1101, _1101), 6.103515625e-05);\n            highp vec3 _1105 = _1101 * inversesqrt(_1103);\n            highp float _1125 = clamp((dot(u_spotDirFA[2].xyz, _1105) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _1131 = ((1.0 / _1103) * clamp((_1103 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_1125 * _1125);\n            _1132 = _1105;\n        }\n        highp vec3 _1140 = u_lightColorFA[2].xyz * _1131;\n        _1156 = _1078 + (_1140 * max(0.0, dot(_1132, _743)));\n        _1157 = _1079 + (_1140 * pow(max(0.0, dot(normalize(_612 + _1132), _743)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1156 = _1078;\n        _1157 = _1079;\n    }\n    highp vec3 _1234 = vec3(0.0);\n    highp vec3 _1235 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1209 = 0.0;\n        highp vec3 _1210 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1209 = 1.0;\n            _1210 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1179 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1181 = max(dot(_1179, _1179), 6.103515625e-05);\n            highp vec3 _1183 = _1179 * inversesqrt(_1181);\n            highp float _1203 = clamp((dot(u_spotDirFA[3].xyz, _1183) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1209 = ((1.0 / _1181) * clamp((_1181 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1203 * _1203);\n            _1210 = _1183;\n        }\n        highp vec3 _1218 = u_lightColorFA[3].xyz * _1209;\n        _1234 = _1156 + (_1218 * max(0.0, dot(_1210, _743)));\n        _1235 = _1157 + (_1218 * pow(max(0.0, dot(normalize(_612 + _1210), _743)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1234 = _1156;\n        _1235 = _1157;\n    }\n    highp vec4 _690 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _709 = vec4(_601.xyz * (_1234 + (_1235 * (_690.xyz * _SpecColor.xyz))), _603);\n    highp float _877 = length(varying_positionCamera_Fog);\n    highp float _988 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _988 = (u_fogInfos.z - _877) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _989 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _989 = 1.0 / pow(2.7182800769805908203125, _877 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _990 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _990 = 1.0 / pow(2.7182800769805908203125, ((_877 * _877) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _990 = 1.0;\n            }\n            _989 = _990;\n        }\n        _988 = _989;\n    }\n    highp float _923 = clamp(_988, 0.0, 1.0);\n    highp vec3 _932 = (_709.xyz * _923) + (u_fogColor * (1.0 - _923));\n    gl_FragData[0] = vec4(_932.x, _932.y, _932.z, _709.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\n\nvoid main()\n{\n    highp vec4 _415 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _423 = (_415 * _Color) * _AlbedoIntensity;\n    highp vec3 _426 = normalize(varying_ViewDir);\n    highp vec3 _429 = normalize(varying_normalWS);\n    highp vec3 _669 = vec3(0.0);\n    highp vec3 _670 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _663 = vec3(0.0);\n        highp float _664 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _664 = 1.0;\n            _663 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _524 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _528 = max(dot(_524, _524), 6.103515625e-05);\n            highp vec3 _532 = _524 * inversesqrt(_528);\n            highp float _592 = clamp((dot(u_spotDirFA[0].xyz, _532) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _664 = ((1.0 / _528) * clamp((_528 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_592 * _592);\n            _663 = _532;\n        }\n        highp vec3 _450 = u_lightColorFA[0].xyz * _664;\n        _670 = _450 * max(0.0, dot(_663, _429));\n        _669 = _450 * pow(max(0.0, dot(normalize(_426 + _663), _429)), _Shininess * 128.0);\n    }\n    else\n    {\n        _670 = vec3(0.0);\n        _669 = vec3(0.0);\n    }\n    highp vec3 _746 = vec3(0.0);\n    highp vec3 _747 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _721 = 0.0;\n        highp vec3 _722 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _721 = 1.0;\n            _722 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _691 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _693 = max(dot(_691, _691), 6.103515625e-05);\n            highp vec3 _695 = _691 * inversesqrt(_693);\n            highp float _715 = clamp((dot(u_spotDirFA[1].xyz, _695) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _721 = ((1.0 / _693) * clamp((_693 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_715 * _715);\n            _722 = _695;\n        }\n        highp vec3 _730 = u_lightColorFA[1].xyz * _721;\n        _746 = _670 + (_730 * max(0.0, dot(_722, _429)));\n        _747 = _669 + (_730 * pow(max(0.0, dot(normalize(_426 + _722), _429)), _Shininess * 128.0));\n    }\n    else\n    {\n        _746 = _670;\n        _747 = _669;\n    }\n    highp vec3 _824 = vec3(0.0);\n    highp vec3 _825 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _799 = 0.0;\n        highp vec3 _800 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _799 = 1.0;\n            _800 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _769 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _771 = max(dot(_769, _769), 6.103515625e-05);\n            highp vec3 _773 = _769 * inversesqrt(_771);\n            highp float _793 = clamp((dot(u_spotDirFA[2].xyz, _773) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _799 = ((1.0 / _771) * clamp((_771 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_793 * _793);\n            _800 = _773;\n        }\n        highp vec3 _808 = u_lightColorFA[2].xyz * _799;\n        _824 = _746 + (_808 * max(0.0, dot(_800, _429)));\n        _825 = _747 + (_808 * pow(max(0.0, dot(normalize(_426 + _800), _429)), _Shininess * 128.0));\n    }\n    else\n    {\n        _824 = _746;\n        _825 = _747;\n    }\n    highp vec3 _902 = vec3(0.0);\n    highp vec3 _903 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _877 = 0.0;\n        highp vec3 _878 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _877 = 1.0;\n            _878 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _847 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _849 = max(dot(_847, _847), 6.103515625e-05);\n            highp vec3 _851 = _847 * inversesqrt(_849);\n            highp float _871 = clamp((dot(u_spotDirFA[3].xyz, _851) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _877 = ((1.0 / _849) * clamp((_849 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_871 * _871);\n            _878 = _851;\n        }\n        highp vec3 _886 = u_lightColorFA[3].xyz * _877;\n        _902 = _824 + (_886 * max(0.0, dot(_878, _429)));\n        _903 = _825 + (_886 * pow(max(0.0, dot(normalize(_426 + _878), _429)), _Shininess * 128.0));\n    }\n    else\n    {\n        _902 = _824;\n        _903 = _825;\n    }\n    gl_FragData[0] = vec4(_423.xyz * (_902 + (_903 * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _423.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _508 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _516 = (_508 * _Color) * _AlbedoIntensity;\n    highp float _518 = _516.w;\n    if ((_518 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _527 = normalize(varying_ViewDir);\n    highp vec3 _530 = normalize(varying_normalWS);\n    highp vec3 _850 = vec3(0.0);\n    highp vec3 _851 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _844 = vec3(0.0);\n        highp float _845 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _845 = 1.0;\n            _844 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _628 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _632 = max(dot(_628, _628), 6.103515625e-05);\n            highp vec3 _636 = _628 * inversesqrt(_632);\n            highp float _696 = clamp((dot(u_spotDirFA[0].xyz, _636) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _845 = ((1.0 / _632) * clamp((_632 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_696 * _696);\n            _844 = _636;\n        }\n        highp vec3 _551 = u_lightColorFA[0].xyz * _845;\n        _851 = _551 * max(0.0, dot(_844, _530));\n        _850 = _551 * pow(max(0.0, dot(normalize(_527 + _844), _530)), _Shininess * 128.0);\n    }\n    else\n    {\n        _851 = vec3(0.0);\n        _850 = vec3(0.0);\n    }\n    highp vec3 _927 = vec3(0.0);\n    highp vec3 _928 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _902 = 0.0;\n        highp vec3 _903 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _902 = 1.0;\n            _903 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _872 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _874 = max(dot(_872, _872), 6.103515625e-05);\n            highp vec3 _876 = _872 * inversesqrt(_874);\n            highp float _896 = clamp((dot(u_spotDirFA[1].xyz, _876) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _902 = ((1.0 / _874) * clamp((_874 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_896 * _896);\n            _903 = _876;\n        }\n        highp vec3 _911 = u_lightColorFA[1].xyz * _902;\n        _927 = _851 + (_911 * max(0.0, dot(_903, _530)));\n        _928 = _850 + (_911 * pow(max(0.0, dot(normalize(_527 + _903), _530)), _Shininess * 128.0));\n    }\n    else\n    {\n        _927 = _851;\n        _928 = _850;\n    }\n    highp vec3 _1005 = vec3(0.0);\n    highp vec3 _1006 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _980 = 0.0;\n        highp vec3 _981 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _980 = 1.0;\n            _981 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _950 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _952 = max(dot(_950, _950), 6.103515625e-05);\n            highp vec3 _954 = _950 * inversesqrt(_952);\n            highp float _974 = clamp((dot(u_spotDirFA[2].xyz, _954) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _980 = ((1.0 / _952) * clamp((_952 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_974 * _974);\n            _981 = _954;\n        }\n        highp vec3 _989 = u_lightColorFA[2].xyz * _980;\n        _1005 = _927 + (_989 * max(0.0, dot(_981, _530)));\n        _1006 = _928 + (_989 * pow(max(0.0, dot(normalize(_527 + _981), _530)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1005 = _927;\n        _1006 = _928;\n    }\n    highp vec3 _1083 = vec3(0.0);\n    highp vec3 _1084 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1058 = 0.0;\n        highp vec3 _1059 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1058 = 1.0;\n            _1059 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1028 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1030 = max(dot(_1028, _1028), 6.103515625e-05);\n            highp vec3 _1032 = _1028 * inversesqrt(_1030);\n            highp float _1052 = clamp((dot(u_spotDirFA[3].xyz, _1032) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1058 = ((1.0 / _1030) * clamp((_1030 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1052 * _1052);\n            _1059 = _1032;\n        }\n        highp vec3 _1067 = u_lightColorFA[3].xyz * _1058;\n        _1083 = _1005 + (_1067 * max(0.0, dot(_1059, _530)));\n        _1084 = _1006 + (_1067 * pow(max(0.0, dot(normalize(_527 + _1059), _530)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1083 = _1005;\n        _1084 = _1006;\n    }\n    highp vec4 _591 = vec4(_516.xyz * (_1083 + (_1084 * (_SpecColor.xyz * _508.w))), _518);\n    highp float _734 = length(varying_positionCamera_Fog);\n    highp float _838 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _838 = (u_fogInfos.z - _734) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _839 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _839 = 1.0 / pow(2.7182800769805908203125, _734 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _840 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _840 = 1.0 / pow(2.7182800769805908203125, ((_734 * _734) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _840 = 1.0;\n            }\n            _839 = _840;\n        }\n        _838 = _839;\n    }\n    highp float _780 = clamp(_838, 0.0, 1.0);\n    highp vec3 _789 = (_591.xyz * _780) + (u_fogColor * (1.0 - _780));\n    gl_FragData[0] = vec4(_789.x, _789.y, _789.z, _591.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _505 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _513 = (_505 * _Color) * _AlbedoIntensity;\n    highp float _515 = _513.w;\n    if ((_515 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _524 = normalize(varying_ViewDir);\n    highp vec3 _527 = normalize(varying_normalWS);\n    highp vec3 _847 = vec3(0.0);\n    highp vec3 _848 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _841 = vec3(0.0);\n        highp float _842 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _842 = 1.0;\n            _841 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _625 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _629 = max(dot(_625, _625), 6.103515625e-05);\n            highp vec3 _633 = _625 * inversesqrt(_629);\n            highp float _693 = clamp((dot(u_spotDirFA[0].xyz, _633) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _842 = ((1.0 / _629) * clamp((_629 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_693 * _693);\n            _841 = _633;\n        }\n        highp vec3 _548 = u_lightColorFA[0].xyz * _842;\n        _848 = _548 * max(0.0, dot(_841, _527));\n        _847 = _548 * pow(max(0.0, dot(normalize(_524 + _841), _527)), _Shininess * 128.0);\n    }\n    else\n    {\n        _848 = vec3(0.0);\n        _847 = vec3(0.0);\n    }\n    highp vec3 _924 = vec3(0.0);\n    highp vec3 _925 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _899 = 0.0;\n        highp vec3 _900 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _899 = 1.0;\n            _900 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _869 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _871 = max(dot(_869, _869), 6.103515625e-05);\n            highp vec3 _873 = _869 * inversesqrt(_871);\n            highp float _893 = clamp((dot(u_spotDirFA[1].xyz, _873) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _899 = ((1.0 / _871) * clamp((_871 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_893 * _893);\n            _900 = _873;\n        }\n        highp vec3 _908 = u_lightColorFA[1].xyz * _899;\n        _924 = _848 + (_908 * max(0.0, dot(_900, _527)));\n        _925 = _847 + (_908 * pow(max(0.0, dot(normalize(_524 + _900), _527)), _Shininess * 128.0));\n    }\n    else\n    {\n        _924 = _848;\n        _925 = _847;\n    }\n    highp vec3 _1002 = vec3(0.0);\n    highp vec3 _1003 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _977 = 0.0;\n        highp vec3 _978 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _977 = 1.0;\n            _978 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _947 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _949 = max(dot(_947, _947), 6.103515625e-05);\n            highp vec3 _951 = _947 * inversesqrt(_949);\n            highp float _971 = clamp((dot(u_spotDirFA[2].xyz, _951) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _977 = ((1.0 / _949) * clamp((_949 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_971 * _971);\n            _978 = _951;\n        }\n        highp vec3 _986 = u_lightColorFA[2].xyz * _977;\n        _1002 = _924 + (_986 * max(0.0, dot(_978, _527)));\n        _1003 = _925 + (_986 * pow(max(0.0, dot(normalize(_524 + _978), _527)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1002 = _924;\n        _1003 = _925;\n    }\n    highp vec3 _1080 = vec3(0.0);\n    highp vec3 _1081 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1055 = 0.0;\n        highp vec3 _1056 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1055 = 1.0;\n            _1056 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1025 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1027 = max(dot(_1025, _1025), 6.103515625e-05);\n            highp vec3 _1029 = _1025 * inversesqrt(_1027);\n            highp float _1049 = clamp((dot(u_spotDirFA[3].xyz, _1029) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1055 = ((1.0 / _1027) * clamp((_1027 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1049 * _1049);\n            _1056 = _1029;\n        }\n        highp vec3 _1064 = u_lightColorFA[3].xyz * _1055;\n        _1080 = _1002 + (_1064 * max(0.0, dot(_1056, _527)));\n        _1081 = _1003 + (_1064 * pow(max(0.0, dot(normalize(_524 + _1056), _527)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1080 = _1002;\n        _1081 = _1003;\n    }\n    highp vec4 _588 = vec4(_513.xyz * (_1080 + (_1081 * (_SpecColor.xyz * _505.w))), _515);\n    highp float _731 = length(varying_positionCamera_Fog);\n    highp float _835 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _835 = (u_fogInfos.z - _731) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _836 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _836 = 1.0 / pow(2.7182800769805908203125, _731 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _837 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _837 = 1.0 / pow(2.7182800769805908203125, ((_731 * _731) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _837 = 1.0;\n            }\n            _836 = _837;\n        }\n        _835 = _836;\n    }\n    highp float _777 = clamp(_835, 0.0, 1.0);\n    highp vec3 _786 = (_588.xyz * _777) + (u_fogColor * (1.0 - _777));\n    gl_FragData[0] = vec4(_786.x, _786.y, _786.z, _588.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp mat4 u_bindTargetWorldInverse;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\n\nvoid main()\n{\n    highp vec4 _416 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _424 = (_416 * _Color) * _AlbedoIntensity;\n    highp vec3 _427 = normalize(varying_ViewDir);\n    highp vec3 _430 = normalize(varying_normalWS);\n    highp vec3 _670 = vec3(0.0);\n    highp vec3 _671 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _664 = vec3(0.0);\n        highp float _665 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _665 = 1.0;\n            _664 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _525 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _529 = max(dot(_525, _525), 6.103515625e-05);\n            highp vec3 _533 = _525 * inversesqrt(_529);\n            highp float _593 = clamp((dot(u_spotDirFA[0].xyz, _533) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _665 = ((1.0 / _529) * clamp((_529 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_593 * _593);\n            _664 = _533;\n        }\n        highp vec3 _451 = u_lightColorFA[0].xyz * _665;\n        _671 = _451 * max(0.0, dot(_664, _430));\n        _670 = _451 * pow(max(0.0, dot(normalize(_427 + _664), _430)), _Shininess * 128.0);\n    }\n    else\n    {\n        _671 = vec3(0.0);\n        _670 = vec3(0.0);\n    }\n    highp vec3 _747 = vec3(0.0);\n    highp vec3 _748 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _722 = 0.0;\n        highp vec3 _723 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _722 = 1.0;\n            _723 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _692 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _694 = max(dot(_692, _692), 6.103515625e-05);\n            highp vec3 _696 = _692 * inversesqrt(_694);\n            highp float _716 = clamp((dot(u_spotDirFA[1].xyz, _696) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _722 = ((1.0 / _694) * clamp((_694 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_716 * _716);\n            _723 = _696;\n        }\n        highp vec3 _731 = u_lightColorFA[1].xyz * _722;\n        _747 = _671 + (_731 * max(0.0, dot(_723, _430)));\n        _748 = _670 + (_731 * pow(max(0.0, dot(normalize(_427 + _723), _430)), _Shininess * 128.0));\n    }\n    else\n    {\n        _747 = _671;\n        _748 = _670;\n    }\n    highp vec3 _825 = vec3(0.0);\n    highp vec3 _826 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _800 = 0.0;\n        highp vec3 _801 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _800 = 1.0;\n            _801 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _770 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _772 = max(dot(_770, _770), 6.103515625e-05);\n            highp vec3 _774 = _770 * inversesqrt(_772);\n            highp float _794 = clamp((dot(u_spotDirFA[2].xyz, _774) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _800 = ((1.0 / _772) * clamp((_772 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_794 * _794);\n            _801 = _774;\n        }\n        highp vec3 _809 = u_lightColorFA[2].xyz * _800;\n        _825 = _747 + (_809 * max(0.0, dot(_801, _430)));\n        _826 = _748 + (_809 * pow(max(0.0, dot(normalize(_427 + _801), _430)), _Shininess * 128.0));\n    }\n    else\n    {\n        _825 = _747;\n        _826 = _748;\n    }\n    highp vec3 _903 = vec3(0.0);\n    highp vec3 _904 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _878 = 0.0;\n        highp vec3 _879 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _878 = 1.0;\n            _879 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _848 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _850 = max(dot(_848, _848), 6.103515625e-05);\n            highp vec3 _852 = _848 * inversesqrt(_850);\n            highp float _872 = clamp((dot(u_spotDirFA[3].xyz, _852) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _878 = ((1.0 / _850) * clamp((_850 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_872 * _872);\n            _879 = _852;\n        }\n        highp vec3 _887 = u_lightColorFA[3].xyz * _878;\n        _903 = _825 + (_887 * max(0.0, dot(_879, _430)));\n        _904 = _826 + (_887 * pow(max(0.0, dot(normalize(_427 + _879), _430)), _Shininess * 128.0));\n    }\n    else\n    {\n        _903 = _825;\n        _904 = _826;\n    }\n    gl_FragData[0] = vec4(_424.xyz * (_903 + (_904 * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _424.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp mat4 u_bindTargetWorldInverse;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _594 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _602 = (_594 * _Color) * _AlbedoIntensity;\n    highp float _604 = _602.w;\n    if ((_604 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _613 = normalize(varying_ViewDir);\n    highp vec4 _622 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _728 = (_622.xy - vec2(0.5)) * 2.0;\n    highp vec3 _744 = vec3(_728, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_728, _728)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _1001 = vec3(0.0);\n    highp vec3 _1002 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _995 = vec3(0.0);\n        highp float _996 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _996 = 1.0;\n            _995 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _772 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _776 = max(dot(_772, _772), 6.103515625e-05);\n            highp vec3 _780 = _772 * inversesqrt(_776);\n            highp float _840 = clamp((dot(u_spotDirFA[0].xyz, _780) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _996 = ((1.0 / _776) * clamp((_776 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_840 * _840);\n            _995 = _780;\n        }\n        highp vec3 _665 = u_lightColorFA[0].xyz * _996;\n        _1002 = _665 * max(0.0, dot(_995, _744));\n        _1001 = _665 * pow(max(0.0, dot(normalize(_613 + _995), _744)), _Shininess * 128.0);\n    }\n    else\n    {\n        _1002 = vec3(0.0);\n        _1001 = vec3(0.0);\n    }\n    highp vec3 _1079 = vec3(0.0);\n    highp vec3 _1080 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _1054 = 0.0;\n        highp vec3 _1055 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _1054 = 1.0;\n            _1055 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _1024 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _1026 = max(dot(_1024, _1024), 6.103515625e-05);\n            highp vec3 _1028 = _1024 * inversesqrt(_1026);\n            highp float _1048 = clamp((dot(u_spotDirFA[1].xyz, _1028) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _1054 = ((1.0 / _1026) * clamp((_1026 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_1048 * _1048);\n            _1055 = _1028;\n        }\n        highp vec3 _1063 = u_lightColorFA[1].xyz * _1054;\n        _1079 = _1002 + (_1063 * max(0.0, dot(_1055, _744)));\n        _1080 = _1001 + (_1063 * pow(max(0.0, dot(normalize(_613 + _1055), _744)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1079 = _1002;\n        _1080 = _1001;\n    }\n    highp vec3 _1157 = vec3(0.0);\n    highp vec3 _1158 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _1132 = 0.0;\n        highp vec3 _1133 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _1132 = 1.0;\n            _1133 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _1102 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _1104 = max(dot(_1102, _1102), 6.103515625e-05);\n            highp vec3 _1106 = _1102 * inversesqrt(_1104);\n            highp float _1126 = clamp((dot(u_spotDirFA[2].xyz, _1106) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _1132 = ((1.0 / _1104) * clamp((_1104 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_1126 * _1126);\n            _1133 = _1106;\n        }\n        highp vec3 _1141 = u_lightColorFA[2].xyz * _1132;\n        _1157 = _1079 + (_1141 * max(0.0, dot(_1133, _744)));\n        _1158 = _1080 + (_1141 * pow(max(0.0, dot(normalize(_613 + _1133), _744)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1157 = _1079;\n        _1158 = _1080;\n    }\n    highp vec3 _1235 = vec3(0.0);\n    highp vec3 _1236 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1210 = 0.0;\n        highp vec3 _1211 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1210 = 1.0;\n            _1211 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1180 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1182 = max(dot(_1180, _1180), 6.103515625e-05);\n            highp vec3 _1184 = _1180 * inversesqrt(_1182);\n            highp float _1204 = clamp((dot(u_spotDirFA[3].xyz, _1184) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1210 = ((1.0 / _1182) * clamp((_1182 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1204 * _1204);\n            _1211 = _1184;\n        }\n        highp vec3 _1219 = u_lightColorFA[3].xyz * _1210;\n        _1235 = _1157 + (_1219 * max(0.0, dot(_1211, _744)));\n        _1236 = _1158 + (_1219 * pow(max(0.0, dot(normalize(_613 + _1211), _744)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1235 = _1157;\n        _1236 = _1158;\n    }\n    highp vec4 _691 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _710 = vec4(_602.xyz * (_1235 + (_1236 * (_691.xyz * _SpecColor.xyz))), _604);\n    highp float _878 = length(varying_positionCamera_Fog);\n    highp float _989 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _989 = (u_fogInfos.z - _878) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _990 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _990 = 1.0 / pow(2.7182800769805908203125, _878 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _991 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _991 = 1.0 / pow(2.7182800769805908203125, ((_878 * _878) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _991 = 1.0;\n            }\n            _990 = _991;\n        }\n        _989 = _990;\n    }\n    highp float _924 = clamp(_989, 0.0, 1.0);\n    highp vec3 _933 = (_710.xyz * _924) + (u_fogColor * (1.0 - _924));\n    gl_FragData[0] = vec4(_933.x, _933.y, _933.z, _710.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp mat4 u_bindTargetWorldInverse;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _509 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _517 = (_509 * _Color) * _AlbedoIntensity;\n    highp float _519 = _517.w;\n    if ((_519 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _528 = normalize(varying_ViewDir);\n    highp vec3 _531 = normalize(varying_normalWS);\n    highp vec3 _851 = vec3(0.0);\n    highp vec3 _852 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _845 = vec3(0.0);\n        highp float _846 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _846 = 1.0;\n            _845 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _629 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _633 = max(dot(_629, _629), 6.103515625e-05);\n            highp vec3 _637 = _629 * inversesqrt(_633);\n            highp float _697 = clamp((dot(u_spotDirFA[0].xyz, _637) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _846 = ((1.0 / _633) * clamp((_633 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_697 * _697);\n            _845 = _637;\n        }\n        highp vec3 _552 = u_lightColorFA[0].xyz * _846;\n        _852 = _552 * max(0.0, dot(_845, _531));\n        _851 = _552 * pow(max(0.0, dot(normalize(_528 + _845), _531)), _Shininess * 128.0);\n    }\n    else\n    {\n        _852 = vec3(0.0);\n        _851 = vec3(0.0);\n    }\n    highp vec3 _928 = vec3(0.0);\n    highp vec3 _929 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _903 = 0.0;\n        highp vec3 _904 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _903 = 1.0;\n            _904 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _873 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _875 = max(dot(_873, _873), 6.103515625e-05);\n            highp vec3 _877 = _873 * inversesqrt(_875);\n            highp float _897 = clamp((dot(u_spotDirFA[1].xyz, _877) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _903 = ((1.0 / _875) * clamp((_875 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_897 * _897);\n            _904 = _877;\n        }\n        highp vec3 _912 = u_lightColorFA[1].xyz * _903;\n        _928 = _852 + (_912 * max(0.0, dot(_904, _531)));\n        _929 = _851 + (_912 * pow(max(0.0, dot(normalize(_528 + _904), _531)), _Shininess * 128.0));\n    }\n    else\n    {\n        _928 = _852;\n        _929 = _851;\n    }\n    highp vec3 _1006 = vec3(0.0);\n    highp vec3 _1007 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _981 = 0.0;\n        highp vec3 _982 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _981 = 1.0;\n            _982 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _951 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _953 = max(dot(_951, _951), 6.103515625e-05);\n            highp vec3 _955 = _951 * inversesqrt(_953);\n            highp float _975 = clamp((dot(u_spotDirFA[2].xyz, _955) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _981 = ((1.0 / _953) * clamp((_953 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_975 * _975);\n            _982 = _955;\n        }\n        highp vec3 _990 = u_lightColorFA[2].xyz * _981;\n        _1006 = _928 + (_990 * max(0.0, dot(_982, _531)));\n        _1007 = _929 + (_990 * pow(max(0.0, dot(normalize(_528 + _982), _531)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1006 = _928;\n        _1007 = _929;\n    }\n    highp vec3 _1084 = vec3(0.0);\n    highp vec3 _1085 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1059 = 0.0;\n        highp vec3 _1060 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1059 = 1.0;\n            _1060 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1029 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1031 = max(dot(_1029, _1029), 6.103515625e-05);\n            highp vec3 _1033 = _1029 * inversesqrt(_1031);\n            highp float _1053 = clamp((dot(u_spotDirFA[3].xyz, _1033) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1059 = ((1.0 / _1031) * clamp((_1031 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1053 * _1053);\n            _1060 = _1033;\n        }\n        highp vec3 _1068 = u_lightColorFA[3].xyz * _1059;\n        _1084 = _1006 + (_1068 * max(0.0, dot(_1060, _531)));\n        _1085 = _1007 + (_1068 * pow(max(0.0, dot(normalize(_528 + _1060), _531)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1084 = _1006;\n        _1085 = _1007;\n    }\n    highp vec4 _592 = vec4(_517.xyz * (_1084 + (_1085 * (_SpecColor.xyz * _509.w))), _519);\n    highp float _735 = length(varying_positionCamera_Fog);\n    highp float _839 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _839 = (u_fogInfos.z - _735) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _840 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _840 = 1.0 / pow(2.7182800769805908203125, _735 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _841 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _841 = 1.0 / pow(2.7182800769805908203125, ((_735 * _735) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _841 = 1.0;\n            }\n            _840 = _841;\n        }\n        _839 = _840;\n    }\n    highp float _781 = clamp(_839, 0.0, 1.0);\n    highp vec3 _790 = (_592.xyz * _781) + (u_fogColor * (1.0 - _781));\n    gl_FragData[0] = vec4(_790.x, _790.y, _790.z, _592.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_skinnedAnimationMapInfo;\nuniform highp float u_skinnedAnimationInfo;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _505 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _513 = (_505 * _Color) * _AlbedoIntensity;\n    highp vec3 _516 = normalize(varying_ViewDir);\n    highp vec3 _519 = normalize(varying_normalWS);\n    highp vec3 _841 = vec3(0.0);\n    highp vec3 _842 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _835 = vec3(0.0);\n        highp float _836 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _836 = 1.0;\n            _835 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _621 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _625 = max(dot(_621, _621), 6.103515625e-05);\n            highp vec3 _629 = _621 * inversesqrt(_625);\n            highp float _689 = clamp((dot(u_spotDirFA[0].xyz, _629) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _836 = ((1.0 / _625) * clamp((_625 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_689 * _689);\n            _835 = _629;\n        }\n        highp vec3 _540 = u_lightColorFA[0].xyz * _836;\n        _842 = _540 * max(0.0, dot(_835, _519));\n        _841 = _540 * pow(max(0.0, dot(normalize(_516 + _835), _519)), _Shininess * 128.0);\n    }\n    else\n    {\n        _842 = vec3(0.0);\n        _841 = vec3(0.0);\n    }\n    highp vec3 _918 = vec3(0.0);\n    highp vec3 _919 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _893 = 0.0;\n        highp vec3 _894 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _893 = 1.0;\n            _894 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _863 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _865 = max(dot(_863, _863), 6.103515625e-05);\n            highp vec3 _867 = _863 * inversesqrt(_865);\n            highp float _887 = clamp((dot(u_spotDirFA[1].xyz, _867) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _893 = ((1.0 / _865) * clamp((_865 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_887 * _887);\n            _894 = _867;\n        }\n        highp vec3 _902 = u_lightColorFA[1].xyz * _893;\n        _918 = _842 + (_902 * max(0.0, dot(_894, _519)));\n        _919 = _841 + (_902 * pow(max(0.0, dot(normalize(_516 + _894), _519)), _Shininess * 128.0));\n    }\n    else\n    {\n        _918 = _842;\n        _919 = _841;\n    }\n    highp vec3 _996 = vec3(0.0);\n    highp vec3 _997 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _971 = 0.0;\n        highp vec3 _972 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _971 = 1.0;\n            _972 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _941 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _943 = max(dot(_941, _941), 6.103515625e-05);\n            highp vec3 _945 = _941 * inversesqrt(_943);\n            highp float _965 = clamp((dot(u_spotDirFA[2].xyz, _945) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _971 = ((1.0 / _943) * clamp((_943 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_965 * _965);\n            _972 = _945;\n        }\n        highp vec3 _980 = u_lightColorFA[2].xyz * _971;\n        _996 = _918 + (_980 * max(0.0, dot(_972, _519)));\n        _997 = _919 + (_980 * pow(max(0.0, dot(normalize(_516 + _972), _519)), _Shininess * 128.0));\n    }\n    else\n    {\n        _996 = _918;\n        _997 = _919;\n    }\n    highp vec3 _1074 = vec3(0.0);\n    highp vec3 _1075 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1049 = 0.0;\n        highp vec3 _1050 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1049 = 1.0;\n            _1050 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1019 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1021 = max(dot(_1019, _1019), 6.103515625e-05);\n            highp vec3 _1023 = _1019 * inversesqrt(_1021);\n            highp float _1043 = clamp((dot(u_spotDirFA[3].xyz, _1023) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1049 = ((1.0 / _1021) * clamp((_1021 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1043 * _1043);\n            _1050 = _1023;\n        }\n        highp vec3 _1058 = u_lightColorFA[3].xyz * _1049;\n        _1074 = _996 + (_1058 * max(0.0, dot(_1050, _519)));\n        _1075 = _997 + (_1058 * pow(max(0.0, dot(normalize(_516 + _1050), _519)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1074 = _996;\n        _1075 = _997;\n    }\n    highp vec4 _566 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _585 = vec4(_513.xyz * (_1074 + (_1075 * (_566.xyz * _SpecColor.xyz))), _513.w);\n    highp float _727 = length(varying_positionCamera_Fog);\n    highp float _829 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _829 = (u_fogInfos.z - _727) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _830 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _830 = 1.0 / pow(2.7182800769805908203125, _727 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _831 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _831 = 1.0 / pow(2.7182800769805908203125, ((_727 * _727) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _831 = 1.0;\n            }\n            _830 = _831;\n        }\n        _829 = _830;\n    }\n    highp float _773 = clamp(_829, 0.0, 1.0);\n    highp vec3 _782 = (_585.xyz * _773) + (u_fogColor * (1.0 - _773));\n    gl_FragData[0] = vec4(_782.x, _782.y, _782.z, _585.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_skinnedAnimationMapInfo;\nuniform highp float u_skinnedAnimationInfo;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _506 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _514 = (_506 * _Color) * _AlbedoIntensity;\n    highp float _516 = _514.w;\n    if ((_516 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _525 = normalize(varying_ViewDir);\n    highp vec4 _534 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _633 = (_534.xy - vec2(0.5)) * 2.0;\n    highp vec3 _649 = vec3(_633, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_633, _633)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _831 = vec3(0.0);\n    highp vec3 _832 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _825 = vec3(0.0);\n        highp float _826 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _826 = 1.0;\n            _825 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _677 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _681 = max(dot(_677, _677), 6.103515625e-05);\n            highp vec3 _685 = _677 * inversesqrt(_681);\n            highp float _745 = clamp((dot(u_spotDirFA[0].xyz, _685) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _826 = ((1.0 / _681) * clamp((_681 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_745 * _745);\n            _825 = _685;\n        }\n        highp vec3 _577 = u_lightColorFA[0].xyz * _826;\n        _832 = _577 * max(0.0, dot(_825, _649));\n        _831 = _577 * pow(max(0.0, dot(normalize(_525 + _825), _649)), _Shininess * 128.0);\n    }\n    else\n    {\n        _832 = vec3(0.0);\n        _831 = vec3(0.0);\n    }\n    highp vec3 _909 = vec3(0.0);\n    highp vec3 _910 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _884 = 0.0;\n        highp vec3 _885 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _884 = 1.0;\n            _885 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _854 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _856 = max(dot(_854, _854), 6.103515625e-05);\n            highp vec3 _858 = _854 * inversesqrt(_856);\n            highp float _878 = clamp((dot(u_spotDirFA[1].xyz, _858) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _884 = ((1.0 / _856) * clamp((_856 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_878 * _878);\n            _885 = _858;\n        }\n        highp vec3 _893 = u_lightColorFA[1].xyz * _884;\n        _909 = _832 + (_893 * max(0.0, dot(_885, _649)));\n        _910 = _831 + (_893 * pow(max(0.0, dot(normalize(_525 + _885), _649)), _Shininess * 128.0));\n    }\n    else\n    {\n        _909 = _832;\n        _910 = _831;\n    }\n    highp vec3 _987 = vec3(0.0);\n    highp vec3 _988 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _962 = 0.0;\n        highp vec3 _963 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _962 = 1.0;\n            _963 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _932 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _934 = max(dot(_932, _932), 6.103515625e-05);\n            highp vec3 _936 = _932 * inversesqrt(_934);\n            highp float _956 = clamp((dot(u_spotDirFA[2].xyz, _936) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _962 = ((1.0 / _934) * clamp((_934 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_956 * _956);\n            _963 = _936;\n        }\n        highp vec3 _971 = u_lightColorFA[2].xyz * _962;\n        _987 = _909 + (_971 * max(0.0, dot(_963, _649)));\n        _988 = _910 + (_971 * pow(max(0.0, dot(normalize(_525 + _963), _649)), _Shininess * 128.0));\n    }\n    else\n    {\n        _987 = _909;\n        _988 = _910;\n    }\n    highp vec3 _1065 = vec3(0.0);\n    highp vec3 _1066 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1040 = 0.0;\n        highp vec3 _1041 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1040 = 1.0;\n            _1041 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1010 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1012 = max(dot(_1010, _1010), 6.103515625e-05);\n            highp vec3 _1014 = _1010 * inversesqrt(_1012);\n            highp float _1034 = clamp((dot(u_spotDirFA[3].xyz, _1014) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1040 = ((1.0 / _1012) * clamp((_1012 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1034 * _1034);\n            _1041 = _1014;\n        }\n        highp vec3 _1049 = u_lightColorFA[3].xyz * _1040;\n        _1065 = _987 + (_1049 * max(0.0, dot(_1041, _649)));\n        _1066 = _988 + (_1049 * pow(max(0.0, dot(normalize(_525 + _1041), _649)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1065 = _987;\n        _1066 = _988;\n    }\n    gl_FragData[0] = vec4(_514.xyz * (_1065 + (_1066 * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _516);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_skinnedAnimationMapInfo;\nuniform highp float u_skinnedAnimationInfo;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\n\nvoid main()\n{\n    highp vec4 _420 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _428 = (_420 * _Color) * _AlbedoIntensity;\n    highp float _430 = _428.w;\n    if ((_430 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _439 = normalize(varying_ViewDir);\n    highp vec3 _442 = normalize(varying_normalWS);\n    highp vec3 _680 = vec3(0.0);\n    highp vec3 _681 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _674 = vec3(0.0);\n        highp float _675 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _675 = 1.0;\n            _674 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _533 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _537 = max(dot(_533, _533), 6.103515625e-05);\n            highp vec3 _541 = _533 * inversesqrt(_537);\n            highp float _601 = clamp((dot(u_spotDirFA[0].xyz, _541) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _675 = ((1.0 / _537) * clamp((_537 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_601 * _601);\n            _674 = _541;\n        }\n        highp vec3 _463 = u_lightColorFA[0].xyz * _675;\n        _681 = _463 * max(0.0, dot(_674, _442));\n        _680 = _463 * pow(max(0.0, dot(normalize(_439 + _674), _442)), _Shininess * 128.0);\n    }\n    else\n    {\n        _681 = vec3(0.0);\n        _680 = vec3(0.0);\n    }\n    highp vec3 _757 = vec3(0.0);\n    highp vec3 _758 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _732 = 0.0;\n        highp vec3 _733 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _732 = 1.0;\n            _733 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _702 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _704 = max(dot(_702, _702), 6.103515625e-05);\n            highp vec3 _706 = _702 * inversesqrt(_704);\n            highp float _726 = clamp((dot(u_spotDirFA[1].xyz, _706) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _732 = ((1.0 / _704) * clamp((_704 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_726 * _726);\n            _733 = _706;\n        }\n        highp vec3 _741 = u_lightColorFA[1].xyz * _732;\n        _757 = _681 + (_741 * max(0.0, dot(_733, _442)));\n        _758 = _680 + (_741 * pow(max(0.0, dot(normalize(_439 + _733), _442)), _Shininess * 128.0));\n    }\n    else\n    {\n        _757 = _681;\n        _758 = _680;\n    }\n    highp vec3 _835 = vec3(0.0);\n    highp vec3 _836 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _810 = 0.0;\n        highp vec3 _811 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _810 = 1.0;\n            _811 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _780 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _782 = max(dot(_780, _780), 6.103515625e-05);\n            highp vec3 _784 = _780 * inversesqrt(_782);\n            highp float _804 = clamp((dot(u_spotDirFA[2].xyz, _784) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _810 = ((1.0 / _782) * clamp((_782 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_804 * _804);\n            _811 = _784;\n        }\n        highp vec3 _819 = u_lightColorFA[2].xyz * _810;\n        _835 = _757 + (_819 * max(0.0, dot(_811, _442)));\n        _836 = _758 + (_819 * pow(max(0.0, dot(normalize(_439 + _811), _442)), _Shininess * 128.0));\n    }\n    else\n    {\n        _835 = _757;\n        _836 = _758;\n    }\n    highp vec3 _913 = vec3(0.0);\n    highp vec3 _914 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _888 = 0.0;\n        highp vec3 _889 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _888 = 1.0;\n            _889 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _858 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _860 = max(dot(_858, _858), 6.103515625e-05);\n            highp vec3 _862 = _858 * inversesqrt(_860);\n            highp float _882 = clamp((dot(u_spotDirFA[3].xyz, _862) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _888 = ((1.0 / _860) * clamp((_860 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_882 * _882);\n            _889 = _862;\n        }\n        highp vec3 _897 = u_lightColorFA[3].xyz * _888;\n        _913 = _835 + (_897 * max(0.0, dot(_889, _442)));\n        _914 = _836 + (_897 * pow(max(0.0, dot(normalize(_439 + _889), _442)), _Shininess * 128.0));\n    }\n    else\n    {\n        _913 = _835;\n        _914 = _836;\n    }\n    gl_FragData[0] = vec4(_428.xyz * (_913 + (_914 * (_SpecColor.xyz * _420.w))), _430);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _504 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _512 = (_504 * _Color) * _AlbedoIntensity;\n    highp vec3 _515 = normalize(varying_ViewDir);\n    highp vec3 _518 = normalize(varying_normalWS);\n    highp vec3 _840 = vec3(0.0);\n    highp vec3 _841 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _834 = vec3(0.0);\n        highp float _835 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _835 = 1.0;\n            _834 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _620 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _624 = max(dot(_620, _620), 6.103515625e-05);\n            highp vec3 _628 = _620 * inversesqrt(_624);\n            highp float _688 = clamp((dot(u_spotDirFA[0].xyz, _628) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _835 = ((1.0 / _624) * clamp((_624 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_688 * _688);\n            _834 = _628;\n        }\n        highp vec3 _539 = u_lightColorFA[0].xyz * _835;\n        _841 = _539 * max(0.0, dot(_834, _518));\n        _840 = _539 * pow(max(0.0, dot(normalize(_515 + _834), _518)), _Shininess * 128.0);\n    }\n    else\n    {\n        _841 = vec3(0.0);\n        _840 = vec3(0.0);\n    }\n    highp vec3 _917 = vec3(0.0);\n    highp vec3 _918 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _892 = 0.0;\n        highp vec3 _893 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _892 = 1.0;\n            _893 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _862 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _864 = max(dot(_862, _862), 6.103515625e-05);\n            highp vec3 _866 = _862 * inversesqrt(_864);\n            highp float _886 = clamp((dot(u_spotDirFA[1].xyz, _866) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _892 = ((1.0 / _864) * clamp((_864 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_886 * _886);\n            _893 = _866;\n        }\n        highp vec3 _901 = u_lightColorFA[1].xyz * _892;\n        _917 = _841 + (_901 * max(0.0, dot(_893, _518)));\n        _918 = _840 + (_901 * pow(max(0.0, dot(normalize(_515 + _893), _518)), _Shininess * 128.0));\n    }\n    else\n    {\n        _917 = _841;\n        _918 = _840;\n    }\n    highp vec3 _995 = vec3(0.0);\n    highp vec3 _996 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _970 = 0.0;\n        highp vec3 _971 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _970 = 1.0;\n            _971 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _940 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _942 = max(dot(_940, _940), 6.103515625e-05);\n            highp vec3 _944 = _940 * inversesqrt(_942);\n            highp float _964 = clamp((dot(u_spotDirFA[2].xyz, _944) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _970 = ((1.0 / _942) * clamp((_942 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_964 * _964);\n            _971 = _944;\n        }\n        highp vec3 _979 = u_lightColorFA[2].xyz * _970;\n        _995 = _917 + (_979 * max(0.0, dot(_971, _518)));\n        _996 = _918 + (_979 * pow(max(0.0, dot(normalize(_515 + _971), _518)), _Shininess * 128.0));\n    }\n    else\n    {\n        _995 = _917;\n        _996 = _918;\n    }\n    highp vec3 _1073 = vec3(0.0);\n    highp vec3 _1074 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1048 = 0.0;\n        highp vec3 _1049 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1048 = 1.0;\n            _1049 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1018 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1020 = max(dot(_1018, _1018), 6.103515625e-05);\n            highp vec3 _1022 = _1018 * inversesqrt(_1020);\n            highp float _1042 = clamp((dot(u_spotDirFA[3].xyz, _1022) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1048 = ((1.0 / _1020) * clamp((_1020 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1042 * _1042);\n            _1049 = _1022;\n        }\n        highp vec3 _1057 = u_lightColorFA[3].xyz * _1048;\n        _1073 = _995 + (_1057 * max(0.0, dot(_1049, _518)));\n        _1074 = _996 + (_1057 * pow(max(0.0, dot(normalize(_515 + _1049), _518)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1073 = _995;\n        _1074 = _996;\n    }\n    highp vec4 _565 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _584 = vec4(_512.xyz * (_1073 + (_1074 * (_565.xyz * _SpecColor.xyz))), _512.w);\n    highp float _726 = length(varying_positionCamera_Fog);\n    highp float _828 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _828 = (u_fogInfos.z - _726) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _829 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _829 = 1.0 / pow(2.7182800769805908203125, _726 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _830 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _830 = 1.0 / pow(2.7182800769805908203125, ((_726 * _726) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _830 = 1.0;\n            }\n            _829 = _830;\n        }\n        _828 = _829;\n    }\n    highp float _772 = clamp(_828, 0.0, 1.0);\n    highp vec3 _781 = (_584.xyz * _772) + (u_fogColor * (1.0 - _772));\n    gl_FragData[0] = vec4(_781.x, _781.y, _781.z, _584.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _505 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _513 = (_505 * _Color) * _AlbedoIntensity;\n    highp float _515 = _513.w;\n    if ((_515 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _524 = normalize(varying_ViewDir);\n    highp vec4 _533 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _632 = (_533.xy - vec2(0.5)) * 2.0;\n    highp vec3 _648 = vec3(_632, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_632, _632)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _830 = vec3(0.0);\n    highp vec3 _831 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _824 = vec3(0.0);\n        highp float _825 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _825 = 1.0;\n            _824 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _676 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _680 = max(dot(_676, _676), 6.103515625e-05);\n            highp vec3 _684 = _676 * inversesqrt(_680);\n            highp float _744 = clamp((dot(u_spotDirFA[0].xyz, _684) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _825 = ((1.0 / _680) * clamp((_680 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_744 * _744);\n            _824 = _684;\n        }\n        highp vec3 _576 = u_lightColorFA[0].xyz * _825;\n        _831 = _576 * max(0.0, dot(_824, _648));\n        _830 = _576 * pow(max(0.0, dot(normalize(_524 + _824), _648)), _Shininess * 128.0);\n    }\n    else\n    {\n        _831 = vec3(0.0);\n        _830 = vec3(0.0);\n    }\n    highp vec3 _908 = vec3(0.0);\n    highp vec3 _909 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _883 = 0.0;\n        highp vec3 _884 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _883 = 1.0;\n            _884 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _853 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _855 = max(dot(_853, _853), 6.103515625e-05);\n            highp vec3 _857 = _853 * inversesqrt(_855);\n            highp float _877 = clamp((dot(u_spotDirFA[1].xyz, _857) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _883 = ((1.0 / _855) * clamp((_855 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_877 * _877);\n            _884 = _857;\n        }\n        highp vec3 _892 = u_lightColorFA[1].xyz * _883;\n        _908 = _831 + (_892 * max(0.0, dot(_884, _648)));\n        _909 = _830 + (_892 * pow(max(0.0, dot(normalize(_524 + _884), _648)), _Shininess * 128.0));\n    }\n    else\n    {\n        _908 = _831;\n        _909 = _830;\n    }\n    highp vec3 _986 = vec3(0.0);\n    highp vec3 _987 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _961 = 0.0;\n        highp vec3 _962 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _961 = 1.0;\n            _962 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _931 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _933 = max(dot(_931, _931), 6.103515625e-05);\n            highp vec3 _935 = _931 * inversesqrt(_933);\n            highp float _955 = clamp((dot(u_spotDirFA[2].xyz, _935) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _961 = ((1.0 / _933) * clamp((_933 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_955 * _955);\n            _962 = _935;\n        }\n        highp vec3 _970 = u_lightColorFA[2].xyz * _961;\n        _986 = _908 + (_970 * max(0.0, dot(_962, _648)));\n        _987 = _909 + (_970 * pow(max(0.0, dot(normalize(_524 + _962), _648)), _Shininess * 128.0));\n    }\n    else\n    {\n        _986 = _908;\n        _987 = _909;\n    }\n    highp vec3 _1064 = vec3(0.0);\n    highp vec3 _1065 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1039 = 0.0;\n        highp vec3 _1040 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1039 = 1.0;\n            _1040 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1009 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1011 = max(dot(_1009, _1009), 6.103515625e-05);\n            highp vec3 _1013 = _1009 * inversesqrt(_1011);\n            highp float _1033 = clamp((dot(u_spotDirFA[3].xyz, _1013) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1039 = ((1.0 / _1011) * clamp((_1011 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1033 * _1033);\n            _1040 = _1013;\n        }\n        highp vec3 _1048 = u_lightColorFA[3].xyz * _1039;\n        _1064 = _986 + (_1048 * max(0.0, dot(_1040, _648)));\n        _1065 = _987 + (_1048 * pow(max(0.0, dot(normalize(_524 + _1040), _648)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1064 = _986;\n        _1065 = _987;\n    }\n    gl_FragData[0] = vec4(_513.xyz * (_1064 + (_1065 * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _515);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _501 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _509 = (_501 * _Color) * _AlbedoIntensity;\n    highp vec3 _512 = normalize(varying_ViewDir);\n    highp vec3 _515 = normalize(varying_normalWS);\n    highp vec3 _837 = vec3(0.0);\n    highp vec3 _838 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _831 = vec3(0.0);\n        highp float _832 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _832 = 1.0;\n            _831 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _617 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _621 = max(dot(_617, _617), 6.103515625e-05);\n            highp vec3 _625 = _617 * inversesqrt(_621);\n            highp float _685 = clamp((dot(u_spotDirFA[0].xyz, _625) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _832 = ((1.0 / _621) * clamp((_621 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_685 * _685);\n            _831 = _625;\n        }\n        highp vec3 _536 = u_lightColorFA[0].xyz * _832;\n        _838 = _536 * max(0.0, dot(_831, _515));\n        _837 = _536 * pow(max(0.0, dot(normalize(_512 + _831), _515)), _Shininess * 128.0);\n    }\n    else\n    {\n        _838 = vec3(0.0);\n        _837 = vec3(0.0);\n    }\n    highp vec3 _914 = vec3(0.0);\n    highp vec3 _915 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _889 = 0.0;\n        highp vec3 _890 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _889 = 1.0;\n            _890 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _859 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _861 = max(dot(_859, _859), 6.103515625e-05);\n            highp vec3 _863 = _859 * inversesqrt(_861);\n            highp float _883 = clamp((dot(u_spotDirFA[1].xyz, _863) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _889 = ((1.0 / _861) * clamp((_861 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_883 * _883);\n            _890 = _863;\n        }\n        highp vec3 _898 = u_lightColorFA[1].xyz * _889;\n        _914 = _838 + (_898 * max(0.0, dot(_890, _515)));\n        _915 = _837 + (_898 * pow(max(0.0, dot(normalize(_512 + _890), _515)), _Shininess * 128.0));\n    }\n    else\n    {\n        _914 = _838;\n        _915 = _837;\n    }\n    highp vec3 _992 = vec3(0.0);\n    highp vec3 _993 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _967 = 0.0;\n        highp vec3 _968 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _967 = 1.0;\n            _968 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _937 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _939 = max(dot(_937, _937), 6.103515625e-05);\n            highp vec3 _941 = _937 * inversesqrt(_939);\n            highp float _961 = clamp((dot(u_spotDirFA[2].xyz, _941) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _967 = ((1.0 / _939) * clamp((_939 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_961 * _961);\n            _968 = _941;\n        }\n        highp vec3 _976 = u_lightColorFA[2].xyz * _967;\n        _992 = _914 + (_976 * max(0.0, dot(_968, _515)));\n        _993 = _915 + (_976 * pow(max(0.0, dot(normalize(_512 + _968), _515)), _Shininess * 128.0));\n    }\n    else\n    {\n        _992 = _914;\n        _993 = _915;\n    }\n    highp vec3 _1070 = vec3(0.0);\n    highp vec3 _1071 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1045 = 0.0;\n        highp vec3 _1046 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1045 = 1.0;\n            _1046 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1015 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1017 = max(dot(_1015, _1015), 6.103515625e-05);\n            highp vec3 _1019 = _1015 * inversesqrt(_1017);\n            highp float _1039 = clamp((dot(u_spotDirFA[3].xyz, _1019) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1045 = ((1.0 / _1017) * clamp((_1017 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1039 * _1039);\n            _1046 = _1019;\n        }\n        highp vec3 _1054 = u_lightColorFA[3].xyz * _1045;\n        _1070 = _992 + (_1054 * max(0.0, dot(_1046, _515)));\n        _1071 = _993 + (_1054 * pow(max(0.0, dot(normalize(_512 + _1046), _515)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1070 = _992;\n        _1071 = _993;\n    }\n    highp vec4 _562 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _581 = vec4(_509.xyz * (_1070 + (_1071 * (_562.xyz * _SpecColor.xyz))), _509.w);\n    highp float _723 = length(varying_positionCamera_Fog);\n    highp float _825 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _825 = (u_fogInfos.z - _723) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _826 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _826 = 1.0 / pow(2.7182800769805908203125, _723 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _827 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _827 = 1.0 / pow(2.7182800769805908203125, ((_723 * _723) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _827 = 1.0;\n            }\n            _826 = _827;\n        }\n        _825 = _826;\n    }\n    highp float _769 = clamp(_825, 0.0, 1.0);\n    highp vec3 _778 = (_581.xyz * _769) + (u_fogColor * (1.0 - _769));\n    gl_FragData[0] = vec4(_778.x, _778.y, _778.z, _581.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\n\nvoid main()\n{\n    highp vec4 _419 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _427 = (_419 * _Color) * _AlbedoIntensity;\n    highp float _429 = _427.w;\n    if ((_429 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _438 = normalize(varying_ViewDir);\n    highp vec3 _441 = normalize(varying_normalWS);\n    highp vec3 _679 = vec3(0.0);\n    highp vec3 _680 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _673 = vec3(0.0);\n        highp float _674 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _674 = 1.0;\n            _673 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _532 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _536 = max(dot(_532, _532), 6.103515625e-05);\n            highp vec3 _540 = _532 * inversesqrt(_536);\n            highp float _600 = clamp((dot(u_spotDirFA[0].xyz, _540) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _674 = ((1.0 / _536) * clamp((_536 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_600 * _600);\n            _673 = _540;\n        }\n        highp vec3 _462 = u_lightColorFA[0].xyz * _674;\n        _680 = _462 * max(0.0, dot(_673, _441));\n        _679 = _462 * pow(max(0.0, dot(normalize(_438 + _673), _441)), _Shininess * 128.0);\n    }\n    else\n    {\n        _680 = vec3(0.0);\n        _679 = vec3(0.0);\n    }\n    highp vec3 _756 = vec3(0.0);\n    highp vec3 _757 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _731 = 0.0;\n        highp vec3 _732 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _731 = 1.0;\n            _732 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _701 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _703 = max(dot(_701, _701), 6.103515625e-05);\n            highp vec3 _705 = _701 * inversesqrt(_703);\n            highp float _725 = clamp((dot(u_spotDirFA[1].xyz, _705) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _731 = ((1.0 / _703) * clamp((_703 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_725 * _725);\n            _732 = _705;\n        }\n        highp vec3 _740 = u_lightColorFA[1].xyz * _731;\n        _756 = _680 + (_740 * max(0.0, dot(_732, _441)));\n        _757 = _679 + (_740 * pow(max(0.0, dot(normalize(_438 + _732), _441)), _Shininess * 128.0));\n    }\n    else\n    {\n        _756 = _680;\n        _757 = _679;\n    }\n    highp vec3 _834 = vec3(0.0);\n    highp vec3 _835 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _809 = 0.0;\n        highp vec3 _810 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _809 = 1.0;\n            _810 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _779 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _781 = max(dot(_779, _779), 6.103515625e-05);\n            highp vec3 _783 = _779 * inversesqrt(_781);\n            highp float _803 = clamp((dot(u_spotDirFA[2].xyz, _783) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _809 = ((1.0 / _781) * clamp((_781 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_803 * _803);\n            _810 = _783;\n        }\n        highp vec3 _818 = u_lightColorFA[2].xyz * _809;\n        _834 = _756 + (_818 * max(0.0, dot(_810, _441)));\n        _835 = _757 + (_818 * pow(max(0.0, dot(normalize(_438 + _810), _441)), _Shininess * 128.0));\n    }\n    else\n    {\n        _834 = _756;\n        _835 = _757;\n    }\n    highp vec3 _912 = vec3(0.0);\n    highp vec3 _913 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _887 = 0.0;\n        highp vec3 _888 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _887 = 1.0;\n            _888 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _857 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _859 = max(dot(_857, _857), 6.103515625e-05);\n            highp vec3 _861 = _857 * inversesqrt(_859);\n            highp float _881 = clamp((dot(u_spotDirFA[3].xyz, _861) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _887 = ((1.0 / _859) * clamp((_859 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_881 * _881);\n            _888 = _861;\n        }\n        highp vec3 _896 = u_lightColorFA[3].xyz * _887;\n        _912 = _834 + (_896 * max(0.0, dot(_888, _441)));\n        _913 = _835 + (_896 * pow(max(0.0, dot(normalize(_438 + _888), _441)), _Shininess * 128.0));\n    }\n    else\n    {\n        _912 = _834;\n        _913 = _835;\n    }\n    gl_FragData[0] = vec4(_427.xyz * (_912 + (_913 * (_SpecColor.xyz * _419.w))), _429);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\n\nvoid main()\n{\n    highp vec4 _416 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _424 = (_416 * _Color) * _AlbedoIntensity;\n    highp float _426 = _424.w;\n    if ((_426 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _435 = normalize(varying_ViewDir);\n    highp vec3 _438 = normalize(varying_normalWS);\n    highp vec3 _676 = vec3(0.0);\n    highp vec3 _677 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _670 = vec3(0.0);\n        highp float _671 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _671 = 1.0;\n            _670 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _529 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _533 = max(dot(_529, _529), 6.103515625e-05);\n            highp vec3 _537 = _529 * inversesqrt(_533);\n            highp float _597 = clamp((dot(u_spotDirFA[0].xyz, _537) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _671 = ((1.0 / _533) * clamp((_533 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_597 * _597);\n            _670 = _537;\n        }\n        highp vec3 _459 = u_lightColorFA[0].xyz * _671;\n        _677 = _459 * max(0.0, dot(_670, _438));\n        _676 = _459 * pow(max(0.0, dot(normalize(_435 + _670), _438)), _Shininess * 128.0);\n    }\n    else\n    {\n        _677 = vec3(0.0);\n        _676 = vec3(0.0);\n    }\n    highp vec3 _753 = vec3(0.0);\n    highp vec3 _754 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _728 = 0.0;\n        highp vec3 _729 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _728 = 1.0;\n            _729 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _698 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _700 = max(dot(_698, _698), 6.103515625e-05);\n            highp vec3 _702 = _698 * inversesqrt(_700);\n            highp float _722 = clamp((dot(u_spotDirFA[1].xyz, _702) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _728 = ((1.0 / _700) * clamp((_700 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_722 * _722);\n            _729 = _702;\n        }\n        highp vec3 _737 = u_lightColorFA[1].xyz * _728;\n        _753 = _677 + (_737 * max(0.0, dot(_729, _438)));\n        _754 = _676 + (_737 * pow(max(0.0, dot(normalize(_435 + _729), _438)), _Shininess * 128.0));\n    }\n    else\n    {\n        _753 = _677;\n        _754 = _676;\n    }\n    highp vec3 _831 = vec3(0.0);\n    highp vec3 _832 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _806 = 0.0;\n        highp vec3 _807 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _806 = 1.0;\n            _807 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _776 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _778 = max(dot(_776, _776), 6.103515625e-05);\n            highp vec3 _780 = _776 * inversesqrt(_778);\n            highp float _800 = clamp((dot(u_spotDirFA[2].xyz, _780) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _806 = ((1.0 / _778) * clamp((_778 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_800 * _800);\n            _807 = _780;\n        }\n        highp vec3 _815 = u_lightColorFA[2].xyz * _806;\n        _831 = _753 + (_815 * max(0.0, dot(_807, _438)));\n        _832 = _754 + (_815 * pow(max(0.0, dot(normalize(_435 + _807), _438)), _Shininess * 128.0));\n    }\n    else\n    {\n        _831 = _753;\n        _832 = _754;\n    }\n    highp vec3 _909 = vec3(0.0);\n    highp vec3 _910 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _884 = 0.0;\n        highp vec3 _885 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _884 = 1.0;\n            _885 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _854 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _856 = max(dot(_854, _854), 6.103515625e-05);\n            highp vec3 _858 = _854 * inversesqrt(_856);\n            highp float _878 = clamp((dot(u_spotDirFA[3].xyz, _858) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _884 = ((1.0 / _856) * clamp((_856 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_878 * _878);\n            _885 = _858;\n        }\n        highp vec3 _893 = u_lightColorFA[3].xyz * _884;\n        _909 = _831 + (_893 * max(0.0, dot(_885, _438)));\n        _910 = _832 + (_893 * pow(max(0.0, dot(normalize(_435 + _885), _438)), _Shininess * 128.0));\n    }\n    else\n    {\n        _909 = _831;\n        _910 = _832;\n    }\n    gl_FragData[0] = vec4(_424.xyz * (_909 + (_910 * (_SpecColor.xyz * _416.w))), _426);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp mat4 u_bindTargetWorldInverse;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _505 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _513 = (_505 * _Color) * _AlbedoIntensity;\n    highp vec3 _516 = normalize(varying_ViewDir);\n    highp vec3 _519 = normalize(varying_normalWS);\n    highp vec3 _841 = vec3(0.0);\n    highp vec3 _842 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _835 = vec3(0.0);\n        highp float _836 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _836 = 1.0;\n            _835 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _621 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _625 = max(dot(_621, _621), 6.103515625e-05);\n            highp vec3 _629 = _621 * inversesqrt(_625);\n            highp float _689 = clamp((dot(u_spotDirFA[0].xyz, _629) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _836 = ((1.0 / _625) * clamp((_625 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_689 * _689);\n            _835 = _629;\n        }\n        highp vec3 _540 = u_lightColorFA[0].xyz * _836;\n        _842 = _540 * max(0.0, dot(_835, _519));\n        _841 = _540 * pow(max(0.0, dot(normalize(_516 + _835), _519)), _Shininess * 128.0);\n    }\n    else\n    {\n        _842 = vec3(0.0);\n        _841 = vec3(0.0);\n    }\n    highp vec3 _918 = vec3(0.0);\n    highp vec3 _919 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _893 = 0.0;\n        highp vec3 _894 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _893 = 1.0;\n            _894 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _863 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _865 = max(dot(_863, _863), 6.103515625e-05);\n            highp vec3 _867 = _863 * inversesqrt(_865);\n            highp float _887 = clamp((dot(u_spotDirFA[1].xyz, _867) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _893 = ((1.0 / _865) * clamp((_865 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_887 * _887);\n            _894 = _867;\n        }\n        highp vec3 _902 = u_lightColorFA[1].xyz * _893;\n        _918 = _842 + (_902 * max(0.0, dot(_894, _519)));\n        _919 = _841 + (_902 * pow(max(0.0, dot(normalize(_516 + _894), _519)), _Shininess * 128.0));\n    }\n    else\n    {\n        _918 = _842;\n        _919 = _841;\n    }\n    highp vec3 _996 = vec3(0.0);\n    highp vec3 _997 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _971 = 0.0;\n        highp vec3 _972 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _971 = 1.0;\n            _972 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _941 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _943 = max(dot(_941, _941), 6.103515625e-05);\n            highp vec3 _945 = _941 * inversesqrt(_943);\n            highp float _965 = clamp((dot(u_spotDirFA[2].xyz, _945) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _971 = ((1.0 / _943) * clamp((_943 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_965 * _965);\n            _972 = _945;\n        }\n        highp vec3 _980 = u_lightColorFA[2].xyz * _971;\n        _996 = _918 + (_980 * max(0.0, dot(_972, _519)));\n        _997 = _919 + (_980 * pow(max(0.0, dot(normalize(_516 + _972), _519)), _Shininess * 128.0));\n    }\n    else\n    {\n        _996 = _918;\n        _997 = _919;\n    }\n    highp vec3 _1074 = vec3(0.0);\n    highp vec3 _1075 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1049 = 0.0;\n        highp vec3 _1050 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1049 = 1.0;\n            _1050 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1019 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1021 = max(dot(_1019, _1019), 6.103515625e-05);\n            highp vec3 _1023 = _1019 * inversesqrt(_1021);\n            highp float _1043 = clamp((dot(u_spotDirFA[3].xyz, _1023) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1049 = ((1.0 / _1021) * clamp((_1021 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1043 * _1043);\n            _1050 = _1023;\n        }\n        highp vec3 _1058 = u_lightColorFA[3].xyz * _1049;\n        _1074 = _996 + (_1058 * max(0.0, dot(_1050, _519)));\n        _1075 = _997 + (_1058 * pow(max(0.0, dot(normalize(_516 + _1050), _519)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1074 = _996;\n        _1075 = _997;\n    }\n    highp vec4 _566 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _585 = vec4(_513.xyz * (_1074 + (_1075 * (_566.xyz * _SpecColor.xyz))), _513.w);\n    highp float _727 = length(varying_positionCamera_Fog);\n    highp float _829 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _829 = (u_fogInfos.z - _727) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _830 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _830 = 1.0 / pow(2.7182800769805908203125, _727 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _831 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _831 = 1.0 / pow(2.7182800769805908203125, ((_727 * _727) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _831 = 1.0;\n            }\n            _830 = _831;\n        }\n        _829 = _830;\n    }\n    highp float _773 = clamp(_829, 0.0, 1.0);\n    highp vec3 _782 = (_585.xyz * _773) + (u_fogColor * (1.0 - _773));\n    gl_FragData[0] = vec4(_782.x, _782.y, _782.z, _585.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp mat4 u_bindTargetWorldInverse;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _506 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _514 = (_506 * _Color) * _AlbedoIntensity;\n    highp float _516 = _514.w;\n    if ((_516 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _525 = normalize(varying_ViewDir);\n    highp vec4 _534 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _633 = (_534.xy - vec2(0.5)) * 2.0;\n    highp vec3 _649 = vec3(_633, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_633, _633)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _831 = vec3(0.0);\n    highp vec3 _832 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _825 = vec3(0.0);\n        highp float _826 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _826 = 1.0;\n            _825 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _677 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _681 = max(dot(_677, _677), 6.103515625e-05);\n            highp vec3 _685 = _677 * inversesqrt(_681);\n            highp float _745 = clamp((dot(u_spotDirFA[0].xyz, _685) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _826 = ((1.0 / _681) * clamp((_681 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_745 * _745);\n            _825 = _685;\n        }\n        highp vec3 _577 = u_lightColorFA[0].xyz * _826;\n        _832 = _577 * max(0.0, dot(_825, _649));\n        _831 = _577 * pow(max(0.0, dot(normalize(_525 + _825), _649)), _Shininess * 128.0);\n    }\n    else\n    {\n        _832 = vec3(0.0);\n        _831 = vec3(0.0);\n    }\n    highp vec3 _909 = vec3(0.0);\n    highp vec3 _910 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _884 = 0.0;\n        highp vec3 _885 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _884 = 1.0;\n            _885 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _854 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _856 = max(dot(_854, _854), 6.103515625e-05);\n            highp vec3 _858 = _854 * inversesqrt(_856);\n            highp float _878 = clamp((dot(u_spotDirFA[1].xyz, _858) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _884 = ((1.0 / _856) * clamp((_856 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_878 * _878);\n            _885 = _858;\n        }\n        highp vec3 _893 = u_lightColorFA[1].xyz * _884;\n        _909 = _832 + (_893 * max(0.0, dot(_885, _649)));\n        _910 = _831 + (_893 * pow(max(0.0, dot(normalize(_525 + _885), _649)), _Shininess * 128.0));\n    }\n    else\n    {\n        _909 = _832;\n        _910 = _831;\n    }\n    highp vec3 _987 = vec3(0.0);\n    highp vec3 _988 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _962 = 0.0;\n        highp vec3 _963 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _962 = 1.0;\n            _963 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _932 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _934 = max(dot(_932, _932), 6.103515625e-05);\n            highp vec3 _936 = _932 * inversesqrt(_934);\n            highp float _956 = clamp((dot(u_spotDirFA[2].xyz, _936) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _962 = ((1.0 / _934) * clamp((_934 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_956 * _956);\n            _963 = _936;\n        }\n        highp vec3 _971 = u_lightColorFA[2].xyz * _962;\n        _987 = _909 + (_971 * max(0.0, dot(_963, _649)));\n        _988 = _910 + (_971 * pow(max(0.0, dot(normalize(_525 + _963), _649)), _Shininess * 128.0));\n    }\n    else\n    {\n        _987 = _909;\n        _988 = _910;\n    }\n    highp vec3 _1065 = vec3(0.0);\n    highp vec3 _1066 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1040 = 0.0;\n        highp vec3 _1041 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1040 = 1.0;\n            _1041 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1010 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1012 = max(dot(_1010, _1010), 6.103515625e-05);\n            highp vec3 _1014 = _1010 * inversesqrt(_1012);\n            highp float _1034 = clamp((dot(u_spotDirFA[3].xyz, _1014) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1040 = ((1.0 / _1012) * clamp((_1012 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1034 * _1034);\n            _1041 = _1014;\n        }\n        highp vec3 _1049 = u_lightColorFA[3].xyz * _1040;\n        _1065 = _987 + (_1049 * max(0.0, dot(_1041, _649)));\n        _1066 = _988 + (_1049 * pow(max(0.0, dot(normalize(_525 + _1041), _649)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1065 = _987;\n        _1066 = _988;\n    }\n    gl_FragData[0] = vec4(_514.xyz * (_1065 + (_1066 * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _516);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp mat4 u_bindTargetWorldInverse;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\n\nvoid main()\n{\n    highp vec4 _420 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _428 = (_420 * _Color) * _AlbedoIntensity;\n    highp float _430 = _428.w;\n    if ((_430 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _439 = normalize(varying_ViewDir);\n    highp vec3 _442 = normalize(varying_normalWS);\n    highp vec3 _680 = vec3(0.0);\n    highp vec3 _681 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _674 = vec3(0.0);\n        highp float _675 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _675 = 1.0;\n            _674 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _533 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _537 = max(dot(_533, _533), 6.103515625e-05);\n            highp vec3 _541 = _533 * inversesqrt(_537);\n            highp float _601 = clamp((dot(u_spotDirFA[0].xyz, _541) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _675 = ((1.0 / _537) * clamp((_537 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_601 * _601);\n            _674 = _541;\n        }\n        highp vec3 _463 = u_lightColorFA[0].xyz * _675;\n        _681 = _463 * max(0.0, dot(_674, _442));\n        _680 = _463 * pow(max(0.0, dot(normalize(_439 + _674), _442)), _Shininess * 128.0);\n    }\n    else\n    {\n        _681 = vec3(0.0);\n        _680 = vec3(0.0);\n    }\n    highp vec3 _757 = vec3(0.0);\n    highp vec3 _758 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _732 = 0.0;\n        highp vec3 _733 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _732 = 1.0;\n            _733 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _702 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _704 = max(dot(_702, _702), 6.103515625e-05);\n            highp vec3 _706 = _702 * inversesqrt(_704);\n            highp float _726 = clamp((dot(u_spotDirFA[1].xyz, _706) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _732 = ((1.0 / _704) * clamp((_704 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_726 * _726);\n            _733 = _706;\n        }\n        highp vec3 _741 = u_lightColorFA[1].xyz * _732;\n        _757 = _681 + (_741 * max(0.0, dot(_733, _442)));\n        _758 = _680 + (_741 * pow(max(0.0, dot(normalize(_439 + _733), _442)), _Shininess * 128.0));\n    }\n    else\n    {\n        _757 = _681;\n        _758 = _680;\n    }\n    highp vec3 _835 = vec3(0.0);\n    highp vec3 _836 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _810 = 0.0;\n        highp vec3 _811 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _810 = 1.0;\n            _811 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _780 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _782 = max(dot(_780, _780), 6.103515625e-05);\n            highp vec3 _784 = _780 * inversesqrt(_782);\n            highp float _804 = clamp((dot(u_spotDirFA[2].xyz, _784) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _810 = ((1.0 / _782) * clamp((_782 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_804 * _804);\n            _811 = _784;\n        }\n        highp vec3 _819 = u_lightColorFA[2].xyz * _810;\n        _835 = _757 + (_819 * max(0.0, dot(_811, _442)));\n        _836 = _758 + (_819 * pow(max(0.0, dot(normalize(_439 + _811), _442)), _Shininess * 128.0));\n    }\n    else\n    {\n        _835 = _757;\n        _836 = _758;\n    }\n    highp vec3 _913 = vec3(0.0);\n    highp vec3 _914 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _888 = 0.0;\n        highp vec3 _889 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _888 = 1.0;\n            _889 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _858 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _860 = max(dot(_858, _858), 6.103515625e-05);\n            highp vec3 _862 = _858 * inversesqrt(_860);\n            highp float _882 = clamp((dot(u_spotDirFA[3].xyz, _862) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _888 = ((1.0 / _860) * clamp((_860 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_882 * _882);\n            _889 = _862;\n        }\n        highp vec3 _897 = u_lightColorFA[3].xyz * _888;\n        _913 = _835 + (_897 * max(0.0, dot(_889, _442)));\n        _914 = _836 + (_897 * pow(max(0.0, dot(normalize(_439 + _889), _442)), _Shininess * 128.0));\n    }\n    else\n    {\n        _913 = _835;\n        _914 = _836;\n    }\n    gl_FragData[0] = vec4(_428.xyz * (_913 + (_914 * (_SpecColor.xyz * _420.w))), _430);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _510 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _518 = (_510 * _Color) * _AlbedoIntensity;\n    highp float _520 = _518.w;\n    if ((_520 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _529 = normalize(varying_ViewDir);\n    highp vec3 _532 = normalize(varying_normalWS);\n    highp vec3 _856 = vec3(0.0);\n    highp vec3 _857 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _850 = vec3(0.0);\n        highp float _851 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _851 = 1.0;\n            _850 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _635 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _639 = max(dot(_635, _635), 6.103515625e-05);\n            highp vec3 _643 = _635 * inversesqrt(_639);\n            highp float _703 = clamp((dot(u_spotDirFA[0].xyz, _643) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _851 = ((1.0 / _639) * clamp((_639 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_703 * _703);\n            _850 = _643;\n        }\n        highp vec3 _553 = u_lightColorFA[0].xyz * _851;\n        _857 = _553 * max(0.0, dot(_850, _532));\n        _856 = _553 * pow(max(0.0, dot(normalize(_529 + _850), _532)), _Shininess * 128.0);\n    }\n    else\n    {\n        _857 = vec3(0.0);\n        _856 = vec3(0.0);\n    }\n    highp vec3 _933 = vec3(0.0);\n    highp vec3 _934 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _908 = 0.0;\n        highp vec3 _909 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _908 = 1.0;\n            _909 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _878 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _880 = max(dot(_878, _878), 6.103515625e-05);\n            highp vec3 _882 = _878 * inversesqrt(_880);\n            highp float _902 = clamp((dot(u_spotDirFA[1].xyz, _882) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _908 = ((1.0 / _880) * clamp((_880 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_902 * _902);\n            _909 = _882;\n        }\n        highp vec3 _917 = u_lightColorFA[1].xyz * _908;\n        _933 = _857 + (_917 * max(0.0, dot(_909, _532)));\n        _934 = _856 + (_917 * pow(max(0.0, dot(normalize(_529 + _909), _532)), _Shininess * 128.0));\n    }\n    else\n    {\n        _933 = _857;\n        _934 = _856;\n    }\n    highp vec3 _1011 = vec3(0.0);\n    highp vec3 _1012 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _986 = 0.0;\n        highp vec3 _987 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _986 = 1.0;\n            _987 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _956 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _958 = max(dot(_956, _956), 6.103515625e-05);\n            highp vec3 _960 = _956 * inversesqrt(_958);\n            highp float _980 = clamp((dot(u_spotDirFA[2].xyz, _960) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _986 = ((1.0 / _958) * clamp((_958 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_980 * _980);\n            _987 = _960;\n        }\n        highp vec3 _995 = u_lightColorFA[2].xyz * _986;\n        _1011 = _933 + (_995 * max(0.0, dot(_987, _532)));\n        _1012 = _934 + (_995 * pow(max(0.0, dot(normalize(_529 + _987), _532)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1011 = _933;\n        _1012 = _934;\n    }\n    highp vec3 _1089 = vec3(0.0);\n    highp vec3 _1090 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1064 = 0.0;\n        highp vec3 _1065 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1064 = 1.0;\n            _1065 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1034 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1036 = max(dot(_1034, _1034), 6.103515625e-05);\n            highp vec3 _1038 = _1034 * inversesqrt(_1036);\n            highp float _1058 = clamp((dot(u_spotDirFA[3].xyz, _1038) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1064 = ((1.0 / _1036) * clamp((_1036 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1058 * _1058);\n            _1065 = _1038;\n        }\n        highp vec3 _1073 = u_lightColorFA[3].xyz * _1064;\n        _1089 = _1011 + (_1073 * max(0.0, dot(_1065, _532)));\n        _1090 = _1012 + (_1073 * pow(max(0.0, dot(normalize(_529 + _1065), _532)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1089 = _1011;\n        _1090 = _1012;\n    }\n    highp vec4 _579 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _598 = vec4(_518.xyz * (_1089 + (_1090 * (_579.xyz * _SpecColor.xyz))), _520);\n    highp float _741 = length(varying_positionCamera_Fog);\n    highp float _844 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _844 = (u_fogInfos.z - _741) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _845 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _845 = 1.0 / pow(2.7182800769805908203125, _741 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _846 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _846 = 1.0 / pow(2.7182800769805908203125, ((_741 * _741) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _846 = 1.0;\n            }\n            _845 = _846;\n        }\n        _844 = _845;\n    }\n    highp float _787 = clamp(_844, 0.0, 1.0);\n    highp vec3 _796 = (_598.xyz * _787) + (u_fogColor * (1.0 - _787));\n    gl_FragData[0] = vec4(_796.x, _796.y, _796.z, _598.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp mat4 u_bindTargetWorldInverse;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _514 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _522 = (_514 * _Color) * _AlbedoIntensity;\n    highp float _524 = _522.w;\n    if ((_524 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _533 = normalize(varying_ViewDir);\n    highp vec3 _536 = normalize(varying_normalWS);\n    highp vec3 _860 = vec3(0.0);\n    highp vec3 _861 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _854 = vec3(0.0);\n        highp float _855 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _855 = 1.0;\n            _854 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _639 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _643 = max(dot(_639, _639), 6.103515625e-05);\n            highp vec3 _647 = _639 * inversesqrt(_643);\n            highp float _707 = clamp((dot(u_spotDirFA[0].xyz, _647) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _855 = ((1.0 / _643) * clamp((_643 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_707 * _707);\n            _854 = _647;\n        }\n        highp vec3 _557 = u_lightColorFA[0].xyz * _855;\n        _861 = _557 * max(0.0, dot(_854, _536));\n        _860 = _557 * pow(max(0.0, dot(normalize(_533 + _854), _536)), _Shininess * 128.0);\n    }\n    else\n    {\n        _861 = vec3(0.0);\n        _860 = vec3(0.0);\n    }\n    highp vec3 _937 = vec3(0.0);\n    highp vec3 _938 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _912 = 0.0;\n        highp vec3 _913 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _912 = 1.0;\n            _913 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _882 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _884 = max(dot(_882, _882), 6.103515625e-05);\n            highp vec3 _886 = _882 * inversesqrt(_884);\n            highp float _906 = clamp((dot(u_spotDirFA[1].xyz, _886) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _912 = ((1.0 / _884) * clamp((_884 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_906 * _906);\n            _913 = _886;\n        }\n        highp vec3 _921 = u_lightColorFA[1].xyz * _912;\n        _937 = _861 + (_921 * max(0.0, dot(_913, _536)));\n        _938 = _860 + (_921 * pow(max(0.0, dot(normalize(_533 + _913), _536)), _Shininess * 128.0));\n    }\n    else\n    {\n        _937 = _861;\n        _938 = _860;\n    }\n    highp vec3 _1015 = vec3(0.0);\n    highp vec3 _1016 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _990 = 0.0;\n        highp vec3 _991 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _990 = 1.0;\n            _991 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _960 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _962 = max(dot(_960, _960), 6.103515625e-05);\n            highp vec3 _964 = _960 * inversesqrt(_962);\n            highp float _984 = clamp((dot(u_spotDirFA[2].xyz, _964) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _990 = ((1.0 / _962) * clamp((_962 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_984 * _984);\n            _991 = _964;\n        }\n        highp vec3 _999 = u_lightColorFA[2].xyz * _990;\n        _1015 = _937 + (_999 * max(0.0, dot(_991, _536)));\n        _1016 = _938 + (_999 * pow(max(0.0, dot(normalize(_533 + _991), _536)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1015 = _937;\n        _1016 = _938;\n    }\n    highp vec3 _1093 = vec3(0.0);\n    highp vec3 _1094 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1068 = 0.0;\n        highp vec3 _1069 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1068 = 1.0;\n            _1069 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1038 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1040 = max(dot(_1038, _1038), 6.103515625e-05);\n            highp vec3 _1042 = _1038 * inversesqrt(_1040);\n            highp float _1062 = clamp((dot(u_spotDirFA[3].xyz, _1042) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1068 = ((1.0 / _1040) * clamp((_1040 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1062 * _1062);\n            _1069 = _1042;\n        }\n        highp vec3 _1077 = u_lightColorFA[3].xyz * _1068;\n        _1093 = _1015 + (_1077 * max(0.0, dot(_1069, _536)));\n        _1094 = _1016 + (_1077 * pow(max(0.0, dot(normalize(_533 + _1069), _536)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1093 = _1015;\n        _1094 = _1016;\n    }\n    highp vec4 _583 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _602 = vec4(_522.xyz * (_1093 + (_1094 * (_583.xyz * _SpecColor.xyz))), _524);\n    highp float _745 = length(varying_positionCamera_Fog);\n    highp float _848 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _848 = (u_fogInfos.z - _745) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _849 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _849 = 1.0 / pow(2.7182800769805908203125, _745 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _850 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _850 = 1.0 / pow(2.7182800769805908203125, ((_745 * _745) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _850 = 1.0;\n            }\n            _849 = _850;\n        }\n        _848 = _849;\n    }\n    highp float _791 = clamp(_848, 0.0, 1.0);\n    highp vec3 _800 = (_602.xyz * _791) + (u_fogColor * (1.0 - _791));\n    gl_FragData[0] = vec4(_800.x, _800.y, _800.z, _602.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\n\nvoid main()\n{\n    highp vec4 _513 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _521 = (_513 * _Color) * _AlbedoIntensity;\n    highp float _523 = _521.w;\n    if ((_523 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _532 = normalize(varying_ViewDir);\n    highp vec3 _535 = normalize(varying_normalWS);\n    highp vec3 _859 = vec3(0.0);\n    highp vec3 _860 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _853 = vec3(0.0);\n        highp float _854 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _854 = 1.0;\n            _853 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _638 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _642 = max(dot(_638, _638), 6.103515625e-05);\n            highp vec3 _646 = _638 * inversesqrt(_642);\n            highp float _706 = clamp((dot(u_spotDirFA[0].xyz, _646) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _854 = ((1.0 / _642) * clamp((_642 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_706 * _706);\n            _853 = _646;\n        }\n        highp vec3 _556 = u_lightColorFA[0].xyz * _854;\n        _860 = _556 * max(0.0, dot(_853, _535));\n        _859 = _556 * pow(max(0.0, dot(normalize(_532 + _853), _535)), _Shininess * 128.0);\n    }\n    else\n    {\n        _860 = vec3(0.0);\n        _859 = vec3(0.0);\n    }\n    highp vec3 _936 = vec3(0.0);\n    highp vec3 _937 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _911 = 0.0;\n        highp vec3 _912 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _911 = 1.0;\n            _912 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _881 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _883 = max(dot(_881, _881), 6.103515625e-05);\n            highp vec3 _885 = _881 * inversesqrt(_883);\n            highp float _905 = clamp((dot(u_spotDirFA[1].xyz, _885) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _911 = ((1.0 / _883) * clamp((_883 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_905 * _905);\n            _912 = _885;\n        }\n        highp vec3 _920 = u_lightColorFA[1].xyz * _911;\n        _936 = _860 + (_920 * max(0.0, dot(_912, _535)));\n        _937 = _859 + (_920 * pow(max(0.0, dot(normalize(_532 + _912), _535)), _Shininess * 128.0));\n    }\n    else\n    {\n        _936 = _860;\n        _937 = _859;\n    }\n    highp vec3 _1014 = vec3(0.0);\n    highp vec3 _1015 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _989 = 0.0;\n        highp vec3 _990 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _989 = 1.0;\n            _990 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _959 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _961 = max(dot(_959, _959), 6.103515625e-05);\n            highp vec3 _963 = _959 * inversesqrt(_961);\n            highp float _983 = clamp((dot(u_spotDirFA[2].xyz, _963) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _989 = ((1.0 / _961) * clamp((_961 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_983 * _983);\n            _990 = _963;\n        }\n        highp vec3 _998 = u_lightColorFA[2].xyz * _989;\n        _1014 = _936 + (_998 * max(0.0, dot(_990, _535)));\n        _1015 = _937 + (_998 * pow(max(0.0, dot(normalize(_532 + _990), _535)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1014 = _936;\n        _1015 = _937;\n    }\n    highp vec3 _1092 = vec3(0.0);\n    highp vec3 _1093 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1067 = 0.0;\n        highp vec3 _1068 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1067 = 1.0;\n            _1068 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1037 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1039 = max(dot(_1037, _1037), 6.103515625e-05);\n            highp vec3 _1041 = _1037 * inversesqrt(_1039);\n            highp float _1061 = clamp((dot(u_spotDirFA[3].xyz, _1041) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1067 = ((1.0 / _1039) * clamp((_1039 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1061 * _1061);\n            _1068 = _1041;\n        }\n        highp vec3 _1076 = u_lightColorFA[3].xyz * _1067;\n        _1092 = _1014 + (_1076 * max(0.0, dot(_1068, _535)));\n        _1093 = _1015 + (_1076 * pow(max(0.0, dot(normalize(_532 + _1068), _535)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1092 = _1014;\n        _1093 = _1015;\n    }\n    highp vec4 _582 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _601 = vec4(_521.xyz * (_1092 + (_1093 * (_582.xyz * _SpecColor.xyz))), _523);\n    highp float _744 = length(varying_positionCamera_Fog);\n    highp float _847 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _847 = (u_fogInfos.z - _744) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _848 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _848 = 1.0 / pow(2.7182800769805908203125, _744 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _849 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _849 = 1.0 / pow(2.7182800769805908203125, ((_744 * _744) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _849 = 1.0;\n            }\n            _848 = _849;\n        }\n        _847 = _848;\n    }\n    highp float _790 = clamp(_847, 0.0, 1.0);\n    highp vec3 _799 = (_601.xyz * _790) + (u_fogColor * (1.0 - _790));\n    gl_FragData[0] = vec4(_799.x, _799.y, _799.z, _601.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\n\nvoid main()\n{\n    highp vec4 _421 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _429 = (_421 * _Color) * _AlbedoIntensity;\n    highp float _431 = _429.w;\n    if ((_431 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _440 = normalize(varying_ViewDir);\n    highp vec3 _443 = normalize(varying_normalWS);\n    highp vec3 _685 = vec3(0.0);\n    highp vec3 _686 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _679 = vec3(0.0);\n        highp float _680 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _680 = 1.0;\n            _679 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _539 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _543 = max(dot(_539, _539), 6.103515625e-05);\n            highp vec3 _547 = _539 * inversesqrt(_543);\n            highp float _607 = clamp((dot(u_spotDirFA[0].xyz, _547) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _680 = ((1.0 / _543) * clamp((_543 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_607 * _607);\n            _679 = _547;\n        }\n        highp vec3 _464 = u_lightColorFA[0].xyz * _680;\n        _686 = _464 * max(0.0, dot(_679, _443));\n        _685 = _464 * pow(max(0.0, dot(normalize(_440 + _679), _443)), _Shininess * 128.0);\n    }\n    else\n    {\n        _686 = vec3(0.0);\n        _685 = vec3(0.0);\n    }\n    highp vec3 _762 = vec3(0.0);\n    highp vec3 _763 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _737 = 0.0;\n        highp vec3 _738 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _737 = 1.0;\n            _738 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _707 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _709 = max(dot(_707, _707), 6.103515625e-05);\n            highp vec3 _711 = _707 * inversesqrt(_709);\n            highp float _731 = clamp((dot(u_spotDirFA[1].xyz, _711) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _737 = ((1.0 / _709) * clamp((_709 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_731 * _731);\n            _738 = _711;\n        }\n        highp vec3 _746 = u_lightColorFA[1].xyz * _737;\n        _762 = _686 + (_746 * max(0.0, dot(_738, _443)));\n        _763 = _685 + (_746 * pow(max(0.0, dot(normalize(_440 + _738), _443)), _Shininess * 128.0));\n    }\n    else\n    {\n        _762 = _686;\n        _763 = _685;\n    }\n    highp vec3 _840 = vec3(0.0);\n    highp vec3 _841 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _815 = 0.0;\n        highp vec3 _816 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _815 = 1.0;\n            _816 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _785 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _787 = max(dot(_785, _785), 6.103515625e-05);\n            highp vec3 _789 = _785 * inversesqrt(_787);\n            highp float _809 = clamp((dot(u_spotDirFA[2].xyz, _789) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _815 = ((1.0 / _787) * clamp((_787 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_809 * _809);\n            _816 = _789;\n        }\n        highp vec3 _824 = u_lightColorFA[2].xyz * _815;\n        _840 = _762 + (_824 * max(0.0, dot(_816, _443)));\n        _841 = _763 + (_824 * pow(max(0.0, dot(normalize(_440 + _816), _443)), _Shininess * 128.0));\n    }\n    else\n    {\n        _840 = _762;\n        _841 = _763;\n    }\n    highp vec3 _918 = vec3(0.0);\n    highp vec3 _919 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _893 = 0.0;\n        highp vec3 _894 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _893 = 1.0;\n            _894 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _863 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _865 = max(dot(_863, _863), 6.103515625e-05);\n            highp vec3 _867 = _863 * inversesqrt(_865);\n            highp float _887 = clamp((dot(u_spotDirFA[3].xyz, _867) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _893 = ((1.0 / _865) * clamp((_865 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_887 * _887);\n            _894 = _867;\n        }\n        highp vec3 _902 = u_lightColorFA[3].xyz * _893;\n        _918 = _840 + (_902 * max(0.0, dot(_894, _443)));\n        _919 = _841 + (_902 * pow(max(0.0, dot(normalize(_440 + _894), _443)), _Shininess * 128.0));\n    }\n    else\n    {\n        _918 = _840;\n        _919 = _841;\n    }\n    gl_FragData[0] = vec4(_429.xyz * (_918 + (_919 * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _431);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp mat4 u_bindTargetWorldInverse;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\n\nvoid main()\n{\n    highp vec4 _425 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _433 = (_425 * _Color) * _AlbedoIntensity;\n    highp float _435 = _433.w;\n    if ((_435 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _444 = normalize(varying_ViewDir);\n    highp vec3 _447 = normalize(varying_normalWS);\n    highp vec3 _689 = vec3(0.0);\n    highp vec3 _690 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _683 = vec3(0.0);\n        highp float _684 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _684 = 1.0;\n            _683 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _543 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _547 = max(dot(_543, _543), 6.103515625e-05);\n            highp vec3 _551 = _543 * inversesqrt(_547);\n            highp float _611 = clamp((dot(u_spotDirFA[0].xyz, _551) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _684 = ((1.0 / _547) * clamp((_547 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_611 * _611);\n            _683 = _551;\n        }\n        highp vec3 _468 = u_lightColorFA[0].xyz * _684;\n        _690 = _468 * max(0.0, dot(_683, _447));\n        _689 = _468 * pow(max(0.0, dot(normalize(_444 + _683), _447)), _Shininess * 128.0);\n    }\n    else\n    {\n        _690 = vec3(0.0);\n        _689 = vec3(0.0);\n    }\n    highp vec3 _766 = vec3(0.0);\n    highp vec3 _767 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _741 = 0.0;\n        highp vec3 _742 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _741 = 1.0;\n            _742 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _711 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _713 = max(dot(_711, _711), 6.103515625e-05);\n            highp vec3 _715 = _711 * inversesqrt(_713);\n            highp float _735 = clamp((dot(u_spotDirFA[1].xyz, _715) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _741 = ((1.0 / _713) * clamp((_713 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_735 * _735);\n            _742 = _715;\n        }\n        highp vec3 _750 = u_lightColorFA[1].xyz * _741;\n        _766 = _690 + (_750 * max(0.0, dot(_742, _447)));\n        _767 = _689 + (_750 * pow(max(0.0, dot(normalize(_444 + _742), _447)), _Shininess * 128.0));\n    }\n    else\n    {\n        _766 = _690;\n        _767 = _689;\n    }\n    highp vec3 _844 = vec3(0.0);\n    highp vec3 _845 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _819 = 0.0;\n        highp vec3 _820 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _819 = 1.0;\n            _820 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _789 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _791 = max(dot(_789, _789), 6.103515625e-05);\n            highp vec3 _793 = _789 * inversesqrt(_791);\n            highp float _813 = clamp((dot(u_spotDirFA[2].xyz, _793) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _819 = ((1.0 / _791) * clamp((_791 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_813 * _813);\n            _820 = _793;\n        }\n        highp vec3 _828 = u_lightColorFA[2].xyz * _819;\n        _844 = _766 + (_828 * max(0.0, dot(_820, _447)));\n        _845 = _767 + (_828 * pow(max(0.0, dot(normalize(_444 + _820), _447)), _Shininess * 128.0));\n    }\n    else\n    {\n        _844 = _766;\n        _845 = _767;\n    }\n    highp vec3 _922 = vec3(0.0);\n    highp vec3 _923 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _897 = 0.0;\n        highp vec3 _898 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _897 = 1.0;\n            _898 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _867 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _869 = max(dot(_867, _867), 6.103515625e-05);\n            highp vec3 _871 = _867 * inversesqrt(_869);\n            highp float _891 = clamp((dot(u_spotDirFA[3].xyz, _871) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _897 = ((1.0 / _869) * clamp((_869 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_891 * _891);\n            _898 = _871;\n        }\n        highp vec3 _906 = u_lightColorFA[3].xyz * _897;\n        _922 = _844 + (_906 * max(0.0, dot(_898, _447)));\n        _923 = _845 + (_906 * pow(max(0.0, dot(normalize(_444 + _898), _447)), _Shininess * 128.0));\n    }\n    else\n    {\n        _922 = _844;\n        _923 = _845;\n    }\n    gl_FragData[0] = vec4(_433.xyz * (_922 + (_923 * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _435);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\n\nvoid main()\n{\n    highp vec4 _424 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _432 = (_424 * _Color) * _AlbedoIntensity;\n    highp float _434 = _432.w;\n    if ((_434 - _Cutoff) < 0.0)\n    {\n        discard;\n    }\n    highp vec3 _443 = normalize(varying_ViewDir);\n    highp vec3 _446 = normalize(varying_normalWS);\n    highp vec3 _688 = vec3(0.0);\n    highp vec3 _689 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _682 = vec3(0.0);\n        highp float _683 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _683 = 1.0;\n            _682 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _542 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _546 = max(dot(_542, _542), 6.103515625e-05);\n            highp vec3 _550 = _542 * inversesqrt(_546);\n            highp float _610 = clamp((dot(u_spotDirFA[0].xyz, _550) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _683 = ((1.0 / _546) * clamp((_546 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_610 * _610);\n            _682 = _550;\n        }\n        highp vec3 _467 = u_lightColorFA[0].xyz * _683;\n        _689 = _467 * max(0.0, dot(_682, _446));\n        _688 = _467 * pow(max(0.0, dot(normalize(_443 + _682), _446)), _Shininess * 128.0);\n    }\n    else\n    {\n        _689 = vec3(0.0);\n        _688 = vec3(0.0);\n    }\n    highp vec3 _765 = vec3(0.0);\n    highp vec3 _766 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _740 = 0.0;\n        highp vec3 _741 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _740 = 1.0;\n            _741 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _710 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _712 = max(dot(_710, _710), 6.103515625e-05);\n            highp vec3 _714 = _710 * inversesqrt(_712);\n            highp float _734 = clamp((dot(u_spotDirFA[1].xyz, _714) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _740 = ((1.0 / _712) * clamp((_712 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_734 * _734);\n            _741 = _714;\n        }\n        highp vec3 _749 = u_lightColorFA[1].xyz * _740;\n        _765 = _689 + (_749 * max(0.0, dot(_741, _446)));\n        _766 = _688 + (_749 * pow(max(0.0, dot(normalize(_443 + _741), _446)), _Shininess * 128.0));\n    }\n    else\n    {\n        _765 = _689;\n        _766 = _688;\n    }\n    highp vec3 _843 = vec3(0.0);\n    highp vec3 _844 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _818 = 0.0;\n        highp vec3 _819 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _818 = 1.0;\n            _819 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _788 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _790 = max(dot(_788, _788), 6.103515625e-05);\n            highp vec3 _792 = _788 * inversesqrt(_790);\n            highp float _812 = clamp((dot(u_spotDirFA[2].xyz, _792) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _818 = ((1.0 / _790) * clamp((_790 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_812 * _812);\n            _819 = _792;\n        }\n        highp vec3 _827 = u_lightColorFA[2].xyz * _818;\n        _843 = _765 + (_827 * max(0.0, dot(_819, _446)));\n        _844 = _766 + (_827 * pow(max(0.0, dot(normalize(_443 + _819), _446)), _Shininess * 128.0));\n    }\n    else\n    {\n        _843 = _765;\n        _844 = _766;\n    }\n    highp vec3 _921 = vec3(0.0);\n    highp vec3 _922 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _896 = 0.0;\n        highp vec3 _897 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _896 = 1.0;\n            _897 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _866 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _868 = max(dot(_866, _866), 6.103515625e-05);\n            highp vec3 _870 = _866 * inversesqrt(_868);\n            highp float _890 = clamp((dot(u_spotDirFA[3].xyz, _870) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _896 = ((1.0 / _868) * clamp((_868 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_890 * _890);\n            _897 = _870;\n        }\n        highp vec3 _905 = u_lightColorFA[3].xyz * _896;\n        _921 = _843 + (_905 * max(0.0, dot(_897, _446)));\n        _922 = _844 + (_905 * pow(max(0.0, dot(normalize(_443 + _897), _446)), _Shininess * 128.0));\n    }\n    else\n    {\n        _921 = _843;\n        _922 = _844;\n    }\n    gl_FragData[0] = vec4(_432.xyz * (_921 + (_922 * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _434);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp mat4 u_bindTargetWorldInverse;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _580 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _588 = (_580 * _Color) * _AlbedoIntensity;\n    highp vec3 _591 = normalize(varying_ViewDir);\n    highp vec4 _600 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _700 = (_600.xy - vec2(0.5)) * 2.0;\n    highp vec3 _716 = vec3(_700, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_700, _700)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _973 = vec3(0.0);\n    highp vec3 _974 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _967 = vec3(0.0);\n        highp float _968 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _968 = 1.0;\n            _967 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _744 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _748 = max(dot(_744, _744), 6.103515625e-05);\n            highp vec3 _752 = _744 * inversesqrt(_748);\n            highp float _812 = clamp((dot(u_spotDirFA[0].xyz, _752) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _968 = ((1.0 / _748) * clamp((_748 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_812 * _812);\n            _967 = _752;\n        }\n        highp vec3 _643 = u_lightColorFA[0].xyz * _968;\n        _974 = _643 * max(0.0, dot(_967, _716));\n        _973 = _643 * pow(max(0.0, dot(normalize(_591 + _967), _716)), _Shininess * 128.0);\n    }\n    else\n    {\n        _974 = vec3(0.0);\n        _973 = vec3(0.0);\n    }\n    highp vec3 _1051 = vec3(0.0);\n    highp vec3 _1052 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _1026 = 0.0;\n        highp vec3 _1027 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _1026 = 1.0;\n            _1027 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _996 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _998 = max(dot(_996, _996), 6.103515625e-05);\n            highp vec3 _1000 = _996 * inversesqrt(_998);\n            highp float _1020 = clamp((dot(u_spotDirFA[1].xyz, _1000) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _1026 = ((1.0 / _998) * clamp((_998 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_1020 * _1020);\n            _1027 = _1000;\n        }\n        highp vec3 _1035 = u_lightColorFA[1].xyz * _1026;\n        _1051 = _974 + (_1035 * max(0.0, dot(_1027, _716)));\n        _1052 = _973 + (_1035 * pow(max(0.0, dot(normalize(_591 + _1027), _716)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1051 = _974;\n        _1052 = _973;\n    }\n    highp vec3 _1129 = vec3(0.0);\n    highp vec3 _1130 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _1104 = 0.0;\n        highp vec3 _1105 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _1104 = 1.0;\n            _1105 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _1074 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _1076 = max(dot(_1074, _1074), 6.103515625e-05);\n            highp vec3 _1078 = _1074 * inversesqrt(_1076);\n            highp float _1098 = clamp((dot(u_spotDirFA[2].xyz, _1078) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _1104 = ((1.0 / _1076) * clamp((_1076 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_1098 * _1098);\n            _1105 = _1078;\n        }\n        highp vec3 _1113 = u_lightColorFA[2].xyz * _1104;\n        _1129 = _1051 + (_1113 * max(0.0, dot(_1105, _716)));\n        _1130 = _1052 + (_1113 * pow(max(0.0, dot(normalize(_591 + _1105), _716)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1129 = _1051;\n        _1130 = _1052;\n    }\n    highp vec3 _1207 = vec3(0.0);\n    highp vec3 _1208 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1182 = 0.0;\n        highp vec3 _1183 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1182 = 1.0;\n            _1183 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1152 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1154 = max(dot(_1152, _1152), 6.103515625e-05);\n            highp vec3 _1156 = _1152 * inversesqrt(_1154);\n            highp float _1176 = clamp((dot(u_spotDirFA[3].xyz, _1156) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1182 = ((1.0 / _1154) * clamp((_1154 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1176 * _1176);\n            _1183 = _1156;\n        }\n        highp vec3 _1191 = u_lightColorFA[3].xyz * _1182;\n        _1207 = _1129 + (_1191 * max(0.0, dot(_1183, _716)));\n        _1208 = _1130 + (_1191 * pow(max(0.0, dot(normalize(_591 + _1183), _716)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1207 = _1129;\n        _1208 = _1130;\n    }\n    highp vec4 _683 = vec4(_588.xyz * (_1207 + (_1208 * (_SpecColor.xyz * _580.w))), _588.w);\n    highp float _850 = length(varying_positionCamera_Fog);\n    highp float _961 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _961 = (u_fogInfos.z - _850) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _962 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _962 = 1.0 / pow(2.7182800769805908203125, _850 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _963 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _963 = 1.0 / pow(2.7182800769805908203125, ((_850 * _850) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _963 = 1.0;\n            }\n            _962 = _963;\n        }\n        _961 = _962;\n    }\n    highp float _896 = clamp(_961, 0.0, 1.0);\n    highp vec3 _905 = (_683.xyz * _896) + (u_fogColor * (1.0 - _896));\n    gl_FragData[0] = vec4(_905.x, _905.y, _905.z, _683.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _579 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _587 = (_579 * _Color) * _AlbedoIntensity;\n    highp vec3 _590 = normalize(varying_ViewDir);\n    highp vec4 _599 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _699 = (_599.xy - vec2(0.5)) * 2.0;\n    highp vec3 _715 = vec3(_699, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_699, _699)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _972 = vec3(0.0);\n    highp vec3 _973 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _966 = vec3(0.0);\n        highp float _967 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _967 = 1.0;\n            _966 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _743 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _747 = max(dot(_743, _743), 6.103515625e-05);\n            highp vec3 _751 = _743 * inversesqrt(_747);\n            highp float _811 = clamp((dot(u_spotDirFA[0].xyz, _751) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _967 = ((1.0 / _747) * clamp((_747 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_811 * _811);\n            _966 = _751;\n        }\n        highp vec3 _642 = u_lightColorFA[0].xyz * _967;\n        _973 = _642 * max(0.0, dot(_966, _715));\n        _972 = _642 * pow(max(0.0, dot(normalize(_590 + _966), _715)), _Shininess * 128.0);\n    }\n    else\n    {\n        _973 = vec3(0.0);\n        _972 = vec3(0.0);\n    }\n    highp vec3 _1050 = vec3(0.0);\n    highp vec3 _1051 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _1025 = 0.0;\n        highp vec3 _1026 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _1025 = 1.0;\n            _1026 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _995 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _997 = max(dot(_995, _995), 6.103515625e-05);\n            highp vec3 _999 = _995 * inversesqrt(_997);\n            highp float _1019 = clamp((dot(u_spotDirFA[1].xyz, _999) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _1025 = ((1.0 / _997) * clamp((_997 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_1019 * _1019);\n            _1026 = _999;\n        }\n        highp vec3 _1034 = u_lightColorFA[1].xyz * _1025;\n        _1050 = _973 + (_1034 * max(0.0, dot(_1026, _715)));\n        _1051 = _972 + (_1034 * pow(max(0.0, dot(normalize(_590 + _1026), _715)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1050 = _973;\n        _1051 = _972;\n    }\n    highp vec3 _1128 = vec3(0.0);\n    highp vec3 _1129 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _1103 = 0.0;\n        highp vec3 _1104 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _1103 = 1.0;\n            _1104 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _1073 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _1075 = max(dot(_1073, _1073), 6.103515625e-05);\n            highp vec3 _1077 = _1073 * inversesqrt(_1075);\n            highp float _1097 = clamp((dot(u_spotDirFA[2].xyz, _1077) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _1103 = ((1.0 / _1075) * clamp((_1075 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_1097 * _1097);\n            _1104 = _1077;\n        }\n        highp vec3 _1112 = u_lightColorFA[2].xyz * _1103;\n        _1128 = _1050 + (_1112 * max(0.0, dot(_1104, _715)));\n        _1129 = _1051 + (_1112 * pow(max(0.0, dot(normalize(_590 + _1104), _715)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1128 = _1050;\n        _1129 = _1051;\n    }\n    highp vec3 _1206 = vec3(0.0);\n    highp vec3 _1207 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1181 = 0.0;\n        highp vec3 _1182 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1181 = 1.0;\n            _1182 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1151 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1153 = max(dot(_1151, _1151), 6.103515625e-05);\n            highp vec3 _1155 = _1151 * inversesqrt(_1153);\n            highp float _1175 = clamp((dot(u_spotDirFA[3].xyz, _1155) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1181 = ((1.0 / _1153) * clamp((_1153 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1175 * _1175);\n            _1182 = _1155;\n        }\n        highp vec3 _1190 = u_lightColorFA[3].xyz * _1181;\n        _1206 = _1128 + (_1190 * max(0.0, dot(_1182, _715)));\n        _1207 = _1129 + (_1190 * pow(max(0.0, dot(normalize(_590 + _1182), _715)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1206 = _1128;\n        _1207 = _1129;\n    }\n    highp vec4 _682 = vec4(_587.xyz * (_1206 + (_1207 * (_SpecColor.xyz * _579.w))), _587.w);\n    highp float _849 = length(varying_positionCamera_Fog);\n    highp float _960 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _960 = (u_fogInfos.z - _849) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _961 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _961 = 1.0 / pow(2.7182800769805908203125, _849 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _962 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _962 = 1.0 / pow(2.7182800769805908203125, ((_849 * _849) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _962 = 1.0;\n            }\n            _961 = _962;\n        }\n        _960 = _961;\n    }\n    highp float _895 = clamp(_960, 0.0, 1.0);\n    highp vec3 _904 = (_682.xyz * _895) + (u_fogColor * (1.0 - _895));\n    gl_FragData[0] = vec4(_904.x, _904.y, _904.z, _682.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp mat4 u_bindTargetWorldInverse;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _492 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _500 = (_492 * _Color) * _AlbedoIntensity;\n    highp vec3 _503 = normalize(varying_ViewDir);\n    highp vec4 _512 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _605 = (_512.xy - vec2(0.5)) * 2.0;\n    highp vec3 _621 = vec3(_605, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_605, _605)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _803 = vec3(0.0);\n    highp vec3 _804 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _797 = vec3(0.0);\n        highp float _798 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _798 = 1.0;\n            _797 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _649 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _653 = max(dot(_649, _649), 6.103515625e-05);\n            highp vec3 _657 = _649 * inversesqrt(_653);\n            highp float _717 = clamp((dot(u_spotDirFA[0].xyz, _657) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _798 = ((1.0 / _653) * clamp((_653 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_717 * _717);\n            _797 = _657;\n        }\n        highp vec3 _555 = u_lightColorFA[0].xyz * _798;\n        _804 = _555 * max(0.0, dot(_797, _621));\n        _803 = _555 * pow(max(0.0, dot(normalize(_503 + _797), _621)), _Shininess * 128.0);\n    }\n    else\n    {\n        _804 = vec3(0.0);\n        _803 = vec3(0.0);\n    }\n    highp vec3 _881 = vec3(0.0);\n    highp vec3 _882 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _856 = 0.0;\n        highp vec3 _857 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _856 = 1.0;\n            _857 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _826 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _828 = max(dot(_826, _826), 6.103515625e-05);\n            highp vec3 _830 = _826 * inversesqrt(_828);\n            highp float _850 = clamp((dot(u_spotDirFA[1].xyz, _830) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _856 = ((1.0 / _828) * clamp((_828 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_850 * _850);\n            _857 = _830;\n        }\n        highp vec3 _865 = u_lightColorFA[1].xyz * _856;\n        _881 = _804 + (_865 * max(0.0, dot(_857, _621)));\n        _882 = _803 + (_865 * pow(max(0.0, dot(normalize(_503 + _857), _621)), _Shininess * 128.0));\n    }\n    else\n    {\n        _881 = _804;\n        _882 = _803;\n    }\n    highp vec3 _959 = vec3(0.0);\n    highp vec3 _960 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _934 = 0.0;\n        highp vec3 _935 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _934 = 1.0;\n            _935 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _904 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _906 = max(dot(_904, _904), 6.103515625e-05);\n            highp vec3 _908 = _904 * inversesqrt(_906);\n            highp float _928 = clamp((dot(u_spotDirFA[2].xyz, _908) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _934 = ((1.0 / _906) * clamp((_906 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_928 * _928);\n            _935 = _908;\n        }\n        highp vec3 _943 = u_lightColorFA[2].xyz * _934;\n        _959 = _881 + (_943 * max(0.0, dot(_935, _621)));\n        _960 = _882 + (_943 * pow(max(0.0, dot(normalize(_503 + _935), _621)), _Shininess * 128.0));\n    }\n    else\n    {\n        _959 = _881;\n        _960 = _882;\n    }\n    highp vec3 _1037 = vec3(0.0);\n    highp vec3 _1038 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1012 = 0.0;\n        highp vec3 _1013 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1012 = 1.0;\n            _1013 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _982 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _984 = max(dot(_982, _982), 6.103515625e-05);\n            highp vec3 _986 = _982 * inversesqrt(_984);\n            highp float _1006 = clamp((dot(u_spotDirFA[3].xyz, _986) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1012 = ((1.0 / _984) * clamp((_984 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1006 * _1006);\n            _1013 = _986;\n        }\n        highp vec3 _1021 = u_lightColorFA[3].xyz * _1012;\n        _1037 = _959 + (_1021 * max(0.0, dot(_1013, _621)));\n        _1038 = _960 + (_1021 * pow(max(0.0, dot(normalize(_503 + _1013), _621)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1037 = _959;\n        _1038 = _960;\n    }\n    gl_FragData[0] = vec4(_500.xyz * (_1037 + (_1038 * (_SpecColor.xyz * _492.w))), _500.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _491 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _499 = (_491 * _Color) * _AlbedoIntensity;\n    highp vec3 _502 = normalize(varying_ViewDir);\n    highp vec4 _511 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _604 = (_511.xy - vec2(0.5)) * 2.0;\n    highp vec3 _620 = vec3(_604, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_604, _604)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _802 = vec3(0.0);\n    highp vec3 _803 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _796 = vec3(0.0);\n        highp float _797 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _797 = 1.0;\n            _796 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _648 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _652 = max(dot(_648, _648), 6.103515625e-05);\n            highp vec3 _656 = _648 * inversesqrt(_652);\n            highp float _716 = clamp((dot(u_spotDirFA[0].xyz, _656) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _797 = ((1.0 / _652) * clamp((_652 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_716 * _716);\n            _796 = _656;\n        }\n        highp vec3 _554 = u_lightColorFA[0].xyz * _797;\n        _803 = _554 * max(0.0, dot(_796, _620));\n        _802 = _554 * pow(max(0.0, dot(normalize(_502 + _796), _620)), _Shininess * 128.0);\n    }\n    else\n    {\n        _803 = vec3(0.0);\n        _802 = vec3(0.0);\n    }\n    highp vec3 _880 = vec3(0.0);\n    highp vec3 _881 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _855 = 0.0;\n        highp vec3 _856 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _855 = 1.0;\n            _856 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _825 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _827 = max(dot(_825, _825), 6.103515625e-05);\n            highp vec3 _829 = _825 * inversesqrt(_827);\n            highp float _849 = clamp((dot(u_spotDirFA[1].xyz, _829) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _855 = ((1.0 / _827) * clamp((_827 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_849 * _849);\n            _856 = _829;\n        }\n        highp vec3 _864 = u_lightColorFA[1].xyz * _855;\n        _880 = _803 + (_864 * max(0.0, dot(_856, _620)));\n        _881 = _802 + (_864 * pow(max(0.0, dot(normalize(_502 + _856), _620)), _Shininess * 128.0));\n    }\n    else\n    {\n        _880 = _803;\n        _881 = _802;\n    }\n    highp vec3 _958 = vec3(0.0);\n    highp vec3 _959 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _933 = 0.0;\n        highp vec3 _934 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _933 = 1.0;\n            _934 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _903 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _905 = max(dot(_903, _903), 6.103515625e-05);\n            highp vec3 _907 = _903 * inversesqrt(_905);\n            highp float _927 = clamp((dot(u_spotDirFA[2].xyz, _907) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _933 = ((1.0 / _905) * clamp((_905 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_927 * _927);\n            _934 = _907;\n        }\n        highp vec3 _942 = u_lightColorFA[2].xyz * _933;\n        _958 = _880 + (_942 * max(0.0, dot(_934, _620)));\n        _959 = _881 + (_942 * pow(max(0.0, dot(normalize(_502 + _934), _620)), _Shininess * 128.0));\n    }\n    else\n    {\n        _958 = _880;\n        _959 = _881;\n    }\n    highp vec3 _1036 = vec3(0.0);\n    highp vec3 _1037 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1011 = 0.0;\n        highp vec3 _1012 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1011 = 1.0;\n            _1012 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _981 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _983 = max(dot(_981, _981), 6.103515625e-05);\n            highp vec3 _985 = _981 * inversesqrt(_983);\n            highp float _1005 = clamp((dot(u_spotDirFA[3].xyz, _985) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1011 = ((1.0 / _983) * clamp((_983 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1005 * _1005);\n            _1012 = _985;\n        }\n        highp vec3 _1020 = u_lightColorFA[3].xyz * _1011;\n        _1036 = _958 + (_1020 * max(0.0, dot(_1012, _620)));\n        _1037 = _959 + (_1020 * pow(max(0.0, dot(normalize(_502 + _1012), _620)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1036 = _958;\n        _1037 = _959;\n    }\n    gl_FragData[0] = vec4(_499.xyz * (_1036 + (_1037 * (_SpecColor.xyz * _491.w))), _499.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp mat4 u_bindTargetWorldInverse;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _585 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _593 = (_585 * _Color) * _AlbedoIntensity;\n    highp vec3 _596 = normalize(varying_ViewDir);\n    highp vec4 _605 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _710 = (_605.xy - vec2(0.5)) * 2.0;\n    highp vec3 _726 = vec3(_710, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_710, _710)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _982 = vec3(0.0);\n    highp vec3 _983 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _976 = vec3(0.0);\n        highp float _977 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _977 = 1.0;\n            _976 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _754 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _758 = max(dot(_754, _754), 6.103515625e-05);\n            highp vec3 _762 = _754 * inversesqrt(_758);\n            highp float _822 = clamp((dot(u_spotDirFA[0].xyz, _762) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _977 = ((1.0 / _758) * clamp((_758 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_822 * _822);\n            _976 = _762;\n        }\n        highp vec3 _648 = u_lightColorFA[0].xyz * _977;\n        _983 = _648 * max(0.0, dot(_976, _726));\n        _982 = _648 * pow(max(0.0, dot(normalize(_596 + _976), _726)), _Shininess * 128.0);\n    }\n    else\n    {\n        _983 = vec3(0.0);\n        _982 = vec3(0.0);\n    }\n    highp vec3 _1060 = vec3(0.0);\n    highp vec3 _1061 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _1035 = 0.0;\n        highp vec3 _1036 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _1035 = 1.0;\n            _1036 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _1005 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _1007 = max(dot(_1005, _1005), 6.103515625e-05);\n            highp vec3 _1009 = _1005 * inversesqrt(_1007);\n            highp float _1029 = clamp((dot(u_spotDirFA[1].xyz, _1009) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _1035 = ((1.0 / _1007) * clamp((_1007 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_1029 * _1029);\n            _1036 = _1009;\n        }\n        highp vec3 _1044 = u_lightColorFA[1].xyz * _1035;\n        _1060 = _983 + (_1044 * max(0.0, dot(_1036, _726)));\n        _1061 = _982 + (_1044 * pow(max(0.0, dot(normalize(_596 + _1036), _726)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1060 = _983;\n        _1061 = _982;\n    }\n    highp vec3 _1138 = vec3(0.0);\n    highp vec3 _1139 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _1113 = 0.0;\n        highp vec3 _1114 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _1113 = 1.0;\n            _1114 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _1083 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _1085 = max(dot(_1083, _1083), 6.103515625e-05);\n            highp vec3 _1087 = _1083 * inversesqrt(_1085);\n            highp float _1107 = clamp((dot(u_spotDirFA[2].xyz, _1087) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _1113 = ((1.0 / _1085) * clamp((_1085 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_1107 * _1107);\n            _1114 = _1087;\n        }\n        highp vec3 _1122 = u_lightColorFA[2].xyz * _1113;\n        _1138 = _1060 + (_1122 * max(0.0, dot(_1114, _726)));\n        _1139 = _1061 + (_1122 * pow(max(0.0, dot(normalize(_596 + _1114), _726)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1138 = _1060;\n        _1139 = _1061;\n    }\n    highp vec3 _1216 = vec3(0.0);\n    highp vec3 _1217 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1191 = 0.0;\n        highp vec3 _1192 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1191 = 1.0;\n            _1192 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1161 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1163 = max(dot(_1161, _1161), 6.103515625e-05);\n            highp vec3 _1165 = _1161 * inversesqrt(_1163);\n            highp float _1185 = clamp((dot(u_spotDirFA[3].xyz, _1165) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1191 = ((1.0 / _1163) * clamp((_1163 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1185 * _1185);\n            _1192 = _1165;\n        }\n        highp vec3 _1200 = u_lightColorFA[3].xyz * _1191;\n        _1216 = _1138 + (_1200 * max(0.0, dot(_1192, _726)));\n        _1217 = _1139 + (_1200 * pow(max(0.0, dot(normalize(_596 + _1192), _726)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1216 = _1138;\n        _1217 = _1139;\n    }\n    highp vec4 _674 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _693 = vec4(_593.xyz * (_1216 + (_1217 * (_674.xyz * _SpecColor.xyz))), _593.w);\n    highp float _860 = length(varying_positionCamera_Fog);\n    highp float _970 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _970 = (u_fogInfos.z - _860) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _971 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _971 = 1.0 / pow(2.7182800769805908203125, _860 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _972 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _972 = 1.0 / pow(2.7182800769805908203125, ((_860 * _860) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _972 = 1.0;\n            }\n            _971 = _972;\n        }\n        _970 = _971;\n    }\n    highp float _906 = clamp(_970, 0.0, 1.0);\n    highp vec3 _915 = (_693.xyz * _906) + (u_fogColor * (1.0 - _906));\n    gl_FragData[0] = vec4(_915.x, _915.y, _915.z, _693.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _584 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _592 = (_584 * _Color) * _AlbedoIntensity;\n    highp vec3 _595 = normalize(varying_ViewDir);\n    highp vec4 _604 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _709 = (_604.xy - vec2(0.5)) * 2.0;\n    highp vec3 _725 = vec3(_709, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_709, _709)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _981 = vec3(0.0);\n    highp vec3 _982 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _975 = vec3(0.0);\n        highp float _976 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _976 = 1.0;\n            _975 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _753 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _757 = max(dot(_753, _753), 6.103515625e-05);\n            highp vec3 _761 = _753 * inversesqrt(_757);\n            highp float _821 = clamp((dot(u_spotDirFA[0].xyz, _761) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _976 = ((1.0 / _757) * clamp((_757 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_821 * _821);\n            _975 = _761;\n        }\n        highp vec3 _647 = u_lightColorFA[0].xyz * _976;\n        _982 = _647 * max(0.0, dot(_975, _725));\n        _981 = _647 * pow(max(0.0, dot(normalize(_595 + _975), _725)), _Shininess * 128.0);\n    }\n    else\n    {\n        _982 = vec3(0.0);\n        _981 = vec3(0.0);\n    }\n    highp vec3 _1059 = vec3(0.0);\n    highp vec3 _1060 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _1034 = 0.0;\n        highp vec3 _1035 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _1034 = 1.0;\n            _1035 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _1004 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _1006 = max(dot(_1004, _1004), 6.103515625e-05);\n            highp vec3 _1008 = _1004 * inversesqrt(_1006);\n            highp float _1028 = clamp((dot(u_spotDirFA[1].xyz, _1008) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _1034 = ((1.0 / _1006) * clamp((_1006 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_1028 * _1028);\n            _1035 = _1008;\n        }\n        highp vec3 _1043 = u_lightColorFA[1].xyz * _1034;\n        _1059 = _982 + (_1043 * max(0.0, dot(_1035, _725)));\n        _1060 = _981 + (_1043 * pow(max(0.0, dot(normalize(_595 + _1035), _725)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1059 = _982;\n        _1060 = _981;\n    }\n    highp vec3 _1137 = vec3(0.0);\n    highp vec3 _1138 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _1112 = 0.0;\n        highp vec3 _1113 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _1112 = 1.0;\n            _1113 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _1082 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _1084 = max(dot(_1082, _1082), 6.103515625e-05);\n            highp vec3 _1086 = _1082 * inversesqrt(_1084);\n            highp float _1106 = clamp((dot(u_spotDirFA[2].xyz, _1086) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _1112 = ((1.0 / _1084) * clamp((_1084 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_1106 * _1106);\n            _1113 = _1086;\n        }\n        highp vec3 _1121 = u_lightColorFA[2].xyz * _1112;\n        _1137 = _1059 + (_1121 * max(0.0, dot(_1113, _725)));\n        _1138 = _1060 + (_1121 * pow(max(0.0, dot(normalize(_595 + _1113), _725)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1137 = _1059;\n        _1138 = _1060;\n    }\n    highp vec3 _1215 = vec3(0.0);\n    highp vec3 _1216 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1190 = 0.0;\n        highp vec3 _1191 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1190 = 1.0;\n            _1191 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1160 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1162 = max(dot(_1160, _1160), 6.103515625e-05);\n            highp vec3 _1164 = _1160 * inversesqrt(_1162);\n            highp float _1184 = clamp((dot(u_spotDirFA[3].xyz, _1164) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1190 = ((1.0 / _1162) * clamp((_1162 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1184 * _1184);\n            _1191 = _1164;\n        }\n        highp vec3 _1199 = u_lightColorFA[3].xyz * _1190;\n        _1215 = _1137 + (_1199 * max(0.0, dot(_1191, _725)));\n        _1216 = _1138 + (_1199 * pow(max(0.0, dot(normalize(_595 + _1191), _725)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1215 = _1137;\n        _1216 = _1138;\n    }\n    highp vec4 _673 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _692 = vec4(_592.xyz * (_1215 + (_1216 * (_673.xyz * _SpecColor.xyz))), _592.w);\n    highp float _859 = length(varying_positionCamera_Fog);\n    highp float _969 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _969 = (u_fogInfos.z - _859) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _970 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _970 = 1.0 / pow(2.7182800769805908203125, _859 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _971 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _971 = 1.0 / pow(2.7182800769805908203125, ((_859 * _859) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _971 = 1.0;\n            }\n            _970 = _971;\n        }\n        _969 = _970;\n    }\n    highp float _905 = clamp(_969, 0.0, 1.0);\n    highp vec3 _914 = (_692.xyz * _905) + (u_fogColor * (1.0 - _905));\n    gl_FragData[0] = vec4(_914.x, _914.y, _914.z, _692.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp mat4 u_bindTargetWorldInverse;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _497 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _505 = (_497 * _Color) * _AlbedoIntensity;\n    highp vec3 _508 = normalize(varying_ViewDir);\n    highp vec4 _517 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _615 = (_517.xy - vec2(0.5)) * 2.0;\n    highp vec3 _631 = vec3(_615, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_615, _615)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _812 = vec3(0.0);\n    highp vec3 _813 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _806 = vec3(0.0);\n        highp float _807 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _807 = 1.0;\n            _806 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _659 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _663 = max(dot(_659, _659), 6.103515625e-05);\n            highp vec3 _667 = _659 * inversesqrt(_663);\n            highp float _727 = clamp((dot(u_spotDirFA[0].xyz, _667) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _807 = ((1.0 / _663) * clamp((_663 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_727 * _727);\n            _806 = _667;\n        }\n        highp vec3 _560 = u_lightColorFA[0].xyz * _807;\n        _813 = _560 * max(0.0, dot(_806, _631));\n        _812 = _560 * pow(max(0.0, dot(normalize(_508 + _806), _631)), _Shininess * 128.0);\n    }\n    else\n    {\n        _813 = vec3(0.0);\n        _812 = vec3(0.0);\n    }\n    highp vec3 _890 = vec3(0.0);\n    highp vec3 _891 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _865 = 0.0;\n        highp vec3 _866 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _865 = 1.0;\n            _866 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _835 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _837 = max(dot(_835, _835), 6.103515625e-05);\n            highp vec3 _839 = _835 * inversesqrt(_837);\n            highp float _859 = clamp((dot(u_spotDirFA[1].xyz, _839) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _865 = ((1.0 / _837) * clamp((_837 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_859 * _859);\n            _866 = _839;\n        }\n        highp vec3 _874 = u_lightColorFA[1].xyz * _865;\n        _890 = _813 + (_874 * max(0.0, dot(_866, _631)));\n        _891 = _812 + (_874 * pow(max(0.0, dot(normalize(_508 + _866), _631)), _Shininess * 128.0));\n    }\n    else\n    {\n        _890 = _813;\n        _891 = _812;\n    }\n    highp vec3 _968 = vec3(0.0);\n    highp vec3 _969 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _943 = 0.0;\n        highp vec3 _944 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _943 = 1.0;\n            _944 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _913 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _915 = max(dot(_913, _913), 6.103515625e-05);\n            highp vec3 _917 = _913 * inversesqrt(_915);\n            highp float _937 = clamp((dot(u_spotDirFA[2].xyz, _917) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _943 = ((1.0 / _915) * clamp((_915 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_937 * _937);\n            _944 = _917;\n        }\n        highp vec3 _952 = u_lightColorFA[2].xyz * _943;\n        _968 = _890 + (_952 * max(0.0, dot(_944, _631)));\n        _969 = _891 + (_952 * pow(max(0.0, dot(normalize(_508 + _944), _631)), _Shininess * 128.0));\n    }\n    else\n    {\n        _968 = _890;\n        _969 = _891;\n    }\n    highp vec3 _1046 = vec3(0.0);\n    highp vec3 _1047 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1021 = 0.0;\n        highp vec3 _1022 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1021 = 1.0;\n            _1022 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _991 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _993 = max(dot(_991, _991), 6.103515625e-05);\n            highp vec3 _995 = _991 * inversesqrt(_993);\n            highp float _1015 = clamp((dot(u_spotDirFA[3].xyz, _995) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1021 = ((1.0 / _993) * clamp((_993 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1015 * _1015);\n            _1022 = _995;\n        }\n        highp vec3 _1030 = u_lightColorFA[3].xyz * _1021;\n        _1046 = _968 + (_1030 * max(0.0, dot(_1022, _631)));\n        _1047 = _969 + (_1030 * pow(max(0.0, dot(normalize(_508 + _1022), _631)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1046 = _968;\n        _1047 = _969;\n    }\n    gl_FragData[0] = vec4(_505.xyz * (_1046 + (_1047 * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _505.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_boneOffsetMatrix[288];\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _496 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _504 = (_496 * _Color) * _AlbedoIntensity;\n    highp vec3 _507 = normalize(varying_ViewDir);\n    highp vec4 _516 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _614 = (_516.xy - vec2(0.5)) * 2.0;\n    highp vec3 _630 = vec3(_614, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_614, _614)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _811 = vec3(0.0);\n    highp vec3 _812 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _805 = vec3(0.0);\n        highp float _806 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _806 = 1.0;\n            _805 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _658 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _662 = max(dot(_658, _658), 6.103515625e-05);\n            highp vec3 _666 = _658 * inversesqrt(_662);\n            highp float _726 = clamp((dot(u_spotDirFA[0].xyz, _666) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _806 = ((1.0 / _662) * clamp((_662 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_726 * _726);\n            _805 = _666;\n        }\n        highp vec3 _559 = u_lightColorFA[0].xyz * _806;\n        _812 = _559 * max(0.0, dot(_805, _630));\n        _811 = _559 * pow(max(0.0, dot(normalize(_507 + _805), _630)), _Shininess * 128.0);\n    }\n    else\n    {\n        _812 = vec3(0.0);\n        _811 = vec3(0.0);\n    }\n    highp vec3 _889 = vec3(0.0);\n    highp vec3 _890 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _864 = 0.0;\n        highp vec3 _865 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _864 = 1.0;\n            _865 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _834 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _836 = max(dot(_834, _834), 6.103515625e-05);\n            highp vec3 _838 = _834 * inversesqrt(_836);\n            highp float _858 = clamp((dot(u_spotDirFA[1].xyz, _838) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _864 = ((1.0 / _836) * clamp((_836 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_858 * _858);\n            _865 = _838;\n        }\n        highp vec3 _873 = u_lightColorFA[1].xyz * _864;\n        _889 = _812 + (_873 * max(0.0, dot(_865, _630)));\n        _890 = _811 + (_873 * pow(max(0.0, dot(normalize(_507 + _865), _630)), _Shininess * 128.0));\n    }\n    else\n    {\n        _889 = _812;\n        _890 = _811;\n    }\n    highp vec3 _967 = vec3(0.0);\n    highp vec3 _968 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _942 = 0.0;\n        highp vec3 _943 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _942 = 1.0;\n            _943 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _912 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _914 = max(dot(_912, _912), 6.103515625e-05);\n            highp vec3 _916 = _912 * inversesqrt(_914);\n            highp float _936 = clamp((dot(u_spotDirFA[2].xyz, _916) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _942 = ((1.0 / _914) * clamp((_914 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_936 * _936);\n            _943 = _916;\n        }\n        highp vec3 _951 = u_lightColorFA[2].xyz * _942;\n        _967 = _889 + (_951 * max(0.0, dot(_943, _630)));\n        _968 = _890 + (_951 * pow(max(0.0, dot(normalize(_507 + _943), _630)), _Shininess * 128.0));\n    }\n    else\n    {\n        _967 = _889;\n        _968 = _890;\n    }\n    highp vec3 _1045 = vec3(0.0);\n    highp vec3 _1046 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1020 = 0.0;\n        highp vec3 _1021 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1020 = 1.0;\n            _1021 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _990 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _992 = max(dot(_990, _990), 6.103515625e-05);\n            highp vec3 _994 = _990 * inversesqrt(_992);\n            highp float _1014 = clamp((dot(u_spotDirFA[3].xyz, _994) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1020 = ((1.0 / _992) * clamp((_992 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1014 * _1014);\n            _1021 = _994;\n        }\n        highp vec3 _1029 = u_lightColorFA[3].xyz * _1020;\n        _1045 = _967 + (_1029 * max(0.0, dot(_1021, _630)));\n        _1046 = _968 + (_1029 * pow(max(0.0, dot(normalize(_507 + _1021), _630)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1045 = _967;\n        _1046 = _968;\n    }\n    gl_FragData[0] = vec4(_504.xyz * (_1045 + (_1046 * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _504.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _582 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _590 = (_582 * _Color) * _AlbedoIntensity;\n    highp vec3 _593 = normalize(varying_ViewDir);\n    highp vec4 _602 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _707 = (_602.xy - vec2(0.5)) * 2.0;\n    highp vec3 _723 = vec3(_707, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_707, _707)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _979 = vec3(0.0);\n    highp vec3 _980 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _973 = vec3(0.0);\n        highp float _974 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _974 = 1.0;\n            _973 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _751 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _755 = max(dot(_751, _751), 6.103515625e-05);\n            highp vec3 _759 = _751 * inversesqrt(_755);\n            highp float _819 = clamp((dot(u_spotDirFA[0].xyz, _759) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _974 = ((1.0 / _755) * clamp((_755 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_819 * _819);\n            _973 = _759;\n        }\n        highp vec3 _645 = u_lightColorFA[0].xyz * _974;\n        _980 = _645 * max(0.0, dot(_973, _723));\n        _979 = _645 * pow(max(0.0, dot(normalize(_593 + _973), _723)), _Shininess * 128.0);\n    }\n    else\n    {\n        _980 = vec3(0.0);\n        _979 = vec3(0.0);\n    }\n    highp vec3 _1057 = vec3(0.0);\n    highp vec3 _1058 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _1032 = 0.0;\n        highp vec3 _1033 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _1032 = 1.0;\n            _1033 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _1002 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _1004 = max(dot(_1002, _1002), 6.103515625e-05);\n            highp vec3 _1006 = _1002 * inversesqrt(_1004);\n            highp float _1026 = clamp((dot(u_spotDirFA[1].xyz, _1006) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _1032 = ((1.0 / _1004) * clamp((_1004 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_1026 * _1026);\n            _1033 = _1006;\n        }\n        highp vec3 _1041 = u_lightColorFA[1].xyz * _1032;\n        _1057 = _980 + (_1041 * max(0.0, dot(_1033, _723)));\n        _1058 = _979 + (_1041 * pow(max(0.0, dot(normalize(_593 + _1033), _723)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1057 = _980;\n        _1058 = _979;\n    }\n    highp vec3 _1135 = vec3(0.0);\n    highp vec3 _1136 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _1110 = 0.0;\n        highp vec3 _1111 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _1110 = 1.0;\n            _1111 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _1080 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _1082 = max(dot(_1080, _1080), 6.103515625e-05);\n            highp vec3 _1084 = _1080 * inversesqrt(_1082);\n            highp float _1104 = clamp((dot(u_spotDirFA[2].xyz, _1084) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _1110 = ((1.0 / _1082) * clamp((_1082 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_1104 * _1104);\n            _1111 = _1084;\n        }\n        highp vec3 _1119 = u_lightColorFA[2].xyz * _1110;\n        _1135 = _1057 + (_1119 * max(0.0, dot(_1111, _723)));\n        _1136 = _1058 + (_1119 * pow(max(0.0, dot(normalize(_593 + _1111), _723)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1135 = _1057;\n        _1136 = _1058;\n    }\n    highp vec3 _1213 = vec3(0.0);\n    highp vec3 _1214 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1188 = 0.0;\n        highp vec3 _1189 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1188 = 1.0;\n            _1189 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1158 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1160 = max(dot(_1158, _1158), 6.103515625e-05);\n            highp vec3 _1162 = _1158 * inversesqrt(_1160);\n            highp float _1182 = clamp((dot(u_spotDirFA[3].xyz, _1162) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1188 = ((1.0 / _1160) * clamp((_1160 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1182 * _1182);\n            _1189 = _1162;\n        }\n        highp vec3 _1197 = u_lightColorFA[3].xyz * _1188;\n        _1213 = _1135 + (_1197 * max(0.0, dot(_1189, _723)));\n        _1214 = _1136 + (_1197 * pow(max(0.0, dot(normalize(_593 + _1189), _723)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1213 = _1135;\n        _1214 = _1136;\n    }\n    highp vec4 _671 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _690 = vec4(_590.xyz * (_1213 + (_1214 * (_671.xyz * _SpecColor.xyz))), _590.w);\n    highp float _857 = length(varying_positionCamera_Fog);\n    highp float _967 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _967 = (u_fogInfos.z - _857) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _968 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _968 = 1.0 / pow(2.7182800769805908203125, _857 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _969 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _969 = 1.0 / pow(2.7182800769805908203125, ((_857 * _857) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _969 = 1.0;\n            }\n            _968 = _969;\n        }\n        _967 = _968;\n    }\n    highp float _903 = clamp(_967, 0.0, 1.0);\n    highp vec3 _912 = (_690.xyz * _903) + (u_fogColor * (1.0 - _903));\n    gl_FragData[0] = vec4(_912.x, _912.y, _912.z, _690.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _493 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _501 = (_493 * _Color) * _AlbedoIntensity;\n    highp vec3 _504 = normalize(varying_ViewDir);\n    highp vec4 _513 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _611 = (_513.xy - vec2(0.5)) * 2.0;\n    highp vec3 _627 = vec3(_611, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_611, _611)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _808 = vec3(0.0);\n    highp vec3 _809 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _802 = vec3(0.0);\n        highp float _803 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _803 = 1.0;\n            _802 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _655 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _659 = max(dot(_655, _655), 6.103515625e-05);\n            highp vec3 _663 = _655 * inversesqrt(_659);\n            highp float _723 = clamp((dot(u_spotDirFA[0].xyz, _663) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _803 = ((1.0 / _659) * clamp((_659 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_723 * _723);\n            _802 = _663;\n        }\n        highp vec3 _556 = u_lightColorFA[0].xyz * _803;\n        _809 = _556 * max(0.0, dot(_802, _627));\n        _808 = _556 * pow(max(0.0, dot(normalize(_504 + _802), _627)), _Shininess * 128.0);\n    }\n    else\n    {\n        _809 = vec3(0.0);\n        _808 = vec3(0.0);\n    }\n    highp vec3 _886 = vec3(0.0);\n    highp vec3 _887 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _861 = 0.0;\n        highp vec3 _862 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _861 = 1.0;\n            _862 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _831 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _833 = max(dot(_831, _831), 6.103515625e-05);\n            highp vec3 _835 = _831 * inversesqrt(_833);\n            highp float _855 = clamp((dot(u_spotDirFA[1].xyz, _835) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _861 = ((1.0 / _833) * clamp((_833 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_855 * _855);\n            _862 = _835;\n        }\n        highp vec3 _870 = u_lightColorFA[1].xyz * _861;\n        _886 = _809 + (_870 * max(0.0, dot(_862, _627)));\n        _887 = _808 + (_870 * pow(max(0.0, dot(normalize(_504 + _862), _627)), _Shininess * 128.0));\n    }\n    else\n    {\n        _886 = _809;\n        _887 = _808;\n    }\n    highp vec3 _964 = vec3(0.0);\n    highp vec3 _965 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _939 = 0.0;\n        highp vec3 _940 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _939 = 1.0;\n            _940 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _909 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _911 = max(dot(_909, _909), 6.103515625e-05);\n            highp vec3 _913 = _909 * inversesqrt(_911);\n            highp float _933 = clamp((dot(u_spotDirFA[2].xyz, _913) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _939 = ((1.0 / _911) * clamp((_911 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_933 * _933);\n            _940 = _913;\n        }\n        highp vec3 _948 = u_lightColorFA[2].xyz * _939;\n        _964 = _886 + (_948 * max(0.0, dot(_940, _627)));\n        _965 = _887 + (_948 * pow(max(0.0, dot(normalize(_504 + _940), _627)), _Shininess * 128.0));\n    }\n    else\n    {\n        _964 = _886;\n        _965 = _887;\n    }\n    highp vec3 _1042 = vec3(0.0);\n    highp vec3 _1043 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1017 = 0.0;\n        highp vec3 _1018 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1017 = 1.0;\n            _1018 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _987 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _989 = max(dot(_987, _987), 6.103515625e-05);\n            highp vec3 _991 = _987 * inversesqrt(_989);\n            highp float _1011 = clamp((dot(u_spotDirFA[3].xyz, _991) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1017 = ((1.0 / _989) * clamp((_989 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1011 * _1011);\n            _1018 = _991;\n        }\n        highp vec3 _1026 = u_lightColorFA[3].xyz * _1017;\n        _1042 = _964 + (_1026 * max(0.0, dot(_1018, _627)));\n        _1043 = _965 + (_1026 * pow(max(0.0, dot(normalize(_504 + _1018), _627)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1042 = _964;\n        _1043 = _965;\n    }\n    gl_FragData[0] = vec4(_501.xyz * (_1042 + (_1043 * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _501.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_skinnedAnimationMapInfo;\nuniform highp float u_skinnedAnimationInfo;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _492 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _500 = (_492 * _Color) * _AlbedoIntensity;\n    highp vec3 _503 = normalize(varying_ViewDir);\n    highp vec4 _512 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _605 = (_512.xy - vec2(0.5)) * 2.0;\n    highp vec3 _621 = vec3(_605, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_605, _605)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _803 = vec3(0.0);\n    highp vec3 _804 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _797 = vec3(0.0);\n        highp float _798 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _798 = 1.0;\n            _797 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _649 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _653 = max(dot(_649, _649), 6.103515625e-05);\n            highp vec3 _657 = _649 * inversesqrt(_653);\n            highp float _717 = clamp((dot(u_spotDirFA[0].xyz, _657) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _798 = ((1.0 / _653) * clamp((_653 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_717 * _717);\n            _797 = _657;\n        }\n        highp vec3 _555 = u_lightColorFA[0].xyz * _798;\n        _804 = _555 * max(0.0, dot(_797, _621));\n        _803 = _555 * pow(max(0.0, dot(normalize(_503 + _797), _621)), _Shininess * 128.0);\n    }\n    else\n    {\n        _804 = vec3(0.0);\n        _803 = vec3(0.0);\n    }\n    highp vec3 _881 = vec3(0.0);\n    highp vec3 _882 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _856 = 0.0;\n        highp vec3 _857 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _856 = 1.0;\n            _857 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _826 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _828 = max(dot(_826, _826), 6.103515625e-05);\n            highp vec3 _830 = _826 * inversesqrt(_828);\n            highp float _850 = clamp((dot(u_spotDirFA[1].xyz, _830) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _856 = ((1.0 / _828) * clamp((_828 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_850 * _850);\n            _857 = _830;\n        }\n        highp vec3 _865 = u_lightColorFA[1].xyz * _856;\n        _881 = _804 + (_865 * max(0.0, dot(_857, _621)));\n        _882 = _803 + (_865 * pow(max(0.0, dot(normalize(_503 + _857), _621)), _Shininess * 128.0));\n    }\n    else\n    {\n        _881 = _804;\n        _882 = _803;\n    }\n    highp vec3 _959 = vec3(0.0);\n    highp vec3 _960 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _934 = 0.0;\n        highp vec3 _935 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _934 = 1.0;\n            _935 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _904 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _906 = max(dot(_904, _904), 6.103515625e-05);\n            highp vec3 _908 = _904 * inversesqrt(_906);\n            highp float _928 = clamp((dot(u_spotDirFA[2].xyz, _908) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _934 = ((1.0 / _906) * clamp((_906 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_928 * _928);\n            _935 = _908;\n        }\n        highp vec3 _943 = u_lightColorFA[2].xyz * _934;\n        _959 = _881 + (_943 * max(0.0, dot(_935, _621)));\n        _960 = _882 + (_943 * pow(max(0.0, dot(normalize(_503 + _935), _621)), _Shininess * 128.0));\n    }\n    else\n    {\n        _959 = _881;\n        _960 = _882;\n    }\n    highp vec3 _1037 = vec3(0.0);\n    highp vec3 _1038 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1012 = 0.0;\n        highp vec3 _1013 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1012 = 1.0;\n            _1013 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _982 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _984 = max(dot(_982, _982), 6.103515625e-05);\n            highp vec3 _986 = _982 * inversesqrt(_984);\n            highp float _1006 = clamp((dot(u_spotDirFA[3].xyz, _986) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1012 = ((1.0 / _984) * clamp((_984 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1006 * _1006);\n            _1013 = _986;\n        }\n        highp vec3 _1021 = u_lightColorFA[3].xyz * _1012;\n        _1037 = _959 + (_1021 * max(0.0, dot(_1013, _621)));\n        _1038 = _960 + (_1021 * pow(max(0.0, dot(normalize(_503 + _1013), _621)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1037 = _959;\n        _1038 = _960;\n    }\n    gl_FragData[0] = vec4(_500.xyz * (_1037 + (_1038 * (_SpecColor.xyz * _492.w))), _500.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _488 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _496 = (_488 * _Color) * _AlbedoIntensity;\n    highp vec3 _499 = normalize(varying_ViewDir);\n    highp vec4 _508 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _601 = (_508.xy - vec2(0.5)) * 2.0;\n    highp vec3 _617 = vec3(_601, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_601, _601)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _799 = vec3(0.0);\n    highp vec3 _800 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _793 = vec3(0.0);\n        highp float _794 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _794 = 1.0;\n            _793 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _645 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _649 = max(dot(_645, _645), 6.103515625e-05);\n            highp vec3 _653 = _645 * inversesqrt(_649);\n            highp float _713 = clamp((dot(u_spotDirFA[0].xyz, _653) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _794 = ((1.0 / _649) * clamp((_649 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_713 * _713);\n            _793 = _653;\n        }\n        highp vec3 _551 = u_lightColorFA[0].xyz * _794;\n        _800 = _551 * max(0.0, dot(_793, _617));\n        _799 = _551 * pow(max(0.0, dot(normalize(_499 + _793), _617)), _Shininess * 128.0);\n    }\n    else\n    {\n        _800 = vec3(0.0);\n        _799 = vec3(0.0);\n    }\n    highp vec3 _877 = vec3(0.0);\n    highp vec3 _878 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _852 = 0.0;\n        highp vec3 _853 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _852 = 1.0;\n            _853 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _822 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _824 = max(dot(_822, _822), 6.103515625e-05);\n            highp vec3 _826 = _822 * inversesqrt(_824);\n            highp float _846 = clamp((dot(u_spotDirFA[1].xyz, _826) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _852 = ((1.0 / _824) * clamp((_824 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_846 * _846);\n            _853 = _826;\n        }\n        highp vec3 _861 = u_lightColorFA[1].xyz * _852;\n        _877 = _800 + (_861 * max(0.0, dot(_853, _617)));\n        _878 = _799 + (_861 * pow(max(0.0, dot(normalize(_499 + _853), _617)), _Shininess * 128.0));\n    }\n    else\n    {\n        _877 = _800;\n        _878 = _799;\n    }\n    highp vec3 _955 = vec3(0.0);\n    highp vec3 _956 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _930 = 0.0;\n        highp vec3 _931 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _930 = 1.0;\n            _931 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _900 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _902 = max(dot(_900, _900), 6.103515625e-05);\n            highp vec3 _904 = _900 * inversesqrt(_902);\n            highp float _924 = clamp((dot(u_spotDirFA[2].xyz, _904) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _930 = ((1.0 / _902) * clamp((_902 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_924 * _924);\n            _931 = _904;\n        }\n        highp vec3 _939 = u_lightColorFA[2].xyz * _930;\n        _955 = _877 + (_939 * max(0.0, dot(_931, _617)));\n        _956 = _878 + (_939 * pow(max(0.0, dot(normalize(_499 + _931), _617)), _Shininess * 128.0));\n    }\n    else\n    {\n        _955 = _877;\n        _956 = _878;\n    }\n    highp vec3 _1033 = vec3(0.0);\n    highp vec3 _1034 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1008 = 0.0;\n        highp vec3 _1009 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1008 = 1.0;\n            _1009 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _978 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _980 = max(dot(_978, _978), 6.103515625e-05);\n            highp vec3 _982 = _978 * inversesqrt(_980);\n            highp float _1002 = clamp((dot(u_spotDirFA[3].xyz, _982) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1008 = ((1.0 / _980) * clamp((_980 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1002 * _1002);\n            _1009 = _982;\n        }\n        highp vec3 _1017 = u_lightColorFA[3].xyz * _1008;\n        _1033 = _955 + (_1017 * max(0.0, dot(_1009, _617)));\n        _1034 = _956 + (_1017 * pow(max(0.0, dot(normalize(_499 + _1009), _617)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1033 = _955;\n        _1034 = _956;\n    }\n    gl_FragData[0] = vec4(_496.xyz * (_1033 + (_1034 * (_SpecColor.xyz * _488.w))), _496.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_skinnedAnimationMapInfo;\nuniform highp float u_skinnedAnimationInfo;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _580 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _588 = (_580 * _Color) * _AlbedoIntensity;\n    highp vec3 _591 = normalize(varying_ViewDir);\n    highp vec4 _600 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _700 = (_600.xy - vec2(0.5)) * 2.0;\n    highp vec3 _716 = vec3(_700, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_700, _700)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _973 = vec3(0.0);\n    highp vec3 _974 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _967 = vec3(0.0);\n        highp float _968 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _968 = 1.0;\n            _967 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _744 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _748 = max(dot(_744, _744), 6.103515625e-05);\n            highp vec3 _752 = _744 * inversesqrt(_748);\n            highp float _812 = clamp((dot(u_spotDirFA[0].xyz, _752) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _968 = ((1.0 / _748) * clamp((_748 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_812 * _812);\n            _967 = _752;\n        }\n        highp vec3 _643 = u_lightColorFA[0].xyz * _968;\n        _974 = _643 * max(0.0, dot(_967, _716));\n        _973 = _643 * pow(max(0.0, dot(normalize(_591 + _967), _716)), _Shininess * 128.0);\n    }\n    else\n    {\n        _974 = vec3(0.0);\n        _973 = vec3(0.0);\n    }\n    highp vec3 _1051 = vec3(0.0);\n    highp vec3 _1052 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _1026 = 0.0;\n        highp vec3 _1027 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _1026 = 1.0;\n            _1027 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _996 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _998 = max(dot(_996, _996), 6.103515625e-05);\n            highp vec3 _1000 = _996 * inversesqrt(_998);\n            highp float _1020 = clamp((dot(u_spotDirFA[1].xyz, _1000) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _1026 = ((1.0 / _998) * clamp((_998 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_1020 * _1020);\n            _1027 = _1000;\n        }\n        highp vec3 _1035 = u_lightColorFA[1].xyz * _1026;\n        _1051 = _974 + (_1035 * max(0.0, dot(_1027, _716)));\n        _1052 = _973 + (_1035 * pow(max(0.0, dot(normalize(_591 + _1027), _716)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1051 = _974;\n        _1052 = _973;\n    }\n    highp vec3 _1129 = vec3(0.0);\n    highp vec3 _1130 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _1104 = 0.0;\n        highp vec3 _1105 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _1104 = 1.0;\n            _1105 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _1074 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _1076 = max(dot(_1074, _1074), 6.103515625e-05);\n            highp vec3 _1078 = _1074 * inversesqrt(_1076);\n            highp float _1098 = clamp((dot(u_spotDirFA[2].xyz, _1078) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _1104 = ((1.0 / _1076) * clamp((_1076 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_1098 * _1098);\n            _1105 = _1078;\n        }\n        highp vec3 _1113 = u_lightColorFA[2].xyz * _1104;\n        _1129 = _1051 + (_1113 * max(0.0, dot(_1105, _716)));\n        _1130 = _1052 + (_1113 * pow(max(0.0, dot(normalize(_591 + _1105), _716)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1129 = _1051;\n        _1130 = _1052;\n    }\n    highp vec3 _1207 = vec3(0.0);\n    highp vec3 _1208 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1182 = 0.0;\n        highp vec3 _1183 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1182 = 1.0;\n            _1183 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1152 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1154 = max(dot(_1152, _1152), 6.103515625e-05);\n            highp vec3 _1156 = _1152 * inversesqrt(_1154);\n            highp float _1176 = clamp((dot(u_spotDirFA[3].xyz, _1156) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1182 = ((1.0 / _1154) * clamp((_1154 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1176 * _1176);\n            _1183 = _1156;\n        }\n        highp vec3 _1191 = u_lightColorFA[3].xyz * _1182;\n        _1207 = _1129 + (_1191 * max(0.0, dot(_1183, _716)));\n        _1208 = _1130 + (_1191 * pow(max(0.0, dot(normalize(_591 + _1183), _716)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1207 = _1129;\n        _1208 = _1130;\n    }\n    highp vec4 _683 = vec4(_588.xyz * (_1207 + (_1208 * (_SpecColor.xyz * _580.w))), _588.w);\n    highp float _850 = length(varying_positionCamera_Fog);\n    highp float _961 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _961 = (u_fogInfos.z - _850) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _962 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _962 = 1.0 / pow(2.7182800769805908203125, _850 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _963 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _963 = 1.0 / pow(2.7182800769805908203125, ((_850 * _850) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _963 = 1.0;\n            }\n            _962 = _963;\n        }\n        _961 = _962;\n    }\n    highp float _896 = clamp(_961, 0.0, 1.0);\n    highp vec3 _905 = (_683.xyz * _896) + (u_fogColor * (1.0 - _896));\n    gl_FragData[0] = vec4(_905.x, _905.y, _905.z, _683.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _577 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _585 = (_577 * _Color) * _AlbedoIntensity;\n    highp vec3 _588 = normalize(varying_ViewDir);\n    highp vec4 _597 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _697 = (_597.xy - vec2(0.5)) * 2.0;\n    highp vec3 _713 = vec3(_697, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_697, _697)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _970 = vec3(0.0);\n    highp vec3 _971 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _964 = vec3(0.0);\n        highp float _965 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _965 = 1.0;\n            _964 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _741 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _745 = max(dot(_741, _741), 6.103515625e-05);\n            highp vec3 _749 = _741 * inversesqrt(_745);\n            highp float _809 = clamp((dot(u_spotDirFA[0].xyz, _749) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _965 = ((1.0 / _745) * clamp((_745 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_809 * _809);\n            _964 = _749;\n        }\n        highp vec3 _640 = u_lightColorFA[0].xyz * _965;\n        _971 = _640 * max(0.0, dot(_964, _713));\n        _970 = _640 * pow(max(0.0, dot(normalize(_588 + _964), _713)), _Shininess * 128.0);\n    }\n    else\n    {\n        _971 = vec3(0.0);\n        _970 = vec3(0.0);\n    }\n    highp vec3 _1048 = vec3(0.0);\n    highp vec3 _1049 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _1023 = 0.0;\n        highp vec3 _1024 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _1023 = 1.0;\n            _1024 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _993 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _995 = max(dot(_993, _993), 6.103515625e-05);\n            highp vec3 _997 = _993 * inversesqrt(_995);\n            highp float _1017 = clamp((dot(u_spotDirFA[1].xyz, _997) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _1023 = ((1.0 / _995) * clamp((_995 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_1017 * _1017);\n            _1024 = _997;\n        }\n        highp vec3 _1032 = u_lightColorFA[1].xyz * _1023;\n        _1048 = _971 + (_1032 * max(0.0, dot(_1024, _713)));\n        _1049 = _970 + (_1032 * pow(max(0.0, dot(normalize(_588 + _1024), _713)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1048 = _971;\n        _1049 = _970;\n    }\n    highp vec3 _1126 = vec3(0.0);\n    highp vec3 _1127 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _1101 = 0.0;\n        highp vec3 _1102 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _1101 = 1.0;\n            _1102 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _1071 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _1073 = max(dot(_1071, _1071), 6.103515625e-05);\n            highp vec3 _1075 = _1071 * inversesqrt(_1073);\n            highp float _1095 = clamp((dot(u_spotDirFA[2].xyz, _1075) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _1101 = ((1.0 / _1073) * clamp((_1073 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_1095 * _1095);\n            _1102 = _1075;\n        }\n        highp vec3 _1110 = u_lightColorFA[2].xyz * _1101;\n        _1126 = _1048 + (_1110 * max(0.0, dot(_1102, _713)));\n        _1127 = _1049 + (_1110 * pow(max(0.0, dot(normalize(_588 + _1102), _713)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1126 = _1048;\n        _1127 = _1049;\n    }\n    highp vec3 _1204 = vec3(0.0);\n    highp vec3 _1205 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1179 = 0.0;\n        highp vec3 _1180 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1179 = 1.0;\n            _1180 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1149 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1151 = max(dot(_1149, _1149), 6.103515625e-05);\n            highp vec3 _1153 = _1149 * inversesqrt(_1151);\n            highp float _1173 = clamp((dot(u_spotDirFA[3].xyz, _1153) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1179 = ((1.0 / _1151) * clamp((_1151 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1173 * _1173);\n            _1180 = _1153;\n        }\n        highp vec3 _1188 = u_lightColorFA[3].xyz * _1179;\n        _1204 = _1126 + (_1188 * max(0.0, dot(_1180, _713)));\n        _1205 = _1127 + (_1188 * pow(max(0.0, dot(normalize(_588 + _1180), _713)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1204 = _1126;\n        _1205 = _1127;\n    }\n    highp vec4 _680 = vec4(_585.xyz * (_1204 + (_1205 * (_SpecColor.xyz * _577.w))), _585.w);\n    highp float _847 = length(varying_positionCamera_Fog);\n    highp float _958 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _958 = (u_fogInfos.z - _847) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _959 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _959 = 1.0 / pow(2.7182800769805908203125, _847 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _960 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _960 = 1.0 / pow(2.7182800769805908203125, ((_847 * _847) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _960 = 1.0;\n            }\n            _959 = _960;\n        }\n        _958 = _959;\n    }\n    highp float _893 = clamp(_958, 0.0, 1.0);\n    highp vec3 _902 = (_680.xyz * _893) + (u_fogColor * (1.0 - _893));\n    gl_FragData[0] = vec4(_902.x, _902.y, _902.z, _680.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_skinnedAnimationMapInfo;\nuniform highp float u_skinnedAnimationInfo;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _497 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _505 = (_497 * _Color) * _AlbedoIntensity;\n    highp vec3 _508 = normalize(varying_ViewDir);\n    highp vec4 _517 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _615 = (_517.xy - vec2(0.5)) * 2.0;\n    highp vec3 _631 = vec3(_615, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_615, _615)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _812 = vec3(0.0);\n    highp vec3 _813 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _806 = vec3(0.0);\n        highp float _807 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _807 = 1.0;\n            _806 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _659 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _663 = max(dot(_659, _659), 6.103515625e-05);\n            highp vec3 _667 = _659 * inversesqrt(_663);\n            highp float _727 = clamp((dot(u_spotDirFA[0].xyz, _667) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _807 = ((1.0 / _663) * clamp((_663 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_727 * _727);\n            _806 = _667;\n        }\n        highp vec3 _560 = u_lightColorFA[0].xyz * _807;\n        _813 = _560 * max(0.0, dot(_806, _631));\n        _812 = _560 * pow(max(0.0, dot(normalize(_508 + _806), _631)), _Shininess * 128.0);\n    }\n    else\n    {\n        _813 = vec3(0.0);\n        _812 = vec3(0.0);\n    }\n    highp vec3 _890 = vec3(0.0);\n    highp vec3 _891 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _865 = 0.0;\n        highp vec3 _866 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _865 = 1.0;\n            _866 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _835 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _837 = max(dot(_835, _835), 6.103515625e-05);\n            highp vec3 _839 = _835 * inversesqrt(_837);\n            highp float _859 = clamp((dot(u_spotDirFA[1].xyz, _839) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _865 = ((1.0 / _837) * clamp((_837 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_859 * _859);\n            _866 = _839;\n        }\n        highp vec3 _874 = u_lightColorFA[1].xyz * _865;\n        _890 = _813 + (_874 * max(0.0, dot(_866, _631)));\n        _891 = _812 + (_874 * pow(max(0.0, dot(normalize(_508 + _866), _631)), _Shininess * 128.0));\n    }\n    else\n    {\n        _890 = _813;\n        _891 = _812;\n    }\n    highp vec3 _968 = vec3(0.0);\n    highp vec3 _969 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _943 = 0.0;\n        highp vec3 _944 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _943 = 1.0;\n            _944 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _913 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _915 = max(dot(_913, _913), 6.103515625e-05);\n            highp vec3 _917 = _913 * inversesqrt(_915);\n            highp float _937 = clamp((dot(u_spotDirFA[2].xyz, _917) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _943 = ((1.0 / _915) * clamp((_915 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_937 * _937);\n            _944 = _917;\n        }\n        highp vec3 _952 = u_lightColorFA[2].xyz * _943;\n        _968 = _890 + (_952 * max(0.0, dot(_944, _631)));\n        _969 = _891 + (_952 * pow(max(0.0, dot(normalize(_508 + _944), _631)), _Shininess * 128.0));\n    }\n    else\n    {\n        _968 = _890;\n        _969 = _891;\n    }\n    highp vec3 _1046 = vec3(0.0);\n    highp vec3 _1047 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1021 = 0.0;\n        highp vec3 _1022 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1021 = 1.0;\n            _1022 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _991 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _993 = max(dot(_991, _991), 6.103515625e-05);\n            highp vec3 _995 = _991 * inversesqrt(_993);\n            highp float _1015 = clamp((dot(u_spotDirFA[3].xyz, _995) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1021 = ((1.0 / _993) * clamp((_993 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1015 * _1015);\n            _1022 = _995;\n        }\n        highp vec3 _1030 = u_lightColorFA[3].xyz * _1021;\n        _1046 = _968 + (_1030 * max(0.0, dot(_1022, _631)));\n        _1047 = _969 + (_1030 * pow(max(0.0, dot(normalize(_508 + _1022), _631)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1046 = _968;\n        _1047 = _969;\n    }\n    gl_FragData[0] = vec4(_505.xyz * (_1046 + (_1047 * (texture2D(_SpecGlossMap, varying_TexCoord).xyz * _SpecColor.xyz))), _505.w);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp mat4 u_world;\nuniform highp vec4 u_lightMapScaleOffset;\nuniform highp vec4 u_skinnedAnimationMapInfo;\nuniform highp float u_skinnedAnimationInfo;\nuniform highp float u_lightCountFA;\nuniform highp vec4 u_lightPosFA[4];\nuniform highp vec4 u_lightColorFA[4];\nuniform highp vec4 u_lightAttenFA[4];\nuniform highp vec4 u_spotDirFA[4];\n\n\nuniform highp vec4 _Color;\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _MainTex_ST;\nuniform highp float _AlbedoIntensity;\nuniform highp float _Shininess;\nuniform highp float _Cutoff;\n\n\nuniform highp sampler2D _MainTex;\nuniform highp sampler2D _BumpMap;\nuniform highp sampler2D _SpecGlossMap;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_normalWS;\nvarying highp vec4 varying_positionWS;\nvarying highp vec3 varying_positionCamera_Fog;\nvarying highp vec3 varying_tangentWS;\nvarying highp vec3 varying_bitangentWS;\n\nvoid main()\n{\n    highp vec4 _585 = texture2D(_MainTex, varying_TexCoord);\n    highp vec4 _593 = (_585 * _Color) * _AlbedoIntensity;\n    highp vec3 _596 = normalize(varying_ViewDir);\n    highp vec4 _605 = texture2D(_BumpMap, varying_TexCoord);\n    highp vec2 _710 = (_605.xy - vec2(0.5)) * 2.0;\n    highp vec3 _726 = vec3(_710, sqrt(max(0.001000000047497451305389404296875, 1.0 - dot(_710, _710)))) * mat3(varying_tangentWS, varying_bitangentWS, varying_normalWS);\n    highp vec3 _982 = vec3(0.0);\n    highp vec3 _983 = vec3(0.0);\n    if (0.0 < u_lightCountFA)\n    {\n        highp vec3 _976 = vec3(0.0);\n        highp float _977 = 0.0;\n        if (u_lightPosFA[0].w > 0.100000001490116119384765625)\n        {\n            _977 = 1.0;\n            _976 = u_lightPosFA[0].xyz;\n        }\n        else\n        {\n            highp vec3 _754 = u_lightPosFA[0].xyz - varying_positionWS.xyz;\n            highp float _758 = max(dot(_754, _754), 6.103515625e-05);\n            highp vec3 _762 = _754 * inversesqrt(_758);\n            highp float _822 = clamp((dot(u_spotDirFA[0].xyz, _762) * u_lightAttenFA[0].z) + u_lightAttenFA[0].w, 0.0, 1.0);\n            _977 = ((1.0 / _758) * clamp((_758 * u_lightAttenFA[0].x) + u_lightAttenFA[0].y, 0.0, 1.0)) * (_822 * _822);\n            _976 = _762;\n        }\n        highp vec3 _648 = u_lightColorFA[0].xyz * _977;\n        _983 = _648 * max(0.0, dot(_976, _726));\n        _982 = _648 * pow(max(0.0, dot(normalize(_596 + _976), _726)), _Shininess * 128.0);\n    }\n    else\n    {\n        _983 = vec3(0.0);\n        _982 = vec3(0.0);\n    }\n    highp vec3 _1060 = vec3(0.0);\n    highp vec3 _1061 = vec3(0.0);\n    if (1.0 < u_lightCountFA)\n    {\n        highp float _1035 = 0.0;\n        highp vec3 _1036 = vec3(0.0);\n        if (u_lightPosFA[1].w > 0.100000001490116119384765625)\n        {\n            _1035 = 1.0;\n            _1036 = u_lightPosFA[1].xyz;\n        }\n        else\n        {\n            highp vec3 _1005 = u_lightPosFA[1].xyz - varying_positionWS.xyz;\n            highp float _1007 = max(dot(_1005, _1005), 6.103515625e-05);\n            highp vec3 _1009 = _1005 * inversesqrt(_1007);\n            highp float _1029 = clamp((dot(u_spotDirFA[1].xyz, _1009) * u_lightAttenFA[1].z) + u_lightAttenFA[1].w, 0.0, 1.0);\n            _1035 = ((1.0 / _1007) * clamp((_1007 * u_lightAttenFA[1].x) + u_lightAttenFA[1].y, 0.0, 1.0)) * (_1029 * _1029);\n            _1036 = _1009;\n        }\n        highp vec3 _1044 = u_lightColorFA[1].xyz * _1035;\n        _1060 = _983 + (_1044 * max(0.0, dot(_1036, _726)));\n        _1061 = _982 + (_1044 * pow(max(0.0, dot(normalize(_596 + _1036), _726)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1060 = _983;\n        _1061 = _982;\n    }\n    highp vec3 _1138 = vec3(0.0);\n    highp vec3 _1139 = vec3(0.0);\n    if (2.0 < u_lightCountFA)\n    {\n        highp float _1113 = 0.0;\n        highp vec3 _1114 = vec3(0.0);\n        if (u_lightPosFA[2].w > 0.100000001490116119384765625)\n        {\n            _1113 = 1.0;\n            _1114 = u_lightPosFA[2].xyz;\n        }\n        else\n        {\n            highp vec3 _1083 = u_lightPosFA[2].xyz - varying_positionWS.xyz;\n            highp float _1085 = max(dot(_1083, _1083), 6.103515625e-05);\n            highp vec3 _1087 = _1083 * inversesqrt(_1085);\n            highp float _1107 = clamp((dot(u_spotDirFA[2].xyz, _1087) * u_lightAttenFA[2].z) + u_lightAttenFA[2].w, 0.0, 1.0);\n            _1113 = ((1.0 / _1085) * clamp((_1085 * u_lightAttenFA[2].x) + u_lightAttenFA[2].y, 0.0, 1.0)) * (_1107 * _1107);\n            _1114 = _1087;\n        }\n        highp vec3 _1122 = u_lightColorFA[2].xyz * _1113;\n        _1138 = _1060 + (_1122 * max(0.0, dot(_1114, _726)));\n        _1139 = _1061 + (_1122 * pow(max(0.0, dot(normalize(_596 + _1114), _726)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1138 = _1060;\n        _1139 = _1061;\n    }\n    highp vec3 _1216 = vec3(0.0);\n    highp vec3 _1217 = vec3(0.0);\n    if (3.0 < u_lightCountFA)\n    {\n        highp float _1191 = 0.0;\n        highp vec3 _1192 = vec3(0.0);\n        if (u_lightPosFA[3].w > 0.100000001490116119384765625)\n        {\n            _1191 = 1.0;\n            _1192 = u_lightPosFA[3].xyz;\n        }\n        else\n        {\n            highp vec3 _1161 = u_lightPosFA[3].xyz - varying_positionWS.xyz;\n            highp float _1163 = max(dot(_1161, _1161), 6.103515625e-05);\n            highp vec3 _1165 = _1161 * inversesqrt(_1163);\n            highp float _1185 = clamp((dot(u_spotDirFA[3].xyz, _1165) * u_lightAttenFA[3].z) + u_lightAttenFA[3].w, 0.0, 1.0);\n            _1191 = ((1.0 / _1163) * clamp((_1163 * u_lightAttenFA[3].x) + u_lightAttenFA[3].y, 0.0, 1.0)) * (_1185 * _1185);\n            _1192 = _1165;\n        }\n        highp vec3 _1200 = u_lightColorFA[3].xyz * _1191;\n        _1216 = _1138 + (_1200 * max(0.0, dot(_1192, _726)));\n        _1217 = _1139 + (_1200 * pow(max(0.0, dot(normalize(_596 + _1192), _726)), _Shininess * 128.0));\n    }\n    else\n    {\n        _1216 = _1138;\n        _1217 = _1139;\n    }\n    highp vec4 _674 = texture2D(_SpecGlossMap, varying_TexCoord);\n    highp vec4 _693 = vec4(_593.xyz * (_1216 + (_1217 * (_674.xyz * _SpecColor.xyz))), _593.w);\n    highp float _860 = length(varying_positionCamera_Fog);\n    highp float _970 = 0.0;\n    if (1.0 == u_fogInfos.x)\n    {\n        _970 = (u_fogInfos.z - _860) / (u_fogInfos.z - u_fogInfos.y);\n    }\n    else\n    {\n        highp float _971 = 0.0;\n        if (2.0 == u_fogInfos.x)\n        {\n            _971 = 1.0 / pow(2.7182800769805908203125, _860 * u_fogInfos.w);\n        }\n        else\n        {\n            highp float _972 = 0.0;\n            if (3.0 == u_fogInfos.x)\n            {\n                _972 = 1.0 / pow(2.7182800769805908203125, ((_860 * _860) * u_fogInfos.w) * u_fogInfos.w);\n            }\n            else\n            {\n                _972 = 1.0;\n            }\n            _971 = _972;\n        }\n        _970 = _971;\n    }\n    highp float _906 = clamp(_970, 0.0, 1.0);\n    highp vec3 _915 = (_693.xyz * _906) + (u_fogColor * (1.0 - _906));\n    gl_FragData[0] = vec4(_915.x, _915.y, _915.z, _693.w);\n}\n\n"],"uniformBlocks":[{"name":11,"blockName":12,"size":76,"member":[{"memberName":0,"type":4,"byteOffset":0},{"memberName":1,"type":4,"byteOffset":16},{"memberName":2,"type":4,"byteOffset":32},{"memberName":3,"type":4,"byteOffset":48},{"memberName":4,"type":1,"byteOffset":64},{"memberName":5,"type":1,"byteOffset":68},{"memberName":6,"type":1,"byteOffset":72}],"hash":"471C3A49947130E5A51F430B1539BD31"},{"name":11,"blockName":12,"size":60,"member":[{"memberName":0,"type":4,"byteOffset":0},{"memberName":1,"type":4,"byteOffset":16},{"memberName":3,"type":4,"byteOffset":32},{"memberName":4,"type":1,"byteOffset":48},{"memberName":5,"type":1,"byteOffset":52},{"memberName":6,"type":1,"byteOffset":56}],"hash":"63E760CBCE89222D4B465AB5DCDC8E53"}],"strings":["_Color","_SpecColor","_EmissionColor","_MainTex_ST","_AlbedoIntensity","_Shininess","_Cutoff","_MainTex","_BumpMap","_EmissionMap","_SpecGlossMap","type_Material","Material"]}