{"version":2,"name":"System::Effect::FastBloom","properties":[{"key":0,"type":0,"default":[1]},{"key":1,"type":0,"default":[1]},{"key":2,"type":0,"default":[1]},{"key":3,"type":0,"default":[0.5]},{"key":4,"type":0,"default":[20]},{"key":5,"type":0,"default":[20]},{"key":6,"type":0,"default":[1]}],"images":[{"key":7,"type":0,"default":"white"},{"key":8,"type":0,"default":"black"},{"key":9,"type":0,"default":"black"},{"key":10,"type":0,"default":"black"}],"defaultRenderQueue":2000,"passes":[{"renderStates":{"blendOn":false,"cullOn":false,"depthTestOn":false},"macros":{"__USE_MESH_COLOR":0},"lightMode":"Prefilter","useMaterialRenderStates":false,"variants":{"0":0,"1":0}},{"renderStates":{"blendOn":false,"cullOn":false,"depthTestOn":false},"macros":{"__USE_MESH_COLOR":0},"lightMode":"Horizontal","useMaterialRenderStates":false,"variants":{"0":1,"1":1}},{"renderStates":{"blendOn":false,"cullOn":false,"depthTestOn":false},"macros":{"__USE_MESH_COLOR":0},"lightMode":"Vertical","useMaterialRenderStates":false,"variants":{"0":2,"1":2}},{"renderStates":{"blendOn":false,"cullOn":false,"depthTestOn":false},"macros":{"__USE_MESH_COLOR":0},"lightMode":"Resolve","useMaterialRenderStates":false,"variants":{"0":3,"1":3}}],"variants":[{"shaders":[0,1],"uniformBlock":[]},{"shaders":[0,2],"uniformBlock":[]},{"shaders":[0,3],"uniformBlock":[]},{"shaders":[0,4],"uniformBlock":[]}],"shaders":["#version 100\n\nattribute vec2 a_position;\nvarying vec2 varying_TexCoord;\n\nvoid main()\n{\n    gl_Position = vec4(a_position, 0.0, 1.0);\n    varying_TexCoord = (a_position * 0.5) + vec2(0.5);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp float u_threshold;\nuniform highp float u_softThreshold;\n\n\nuniform highp sampler2D sourceTex;\n\nvarying highp vec2 varying_TexCoord;\n\nvoid main()\n{\n    highp vec4 _171 = texture2D(sourceTex, varying_TexCoord);\n    highp float _180 = max(_171.x, max(_171.y, _171.z));\n    highp float _185 = u_threshold * u_softThreshold;\n    highp float _189 = _180 - u_threshold;\n    highp float _195 = clamp(_189 + _185, 0.0, 2.0 * _185);\n    gl_FragData[0] = vec4(_171.xyz * (max((_195 * _195) / ((4.0 * _185) + 9.9999997473787516355514526367188e-06), _189) / max(_180, 9.9999997473787516355514526367188e-06)), 1.0);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp float u_width;\nuniform highp float u_height;\nuniform highp float u_nearClipPlane;\nuniform highp float u_farClipPlane;\n\n\nuniform highp float u_radius;\nuniform highp float u_sampleCount;\nuniform highp float u_intensity;\n\n\nuniform highp sampler2D filteredTex;\n\nvarying highp vec2 varying_TexCoord;\n\nvoid main()\n{\n    highp float _290 = u_radius * 0.5;\n    highp float _240 = (2.0 * u_radius) / u_sampleCount;\n    highp vec3 _331 = vec3(0.0);\n    _331 = vec3(0.0);\n    highp float _254 = 0.0;\n    for (highp float _330 = 0.0; _330 < u_sampleCount; _254 = (-u_radius) + (_240 * _330), _331 += (texture2D(filteredTex, vec2(varying_TexCoord.x + (_254 / u_width), varying_TexCoord.y)).xyz * exp((((-0.5) * _254) * _254) / (_290 * _290))), _330 += 1.0)\n    {\n    }\n    gl_FragData[0] = vec4((_331 * u_intensity) / vec3(u_sampleCount), 1.0);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp float u_width;\nuniform highp float u_height;\nuniform highp float u_nearClipPlane;\nuniform highp float u_farClipPlane;\n\n\nuniform highp float u_radius;\nuniform highp float u_sampleCount;\nuniform highp float u_intensity;\n\n\nuniform highp sampler2D filteredTex;\n\nvarying highp vec2 varying_TexCoord;\n\nvoid main()\n{\n    highp float _290 = u_radius * 0.5;\n    highp float _240 = (2.0 * u_radius) / u_sampleCount;\n    highp vec3 _331 = vec3(0.0);\n    _331 = vec3(0.0);\n    highp float _254 = 0.0;\n    for (highp float _330 = 0.0; _330 < u_sampleCount; _254 = (-u_radius) + (_240 * _330), _331 += (texture2D(filteredTex, vec2(varying_TexCoord.x, varying_TexCoord.y + (_254 / u_height))).xyz * exp((((-0.5) * _254) * _254) / (_290 * _290))), _330 += 1.0)\n    {\n    }\n    gl_FragData[0] = vec4((_331 * u_intensity) / vec3(u_sampleCount), 1.0);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp float u_width;\nuniform highp float u_height;\nuniform highp float u_nearClipPlane;\nuniform highp float u_farClipPlane;\n\n\nuniform highp float u_radius;\nuniform highp float u_sampleCount;\nuniform highp float u_intensity;\n\n\nuniform highp sampler2D sourceTex;\nuniform highp sampler2D verticalBlur;\nuniform highp sampler2D horizontalBlur;\n\nvarying highp vec2 varying_TexCoord;\n\nvoid main()\n{\n    highp vec4 _265 = texture2D(sourceTex, varying_TexCoord);\n    highp float _335 = u_radius * 0.5;\n    highp float _275 = (2.0 * u_radius) / u_sampleCount;\n    highp vec3 _396 = vec3(0.0);\n    _396 = vec3(0.0);\n    highp float _289 = 0.0;\n    for (highp float _395 = 0.0; _395 < u_sampleCount; _289 = (-u_radius) + (_275 * _395), _396 += ((texture2D(verticalBlur, vec2(varying_TexCoord.x + (_289 / u_width), varying_TexCoord.y)).xyz + texture2D(horizontalBlur, vec2(varying_TexCoord.x, varying_TexCoord.y + (_289 / u_height))).xyz) * exp((((-0.5) * _289) * _289) / (_335 * _335))), _395 += 1.0)\n    {\n    }\n    gl_FragData[0] = vec4((_396 / vec3(u_sampleCount)) + _265.xyz, 1.0);\n}\n\n"],"uniformBlocks":[],"strings":["u_width","u_height","u_threshold","u_softThreshold","u_radius","u_sampleCount","u_intensity","sourceTex","filteredTex","horizontalBlur","verticalBlur"]}