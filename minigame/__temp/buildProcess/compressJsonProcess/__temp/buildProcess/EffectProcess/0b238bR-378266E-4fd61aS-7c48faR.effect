{"version":2,"name":"System::Effect::UI3D","properties":[],"images":[{"key":0,"type":0,"default":"white"}],"defaultRenderQueue":10000,"passes":[{"renderStates":{"depthTestComp":1,"blendOn":true,"blendSrc":4,"blendDst":5,"cullOn":false,"depthWrite":false},"macros":{"__USE_MESH_COLOR":0},"lightMode":"ForwardBase","useMaterialRenderStates":true,"variants":{"0":0,"1":0}}],"variants":[{"shaders":[0,1],"uniformBlock":[]}],"shaders":["#version 100\n\nuniform float u_renderMode;\nuniform float u_proportionalScale;\n\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec2 varying_TexCoord;\nvarying vec4 varying_Color;\n\nvoid main()\n{\n    float _452 = a_position.x * u_proportionalScale;\n    float _457 = a_position.y * u_proportionalScale;\n    float _462 = a_position.z * u_proportionalScale;\n    vec4 _796 = vec4(0.0);\n    if (u_renderMode == 1.0)\n    {\n        mat4 _775 = mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0));\n        _775[0].x = length(vec3(u_world[0].xyz));\n        mat4 _778 = _775;\n        _778[1].y = length(vec3(u_world[1].xyz));\n        mat4 _781 = _778;\n        _781[2].z = length(vec3(u_world[2].xyz));\n        mat4 _783 = _781;\n        _783[3].w = 1.0;\n        vec3 _502 = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - (vec4(0.0, 0.0, 0.0, 1.0) * u_world).xyz);\n        vec3 _506 = normalize(cross(vec3(0.0, 1.0, 0.0), _502));\n        mat4 _785 = mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0));\n        _785[0] = vec4(_506, 0.0);\n        mat4 _787 = _785;\n        _787[1] = vec4(normalize(cross(_502, _506)), 0.0);\n        mat4 _789 = _787;\n        _789[2] = vec4(_502, 0.0);\n        mat4 _795 = _789;\n        _795[3] = vec4(u_world[3].x, u_world[3].y, u_world[3].z, u_world[3].w);\n        _796 = u_projection * (u_view * ((u_world * vec4(0.0, 0.0, 0.0, 1.0)) + (_795 * (_783 * vec4(_452, _457, _462, 1.0)))));\n    }\n    else\n    {\n        _796 = u_projection * (u_view * (u_world * vec4(_452, _457, _462, 1.0)));\n    }\n    gl_Position = _796;\n    varying_TexCoord = a_texCoord;\n    varying_Color = a_color * vec4(0.0039215688593685626983642578125);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp sampler2D u_texture;\n\nvarying highp vec2 varying_TexCoord;\nvarying highp vec4 varying_Color;\n\nvoid main()\n{\n    gl_FragData[0] = texture2D(u_texture, varying_TexCoord) * varying_Color;\n}\n\n"],"uniformBlocks":[],"strings":["u_texture"]}