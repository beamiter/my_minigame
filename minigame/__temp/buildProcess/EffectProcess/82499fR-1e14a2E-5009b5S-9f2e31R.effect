{"version":2.0,"name":"System::Effect::Terrain4","properties":[{"key":0,"type":2,"default":[1,1,1]},{"key":1,"type":3,"default":[0.5,0.5,0.5,1.0]},{"key":2,"type":0,"default":[0.1]},{"key":3,"type":3,"default":[1,1,0,0]},{"key":4,"type":3,"default":[1,1,0,0]},{"key":5,"type":3,"default":[1,1,0,0]},{"key":6,"type":3,"default":[1,1,0,0]},{"key":7,"type":3,"default":[1,1,0,0]}],"images":[{"key":8,"type":0,"default":"white"},{"key":9,"type":0,"default":"white"},{"key":10,"type":0,"default":"white"},{"key":11,"type":0,"default":"white"},{"key":12,"type":0,"default":"white"}],"defaultRenderQueue":2000,"passes":[{"renderStates":{"blendOn":false,"cullOn":true,"cullFace":2},"macros":{"__USE_RECEIVE_SHADOW":0,"__USE_MESH_COLOR":1},"lightMode":"ForwardBase","useMaterialRenderStates":true,"variants":{"0":0,"1":1,"2":2,"3":3}}],"variants":[{"shaders":[0,1],"uniformBlock":[0]},{"shaders":[2,3],"uniformBlock":[0]},{"shaders":[4,1],"uniformBlock":[0]},{"shaders":[5,3],"uniformBlock":[0]}],"shaders":["#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _SpecColor;\nuniform vec4 _Control_ST;\nuniform vec4 _Splat0_ST;\nuniform vec4 _Splat1_ST;\nuniform vec4 _Splat2_ST;\nuniform vec4 _Splat3_ST;\nuniform vec3 _Color;\nuniform float _Shininess;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nvarying vec2 varying_UVControl;\nvarying vec2 varying_UVSplat0;\nvarying vec2 varying_UVSplat1;\nvarying vec2 varying_UVSplat2;\nvarying vec2 varying_UVSplat3;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\n\nvoid main()\n{\n    vec4 _560 = u_world * a_position;\n    vec2 _404 = vec2(a_texCoord.x, a_texCoord.y - 1.0);\n    gl_Position = u_projection * (u_view * _560);\n    varying_UVControl = (_404 * _Control_ST.xy) + vec2(_Control_ST.z, 1.0 - _Control_ST.w);\n    varying_UVSplat0 = (_404 * _Splat0_ST.xy) + vec2(_Splat0_ST.z, 1.0 - _Splat0_ST.w);\n    varying_UVSplat1 = (_404 * _Splat1_ST.xy) + vec2(_Splat1_ST.z, 1.0 - _Splat1_ST.w);\n    varying_UVSplat2 = (_404 * _Splat2_ST.xy) + vec2(_Splat2_ST.z, 1.0 - _Splat2_ST.w);\n    varying_UVSplat3 = (_404 * _Splat3_ST.xy) + vec2(_Splat3_ST.z, 1.0 - _Splat3_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _560.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _Control_ST;\nuniform highp vec4 _Splat0_ST;\nuniform highp vec4 _Splat1_ST;\nuniform highp vec4 _Splat2_ST;\nuniform highp vec4 _Splat3_ST;\nuniform highp vec3 _Color;\nuniform highp float _Shininess;\n\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp sampler2D _Control;\nuniform highp sampler2D _Splat0;\nuniform highp sampler2D _Splat1;\nuniform highp sampler2D _Splat2;\nuniform highp sampler2D _Splat3;\n\nvarying highp vec2 varying_UVControl;\nvarying highp vec2 varying_UVSplat0;\nvarying highp vec2 varying_UVSplat1;\nvarying highp vec2 varying_UVSplat2;\nvarying highp vec2 varying_UVSplat3;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\n\nvoid main()\n{\n    highp vec4 _322 = texture2D(_Control, varying_UVControl);\n    highp vec3 _376 = normalize(varying_LightDir);\n    highp vec3 _382 = normalize(varying_WorldNormal);\n    gl_FragData[0] = vec4((((((texture2D(_Splat0, varying_UVSplat0).xyz * _322.x) + (texture2D(_Splat1, varying_UVSplat1).xyz * _322.y)) + (texture2D(_Splat2, varying_UVSplat2).xyz * _322.z)) + (texture2D(_Splat3, varying_UVSplat3).xyz * _322.w)) * _Color) * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_376, _382))) * 1.0)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _376), _382)), _Shininess * 128.0)) * _SpecColor.xyz)), 1.0);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _SpecColor;\nuniform vec4 _Control_ST;\nuniform vec4 _Splat0_ST;\nuniform vec4 _Splat1_ST;\nuniform vec4 _Splat2_ST;\nuniform vec4 _Splat3_ST;\nuniform vec3 _Color;\nuniform float _Shininess;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nvarying vec2 varying_UVControl;\nvarying vec2 varying_UVSplat0;\nvarying vec2 varying_UVSplat1;\nvarying vec2 varying_UVSplat2;\nvarying vec2 varying_UVSplat3;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    vec4 _569 = u_world * a_position;\n    vec2 _410 = vec2(a_texCoord.x, a_texCoord.y - 1.0);\n    vec3 _508 = _569.xyz;\n    gl_Position = u_projection * (u_view * _569);\n    varying_UVControl = (_410 * _Control_ST.xy) + vec2(_Control_ST.z, 1.0 - _Control_ST.w);\n    varying_UVSplat0 = (_410 * _Splat0_ST.xy) + vec2(_Splat0_ST.z, 1.0 - _Splat0_ST.w);\n    varying_UVSplat1 = (_410 * _Splat1_ST.xy) + vec2(_Splat1_ST.z, 1.0 - _Splat1_ST.w);\n    varying_UVSplat2 = (_410 * _Splat2_ST.xy) + vec2(_Splat2_ST.z, 1.0 - _Splat2_ST.w);\n    varying_UVSplat3 = (_410 * _Splat3_ST.xy) + vec2(_Splat3_ST.z, 1.0 - _Splat3_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _508);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_ShadowPosition = _508;\n}\n\n","#version 100\nprecision mediump float;\nprecision highp int;\n\nuniform highp mat4 u_view;\nuniform highp mat4 u_viewInverse;\nuniform highp mat4 u_vp;\nuniform highp mat4 u_projection;\nuniform highp mat4 u_lightSpaceMatrix;\nuniform highp vec4 u_fogInfos;\nuniform highp vec3 u_fogColor;\nuniform highp float u_gameTime;\nuniform highp vec3 u_ambientLight;\nuniform highp vec3 u_lightDir;\nuniform highp vec3 u_lightColor;\nuniform highp vec3 u_shadowColor;\nuniform highp float u_shadowStrength;\nuniform highp vec4 u_csmFarBounds;\nuniform highp vec4 u_shadowTilingOffsets[4];\nuniform highp mat4 u_csmLightSpaceMatrices[4];\nuniform highp vec3 u_SH[9];\n\n\nuniform highp vec4 _SpecColor;\nuniform highp vec4 _Control_ST;\nuniform highp vec4 _Splat0_ST;\nuniform highp vec4 _Splat1_ST;\nuniform highp vec4 _Splat2_ST;\nuniform highp vec4 _Splat3_ST;\nuniform highp vec3 _Color;\nuniform highp float _Shininess;\n\n\nuniform highp sampler2D _Control;\nuniform highp sampler2D _Splat0;\nuniform highp sampler2D _Splat1;\nuniform highp sampler2D _Splat2;\nuniform highp sampler2D _Splat3;\nuniform highp sampler2D u_shadowMapTex;\n\nvarying highp vec2 varying_UVControl;\nvarying highp vec2 varying_UVSplat0;\nvarying highp vec2 varying_UVSplat1;\nvarying highp vec2 varying_UVSplat2;\nvarying highp vec2 varying_UVSplat3;\nvarying highp vec3 varying_LightDir;\nvarying highp vec3 varying_ViewDir;\nvarying highp vec3 varying_WorldNormal;\nvarying highp vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    highp vec4 _576 = texture2D(_Control, varying_UVControl);\n    highp vec4 _582 = texture2D(_Splat0, varying_UVSplat0);\n    highp vec4 _589 = texture2D(_Splat1, varying_UVSplat1);\n    highp vec4 _596 = texture2D(_Splat2, varying_UVSplat2);\n    highp vec4 _603 = texture2D(_Splat3, varying_UVSplat3);\n    highp vec3 _630 = normalize(varying_LightDir);\n    highp vec3 _636 = normalize(varying_WorldNormal);\n    highp vec4 _713 = vec4(varying_ShadowPosition, 1.0);\n    highp float _717 = -(u_view * _713).z;\n    bool _730 = true && (_717 < u_csmFarBounds.x);\n    highp float _997 = 0.0;\n    if (_730)\n    {\n        highp vec3 _745 = ((u_csmLightSpaceMatrices[0] * _713).xyz * 0.5) + vec3(0.5);\n        highp float _749 = _745.x;\n        highp float _753 = _745.y;\n        highp float _763 = (((_745.z + step(_749, 0.001000000047497451305389404296875)) + step(_753, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _749)) + step(0.999000012874603271484375, _753);\n        highp float _994 = 0.0;\n        for (int SPIRV_Cross_Dummy295 = 0; SPIRV_Cross_Dummy295 < 1; SPIRV_Cross_Dummy295++)\n        {\n            if (_763 > 1.0)\n            {\n                _994 = 1.0;\n                break;\n            }\n            highp float _814 = _763 - 0.001000000047497451305389404296875;\n            highp vec2 _820 = ((_745.xy * u_shadowTilingOffsets[0].xy) + u_shadowTilingOffsets[0].zw).xy;\n            highp vec2 _831 = fract(_820 * vec2(2048.0));\n            highp float _886 = _831.y;\n            _994 = mix(mix(float(_814 < dot(texture2D(u_shadowMapTex, _820), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_814 < dot(texture2D(u_shadowMapTex, _820 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _886), mix(float(_814 < dot(texture2D(u_shadowMapTex, _820 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_814 < dot(texture2D(u_shadowMapTex, _820 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _886), _831.x);\n            break;\n        }\n        _997 = _994;\n    }\n    else\n    {\n        _997 = 1.0;\n    }\n    bool _1324 = _730 ? true : false;\n    bool _1015 = (!_1324) && (_717 < u_csmFarBounds.y);\n    highp float _1106 = 0.0;\n    if (_1015)\n    {\n        highp vec3 _1026 = ((u_csmLightSpaceMatrices[1] * _713).xyz * 0.5) + vec3(0.5);\n        highp float _1028 = _1026.x;\n        highp float _1031 = _1026.y;\n        highp float _1039 = (((_1026.z + step(_1028, 0.001000000047497451305389404296875)) + step(_1031, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1028)) + step(0.999000012874603271484375, _1031);\n        highp float _1103 = 0.0;\n        for (int SPIRV_Cross_Dummy371 = 0; SPIRV_Cross_Dummy371 < 1; SPIRV_Cross_Dummy371++)\n        {\n            if (_1039 > 1.0)\n            {\n                _1103 = 1.0;\n                break;\n            }\n            highp float _1057 = _1039 - 0.001000000047497451305389404296875;\n            highp vec2 _1061 = ((_1026.xy * u_shadowTilingOffsets[1].xy) + u_shadowTilingOffsets[1].zw).xy;\n            highp vec2 _1068 = fract(_1061 * vec2(2048.0));\n            highp float _1096 = _1068.y;\n            _1103 = mix(mix(float(_1057 < dot(texture2D(u_shadowMapTex, _1061), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1057 < dot(texture2D(u_shadowMapTex, _1061 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1096), mix(float(_1057 < dot(texture2D(u_shadowMapTex, _1061 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1057 < dot(texture2D(u_shadowMapTex, _1061 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1096), _1068.x);\n            break;\n        }\n        _1106 = _1103;\n    }\n    else\n    {\n        _1106 = _997;\n    }\n    bool _1325 = _1015 ? true : _1324;\n    bool _1120 = (!_1325) && (_717 < u_csmFarBounds.z);\n    highp float _1211 = 0.0;\n    if (_1120)\n    {\n        highp vec3 _1131 = ((u_csmLightSpaceMatrices[2] * _713).xyz * 0.5) + vec3(0.5);\n        highp float _1133 = _1131.x;\n        highp float _1136 = _1131.y;\n        highp float _1144 = (((_1131.z + step(_1133, 0.001000000047497451305389404296875)) + step(_1136, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1133)) + step(0.999000012874603271484375, _1136);\n        highp float _1208 = 0.0;\n        for (int SPIRV_Cross_Dummy447 = 0; SPIRV_Cross_Dummy447 < 1; SPIRV_Cross_Dummy447++)\n        {\n            if (_1144 > 1.0)\n            {\n                _1208 = 1.0;\n                break;\n            }\n            highp float _1162 = _1144 - 0.001000000047497451305389404296875;\n            highp vec2 _1166 = ((_1131.xy * u_shadowTilingOffsets[2].xy) + u_shadowTilingOffsets[2].zw).xy;\n            highp vec2 _1173 = fract(_1166 * vec2(2048.0));\n            highp float _1201 = _1173.y;\n            _1208 = mix(mix(float(_1162 < dot(texture2D(u_shadowMapTex, _1166), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1162 < dot(texture2D(u_shadowMapTex, _1166 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1201), mix(float(_1162 < dot(texture2D(u_shadowMapTex, _1166 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1162 < dot(texture2D(u_shadowMapTex, _1166 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1201), _1173.x);\n            break;\n        }\n        _1211 = _1208;\n    }\n    else\n    {\n        _1211 = _1106;\n    }\n    highp float _1316 = 0.0;\n    if ((!(_1120 ? true : _1325)) && (_717 < u_csmFarBounds.w))\n    {\n        highp vec3 _1236 = ((u_csmLightSpaceMatrices[3] * _713).xyz * 0.5) + vec3(0.5);\n        highp float _1238 = _1236.x;\n        highp float _1241 = _1236.y;\n        highp float _1249 = (((_1236.z + step(_1238, 0.001000000047497451305389404296875)) + step(_1241, 0.001000000047497451305389404296875)) + step(0.999000012874603271484375, _1238)) + step(0.999000012874603271484375, _1241);\n        highp float _1313 = 0.0;\n        for (int SPIRV_Cross_Dummy517 = 0; SPIRV_Cross_Dummy517 < 1; SPIRV_Cross_Dummy517++)\n        {\n            if (_1249 > 1.0)\n            {\n                _1313 = 1.0;\n                break;\n            }\n            highp float _1267 = _1249 - 0.001000000047497451305389404296875;\n            highp vec2 _1271 = ((_1236.xy * u_shadowTilingOffsets[3].xy) + u_shadowTilingOffsets[3].zw).xy;\n            highp vec2 _1278 = fract(_1271 * vec2(2048.0));\n            highp float _1306 = _1278.y;\n            _1313 = mix(mix(float(_1267 < dot(texture2D(u_shadowMapTex, _1271), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1267 < dot(texture2D(u_shadowMapTex, _1271 + vec2(0.0, 0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1306), mix(float(_1267 < dot(texture2D(u_shadowMapTex, _1271 + vec2(0.00048828125, 0.0)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), float(_1267 < dot(texture2D(u_shadowMapTex, _1271 + vec2(0.00048828125)), vec4(5.9604644775390625e-08, 1.52587890625e-05, 0.00390625, 1.0))), _1306), _1278.x);\n            break;\n        }\n        _1316 = _1313;\n    }\n    else\n    {\n        _1316 = _1211;\n    }\n    gl_FragData[0] = vec4((((((_582.xyz * _576.x) + (_589.xyz * _576.y)) + (_596.xyz * _576.z)) + (_603.xyz * _576.w)) * _Color) * ((u_ambientLight + ((u_lightColor * max(0.0, dot(_630, _636))) * _1316)) + ((u_lightColor * pow(max(0.0, dot(normalize(normalize(varying_ViewDir) + _630), _636)), _Shininess * 128.0)) * _SpecColor.xyz)), 1.0);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _SpecColor;\nuniform vec4 _Control_ST;\nuniform vec4 _Splat0_ST;\nuniform vec4 _Splat1_ST;\nuniform vec4 _Splat2_ST;\nuniform vec4 _Splat3_ST;\nuniform vec3 _Color;\nuniform float _Shininess;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nvarying vec2 varying_UVControl;\nvarying vec2 varying_UVSplat0;\nvarying vec2 varying_UVSplat1;\nvarying vec2 varying_UVSplat2;\nvarying vec2 varying_UVSplat3;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\n\nvoid main()\n{\n    vec4 _562 = u_world * a_position;\n    vec2 _406 = vec2(a_texCoord.x, a_texCoord.y - 1.0);\n    gl_Position = u_projection * (u_view * _562);\n    varying_UVControl = (_406 * _Control_ST.xy) + vec2(_Control_ST.z, 1.0 - _Control_ST.w);\n    varying_UVSplat0 = (_406 * _Splat0_ST.xy) + vec2(_Splat0_ST.z, 1.0 - _Splat0_ST.w);\n    varying_UVSplat1 = (_406 * _Splat1_ST.xy) + vec2(_Splat1_ST.z, 1.0 - _Splat1_ST.w);\n    varying_UVSplat2 = (_406 * _Splat2_ST.xy) + vec2(_Splat2_ST.z, 1.0 - _Splat2_ST.w);\n    varying_UVSplat3 = (_406 * _Splat3_ST.xy) + vec2(_Splat3_ST.z, 1.0 - _Splat3_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _562.xyz);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n}\n\n","#version 100\n\nuniform mat4 u_world;\nuniform vec4 u_lightMapScaleOffset;\nuniform float u_lightCountFA;\nuniform vec4 u_lightPosFA[4];\nuniform vec4 u_lightColorFA[4];\nuniform vec4 u_lightAttenFA[4];\nuniform vec4 u_spotDirFA[4];\n\n\nuniform mat4 u_view;\nuniform mat4 u_viewInverse;\nuniform mat4 u_vp;\nuniform mat4 u_projection;\nuniform mat4 u_lightSpaceMatrix;\nuniform vec4 u_fogInfos;\nuniform vec3 u_fogColor;\nuniform float u_gameTime;\nuniform vec3 u_ambientLight;\nuniform vec3 u_lightDir;\nuniform vec3 u_lightColor;\nuniform vec3 u_shadowColor;\nuniform float u_shadowStrength;\nuniform vec4 u_csmFarBounds;\nuniform vec4 u_shadowTilingOffsets[4];\nuniform mat4 u_csmLightSpaceMatrices[4];\nuniform vec3 u_SH[9];\n\n\nuniform vec4 _SpecColor;\nuniform vec4 _Control_ST;\nuniform vec4 _Splat0_ST;\nuniform vec4 _Splat1_ST;\nuniform vec4 _Splat2_ST;\nuniform vec4 _Splat3_ST;\nuniform vec3 _Color;\nuniform float _Shininess;\n\n\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nattribute vec3 a_normal;\nvarying vec2 varying_UVControl;\nvarying vec2 varying_UVSplat0;\nvarying vec2 varying_UVSplat1;\nvarying vec2 varying_UVSplat2;\nvarying vec2 varying_UVSplat3;\nvarying vec3 varying_LightDir;\nvarying vec3 varying_ViewDir;\nvarying vec3 varying_WorldNormal;\nvarying vec3 varying_ShadowPosition;\n\nvoid main()\n{\n    vec4 _571 = u_world * a_position;\n    vec2 _412 = vec2(a_texCoord.x, a_texCoord.y - 1.0);\n    vec3 _510 = _571.xyz;\n    gl_Position = u_projection * (u_view * _571);\n    varying_UVControl = (_412 * _Control_ST.xy) + vec2(_Control_ST.z, 1.0 - _Control_ST.w);\n    varying_UVSplat0 = (_412 * _Splat0_ST.xy) + vec2(_Splat0_ST.z, 1.0 - _Splat0_ST.w);\n    varying_UVSplat1 = (_412 * _Splat1_ST.xy) + vec2(_Splat1_ST.z, 1.0 - _Splat1_ST.w);\n    varying_UVSplat2 = (_412 * _Splat2_ST.xy) + vec2(_Splat2_ST.z, 1.0 - _Splat2_ST.w);\n    varying_UVSplat3 = (_412 * _Splat3_ST.xy) + vec2(_Splat3_ST.z, 1.0 - _Splat3_ST.w);\n    varying_LightDir = u_lightDir;\n    varying_ViewDir = normalize(vec3(u_viewInverse[3].x, u_viewInverse[3].y, u_viewInverse[3].z) - _510);\n    varying_WorldNormal = normalize(mat3(u_world[0].xyz, u_world[1].xyz, u_world[2].xyz) * a_normal);\n    varying_ShadowPosition = _510;\n}\n\n"],"uniformBlocks":[{"name":13,"blockName":14,"size":112,"member":[{"memberName":1,"type":4,"byteOffset":0},{"memberName":7,"type":4,"byteOffset":16},{"memberName":3,"type":4,"byteOffset":32},{"memberName":4,"type":4,"byteOffset":48},{"memberName":5,"type":4,"byteOffset":64},{"memberName":6,"type":4,"byteOffset":80},{"memberName":0,"type":3,"byteOffset":96},{"memberName":2,"type":1,"byteOffset":108}],"hash":"187E3AD3BC52EAA122509725427AEDA4"}],"strings":["_Color","_SpecColor","_Shininess","_Splat0_ST","_Splat1_ST","_Splat2_ST","_Splat3_ST","_Control_ST","_Splat0","_Splat1","_Splat2","_Splat3","_Control","type_Material","Material"]}